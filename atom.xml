<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pa1r0t</title>
  
  <subtitle>记录成长</subtitle>
  <link href="https://pa1r0t.github.io/atom.xml" rel="self"/>
  
  <link href="https://pa1r0t.github.io/"/>
  <updated>2024-09-25T15:25:59.864Z</updated>
  <id>https://pa1r0t.github.io/</id>
  
  <author>
    <name>Pa1r0t</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组会汇报1</title>
    <link href="https://pa1r0t.github.io/2024/09/10/%E7%BB%84%E4%BC%9A%E6%B1%87%E6%8A%A51/"/>
    <id>https://pa1r0t.github.io/2024/09/10/%E7%BB%84%E4%BC%9A%E6%B1%87%E6%8A%A51/</id>
    <published>2024-09-10T13:06:14.000Z</published>
    <updated>2024-09-25T15:25:59.864Z</updated>
    
    <content type="html"><![CDATA[<p>当前主流的模型聚焦与道路面的提取</p><p>TOPO是比较真实路网和计算路网上起点和终点的距离差异</p><p>SP是比较起点和终点之间最短路径的相似度</p><p>Junction主要是衡量路口间的误差程度</p><p>IoU是一种测量在特定数据集中检测相应物体准确度的一个标准</p><p><strong>IoU是两个区域重叠的部分除以两个区域的集合部分得出的结果，通过设定的阈值，与这个IoU计算结果比较。</strong></p><p><img src="/./../images/image-20240911094856240.png" alt="image-20240911094856240"></p><p>HSV色彩空间：</p><p>基于色调、饱和度、亮度</p><p>色调H指光颜色，区间为[0,180]</p><p>饱和度S指色彩深浅，区间为[0,255],当饱和度为0时，图像变为灰色图像</p><p>亮度V指光的明暗，当饱和度相同时，亮度值越大，图像越亮，当亮度为0时，图像为纯黑色</p><p>灰度图像RGB三通道值相同就能得到</p><p>alpha通道为图像透明度通道</p><p>边缘特征提取方法</p><p>一阶微分算子：</p><p>利用图像灰度函数的梯度来检测边缘（利用梯度来检测图像中灰度值变化剧烈的区域，这些算子通过计算像素点在水平和垂直方向上的梯度值来检测边缘，当梯度值超过某个阈值时，认为该点是边缘点）；</p><p>二阶微分算子：</p><p>相比于一阶导数，二阶导数可以提供更多的边缘信息，例如边缘的方向和边缘的强度</p><h2 id="Canny边缘检测："><a href="#Canny边缘检测：" class="headerlink" title="Canny边缘检测："></a>Canny边缘检测：</h2><ol><li>利用高斯滤波器，来平滑图像，去除噪音 </li><li>计算图像中每个像素点的梯度强度和方向     sobel算子，c塔为方向<img src="/./../images/image-20240916220303019.png" alt="image-20240916220303019"></li><li>应用非极大值抑制，以消除边缘检测带来的杂散响应（保留大梯度，显示明显边缘）<img src="/./../images/image-20240916221819444.png" alt="image-20240916221819444"></li><li>应用双阈值检测潜在和真实的边缘     （过滤边界，只保留最真实的一部分）<img src="/./../images/image-20240916223528892.png" alt="image-20240916223528892"></li><li>通过抑制孤立的弱边缘最终完成检测</li></ol><p>边界存在梯度，所以梯度自然和边界垂直</p><p>利用<strong>多阶段滤波</strong>和梯度幅值来检测边缘，并使用<strong>非极大值抑制和双阈值检测</strong>来确定最终的边缘点；</p><p>非极大值抑制(NMS技术):去除检测出来的冗余框，保留最优框(对比每个框的重叠面积)</p><p>双阈值检测:</p><p>图像阈值化：根据图像内像素点强度的分布规律设置一个阈值，根据像素点强度是否低于&#x2F;高于阈值进行处理。用于突出边缘或纹理</p><p><strong>Ostu方法</strong>遍历所有可能的阈值，从中找到合适的阈值</p><p>二值化处理得到物体轮廓</p><p>原始图像-&gt;灰度图像-&gt;二值化图像-&gt;反二值化      物体边缘信息变得鲜明</p><p>感兴趣区域ROI（掩膜）: 从图像中选择一个图像区域，以便进一步处理img[R1：R2，L1:L2]</p><p>np.ones((101,101,3))创建一个101×101的三通道图像</p><p>图像融合是在图像加法基础上增加了权重不同的系数和亮度调节：cv.addWeighted(img1，weight1,img2.weight2,light)</p><p>查找目标模板在图象中处在什么位置叫模板匹配</p><p>cv2.matchTemplate的输出是[W-w+1,H-h+1]的32位浮点型数组</p><img src="/./../images/image-20240913210334144.png" alt="image-20240913210334144" style="zoom:80%;"><p>单目标匹配只返回匹配度最高的结果</p><p>多目标匹配将原始图像中所有与模板相似的图像都找出来，使用相关匹配或相关系数匹配可以实现</p><p>在一张图片中同时查找多个模板叫多模板匹配？</p><p>平滑处理（图像模糊处理），去除图像内噪声、降低细节层次信息，工具 滤波器</p><ul><li><p>均值滤波器、：滤波核内像素平均值</p><p><img src="/./../images/image-20240913220256194.png" alt="image-20240913220256194"></p></li><li><p>中值滤波器    将滤波核的像素大小排序然后取中间值</p></li><li><p>高斯滤波器（使用最广泛）   分配像素权重，远离核心权重小，靠近核心权重大</p></li><li><p>双边滤波器    平滑处理中有效保护图像边界信息，自动判断滤波核处于平坦还是边缘</p><ul><li>平坦     高斯滤波</li><li>边缘     加大权重，尽可能让像素保持不变</li></ul></li></ul><h3 id="腐蚀与膨胀"><a href="#腐蚀与膨胀" class="headerlink" title="腐蚀与膨胀"></a>腐蚀与膨胀</h3><p>为了清除和强化图像中的细节</p><ul><li>图像开运算</li><li>图像闭运算</li><li>梯度运算</li><li>顶帽运算</li><li>黑帽运算</li></ul><h4 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h4><p><img src="/./../images/image-20240913224058422.png" alt="image-20240913224058422"></p><h4 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h4><p><img src="/./../images/image-20240914103242244.png" alt="image-20240914103242244"></p><h4 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h4><p>先腐蚀后膨胀，用来去除外部细节，用作数量统计</p><h4 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h4><p>先膨胀后腐蚀，用来去除内部细节</p><h4 id="形态学运算"><a href="#形态学运算" class="headerlink" title="形态学运算"></a>形态学运算</h4><p><img src="/./../images/image-20240914105236689.png" alt="image-20240914105236689"></p><p>梯度运算指的是图像梯度运算，直观就是像素的变化程度:膨胀图-腐蚀图&#x3D;图像轮廓图</p><p><img src="/./../images/image-20240914151221214.png" alt="image-20240914151221214"></p><h3 id="边缘轮廓"><a href="#边缘轮廓" class="headerlink" title="边缘轮廓"></a>边缘轮廓</h3><p>cv2.findContours</p><p><img src="/./../images/image-20240919121020380.png" alt="image-20240919121020380"></p><p>读数据-转成灰度图-阈值二值法-轮廓检测</p><p>Canny()方法虽然能检测出图像的边缘，但是这个边缘是不连续的，该算法根据像素的梯度变化寻找图像边缘，最终绘制精细二值边缘图像</p><p>调整双阈值来控制边缘检测的精细程度，当两个阈值都较小时，检测出较多细节；反之会忽略较多细节</p><h3 id="轮廓近似"><a href="#轮廓近似" class="headerlink" title="轮廓近似"></a>轮廓近似</h3><p><img src="/./../images/image-20240919223441192.png" alt="image-20240919223441192"></p><p>阈值设置越小，近似轮廓就越接近原始图像</p><h3 id="轮廓拟合"><a href="#轮廓拟合" class="headerlink" title="轮廓拟合"></a>轮廓拟合</h3><p><img src="/./../images/image-20240914214633713.png" alt="image-20240914214633713"></p><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><p>如果能找到图形最外层的端点，将这些端点连接起来，就可以围出一个包围图形的最小包围框，也叫凸包，也是最接近轮廓的多边形</p><p><img src="/./../images/image-20240914232239320.png" alt="image-20240914232239320"></p><h3 id="霍夫变换"><a href="#霍夫变换" class="headerlink" title="霍夫变换"></a>霍夫变换</h3><p>是一种特征检测，通过算法识别图像特征，从而判断图像形状</p><p><img src="/./../images/image-20240914233751774.png" alt="image-20240914233751774"></p><p><img src="/./../images/image-20240914234222723.png" alt="image-20240914234222723"></p><h2 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h2><p>读取摄像头，并显示视频，用opencv的VideoCapture类相关方法，此方法还支持视频文件</p><h3 id="图像梯度（用于检测图像边缘信息）"><a href="#图像梯度（用于检测图像边缘信息）" class="headerlink" title="图像梯度（用于检测图像边缘信息）"></a>图像梯度（用于检测图像边缘信息）</h3><h4 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h4><p><img src="/./../images/image-20240916113906035.png" alt="image-20240916113906035"></p><p>以上乘法是卷积运算，右减左，上减下；</p><pre><code class="python">cv2.addWeighted(sobelx,0.5,sobely,0.5,0)#水平梯度图融合垂直梯度图</code></pre><h4 id="Scharr算子"><a href="#Scharr算子" class="headerlink" title="Scharr算子"></a>Scharr算子</h4><p>比较sobel，该算子核中数值较大</p><p><img src="/./../images/image-20240916171215869.png" alt="image-20240916171215869"></p><h4 id="laplacian算子"><a href="#laplacian算子" class="headerlink" title="laplacian算子"></a>laplacian算子</h4><p>该算子对梯度求二阶导，对噪声更加敏感</p><p>不用分别求x和y</p><p><img src="/./../images/image-20240916171403768.png" alt="image-20240916171403768"></p><p>三种算子比较</p><p><img src="/./../images/image-20240916212246834.png" alt="image-20240916212246834"></p><h3 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h3><p><img src="/./../images/image-20240917132424644.png" alt="image-20240917132424644"></p><p>高斯金字塔（向下采样，图像缩小）</p><p><img src="/./../images/image-20240917132752803.png" alt="image-20240917132752803"></p><p>高斯金字塔（向上采样图像放大）</p><p><img src="/./../images/image-20240917134221999.png" alt="image-20240917134221999"></p><p>拉普拉斯金字塔<img src="/./../images/image-20240917144330632.png" alt="image-20240917144330632"></p><p>G表示输入img，G-(u_d)</p><p>1,2即为下采样操作</p><p>随后上采用和原始图像做减法，4操作</p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>统计每个像素值在图像中出现的次数</p><p><img src="/./../images/image-20240920220046502.png" alt="image-20240920220046502"></p><h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><p>直方图中某些位置的数量特别多</p><p><img src="/./../images/image-20240921092600049.png" alt="image-20240921092600049">、<img src="/./../images/image-20240921092653774.png" alt="image-20240921092653774"></p><ol><li>分灰度值数量进行统计</li><li>随之计算各值的概率和累计概率、</li><li>进行函数映射</li><li>映射后的像素个数取整</li></ol><h3 id="自适应直方图均值化"><a href="#自适应直方图均值化" class="headerlink" title="自适应直方图均值化"></a>自适应直方图均值化</h3><p><img src="/./../images/image-20240921094048651.png" alt="image-20240921094048651"></p><p>将图像切成若干块，进行分别均值化</p><h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>傅里叶变换作用：</p><ul><li>高频：变化剧烈的灰度分量，例如边界</li><li>低频：变化缓慢的灰度分量，例如一片大海</li></ul><p>滤波：</p><ul><li>低通滤波器：只保留低频，会使得图像模糊</li><li>高通滤波器：只保留高频，会使得图像细节增强</li></ul><p>人所看到的世界与时间相关，随时间发生变化，用时间作为参照物来观察动态世界-&gt;时域</p><p>类似乐谱-&gt;频域</p><p>任何周期函数都可以看作不同振幅，不同相位正弦波的叠加</p><p>不同频率的正弦波成为频率分量</p><p>频域中0频率被称为直流分量，级数叠加中，仅仅影响全部波形相对数轴整体向上或向下而不改变的形状</p><p><img src="/./../images/image-20240921111754056.png" alt="image-20240921111754056"></p><p>从某条曲线中去除一些特定的频率成分，称为滤波</p><p><img src="/./../images/image-20240921114241901.png" alt="image-20240921114241901"></p><p>级数：周期连续-&gt;非周期离散</p><p>变换：非周期连续（时域）-&gt;非周期连续（频域）</p><p>用cv2.dft()进行时域变换到频域</p><p>用cv2。idft()进行频域变换到时域</p><p>得到的结果中频率为0的部分会出现在左上角，通过shift变换来实现</p><p>cv2.dft()返回的结果是双通道的（实部、虚部），通常还需要转换成图像格式才能展示（0，255）</p><hr><h2 id="全卷积神经网络（FCN）"><a href="#全卷积神经网络（FCN）" class="headerlink" title="全卷积神经网络（FCN）"></a>全卷积神经网络（FCN）</h2><p>FCN中的主要特点是大量使用卷积、上采样和跳跃连接</p><p>传统的卷积神经网络通常在网络的最后一层使用全连接层,将原始的二维矩阵压缩  成一维矩阵,导致空间特征信息的丢失,因此,卷积层替换掉全连接层是行之有效的方法。影像的目标提取及输出应该是一个正常的特征映射,即在不考虑大小的情况下应当是二维的。</p><p><img src="/./../images/image-20240925212531267.png" alt="image-20240925212531267"></p><p>为了降低高分辨率遥感影像中细节信息的损失,采用了跳跃连接结构。对于神经网络,浅层网络有丰富的高分辨率特征映射,而深层网络有低分辨率的特征  映射,但是拥有更多抽象的语义信息。跳跃连接结构可以在各个层次之间,混合浅层的网络细节信息内容与深度的网络语义信息内容并通过特征拼接,改善提取  结果。全卷积神经网络,是在网络的最后阶段通过上采样可以恢复特征图到原始尺寸。</p><p>U-net模型是2015年由 Ronneberger 等人提出的一种改进的全卷积神经  网络,最初应用于医学图像的分割。U-net 网络结构如图 2.4 所示,包括五个分  辨率标度,由收缩路径和扩展路径组成。其中,跳跃连接结构可以恢复在收缩路 径中损失的高分辨率图像细节信息。</p><p><img src="/./../images/image-20240925213123448.png" alt="image-20240925213123448"></p><h3 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积</h3><p>在语义分割网络中通常会使用池化操作来减小特征图的大小尺寸,起到减少参数量和增大感受野的作用。但是会出现一些不可控的问题,在池化过程中会导  致特征信息丢失,而后进行的上采样操作并不能补足丢失的特征信息,特别是对于小型目标特征,进而导致特征提取效果不佳。在这些问题的基础上,空洞卷积  提出可以很好避免这些现象。<strong>空洞卷积是针对普通卷积感受野的限制性进行了改进,在普通卷积核中利用空洞率作为一个超参数,实现感受野的指数级扩展,却不会丢失分辨率和特征覆盖范围</strong>。</p><img src="/./../images/image-20240925214055930.png" alt="image-20240925214055930" style="zoom:50%;"><p>空洞卷积引入了新的参数膨胀率</p><p>空洞卷积对卷积核间隔采样，间隔大小通过膨胀率来控制</p><p>多孔空间金字塔</p><p><img src="/./../images/image-20240925221730975.png" alt="image-20240925221730975"></p><h3 id="RoadTracer"><a href="#RoadTracer" class="headerlink" title="RoadTracer"></a>RoadTracer</h3><p>文章：RoadTracer: Automatic Extraction of Road Networks from Aerial Images</p><p>顶会:CVPR2018</p><p>使用卷积神经网络(CNNs)来检测哪些像素属于一条道路（分割）</p><p>，然后利用复杂的后处理来将这些像素转化成路网，但这些分割方法具有较高的错误率，因为噪声CNN输出是难以纠正的</p><p>自动构建精确的道路网络图的新方法——道路跟踪器</p><p>即道路跟踪器使用基于CNN的决策函数引导的迭代搜索过程直接从CNN的输出导出道路网络图。每次迭代时都使用CNN决策网络判断是否将一部分路网加入到已经创建的路网中</p><p><img src="/./../images/image-20240911101952687.png" alt="image-20240911101952687"></p><p>RoadTracer的核心算法流程。首先给定一个路网的起点v0和包围盒（需要提取路网的区域），然后RoadTracer会维护一个顶点栈和一个路网。每次从栈顶取一个顶点，并在其基础上寻找下一个与其相连的顶点。如果找到下一个顶点(潜在)，则将其加入栈顶，同时更新路网；反之就将该顶点从栈顶弹出。当栈为空时，则表明该图像上的所有路网信息已经完全获取。</p><p>迭代搜索算法</p><p>下图展示了RoadTracer在路口的运行方式。首先从顶点1开始逐步往前到顶点6，此时栈也逐步增加；在路口先向上（默认设定）寻找新的顶点，并最终到顶点9；由于顶点9后再无新的顶点，因此栈又逐步减少，最后又回到顶点7；然后再向下寻找到顶点11；最终由于顶点11后无新的顶点，栈又回到了顶点7。最后如果没有新的顶点，栈会逐步被清空，从而完成路网的检测。</p><p><img src="/./../images/image-20240911103057736.png" alt="image-20240911103057736"></p><p>CNN<strong>决策网络</strong></p><p> CNN决策网络输入层是一个在顶点上d×d大小的窗口，该窗口总共有4层，前3层是图像信息，最后一层是矢量化后的路网信息；因此能够保证决策网络能够获取当前顶点所在区域足够的的信息。 CNN决策网络的输出层包括两部分，分别是行动信息和角度信息。行动信息包括停止和运动，角度信息是运行的方法。</p><p><img src="/./../images/image-20240925232535556.png" alt="image-20240925232535556"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当前主流的模型聚焦与道路面的提取&lt;/p&gt;
&lt;p&gt;TOPO是比较真实路网和计算路网上起点和终点的距离差异&lt;/p&gt;
&lt;p&gt;SP是比较起点和终点之间最短路径的相似度&lt;/p&gt;
&lt;p&gt;Junction主要是衡量路口间的误差程度&lt;/p&gt;
&lt;p&gt;IoU是一种测量在特定数据集中检测相应物体</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AI数学基础</title>
    <link href="https://pa1r0t.github.io/2024/07/01/AI%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <id>https://pa1r0t.github.io/2024/07/01/AI%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</id>
    <published>2024-07-01T14:48:01.000Z</published>
    <updated>2024-07-01T14:49:30.843Z</updated>
    
    
    
    
    <category term="AI" scheme="https://pa1r0t.github.io/categories/AI/"/>
    
    <category term="基础" scheme="https://pa1r0t.github.io/categories/AI/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>建议总结</title>
    <link href="https://pa1r0t.github.io/2024/06/30/%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://pa1r0t.github.io/2024/06/30/%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</id>
    <published>2024-06-30T13:22:17.000Z</published>
    <updated>2024-07-08T05:46:12.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐b站导师"><a href="#推荐b站导师" class="headerlink" title="推荐b站导师"></a>推荐b站导师</h1><p>怎么水论文？研究生哈哈</p><p>IEEE那几个顶刊如果作者不挂fellow或者senior。大概率秒拒，所以搞科研是团队作战。大佬牵头。手下出击。</p><ul><li>耿同学讲故事</li><li>来自星星的何教授</li><li>老龙王小青椒</li><li>宇凡聊学术</li><li>做科研的大师兄</li></ul><hr><h1 id="暑假规划"><a href="#暑假规划" class="headerlink" title="暑假规划"></a>暑假规划</h1><p>​对于申博，你要进⼊⼀个能给你引荐博⼠的导师名下，这个很容易判 断，看看往届师兄的去处，如果没有读博的师兄姐，就别相信你导师的饼，你 也可以相信⾃⼰可以是是那个开天辟地的⼈；其次，对于你科研能⼒的把握， 其实，这个很好判断，如果你能进⼀个可以引荐读博的课题组，然后你能在那 个组⾥正常的活下来，其实你的能⼒也没啥问题，如果你是勉强甚⾄很难受的待着的，我不太建议你读博，可以和导师表明⾃⼰的想法，因为读博的压⼒是 远远⼤于硕⼠的，在硕⼠期间就扛不住，读博⼤概率是去活受罪；最后，对于申博，你的学历是很重要的，不仅是你的硕⼠学历，还有你的本科学历，如果 你的学历不好，就需要通过级别很⾼的论⽂来抵消，当然，如果你是双⾮的， 就不仅仅要论⽂来抵消了，需要很多很多，我个⼈现在的看法是，如果不是有 执念，花这个精⼒赌读博，不如赌进⼤⼚赚钱，因为等你博⼠毕业了，⼜要看你的第⼀学历，第⼆学历，⼜是⼀个循环</p><p>​说⽩了读博，本硕期间的学历很重要，课题组的资源很重要，导师的引荐很重 要，⾃身的天赋也很重要，否则，别被画了⼤饼，还在乐呵呵的给⼈数钱，到 了，研三，发现申博也申不了太好的，⼯作也找不到好的，南柯⼀梦。更多的 可以查看章节“对于读博的看法”</p><p>​</p><p>​选择导师⾸要的最好的评判标准，两个字“⼈品”，⼈品这个东⻄如 何体现，就是看⼀个导师是否尊重学⽣的想法和未来规划</p><p>​</p><h1 id="与导师相处"><a href="#与导师相处" class="headerlink" title="与导师相处"></a>与导师相处</h1><p>​如果你⼀来就放⼤招，释放了⾃⼰全部的潜能，你今天花了6个⼩时就做完了，我们⾸先不考虑你的导师过⼏天会不会让你花8个⼩时，但是你哪天⽬标 变了，亦或者谈恋爱了，你拿出4⼩时，你说你导师⽣不⽣⽓。⽽且绝⼤数的情况是，你刚去学校，你的导师会⼀步⼀步尝试你的能⼒，看看你的极限在哪 ⾥，任务会⼀天⽐⼀天重。所以你要学会示弱，该摆就摆，这是在未来三年给 ⾃⼰留退路，年轻⼈切记⼀来就精⼒⽆限，那么剩下的就是⽆限的push和 pua。年轻⼈明明就是要成⻓的，那为什么我不拿出所有的时间来学习成⻓ 呢？我们前⽂⼀⼤堆的铺垫忘了吗？你导师他也是个⼤⽜⻢，也就是说，他交 给你的任务绝⼤多数是为了完成他⾃⼰的任务，⽽不是真正站在你的⻆度为你 考虑。并且绝⼤多数交给研究⽣的任务对研究⽣未来的就业是⽆益的，你把时 间全部浪费在这些⽆益的事情之上，临近毕业你怎么和其他⼈竞争好的⼯作， 靠论⽂？hr那关都过不去，hr也不知发的论⽂是啥。</p><p>​其次对于想读博的，你可能觉得，我拼命发论⽂不也挺好的吗？申博⼀般需要 的是⼀篇⾼质量的论⽂，以及未来能有引荐，⾼质量的论⽂则需要的是你要进 ⼊⼀个好的课题组，以及个⼈能⼒。如果你进⼊的不是⼀个很好的课题组，很 有可能你会和我的⼀个朋友⼀样，发了5篇普通⽂章只给导师做了嫁⾐，最后只 能在导师的帮助下顶多申请⼀个双⾮博⼠（我的建议：双⾮博⼠真读不了⼀ 点），导致最后⾃⼰读博读不了，⾃⼰java还没有学明⽩，找⼯作很费劲。你如果在挖掘⾃⼰能⼒的时候发现⾃⼰不适合科研，可以及时⽌损；如果适合 科研，慢慢释放潜能就⾏，然后发个⼀篇⾼质量⽂章就够了，如果你真的很 强，有很多idea，留到读博的时候在⽤，那时候才是你展现真功夫的时候。</p><p>​不能把⾃⼰的时间全部交付给了你的导师，尤其是需要去加班、熬夜、通宵，那更是不可⾏的。</p><p>​⼀定要记住，很多事，慢慢来，慢慢做，你开⼼，你导师也开⼼，认为你很负责很细⼼；如果你很快的完成，很多时候会让⼈觉得不负责任。其次对于有⼀ 个deadline的任务，除了有红头⽂件规定的deadline，千万别觉得你导师第⼀ 次和你说的时限就是那件事真正的deadline，⼈和⼈之间是没什么信任的，你 ⼀定要通过和你导师的相处，知道你在deadline多久之后完成才不会触碰你导 师的底线，在此之前，尽情的让他催，千万别愣头⻘，⼀下⼦蛮⼲就把他⼲完 了，你⼀旦让他有了⾼期待，那么等待着你的就是⽆尽的⼲不完的活，永远要表现出：我能⼒差、我不⾏、我会努⼒。</p><p>​其实示弱就是你未来在职场的⽣存法则，兔⼦博鹰，永远有底牌，让⼈看不 透。示弱看起来很好，那有没有副作⽤，有，⽽且还很⼤，遇到奇葩导师，会 对你辱骂，骂你傻逼，骂你垃圾，相信很多同学也碰⻅了此类⼈，那还要不要 继续示弱呢？你要想想对于这类⼈，他的欲望能有限吗？达到什么样才能让他 满⾜呢，那就是完全奉献出你的健康和⾃尊，真⼀点都没必要。不如脸⽪厚 点，让他尽情的辱骂好了，你想过上更好的⽣活，脸⽪这个东⻄迟早有⼀天是 要丢弃掉⼀些的，说⽩了都是选择⽽已，不强迫。</p><p>​⾸先对于⼀些⼒所能及的事，能帮则帮；对于耗时不是特别过分，可以不⽤加 班、熬夜就能完成的事，能做则做；对于⼀些很累很难的事，如果是公开场合 丢给你的，先不要反驳丢了他的⾯⼦，尝试着做⼀段时间，但不是让你拿命 做，⽽是尝试着找出᫾为客观的难点，或以身体为由等等，然后私底下沟通不做。对于好的导师⼀般就够⽤了，对于难搞的导师，更推荐明修栈道暗度陈仓，即明⾯上答应，明⾯上要显得很努⼒，私底下做⾃⼰的尽量保证达到⾃⼰ 的毕业要求，消磨他对你的坚持，最后⼀定在他眼中⼀定是要表现出：我很努⼒了，但是真的做不出来。</p><p>​其次就是⾔语和⽣活上的，⾔语上不说拍⻢屁，好话不能少，瞅准机会就说你 <strong>这个想法真的不错，⽼师很厉害</strong>诸如此类的话，<strong>不要吝啬漂亮话</strong>；⽣活上，<strong>逢年过节私⼈订制的祝福少不了</strong>，其次就是<strong>看看能不能给⽼师送点⼟特产，不要 太贵重那就是⼈情往来，师⽣情谊</strong>，⽽且师⽣之间还很难谈到贿赂⼆字，更多 的是表达感谢的情谊！尤其是你和你导师关系激化的时候，跪舔有时候不是舔，⽽是给⾃⼰更多的可能，尤其这段感情是⽆法丢弃的时候，尽量是呈现出 弱者的姿态以交好为主。</p><p>​绝⼤多数的导师都是挺好的，并且研究⽣阶段还是受社会包容、受学校保护的阶段，因此你想混个学位证就混个学位证，想考公考 编就考公考编，想去企业⼯作就去企业⼯作，不要对你的导师有过多的隐瞒， 能做就是能做，不能做就是不能做，<strong>学得慢就是慢</strong>，⼀切在进⼊学校的时候就 要慢慢透露出来，<strong>千万不要让你的导师对你有过⾼的期待</strong>。你要知道，你什么都不说，导师让你⼲啥就⼲啥，极有可能让他会觉得（⼀般 默认）你是⼀个想搞科研的好孩⼦，并且你要记住，你遇到⼀个尊重你想法的 导师，你和他不沟通，很有可能会产⽣认知偏差导致分歧；</p><p>​要尽量有⼀ 两个相处的还⾏的师兄姐，以后总有⼀些问题能相互交流，亦或者他们能提前 告诉⼀些事，很多时候信息差是⼀个很重要的东⻄。不过现在这个社会，⼈性 复杂，尤其是到了研究⽣这个阶段，看你⾃⼰，不喜欢也不要过于勉强，该⼲ 嘛⼲嘛！现在这个社会，⼀辈⼦能有⼀两个真正知⼼的朋友也就够了，很多事 很多⼈没必要强求的</p><p>​做⼈做事莫᫾真。⾯对你的导师，很多时候，正确与否不重要，听不听话很重 要。 ⽆论你导师对你说什么事，这件事我也知道⼀听就很荒唐，很离谱，做不出 来，但是你的第⼀反应也不能是⻢上就反驳别⼈，<strong>⼀定要按着他的想法来</strong>。如果这件事不给你做，你别掺和；这件事给你做，私底下去尝试着做，<strong>⾄少得表 现出你去做过了</strong>，<strong>真做不出来，慢慢和他解释。</strong></p><p>​绝⼤多数研究⽣不能毕业，并不是他的学术能⼒不⾏，说实话，⼀篇论⽂真的 不难，研究⽣不能毕业更多是花了太多时间去处理和导师之间的关系，还没处理好，那不如完全顺着来不处理（逼着你做⽜⻢⼲项⽬是另⼀回事）</p><p>​精致的利⼰主义者，对付他们其实也很简单，做也继续 做，⾃⼰百度亦或者咨询ᬀ导员研究⽣和导师的关系，去<strong>明确什么该做什么不该做</strong>，然后搜集证据，通过这些证据找ᬀ导员和学院领导据理⼒争⾃⼰的⼀些 合法权益，如果这都还不⾏，那要来就⼀起来个⼤的。什么⼤的，就是当你遇 到奇葩导师，研究⽣三年你勤勤恳恳，努努⼒⼒，达到研究⽣培养计划的毕业 要求了（这是⼤前提），然后还对你提出超级⽆端过分的要求，⽐如做家务， 接送⼩孩等等，对你尽是⽆端的辱骂和pua，把这些证据搜集起来，往学院举 报，不⾏，往学校举报，再不⾏，往教育厅（部）举报，再不⾏，直接报警。 ⼀定要牢记，研究⽣是⽜⻢，但顶多是个⼩⽜⻢，如果有⼀切东⻄会让你变得 抑郁、甚⾄想轻⽣，⼀定要在你还受保护的时候，及时争取合法权益，⽽不是 选择离开这个世间，⼈⽣真的还有很多美好等着你！但是对于⽃争，有⼀点也 很重要，我们该做的都得做到位后，⼀定是⾃⼰实在想不到什么好办法后，情 绪快绷不住了后，才能去搞⽃争，舆论也才会站在我们这⼀边，否则最后的舆 论⼤都是：你是学⽣，他是导师，这些都是你应该的</p><p>​总之，⾃⼰⼀定要给⾃⼰⼀个底线，其次导师给你安排的活，让你做的事，答 应给你的奖励，再相信这之前多想⼀想：我不是他亲⼉⼦，更不是私⽣⼦，那 这些到底是饼还是陷阱，⼤概率是pua</p><p>​尤其对于研究⽣⽽⾔更是和社会接轨的淡海⽔交界处，不仅仅要学会<strong>如何做事</strong>，更要学会<strong>如何做⼈</strong>。</p><p>​示弱是为了让⾃⼰有退步的余地；交好则是我们未来对待所有⼈的态度，⽆论内⼼有多么讨厌这个⼈，<strong>明⾯上都要保持微笑</strong>，这不是虚伪，⽽是尊重每⼀个⾃然⼈，尤其是当⼀段关系⽆ 法丢弃，弱者就要有弱者的姿态，三千越甲能吞吴；沟通除了能打破双⽅的认 知偏差，更是⼀种赌，赌我们遇到的是正常的导师，能够博得尊重；还未⾛到 抑郁，未⾛到想轻⽣的那⼀步，能忍则忍，明修栈道暗度陈仓，⽃争那定要是 ⽆奈之举，毕竟⽃争的结果是两败俱伤</p><h1 id="方向选择"><a href="#方向选择" class="headerlink" title="方向选择"></a>方向选择</h1><p>​当⼀个领域近两三年做的⼈很多的 话， 这个⽅向⼀定是个热⻔⽅向，既然是热⻔⽅向，会有现成的数据集，会有现成的基准模型，会有现成的⽅法、观点给我们借鉴，我们不需要造航⺟，再 配上我的⾃救指南⾥的裁缝思想，我只能说两个字：⽆敌。⾄于这种⽅向好不 好发论⽂，就是浑⽔摸⻥了，那么多⼈都能发论⽂，怎么就不能轮到你了，你是傻⼦还是通过关系读的研究⽣，从实招来。反倒是，做的⼈的少的⽅向，你 就要好好考虑能不好发论⽂了，凡事都要问问：凭什么轮到你来做第⼀个吃螃 蟹的⼈，你真的有那个能⼒和勇⽓吗？</p><p>​搞科研的⽅向选择其实也很简单，思路和⽔论⽂的⽅向选择相反就⾏了，也就是你挑做的⼈少的⽅向就⾏了，如果只是硕⼠，⼀定也不要挑做的最少的⼈， 可以权衡下，挑个中间档的，给⾃⼰留点后路。 为什么要这样做呢？⽔论⽂可以说是浑⽔摸⻥，⽽你搞科研就要做领头⽺，做第⼀个吃螃蟹的⼈才⾏了。尤其是现在的申博，你想申⼀个双⾮博，⼀区都只是⻅⾯礼，顶刊顶会才是打开这条道路的钥匙。⽽你当选择了这条路，向往⽔ 论⽂的⽅向变，就很难变了， 所以对于读博，我⼀直觉得慎重。 但是，对于想搞科研，想读博的，最好的出路还是继承优秀导师的⽅向，有导师的亲历指导，否则你想靠⾃⼰的能⼒在2年内开天辟地的发出顶刊顶会，只能说难如登天，这两种横竖都是⽜⻢，既然读博了，也要做好当⽜⻢的准备</p><h1 id="白马非马"><a href="#白马非马" class="headerlink" title="白马非马"></a>白马非马</h1><p>相信很多研究⽣刚进学校，听的最多的⼀句话就是：这个好发论⽂，这个对你 好。都是好，这两个好有什么区别呢？这个好发论⽂，⼤多数⼈刚进学校，可能就会觉得这个好发论⽂，容易毕业。 实则这个好发论⽂指的是，这个好发优秀的论⽂。如果是“这个好发优秀的论 ⽂”，我说成“这个好发论⽂”有问题吗？⼀点问题都没有。但是，却和你理解的 “这个好发论⽂，容易毕业”却是天壤之别，好发优秀的论⽂，可能会花你两 年，甚⾄三年的时间也发不出来，因为真正优秀的论⽂绝不是两三年就能搞出 来的，即使好发优秀的论⽂，时间也很漫⻓，再加上你什么也不会；</p><h1 id="公共数据集和私有数据集"><a href="#公共数据集和私有数据集" class="headerlink" title="公共数据集和私有数据集"></a>公共数据集和私有数据集</h1><p>公共数据集，字⾯意思理解就⾏，说⽩了就是公开的数据集，⼤家都能⽤，随 便⽤，如果可以的话⼀定要选择有公共数据集的⽅向，因为道理很简单，公开 数据早就已经被⽤烂了，各种处理⽅法啥的，说⽩了，你拿来不⽤做任何处理 就能⻢上⽤。</p><p><strong>私有数据集</strong>，就是这个数据集从零到⼀都由⾃⼰构造，具体怎么构造，说⽩了就是收集、清洗、处理等等<strong>⾮常多的步骤</strong>，如果你只是为了⽔⼀篇论⽂毕业， 不推荐。如果你是想搞出什么⼤新闻，亦或者想发好的论⽂，发好多⽔⽂，这 是⼀个不错的做法，<strong>但真的也没必要，纯粹的浪费时间</strong>，因为⽬前学术圈对只 做数据集的认可度不⾼，主要是耗时耗⼒，<strong>没有裁缝⼀篇论⽂的速度快。</strong></p><p>⼀般⼀个⽅向有公开数据集，百度⼀下就能百度到。实则还想确认，可以找⼀两篇这个⽅向的综述，⼀般综述⾥⾯都会提及这个⽅向有什么公开数据集</p><p>公共数据集和私有数据集主要的区分就是有没有在互联⽹上公开，公开的数据集必然会有很多⼈图⽅便直接使⽤，在这样的数据集上进⾏试验，会省时省 ⼒，当想做出过⾼的成就就得另辟蹊径；<strong>私有数据集，什么都是⾃⼰说了算，容易出⾼的成就</strong>，但是期间需要的花费就不得⽽知了。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>因为未来我们使⽤的学术裁缝的做法，⼀定要牵扯到⼀个基准模型，如果能继 承师兄姐的⾐钵，你⾄少能少掉半年的功夫，在此期间，你遇到什么问题也有 个⼈能帮你照应下。在科研学术上，⼀个坑放给⾃⼰踩，真不知道要踩多久，有你师兄姐的帮助， ⾄少在达到他那个⾼度之前，你基本都是平步⻘云，⽽这对你来说就⾜够了。 继承的好处不⽤我多少，多说也说不出来啥，说⽩了，就是路他⼈给你铺平 了，甚⾄直到缝模块写论⽂之前都能有⼀个⼈快速的回答你的⼀些疑难杂症， 不⾄于这⾥卡⼀下，那⾥卡⼀下，让⼈很难受。那到底怎么继承呢？这个就是你⾃⼰平常多留⼼观察，这个师兄怎么样，那个 师姐怎么样，然后私底下可以问问他们，得靠⾃⼰最后判断。⼀般这个师兄姐 能让你继承，你能明确的感觉到可以继承他的，如果你感觉到怀疑，那不⽤想 了，就别继承了。如果平常打扰的多了，别忘了请你继承的师兄姐吃吃饭，喝 喝奶茶啥的。</p><p>继承这个东⻄其实很简单，就是继承某⼀位师兄姐的⾐钵，但是这个东⻄勉强 不得。如果没有继承其实也没啥</p><h1 id="什么是造航母"><a href="#什么是造航母" class="headerlink" title="什么是造航母"></a>什么是造航母</h1><p>蜜蜂识别，假设你有10000只蜜蜂然后⾃⼰给他们编个号，识别 出特定编号的蜜蜂。 ⾸先不考虑这个蜜蜂识别真的能不能做出来，我们可以考虑下，即使它做的出 来，我们应该怎么做： </p><ol><li>⾸先你得去搜集10000只蜜蜂，然后得清洗数据，也就是保证蜜蜂的完整率，不能说⼀⼤堆的蜜蜂缺胳膊短腿的； </li><li>然后你得标注数据，也就是给蜜蜂们标个号； </li><li>然后你得去找模型、找⽅法来识别蜜蜂们，期间你⽆法确定那个⽅法有⽤， 就在不断地在这个相似领域⾥找呀找，这是最费时间的过程。假设你不是造 航⺟，数据不仅不需要你造，你随便找个开源的顶刊顶会，复现他们的代码就⾏了； </li><li>最后你找了模型，还得对模型进⾏⼤⼑阔斧的改造，适合你的蜜蜂数据，对结果的评价种种都需要你⼀个⼈去尝试； </li><li>等你写论⽂的时候，⼜没有对⽐模型，⼜没有综述可以借鉴去写相关⼯作；</li><li>等你投稿的时候，⼜不知道投到那个期刊合适</li><li>…… </li><li>等你临近毕业了，发现论⽂还没写好</li></ol><p>如果你被安排了造航⺟，恭喜你，你要⽐别⼈早点学会⼀项技能：<strong>学会拒绝</strong>。 当然，你不要直接愣头⻘似的去你导师办公室，然后和他说，这是航⺟，我不 造，我拒绝，你这不是去拒绝，是打你导师的脸，做⼈做事得要谋略。</p><p>⾸先，当你意识到你的⽅向是开天辟地，从未有⼈做过或者很少有⼈做过的的新⽅向后，⾸先你要去明确的找出这个⽅向的<strong>不可⾏性</strong>，不要⽤嘴巴说，要⾃ ⼰去<strong>搜集资料证明</strong>这个东⻄很难，再想办法把这个很难再夸⼤成不可能，并且 在找⽅向不可⾏性的过程中，去找⼀个新的合适的⽅向。即发现问题（⽅向不可⾏），并给出<strong>⼀个⽅案解决问题</strong>（新的⽅向可能还不错）。</p><p>整理好所有的东⻄后，私底下去找你导师，记住是私底下找你的导师，和他 敞开了聊。</p><p>造航⺟这个东⻄，不是特别想读博，不是下定决⼼搞科研，只想混个毕业，真 碰不了⼀点，多少个前⻋之鉴，否则三年你将会⾮常痛苦，⽽且最后还很容易 ⾛向学术不端。</p><p>造航⺟即让你开天辟地，开天辟地就是从零到⼀的尝试，⾸先不论能不能尝试 出来，就是这种不断的尝试就是极其耗费精⼒和时间的，硕⼠不过短短3年，能 有⼏个⼈可以⼀个⼈去开天辟地的，真把它做出来，即使拼了⽼命做出来了， 对硕⼠⽽⾔⼜有何意义呢？</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p>1.⼤多数理论的知识只要<strong>浅尝即⽌</strong>，也就是你得需要知道有这个东⻄，这个东⻄⼤概是什么，能做什么即可，内部的⼀切细节不要纠结，看不懂就跳过， ⽔论⽂不需要你对理论的细节有过深的把握；</p><ol start="2"><li>对于需要实践、动⼿技能知识，则⼜需要分情况讨论：</li></ol><p>​1.越基础的技能（例如编程中最基础的技能Python，<strong>胶⽔技能</strong>），则越需 要扎实； </p><p>​2.形⽽上、⾼⼤上的技能，往往不需要精通（例如编程中的框架技能 Pytorch，模块技能），也是浅尝即⽌即可。 </p><p>为什么要如此学习呢，理论知识浅尝᫿⽌，胶⽔技能刨根问底，<strong>模块技能浅尝即⽌</strong>？什么⼜是胶⽔技能和模块技能？未来学术裁缝那些章节会做出详细的说明，在这⾥先做个⽣动形象的⽐喻： </p><ol><li>⽔论⽂就相当于我们建房⼦⼀样，学理论知识就相当于打地基，但是对于学术裁缝⽽⾔，我们不会构造⾃⼰的地基，我们将会挪⽤他⼈的地基 （Baseline），之后我们将在这个地基上⼤⼑阔斧的改造，所以对于这个地基，我们只要能看懂即可，⽽不是通过学习扎实的理论知识构建出⼀个地 基； </li><li>⽔论⽂第⼆步则是要在地基上构造出⾃⼰的房⼦，那怎么构造呢？其实也并不是通过我们的技能知识进⾏构建，即并不是让你成为砖匠、瓦匠和⽊匠， 因为我们的⽬的是建出⼀个房⼦，这个房⼦看起来是个房⼦即可。那我们该 怎么做呢？这个房⼦的墙⾯设计的好，搬过来；那个房⼦的屋顶设计的好， 搬过来，⽽我们的⼯作就是把这个墙⾯和屋顶在地基上拼接出来（即， Baseline + A + B），懂了吗？因此，对于技能知识的学习，我们并不需要 构造模块，我们只需要慧眼识珠找到模块，我们真正所需要会的就是如何把这两个模块缝起来，所以我们对于胶⽔技能，越扎实越好；对于模块技能， 浅尝即⽌。</li></ol><p>对于⽅向内专业技术的学习，可以去下载⼏篇你<strong>选择的⽅向的综述</strong>，英⽂的综述要下载，中⽂的综述也要下载</p><ol><li>英⽂综述（1-2篇引⽤次数᫾⾼的，精读⼀两篇即可）：⼀般你这个⽅向从 零到⼀，细枝末节都会给你讲明⽩，数据集、常⽤模型、评价指标都会和你 说的⼀清⼆楚，可以细看，但是看不懂的地⽅可以跳过，对你的⽅向的⼀些 专业技术做到⼼中有数即可。 </li><li>中⽂综述（2-3篇，少看不⾏，多看⽆益）：紧追实事，不给你⼀句多余的 话，说⽩了很多就是导师下的死命令，⾃⼰随便找了⼏篇英⽂综述拼拼凑 凑，看他的主要⽬的是知道你们⽅向英⽂词和中⽂词的对应关系，顺带加强下你对你们这个⽅向脉络的了解。</li></ol><p>学基础的时候，不仅不要不注意细枝末节，更重要的是理清基础的脉络，知道你们这个领域、这个⽅向是如何发展到今天的，⼀步⼀步怎么⾛过来 的，其实就是对综述的把握，未来相关⼯作的写作思路。此外，如果是偏实验 学科，还需要在学基础的时候，把握住每⼀个⼩的实验的流程，因为未来你开始动⼿做实验的时候，其实就是⼀个个⼩实验的总和，你遇到的bug也就是你 做⼩实验时遇到的那些bug。</p><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><p>推荐easyScholar插件，能显示期刊分区</p><p>通过百度的搜索，我们能学习到<strong>正确总结问题</strong>，找到<strong>问题关键点</strong>的能⼒。然后，再去使⽤ChatGPT，你只要问题总结的好，问得好，得到的答案不仅更符合你内⼼想要得到的那个答案，更不会得到⼀个错误的答案⽽不⾃知。 最后ChatGPT的能⼒绝不仅仅只是回答你的问题那么简单，它的能⼒太强太强 了，研⼀的同学⼀定要花时间好好学学这个东⻄，然后要善于利⽤它，科研神器⼀点都不过分。当然，百度和ChatGPT⽐也不是⼀⽆是处，因为两者⾛的路 线也完全不⼀样，不要⽤了ChatGPT就忘了百度。</p><ul><li>ChatGPT只要知道它能 帮你润⾊论⽂就⾏了，然后你只要掌握怎么让他帮你润⾊的⽅法就⾏。</li><li>ChatGPT是美国佬创⽴的，训练<strong>ChatGPT时可能偏向英语</strong>，因此，当我们 让ChatGPT帮我们⼲活时，尤其是类似论⽂润⾊这种精细活，最好是使⽤<strong>英⽂指令</strong>。</li><li>如果你只是做英⽂润⾊⼯作 和中英互译的⼯作，真的很没有必要，GPT3.0⾜够你使⽤了，⽽且还很多 余了。你要知道GPT增加了什么功能，这些功能对于你的润⾊起不了质的变 化，你的论⽂也不可能因为你⽤GPT4润⾊了就能增⼤中稿的概率</li><li>由于ChatGPT⾃⼰本身的限制，普通版本单次输⼊输出共限制3000字，但 是，你不要真的⼀次性给别⼈3000字，最好是⼀次不超输⼊超过1000字的字符。</li><li>如果你的论⽂中有数学公式，可以⼤胆点，ChatGPT虽然⽆法识别公式， 但是对于⽆法识别的公式这附近的内容会原封不动的进⾏替换（注意：\会 替换成\，涉及计算机领域的知识，不解释，但是需要注意），即使你段落 内有数学公式，也可以⼤段放⼊润⾊。如下图所示：<img src="/./../images/image-20240701150504394.png" alt="image-20240701150504394" style="zoom:67%;"></li></ul><h2 id="英文润色"><a href="#英文润色" class="headerlink" title="英文润色"></a>英文润色</h2><p>Below is a paragraph from an academic paper. Polish the writing to meet the academic style, improve the spelling, grammar, clarity, concision and overall readability.</p><ol><li>（不指定研究领域）Please polish my research paper to make it more concise, readable, and engaging. I need help with editing, proofreading, and making any necessary improvements to the language and grammar. I am looking to improve the overall quality of my paper and make it ready for submission to a scholarly journal : 冒 号后⾯输⼊你需要润⾊的论⽂（尽量不要超过1000字） </li><li>（指定研究领域）Hello ChatGPT, I would like to request your help in correcting my research paper in the area of video captioning (请注意替 换论⽂的研究领域). I have already written the paper, but I need assistance in improving the language, grammar, spelling, and punctuation. My paper is intended for submission to a scholarly journal, and I need it to be error-free and polished to the highest standards: 冒号后⾯输⼊你需要润⾊的论⽂（尽量不要超过1000字）</li><li>输⼊演示<img src="/./../images/image-20240701154610778.png" alt="image-20240701154610778" style="zoom:67%;"></li></ol><h2 id="中英互译"><a href="#中英互译" class="headerlink" title="中英互译"></a>中英互译</h2><ol><li>Translate this Chinese into English: 冒号后⾯输⼊你需要翻译的⽂字（尽 量不要超过1000字） </li><li>Hello ChatGPT, please translate my research paper from Chinese to English, and make the translation accurate and professional: 冒号后⾯ 输⼊你需要翻译的⽂字（尽量不要超过1000字）</li><li>使⽤演示：<img src="/./../images/image-20240701154907256.png" alt="image-20240701154907256" style="zoom:67%;"></li></ol><p>如果通过ChatGPT撰写出⼀篇论⽂，⽆疑是给⾃⼰的学位证埋雷。通过ChatGPT撰写的论⽂⽆异于机构写⼿的中英互译和拼凑论⽂的⽅法，甚⾄由于ChatGPT<strong>只能帮你搜寻他学到的东⻄</strong>，<strong>没有推理能⼒</strong>，那么ChatGPT写出来⽂章的还⼤有可能⼀稿多投。也就是说，即使ChatGPT能帮你写出⼀篇论⽂，也是⼀篇⻛险极⼤的论⽂</p><p>不过，我们可以通过ChatGPT完成⼀些重复性体⼒⼯作，⽐如相关⼯作的撰 写。当然，也可以通过ChatGPT给予我们⼀些写作的灵感，这也是可能达到的。</p><h1 id="研究生三年规划"><a href="#研究生三年规划" class="headerlink" title="研究生三年规划"></a>研究生三年规划</h1><p>是按照⼀个⼈每天能有<strong>4-6</strong>个⼩时的有效时间放在论⽂上⾯， 然后⼤概就是最好有⼀个<strong>996</strong>的状态。论⽂说简单很简单，它的套路简单，尤其是你看完该指南后，按照指南的规划 ⼀步⼀步⾛，不存在发不出来论⽂的可能；但是论⽂说难也很难，需要时间的 积累，绝不是说你摆个两年、三年就能搞定的。你说摆个两年、三年能不能搞 定，能，只要你⼤胆，把三篇英⽂拼在⼀起，也是⼀篇⼤论⽂，⽽且语⾔写作 功夫好，甚⾄还能骗过盲审专家拿到学位证，但是，⼈不到万不得已，为什么⾮要给⾃⼰安⼀个陪伴⾃⼰终身的雷呢？⽽且，你们要知道，即使研究⽣毕业 ⼤论⽂造假，也是需要有⼀定⽔平的，绝不是本科毕业论⽂那样，临时抱抱佛脚就⾏。</p><h2 id="研一打基础"><a href="#研一打基础" class="headerlink" title="研一打基础"></a>研一打基础</h2><p>基础阶段越扎实越好，然后⼀般研⼀还会有课要上，所以，对于打基础，我觉 得配合上暑假期间的懒散学习，开学后再花个半年左右的时间，期间可以定下 ⽅向，看看综述了。⾄于要学什么基础，可以看章节“基础的寻找和学习” 也就是这应该是你研⼀下开学前就应该要完成的事！</p><h2 id="看论文"><a href="#看论文" class="headerlink" title="看论文"></a>看论文</h2><p>如果你⽤的是<strong>学术裁缝</strong>的想法，看论⽂其实不需要看那么多⽂章，<strong>精读⼏篇⽂章</strong>就可以了。可能就是在<strong>找基准模型</strong>的时候可能要花点功夫，当然，你找基准模型，也没必要读懂那篇⽂章，就是不断反复地尝试，这个时间其实是很漫⻓的，运⽓好的可能⼀两个⽉就结束了，运⽓不好的可能要花个三四个⽉。 也就是说，找到⼀个基准模型，然后加上精度⼏篇⽂章找模块这个过程基本也 要有⼀个半年的时间。也就是到了研⼆上开学的时候，你就应该有⼀个可以正 常运⾏的基准模型了，以及很多个可以尝试排列组合的模块想法了。</p><h2 id="做实验"><a href="#做实验" class="headerlink" title="做实验"></a>做实验</h2><p><strong>缝模块</strong>也是⼀个漫⻓的过程，且很扎⼈⼼的过程。因为你<strong>⽆法判断哪个模块加上去⼀定有⽤</strong>，如果这个模块没⽤，配合上科研trick也没⽤，只能换⼀个模块 继续尝试，继续使⽤科研trick<strong>调整它的指标性能</strong>。这个过程其实也是需要花2-3 个⽉。 当你确定了模块之后，你就需要<strong>做消融实验</strong>，其实当你在缝模块的时候，就是在做消融实验，只不过做的消融并不⼀定全⾯，现在就是去<strong>补充实验</strong>。然后精挑细<strong>选出⼏个好的案例</strong>，放到未来<strong>论⽂的案例分析</strong>⾥去。这个过程可能也要花个1-2个⽉。 总的来说，实验可能也要占据你半年的时间，也就是说，研⼆下开学的时候，你的实验已经全部完成了。</p><h2 id="写论文"><a href="#写论文" class="headerlink" title="写论文"></a>写论文</h2><p>当你写论⽂的时候，⼀定是找到了⽬标期刊的。其实写论⽂其实不难，但也不 简单，⼀般这些流程加在⼀起1-2个⽉也就完稿了，然后论⽂投出去了。也就是 说快⼀点的，研⼆下刚开学就完成了⼀篇论⽂的投稿；时间慢⼀点的，可能研 ⼆下开学，还要花个⼀两个⽉的时间。</p><h3 id="大论文"><a href="#大论文" class="headerlink" title="大论文"></a>大论文</h3><p>⼤论⽂其实在你研⼆结束的那个暑假，就应该有构思有规划，然后在⼗⽉份之 后可以尝试初步的动笔，有些学校对⼤论⽂的要求晚的，可以推到国考之后开 始动笔，但是基本研三下⼀定是要完成⼤论⽂的写作的。因为研三下，才是考 公考编的同学⻩⾦时间，对于进⼚的，可能会宽松很多。</p><h1 id="搜索论文并下载"><a href="#搜索论文并下载" class="headerlink" title="搜索论文并下载"></a>搜索论文并下载</h1><p>四种方式搜论文：</p><ol><li>WOS，<a href="https://www.webofscience.com/wos/alldb/basic-search%EF%BC%9A%E2%BD%90%E1%AB%BE%E8%A7%84">https://www.webofscience.com/wos/alldb/basic-search：⽐᫾规</a> 范，但主要针对已经建刊的论⽂，在线发表的论⽂搜不到，使⽤起来也麻 烦，不推荐使⽤； </li><li>⾕歌学术（镜像版），<a href="http://scholar.scqylaw.com/%EF%BC%9A%E6%90%9C%E8%8B%B1%E2%BD%82%E8%AE%BA%E2%BD%82%E5%B0%B1%E2%BD%A4%E5%AE%83">http://scholar.scqylaw.com/：搜英⽂论⽂就⽤它</a> 了； </li><li>知⽹，<a href="https://www.cnki.net/%EF%BC%9A%E6%90%9C%E4%B8%AD%E2%BD%82%E8%AE%BA%E2%BD%82%E5%B0%B1%E2%BD%A4%E5%AE%83%E4%BA%86%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%83%BD%E6%89%BE%E5%88%B0%E7%A1%95%E5%8D%9A%E2%BC%A4%E8%AE%BA%E2%BD%82%EF%BC%9B">https://www.cnki.net/：搜中⽂论⽂就⽤它了，并且能找到硕博⼤论⽂；</a> </li><li>百度学术，<a href="https://xueshu.baidu.com/%EF%BC%9A%E6%90%9C%E8%8B%B1%E2%BD%82%E8%AE%BA%E2%BD%82%E6%9C%89%E2%BE%95%E6%AD%8C%E5%AD%A6%E6%9C%AF%EF%BC%88%E6%AD%A3%E5%B8%B8%E2%BD%86">https://xueshu.baidu.com/：搜英⽂论⽂有⾕歌学术（正常⽆</a> 法访问，但有镜像版），搜中⽂论⽂有知⽹，要你何⽤？</li></ol><p>⼀般搜索论⽂的⽅式，就是通过关键词搜索论⽂，这也就够了。</p><ol><li>中⽂论⽂：某宝搜索“论⽂下载”，然后会出现⼀堆的商品，购买可以包⽉包 年的中英⽂数据库，⼀⽉市场价9.9元，⼀年市场价30-40元； </li><li>英⽂论⽂：某宝搜索“论⽂下载”，然后会出现⼀堆的商品，购买可以包⽉包 年的中英⽂数据库，⼀⽉市场价9.9元，⼀年市场价30-40元；</li></ol><p>如果上述给出的中英⽂数据库也⽆法下载你想要下载的论⽂，同样去某宝搜索 “论⽂下载”，然后找那种指定论⽂名下载的店家，⼀篇论⽂下载市场价1-5元</p><p>对于找不到的中⽂论⽂，我也不知道有啥好⽅法，那就去某宝只买中⽂论⽂数 据库，⼀个⽉5元； 对于找不到的英⽂论⽂，可以尝试sci-hub：<a href="https://sci-hub.ru/">https://sci-hub.ru/</a></p><p>搜论⽂主要其实就是推荐知⽹和⾕歌学术，对于下载的话，只推荐⼀个，去淘 宝买包⽉包年的中英⽂数据库，实则也可以去你购买的数据库⾥搜索。</p><h1 id="综述和研究性文章"><a href="#综述和研究性文章" class="headerlink" title="综述和研究性文章"></a>综述和研究性文章</h1><h2 id="综述性"><a href="#综述性" class="headerlink" title="综述性"></a>综述性</h2><p>综述性⽂章说⽩了，就相当于⼀本历史书和⼀本百科全书的总和，他不仅 和你讲清楚了你这个领域的从零到⼀的发展脉络，还能和你理清你们这个领域 <strong>现存的问题、待解决的问题、以及数据集、指标</strong>等等。</p><p>⽽不同的综述性⽂章⼜有什么不同呢，就是对于这个发展脉络的整理<strong>⽅向</strong>不⼀ 样，⽐如历史书，可能有的⼈从帝皇的⻆度整理，有的从⼠⼤夫的⻆度整理， 有的从平⺠百姓的⻆度整理，从不同的⻆度整理需要解决的问题也是不⼀样 的。也就是说，东⻄仍然是那个东⻄，只是从不同的⻆度去分类汇总那个领 域，⼀般不同类型的看个2-3篇就够了，然后⾃⼰思考下⾃⼰要从哪个⽅向出发。</p><p>⼀般<strong>推荐看英⽂综述</strong>，⼤多数中⽂综述都是揉了2-3⽚英⽂综述的某个⽚段，⼀般都不成体系，为了写综述⽽写综述，亦或者是摘抄了某篇综述的某个 分类，然后⾃⼰再添加了⼀点东⻄。但是中⽂综述也可以看看，这样可以知道 你们这个领域的关键词对应的英⽂是什么。</p><p>⼀个领域，没有综述性⽂章，我只能说能否找些相似领域的综述性⽂章，如果 连相似领域都没有，放弃吧！你凭什么觉得你能做出来⼀个开天辟地的东⻄？ 我们国家的第⼀艘航⺟“辽宁舰”都是从乌克兰买来的“瓦良格”号航⺟。对于造航 ⺟的同学，真⼼推荐不如裁缝出⼀篇论⽂保毕业</p><h2 id="研究性"><a href="#研究性" class="headerlink" title="研究性"></a>研究性</h2><p>研究性⽂章就是 历史中的⼀个⼜⼀个节点，叙说着⼀个⼜⼀个美丽的故事。对于研究性⽂章⼀ 般会通过以下⼏个部分去叙说⼀个完整的故事：</p><ol><li>摘要：对于引⾔、相关⼯作和⽅法的总结，⽤的都是⾮专业术语，⼤⽩话讲 清楚你做了个啥玩意； </li><li>引⾔：对于相关⼯作和⽅法的更详细解释，有⼀个上下⽂的逻辑关系； </li><li>相关⼯作：领域内和你相关、相似的⼀些⼯作发展情况；</li><li>⽅法：你创新的内容和具体做法； </li><li>实验：你的⼯作的性能展示，⼀般就是对⽐试验、消融实验和案例分析； </li><li>总结：⽅法和实验部分的总结，⾔简意赅你做了什么，达到了什么程度。有 些期刊还会要求⼀些⽆意义的未来展望。</li></ol><h1 id="水刊和顶刊阅读"><a href="#水刊和顶刊阅读" class="headerlink" title="水刊和顶刊阅读"></a>水刊和顶刊阅读</h1><p>很多时候，我们刚进学校，导师就会推荐我们看⽂献，有些导师甚⾄会甩⼀堆 ⽂献到你脸上，这些⽂献越看越懵逼，因为绝⼤多数都是领域内的经典，经典 必然就是顶刊。即使我们有时候问导师，我们应该搜索哪些期刊的⽂献阅读，导师也会让你去 看顶刊顶会的论⽂</p><h2 id="先看水刊再看顶刊"><a href="#先看水刊再看顶刊" class="headerlink" title="先看水刊再看顶刊"></a><strong>先看水刊再看顶刊</strong></h2><p>即使你把基础学得很好了，但是因为论⽂还是有其他的⼀定路数的，不同级别 的论⽂路数⼀不⼀样，但是⽔刊基本是⼀点路数都没有的，就像⼀个⾚裸的⼥ ⼦（男⼦）站在你⾯前，⼀览⽆遗。个⼈更建议先看⽔刊⽔会，看⽔刊⽔会的⽬的也很简单，因为你看论⽂的⽬的<strong>不仅要知道你未来的下限可以在哪⾥</strong>，<strong>更要知道⼀篇论⽂是怎么写出来的了</strong>。⽽对于<strong>顶刊顶会</strong>，<strong>经常会⽤⼀些花⾥胡哨的语⾔和⽅法去修饰它所做的内容</strong>，也就是<strong>⽔刊⽔会是脱去了外⾐的顶刊顶会，你不存在看不懂它的时候</strong>。 通过⽔刊⽔会，你很容易掌握论⽂的基本招数，并且每当你看到⼀篇⽔刊的时候，都会惊讶到：原来如此，原来这样就可以发论⽂了呀！</p><h2 id="再看顶刊顶会"><a href="#再看顶刊顶会" class="headerlink" title="再看顶刊顶会"></a><strong>再看顶刊顶会</strong></h2><p>当你通过阅读⽔刊⽔会，习得了论⽂的基本招数之后，再来看顶刊顶会，便可 以试着⾃⼰慢慢的揭开顶刊顶会的那层外⾐，甚⾄要习得顶刊顶会的招数：如 何把⼀篇屎⼀样的⽂章雕刻成⼀朵花，简称屎上雕花。</p><p>也就是看顶刊顶会的⽅法实则很简单，⾸先通过⽔刊的⽅法去看这篇顶刊顶会 的基本做法，然后再通过思考去观察出顶刊的<strong>外包装</strong>，然后总结这种包装的⼿ 法，以后⾃⼰写论⽂的时候可以⽤上。也就是，你会发现其实顶刊顶会的做法和⽔刊⽔会的做法实则没什么区别，主要就是它的外包装实在是太华丽了。</p><h1 id="阅读文献"><a href="#阅读文献" class="headerlink" title="阅读文献"></a>阅读文献</h1><h3 id="中文核心"><a href="#中文核心" class="headerlink" title="中文核心"></a>中文核心</h3><ol><li>⾸看摘要和总结是否符合⾃⼰的⽅向。</li><li>初看引⾔判断这篇⽂章对⾃⼰有没有过多的作⽤，这个时候都是略看。</li><li>如果有⽤再重细看引⾔。</li><li>然后细看⽅法和消融实验，其余的部分没啥好看的；</li><li>如果略看的时候，就发现这篇⽂章对⾃⼰没有⽤，那就换⼀篇⽂章。</li></ol><h3 id="外文核心"><a href="#外文核心" class="headerlink" title="外文核心"></a>外文核心</h3><p>⾸先，你看的前⼏篇论⽂，尤其是综述，我个⼈更建议你打印成纸质的看，<strong>不要去特地的借助某⼀款论⽂翻译软件</strong>，不懂得词尽量百度，不懂得句⼦尽量去 思考下怎么理解，<strong>实在不⾏直接跳过</strong>，你现在不是在考英语考试，看得懂看不 懂⼀两句话不重要，重要的是你能<strong>⼤概理解这篇论⽂</strong>。</p><p>刚开始看英⽂论⽂的时候⼀头乱麻，但是⼀篇论⽂横竖就这⼏个版块：摘要、引⾔、相关⼯作、⽅法、实验和总结，<strong>每个版块都是固定死的</strong>，以 及他们的<strong>作⽤和写法也都是固定死的</strong>。其次，只要你在你这个领域深耕下去， 读个两三篇论⽂，你就会发现你这个领域⽤来⽤去就那⼏个领域词，句⼦⽤来 ⽤去也就那⼏个句⼦，尤其是⽔刊。</p><p>如果你的⽬标不是保毕业，⽽是<strong>读博搞科研</strong>，那就不能略读了，必须得<strong>精读⼤量的顶刊顶会</strong>，看这些⽂章是如何写作，如何屎上雕花的，详情可看章节“顶刊和⽔刊看哪个”。</p><h3 id="顶刊论文"><a href="#顶刊论文" class="headerlink" title="顶刊论文"></a>顶刊论文</h3><p>⾸先我在百度学术上通过我们领域的关键词“video captioning”搜索了近两年所有的⽂章<img src="/./../images/image-20240701171017537.png" alt="image-20240701171017537" style="zoom:67%;"></p><p>然后按照SCI分区，得到了如下图所示的结果：<img src="/./../images/image-20240701171052195.png" alt="image-20240701171052195" style="zoom:67%;"></p><h3 id="阅读工具"><a href="#阅读工具" class="headerlink" title="阅读工具"></a>阅读工具</h3><p>其实你⽤哪⼀款pdf⼯具都⾏，只要这个pdf⼯具能正常的看pdf即可。对于翻译软件更是如 此，我觉得你的精⼒真的没必要过多的放在这⾥。如果你⼀来就<strong>过度的依赖论⽂阅读⼯具</strong>，如果你只是读个⼀两篇论⽂也就罢了，否则<strong>你⼀来就把你的上限摆在那⾥了</strong>， 以后<strong>每次读论⽂都需要靠这个软件</strong>，不仅阅读⽂献麻烦，<strong>更难读到论⽂的⼀些共性精髓</strong>，看到的都是论⽂⾥那些⽐᫾浅显的东⻄，⾮常不利于 你未来的编故事和写作。</p><h1 id="学术裁缝"><a href="#学术裁缝" class="headerlink" title="学术裁缝"></a>学术裁缝</h1><p>​搞科研的做法是，先<strong>提出问题</strong>，然后<strong>找到⽅法解决问题</strong>，⼀般衡量这个问题是否被解决的做法，就是看你的⽅法有没有在⼀些<strong>指标上的提升</strong>，也就是说，如果搞科研时抛掉问题不谈，最重要的就是<strong>指标上有提升</strong>。</p><p>​学术裁缝的做法就应运⽽⽣，我们先不讨论有什么实际问题需要我们去解决，我们做的时候，<strong>先想办法让⼀个⽅法在指标上有提升</strong>，<strong>然后再谈问题</strong>；等 我们未来写的时候，我们先谈问题，再谈做法。</p><p>​通过学术裁缝这样做的话，在我们眼中，是先提出⽅法，再谈问题。但是在审 稿⼈眼中，我们是提出问题，再提出⽅法，就是搞科研的那⼀套，只要把审稿⼈唬住了，论⽂也就被接受了。现在就是两个问题，<strong>如何找到⼀个⾏之有效的 ⽅案让我们提出来的⽅法在指标上有提升</strong>，并且我们⼜如何在提出这个⽅法之后有效的提出⼀个问题呢？即如何编⼀个好故事。</p><h2 id="基准模型"><a href="#基准模型" class="headerlink" title="基准模型"></a>基准模型</h2><p>学术裁缝的做法，⾸先就是去论⽂⾥找到⼀个基准模型A，就类似于我们建房 ⼦打地基⼀样，去找到⼀个好的地基。注意，并不是⾃⼰筑基，⽽是去找⼀个 地基，然后原封不动的搬过来⽤。</p><p>随便找到⼀篇⽂章，都会有他的⽅法介绍表，如下 图所示（⼀般就是对⽐实验或消融实验表，详情查看章节“论⽂的三个实 验”）。<img src="/./../images/image-20240703224610479.png" alt="image-20240703224610479" style="zoom:67%;"></p><p>对于上述这张表格，可以很容易的发现，本篇⽂章使⽤的⽅法 UNQE、BLEU、 BERT、chrF都是最最基础的基准模型，他们基本是不可分割的。⽽最后⼀⾏的 Bi-LSTM+attention+BERT+QE实则就是作者最后的⼯作，那么 BiLSTM+attention+BERT+QE就可以作为我们的基准模型，也就是我们找到这篇⽂章的源代码，原封不动的拿过来即可，未来我们只需要在这个上⾯改造就⾏。</p><p>当然，<strong>基准模型他不是⼀个很死的东⻄</strong>，并不是说你就⾮要拿 Bi LSTM+attention+BERT+QE作为基准模型，因为对于这篇论⽂的作者⽽⾔，其 实 BERT就是他的最基础的基准模型，然后他拼接了QE、Bi-LSTM和attention 三个模块上去，也就是什么意思呢？我们也可以拿 可以使⽤表格⾥的 BERT作为基准模型，我们也 ESIM+BERT作为基准模型，同时可以拿 Bi LSTM+attention+BERT作为基准模型。</p><p>基准模型说⽩了就是⼀⽚论⽂整个使⽤ 的⽅法⽽已，我们<strong>直接拿来就⽤</strong>即可，当然，也可以是这篇论⽂⾥出现的其他的⽅法。</p><p>上述的所有的基准模型都离不开BERT这个东⻄， 也就是<strong>BERT是最最基础的基准模型</strong>， ⾄于<strong>QE、Bi-LSTM和attention就都是模块</strong>了，然后玩的就是组合。</p><p>BERT是⼀个很⼤的东⻄，可以叫做框架； ⾄于QE、Bi-LSTM和attention都是很⼩的⼀个东⻄，也就是⼀些⼩组件。</p><p>基准模型和地基⼀样，要越<strong>牢固</strong>越好， 怎么确保基准模型牢固，⾮常简单，也就是我们找基准模型，必须得找<strong>近两年的顶刊顶会</strong>的论⽂，最好就是最近的顶刊顶会。那为什么⾮要找顶刊顶会呢？ 因为学术裁缝就⼀个原则，<strong>能挪⽤的绝不构造</strong>，⼀般顶刊顶会的摘要的最后⼀ 句，会附上他们的⽅法<strong>复现链接</strong>， 除了顶刊顶会的论⽂，<strong>99%都不会开源</strong>（在我⼼⾥，不开源等同于造了假，好好悟⼀悟这括号⾥这段话），也就做不到挪⽤，所以最后你的论⽂基本也不会选择开源。其次，相⽐较其他的论⽂，顶刊顶会⼀定是最牢固的。</p><p>近两年的论⽂都没有开源⽅法，有⼀篇近3-4年的⽂章开源了 ⽅法，且可以复现，能不能作为基准模型？完全可以，有⼀个总⽐⾃⼰从零到 ⼀构造的好，除⾮他⽼的过分了。学东⻄千万不要</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>当我们找到学术裁缝的地基之后，我们就要开始考虑在地基上建房⼦了。</p><p>同理，也不是⾃⼰去构建模块建房⼦，也是去<strong>不同的论⽂⾥找到不同的模块B、 C、D、E和F。</strong> </p><p>当我们把基准模型A和模块B、C、D、E和F都找到后，然后我们就开始做学术裁缝了，<strong>试⼀下A+B的性能如何</strong>，<strong>再试⼀下A+B+C的性能如何</strong>，再试⼀下 A+B+E的性能如何，再试⼀下A+B+C+E+F的性能如何，说⽩了，就是<strong>不断地排列组合</strong>，<strong>直⾄找到⼀个指标上有提升的组合⽅法</strong>。假设A+B+F的组合性能是最优的，那么我们就把A+B+F当做我们的房⼦（⽅法），进⽽我们的第⼀个问题找到指标上有提升的⽅法就被解决了，剩下的就是第⼆个问题编故事。</p><p>基准模型占⽐95%，⽽模块占⽐5%。因此对 于模块，其实没有那么多讲究，⽆论是来⾃于顶刊顶会，还是来⾃于⽔刊⽔ 会，亦或者是⾃⼰⼿动构造的，其实都可以。</p><p>⼀定要选择做的⼈多的那个⽅向吗？做的⼈ 多，发的论⽂多，开源⽅法的⼈才会多，你能挪⽤的基准模型也才会多。同 理，找模块的时候也是同样的道理，做的⼈越多，能找到的好模块也就越多。 放到最后就是你组合的⽅法也就越多，缝出⼀个有效的⽅法的速度也就越快。</p><h2 id="缝模块"><a href="#缝模块" class="headerlink" title="缝模块"></a>缝模块</h2><p>怎么<strong>排列组合</strong>，很简单，A+B、A+C、A+D、A+E、A+F、A+B+C、 A+B+D……，没有技巧，就是不断地尝试，然后配合各种科研trick，直到找到 ⼀个在指标上有提升的组合⽅法</p><p>A是⼀个框架的东⻄， B、C、D、E和F是模块，都是很⼩的，我们的⼯作并不是设计⼀个A，顶多设 计⼀个B和C，也就是我们需要学习的并不是如何去构造出⼀个A的基础，⽽是 构造⼀个B的基础，然后最重要的就是把A和B缝在⼀起的基础，对于Ai⽽⾔， 就是把Python学得越扎实越好，因为把A和B缝在⼀起，靠的就是Python。</p><blockquote><p>正常缝模块的⽅式，就是A+B。这样很容易让别⼈看出来你再做的就是拼接， 因为你原封不动的使⽤了B，你只能通过引⽤来告诉别⼈你的B不是你的。那 么，我们是否可以考虑对B进⾏改进，什么改进都⾏，就是把B改进成B’，那么 你就可以在⽅法介绍⾥说，⾃⼰设计了⼀个B’，⽽不是说成引⽤了B的⽅法。</p></blockquote><h2 id="编故事"><a href="#编故事" class="headerlink" title="编故事"></a>编故事</h2><p>毫⽆疑问的就是，我们A+B+F在指标上有了提升，但有了提升远远是不够的。 但是⼜因为指标上有了提升，那么我们的<strong>A+B+F相⽐A⼀定是多解决了什么问 题的</strong>，⾄于解决了什么问题，其实我们现在也不太清楚。</p><p>因此，这个时候就得编故事了，怎么编呢？这⾥给出⼀些简单的想法，⽐如我 们是加了B和F两个模块，由于B和F⼀定是来⾃于某篇论⽂的，那么我们是否可 以<strong>引⽤B和F论⽂的思想</strong>，即<strong>解决了B论⽂提出的问题</strong>，或<strong>解决了F论⽂提出的问题</strong>，解决的更好了，<strong>亦或者同时解决了B和F两个问题</strong>。更多编故事可查看章节 “如何编个好故事”。</p><p>我们的<strong>基准模型</strong>⼀般是<strong>来源于近两年的某⼀篇顶刊顶会</strong>，并且<strong>A他是⼀个很⼤的东⻄</strong>，占⽐相当于95%吧。⽽未来我们添加的<strong>模块</strong>，⽆论是来源于顶刊顶会，还是来源于⽔刊⽔会，他的<strong>占⽐也就是5%<strong>。什么意思呢？模块⽆论效果好坏，都</strong>很难对我们的基准模型A造成很⼤的实质影响</strong>，即模块的添加不会对A的指标上的数值造成特别⼤的波动，如果<strong>再配合⼀些科研trick，那么基本上就是稳增不降</strong>，实在不⾏再换换模块，基本上配合上 科研trick再换⼏个模块就出来⼀个有效的组合⽅法了。</p><p>很多同学，经常学到了我的这个⽅法之后，会兴奋的跑过去和导师说：我发现 了⼀个A+B+C的⽅法，指标上有了很⼤的提升，我能发论⽂吗？你这种说法， 基本上都要挨批。</p><p>⼀定要记住，我们学术裁缝做的时候是⽤组合的⽅法做，但是说的时候，⽆论是论⽂写作，还是对你导师讲，还是对其他任何⼈讲，都要<strong>先去找到问题</strong>，再 谈你如何做的，⼀定要⽤<strong>科研的思维去包装你的学术裁缝的这个⾏为</strong>。</p><p>如果是⽤了A+B+C学术裁缝做出来的实验，那么就可以使⽤<strong>复刻思想</strong>和<strong>堆叠思想</strong>的两种⽅法。这⾥的B和C特指在B和C论⽂后<strong>改进过的B和C</strong>，即和原来的B、 C是有异同的。</p><p><strong>复刻思想</strong>其实很简单，⼀般我们的模块B和C是来源于某篇⽂章的，这篇⽂章也 ⼀定介绍了B的作⽤，C的作⽤。那我们论⽂的思想，就是复刻这两篇论⽂的思 想，也就是我们发现了B问题，然后通过设计了⼀个⽅法<strong>A+B解决了这个问题</strong>， 相⽐较前⼈解决的更好；同理，也就是我们发现了C问题，然后通过设计了⼀ 个⽅法<strong>A+C解决了这个问题</strong>，相⽐较前⼈解决的更好。 注：基准模型A解决的问题，也可以搬过来⼀起说。</p><p><strong>堆叠思想</strong>就很简单了，即我们不是把B和C分开，⽽是想办法<strong>把B和C揉在⼀起</strong>，<strong>变成⼀个问题</strong>，这个会和下⽂的“强扯问题”很像，但⼜不⼀样。因为这种做法是有参考的，有⽅向的，有理有据的，这种做法也会更 会让你的⽂章上⼀个档次，具体怎么糅合就得看你⾃⼰了。B是为了解决B问题⽽设计的，C是为了解决C问题⽽设计的，然后<strong>B和C放⼀起解决了什么问题</strong>，⽽B和C放⼀起解决的问题就是本⽂的<strong>最核⼼的创新</strong>，甚⾄可以作为标题。堆叠思想是通过裁缝的模块去糅合⼀个问题。</p><p><strong>强扯问题</strong>，就是真正的强扯问题了，即现在我们做了⼀个⽅法，既不是⽤学术 裁缝的⽅法，也不是搞科研的⽅法。说⽩了，现在我们就是有⼀个⽅法，也<strong>不 知道解决了啥问题</strong>，亦或者以前提出的问题创新度不⾼，就可以⽤这⼀招。具 体来说，也很简单，就是⾃⼰去<strong>挖掘你这个领域内的问题</strong>，这个问题可以适当 的<strong>夸张点</strong>，然后<strong>和你的模块匹配上</strong>，只要听上去还不错，好像是那个理，然后能<strong>⾃圆其说</strong>即可。对，就是这么简单，其实真的就是这么简单，不⾏，你⼤可 ⼀试，尤其是准备发⽔刊包毕业的同学。</p><blockquote><p>科研trick，其实原理很简单，就是我们缝模块的时候，有些模块缝上去， 实验效果好，但是不好编故事；有些模块缝上去，实验效果不好，但是好编故 事。因此，我们可以将这两个模块捆绑在⼀起，即本来是A+B+C，那么我把 <strong>B+C说成是⼀个模块D</strong>，也就是我的⽅法变成A+D，然后实验效果有了，故事也 可以编了。⾄于D是不是B和C的组合，除了⾃⼰⼼⾥清楚，还有谁清楚？</p></blockquote><h3 id="编故事举例"><a href="#编故事举例" class="headerlink" title="编故事举例"></a>编故事举例</h3><p>\和领域⽆关，只要认真看完，你不是这个领域的也能看懂作者在做⼀件什么样 的事情，其实这就是我们⼀直着重介绍的学术裁缝，希望也能通过这个告诉你 们，学术裁缝也能发顶刊，但是得看你如何编。为了看这篇⽂章如何编⼀个好 故事的，我们⾸先来看下这篇⽂章的摘要，英⽂的摘要写的太⽜逼了，我们直 接看翻译版本的：</p><p>近年来，配对图像和句⼦的⼤规模数据集在⾃动⽣成图像描述（即图像字幕） ⽅⾯取得了显著成功。然⽽，在每个领域中收集⾜够数量的成对图像和句⼦是 劳动密集型和耗时的。将在具有成对图像和句⼦的现有域（即源域）中训练的 图像字幕模型转移到仅具有未配对数据的新域（即⽬标域）可能是有益的。<strong>在本⽂中，我们提出了⼀种利⽤跨模态检索模型的跨域图像字幕的跨模态检索辅 助⽅法以在⽬标域中⽣成图像和句⼦的伪对，以促进字幕模型的⾃适应。</strong>为了 学习⽬标域中图像和句⼦之间的相关性， <strong>我们提出了⼀种迭代跨模态检索过 程，其中⾸先使⽤源域数据预训练跨模态检索模型，然后将其应⽤于⽬标域数 据，以获取⼀组初始的伪图像句⼦对。</strong>通过使⽤伪图像语句对迭代地微调检索 模型并使⽤检索模型更新伪图像语句，来进⼀步细化伪图像语句配对。为了使 在源域中学习的句⼦的语⾔模式很好地适应⽬标域，我们提出了⼀种⾃适应图 像字幕模型，该模型具有使⽤精化的伪图像句⼦对进⾏微调的⾃注意机制。在 使⽤MSCOCO作为源域和使⽤五个不同数据集（Flickr30k、TGIF、CUB-200、 Oxford-102和Conceptal）作为⽬标域的⼏种设置上的实验结果表明，与最先 进的⽅法相⽐，我们的⽅法取得了更好或可⽐的性能。我们还将我们的⽅法扩 展到跨域视频字幕，其中MSR-VTT⽤作源域，另外两个数据集（MSVD和 Charades字幕）⽤作⽬标域，以进⼀步证明我们⽅法的有效性。</p><p><img src="/./../images/image-20240707215125821.png" alt="image-20240707215125821"></p><p>可以把这篇论⽂分为两个部分，其中第⼀部分如下图所示，这⼀部分实则早就 有⼈做过，只不过本⽂作者把LSTM替换成了GRU，当然还有没有做其他⼩的 改进，没有细看，也不重要。<img src="/./../images/image-20240707215259085.png" alt="image-20240707215259085" style="zoom:80%;"></p><p>其中第二部分如下图所示，也是⼀个现有的技术，只是本⽂作者做了红框中的 ⼀个改进，这个改进乍⼀看也⾮常⽜逼，但是实则，我讲⼀下你就懂了。</p><img src="/./../images/image-20240707215404846.png" alt="image-20240707215404846" style="zoom:67%;"><p>这个改进是什么呢？我们来看下图，传统的LSTM的做法是LSTM cell –&gt; LSTM cell –&gt; …… –&gt; LSTM cell串联，传统的BERT的做法是 Self-attention –&gt; Self attention –&gt; …… –&gt; Self-attention串联，现在作者的做法是，Self-attention –&gt; LSTM cell –&gt; Self-attention –&gt; LSTM cell –&gt; …… –&gt; Self-attention –&gt; LSTM cell，即<strong>交叉串联</strong>。这种交叉串联其实也是早就被其他⼈在其他的领域⽤过的⼀个⽅法。</p><p>找了两个⼤的模块A和B拼在⼀起，然后把 A内部的LSTM替换成了GRU，把<strong>B内部的LSTM替换成了LSTM+Attention的交叉串联</strong>。单轮这种技术的实现，想必每⼀个有着⼀年基础的Ai的学⽣都能实现，甚⾄你的做法⽐他还⾼⼤上，你⾃⼰还提出了什么真正的纯新的技术，但为什么你发不了顶刊？你可以再看看别⼈摘要⾥写的那段话： 在本⽂中，我们提出了⼀种利⽤跨模态检索模型的跨域图像字幕的跨模态检索辅助⽅法以在⽬标域中⽣成图像和句⼦的伪对，以促进字幕模型的⾃适应。为了学习⽬标域中 图像和句⼦之间的相关性， 我们提出了⼀种迭代跨模态检索过程，其中⾸先使⽤源域数据预训练跨模态检索模型，然后将其应⽤于⽬标域数据，以获取⼀组初始的伪图像句⼦对。你能编出这么<strong>完美的⼀个故事</strong>吗？当然，如果你仔细研究过IEEE顶刊的作者挂名，也会发现⼀个既定的事实，你有⼈帮你撑腰吗？</p><h3 id="好对比"><a href="#好对比" class="headerlink" title="好对比"></a>好对比</h3><p><img src="/./../images/image-20240708133947266.png" alt="image-20240708133947266"></p><p>此外，我们再来看看这篇论⽂的对⽐模型，这篇论⽂是2020年5⽉1⽇提交论⽂ 到顶刊的。我们来看看他的5个对⽐模型，作为2020年5⽉1⽇提交的论⽂，反 正我2022年5⽉也提交过⼀篇论⽂到这个期刊，拒稿的原因就是<strong>我的⽐较模型过旧</strong>，还<strong>应该拿出⼀篇2023年的论⽂进⾏⽐较</strong>，我寻思着我还找了3篇去年的 顶刊顶会呢？在这⾥想说明两个点：</p><ol><li>审稿需要运⽓；</li><li>你能相信2019年总共就两篇顶刊顶会的论⽂吗？⼀定不是，那么我们就可 以将军⾥⾯挑矮⼦了。</li></ol><pre><code> DCC [32] (2016) CVPR SAdT [7] (2017) ICCV DL [34] (2017) ACM conf MLADIC [35] (2019) ITMM Graph-Enc-Dec [22] 2019 ICCV</code></pre><img src="/./../images/image-20240708134229459.png" alt="image-20240708134229459" style="zoom:67%;"><img src="/./../images/image-20240708134249282.png" alt="image-20240708134249282" style="zoom:50%;"><p>最后，其中MLADIC这篇论⽂可以通过下图的图⽚看到，<strong>早在2018年就被接收且在线发表了，⽽作者引⽤了他19年正式出版的引⽤</strong>，这不就是⼀个科研trick 吗？我们未来引⽤的时候，可以找⼀些正式出版⽐较慢的顶刊，可能这篇论⽂ 早就被发表了，那么他的性能必然是不太好的，但是我们引⽤的时候引⽤了最 新的⽇期，即<strong>看起来是⼀篇很新的论⽂</strong>。<img src="/./../images/image-20240708134525013.png" alt="image-20240708134525013" style="zoom:67%;"></p><blockquote><p>这篇顶刊从未涉及任何学术不端啥的，通过这篇论⽂是想让⼤家可 以借鉴他的写作⼿法，对⽐模型的⽅法，这才是很重要的，⽽不是去钻⽜⻆ 尖。⼀定要记住，想发好的⽂章，性能⼀定要有，但只是⼀个⽅⾯⽽已，写作 能⼒很重要，还有很重要的就是各式各样的科研trick，</p></blockquote><h1 id="开题答辩"><a href="#开题答辩" class="headerlink" title="开题答辩"></a>开题答辩</h1><p>他⽤这个技术做他的那个⽅向可不可以，实则这就是开题答辩的作⽤。也就是说，开题答辩是你⾃⼰写⼀份开题报 告，然后做⼀个ppt去描述你未来要做什么，⽤什么技术做什么，然后下⾯⼀堆专家听了你的讲述后，需要去帮你确定你定的⽅向，<strong>未来可不可⾏</strong>，需不需要进⾏调整。</p><blockquote><p>莫当真，你就尽管讲你的就好，他们说他们的就好，绝⼤多数导师连⾃ ⼰学⽣做啥，做的什么可⾏不可⾏都不知道，还有⼼思管你，说⽩了，就是上 ⾯把形式做⾜，你把形式⾛⾜即可。</p></blockquote><p>开题报告⼀定不要实事求是。因为开题答辩报告的是你未来要做的⽅向，⾄于你未来是否真的能把这个做出来，你导师不关⼼，答辩台下的⽼师们也不关⼼，那为什么你还要客观事实求是的去讲呢？⽆⾮就是让别⼈看懂了，说你做的东⻄怎么这么简单。</p><blockquote><p>开题报告稍微夸张点，多编点故事，⾄于最后毕业⼤论⽂的时候，能不能做出 来也不是特别重要，毕竟你开题后就能保证⾃⼰开题的东⻄就⼀定能做出来， 怕是叫诸葛亮过来，他都不敢保证吧。并且，最重要的⼀点，你的开题报告只 是作为案底留着，但不会上传到互联⽹，因此也不会查重。多的不能再说了，</p></blockquote><h1 id="小论文三个小实验"><a href="#小论文三个小实验" class="headerlink" title="小论文三个小实验"></a>小论文三个小实验</h1><p>实验总的来说就是把三个实验做好，通过<strong>对⽐试验</strong>在指标层⾯证明你做的东⻄ 整体达到了近⼏年⽐较优秀的⽔平；通过<strong>消融实验</strong>证明你做的东⻄内部的每个 结构都是合理且有效的；<strong>实例分析</strong>证明你做的东⻄不仅仅在指标上有效，在实 际应⽤上也是⾮常有效的。</p><h2 id="对比实验"><a href="#对比实验" class="headerlink" title="对比实验"></a>对比实验</h2><p>如果你使⽤的裁缝的思想做了 ⼀个C&#x3D;Baseline+A+B，那么对于你需要<strong>证明的就是C的性能</strong>，也就是你所有东 ⻄拼在⼀起后的性能。</p><p>对⽐试验做起来也很简单，就是通过你们领域⼀些<strong>通⽤的指标</strong>（随便找⼏篇顶 刊顶会就知道是什么通⽤的指标了）进⾏⽐较，⻔道其实也就在这个找和⽐较 上⾯了。</p><ol><li>⾸先找论⽂⼀定是按照你的⽬标论⽂级别找的</li><li>顶刊顶会      –》和近三年的顶刊顶会⽐较</li><li>⼀区（国内顶级核⼼、顶会）    –》和近⼀年的⼀区、顶刊顶会，去年的顶刊顶 会，前年的顶刊顶会⽐较</li><li>⼆区（国内中等核⼼、中等会议）–》和近⼀年的⼀区、⼆区，去年的⼀区、 顶刊顶会，前年的顶刊顶会⽐较</li><li>三区（国内垃圾核⼼、低等会议）–》和近⼀年的⼆区、三区，去年的⼀区、 顶刊顶会，前年的顶刊顶会⽐较</li><li>四区（⽔刊、⽔会）          –》和近⼀年的三区、四区，去年的⼀区、⼆区、顶刊顶 会，前年的顶刊顶会⽐较</li><li>普刊和EI会议               –》随意，对⽐模型是篇论⽂就⾏，甚⾄只要你想，都不需要对⽐ 试验</li></ol><p>除了普刊和EI会议，⽆论你发什么级别的SCI，都<strong>必须拿上⼏篇顶刊顶会的论⽂来⽐较</strong>，此外就是要<strong>超过去年⽐你这个级别更⾼的期刊的论⽂</strong>，然后 如果今年你们这个领域论⽂出来了，那尽量也要加上⼀两篇今年的论⽂，⽆论级别，因为很多审稿专家不仅看对⽐论⽂的级别，还会看对⽐论⽂的年份。但是⼀定要注意的是，这仅仅是参考，如果你发个三、四区，对⽐试验能吊打近 两年的sota（即性能最好的顶刊顶会），那⼀定会提⾼你论⽂的接受率，因此，教⼤家⼀个⼩trick，怎么吊打sota。</p><h3 id="挑选SOTA"><a href="#挑选SOTA" class="headerlink" title="挑选SOTA"></a>挑选SOTA</h3><p>说⽐不过近两年的sota，即性能⽐较好的论⽂怎么办，其实很简单， 你要知道，sota这个东⻄是个很虚的东⻄，⼈⼈都说⾃⼰是sota，什么叫 sota，近两年性能最好的顶刊顶会，那么是否存在⼀个可能，有⼀个顶刊的论⽂特别⽜，但是你从未看到过这篇论⽂（是，我知道你看过了，但是你就不能 假装你没看到吗？只要你不说你看到过，谁知道你看到过没看到过）。到这就⾮常简单了，你尽量去把你这领域近两年所有的顶刊顶会的⽂章找出来，然后将<strong>军⾥挑矮⼦</strong>，<strong>你挑性能最差的顶刊顶会</strong>，<strong>和你的⽅法进⾏对⽐试验</strong>。其实， 这⾥补充⼀个真相，⼀般很多<strong>性能差的顶刊顶会他的贡献点不在性能这⼀块</strong>， 但是你就不能假装你不知道这⼀点吗？你只是单纯的看了这篇论⽂的最后的性能这⼀部分⽽已，⽽且我不和你说，你估计也不知道。</p><blockquote><p>你做对⽐试验的时候，只是客观实事求是的表达⾃⼰顶刊顶会进⾏了性能对 ⽐，并没有多说⼀句——我挑了近⼏年最最最优秀的模型和我们⽐较。即使你 说了这句话，优秀⼆字还不是你来定义，通过你定义的优秀然后筛选掉真正优 秀的⽂章，这就是⽔顶刊顶会的基本功了</p></blockquote><h3 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h3><p>⼀般获取对⽐论⽂结果的时候，以他们论⽂⾥的为准，也就是他们论⽂⾥写了多少，你就跟着填多少。如果这篇论⽂⾥没有你这个数据集的结果，你⼜⾮常 想和他⽐较，可以⾃⼰复现他的⽅法跑你的数据集，此时有⼀个科研trick，因为是⽤他的⽅法跑你的数据集，<strong>你可以改变实验参数，说⽩了，找个差⼀点的 参数结果，你不说，没⼈知道你跑过什么更好的参数</strong>。</p><p>这⾥还有⼀个科研trick，如果你复现过某篇论⽂，但是你<strong>复现的结果低于论⽂⾥的结果</strong>（单纯复现的时候必须使⽤原作者给的参数等等，即你不能对⼈家的 ⽅法试验参数改动⼀丝⼀毫），那就以你复现的为准，也就是说，如果你⽐不过某篇论⽂的结果，可以尝试着复现下，<strong>如果复现结果偏低，那就以你复现的 结果为准</strong>， 这个时候你只需要再在论⽂⾥附上⼀句，<strong>部分论⽂的结果是你复现 的结果即可</strong>。当然，可以部分论⽂采⽤原论⽂的结果，部分论⽂采⽤复现的结 果，别太⽼实⼈，没有⼈知道那篇论⽂是否能复现出来。</p><h3 id="无通用指标"><a href="#无通用指标" class="headerlink" title="无通用指标"></a>无通用指标</h3><p>⼀般可以借鉴相似领域的，⽐如诗歌⽣成借鉴词曲⽣成的，如果连相似领域都没有。这就很好办了，继续造航⺟，⾃⼰模仿⼀ 些类似任务的指标构造⽅法进⾏构造，如果你真的要这样做，如果你是研⼀ 的，真的劝退。如果退不了，怎么构造呢？就是去找⼏篇类似任务的论⽂，然 后看看这些论⽂⾥有什么指标可以参考，再去找到以构造你这个可参考的指标 为⼯作的原论⽂，然后尽量模仿，稍有异同就好。</p><h3 id="无论文"><a href="#无论文" class="headerlink" title="无论文"></a>无论文</h3><p>没有对⽐的论⽂，其实做法更简单，<strong>挑⼏个更基础更简单的⽅法</strong>，然后⾃⼰跑⼀跑，<strong>和这些基础简单的⽅法对⽐</strong>即可。当然咯，最好的⽅法是你可以挑⼏个听起来很⾼⼤上，但是实验性能很⼀般的⽅法和你⽐较。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>C&#x3D;Baseline+A+B，Baseline⼀般就是别⼈的，A和B是你⾃⼰的⼯作量，那么 你就是要证明在Baseline上<strong>单独加上A</strong>后性能有了提升，<strong>单独加上了B</strong>后性能有 了提升，<strong>⼀起加上了A和B</strong>性能有了提升。</p><p>如果你⽤的不是裁缝的思想，就是⾃⼰想办法把你做的东⻄分块成A、B、C， 然后说清楚A、B、C分别解决了什么问题，⼀般A、B、C都是常⻅的领域内模 块或者你设计的模块，那么就是A+B+C⽐A、B、C、A+B、A+C、A+B要好。</p><p>A就是⼀个不可分割的实体，B、C都是可分割的⼩组件，⼀般A的体量 远⼤于B和C，消融实验就是要把⼩组件消融掉。这⾥附⼀个⼩trick，⼀个不可分割的实体⼤⼩A，其实⼀定程度由你决定，⼀般如何分割，没有硬性要求， 那你就怎么分割有利，怎么来。</p><p>⾸先讲⼤家最常碰到的⼀个情况吧，<strong>C&#x3D;Baseline+A+B</strong>，当我们做消融实验时， ⼀起加上A+B有了提升，但是单独的加上A或者单独的加上B是负提升，其实， 只要稍微拐个弯就⾏了，既然加上A是负提升，那么我是否可以把<strong>A+B看成⼀个 整体a</strong>，也就是我们<strong>C&#x3D;Baseline+a</strong>，你要清楚地是，审稿专家可以不知道你的a 是A+B，你说他们是⼀个整体，那他们就是⼀个整体。</p><p>因为机器学习的底层理论——模型每次找到的是局部最优解，⽽⽆法找到全局最优解，且模型⼀旦变动了，局部最优解寻找的⽅法也会随之改变，即需要调不同的参数来找到更优解。也进⽽导致了Baseline+A、Baseline+B、 Baseline+A+B这四种⽅法在进⾏实验的时候，是不需要共⽤⼀套参数的，那么问题就来了，对于<strong>Baseline+A+B⽤最好的参数，Baseline+A⽤稍微普通的参 数，Baseline+B⽤最差的参数只要保证能超过Baseline即可</strong>。也就是说，你只要保证Baseline+A、Baseline+B、Baseline+A+B都超过Baseline，然后 Baseline+A、Baseline+B、Baseline+A+B三者内部的⽐较，可以通过不使⽤同⼀套参数的bug，⾃⼰选择性的调参，⾄于Baseline+A+B是否⽤了最好的参数，Baseline+B是否⽤了最差的参数，你不说，⻤知道呢？即使别⼈跑出来了更好的，顶多也就是你没往那个⽅向尝试，这是你复现别⼈代码常有的事，改改别⼈⽅法的参数效果就⽐别⼈⽅法原来的结果好了。</p><p>为什么不能给Baseline调参呢？因为Baseline⼤都是来源于他⼈的论⽂， <strong>你不能对别⼈的论⽂动⼑</strong>，⽽且⼀定是默认别⼈的论⽂就是把参数调到了极致 <strong>找到了他能找到的最优解</strong>。因此，还有科研trick，你对Baseline做⼀定的改动，什么改动就⾏，只要做了改动变成了Baseline’，那Baseline’就是你⾃⼰的 模型了，你就可以通过调参的⽅法来使其达到你想要的那个性能。</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>对⽐试验、消融实验都是指标上的对⽐，即表格。如果是<strong>偏应⽤的领域</strong>，⼀定要加上<strong>形象⽣动的结果图</strong>，即实例分析其实就是<strong>通过图⽚的形式体现出你的⽅ 法的优越性</strong>，⼀般这种<strong>对⽐更多的就是很普通的消融实验</strong>，即Baseline+A+B和 Baseline⽐，不⽤太复杂。值得⼀提的是，现在太卷了，消融实验很多⼈都会 放上图来形象化的展示。</p><p>⼀般就是放<strong>2或4个实例</strong>，以4举例，说⽩了就是找<strong>4个数据</strong>，然后⽤Baseline和 C&#x3D;Baseline+A+B<strong>分别跑这个4个数据</strong>，通过<strong>图⽚的形式展示这个结果</strong>，然后通过⼀些<strong>⾮专业术语说清楚你做的C的优越性</strong>。 </p><p>这⾥也有很⼤的操作空间，⼀般我们的数据集都是1000往上，因此我们可以说 我们随机挑选了4个数据，做了实例分析。⾄于这个随机，有没有⼀种可能，我就是命好，真的随机到了最好的4个最好的结果，说⽩了，<strong>对⽐试验将军⾥挑矮⼦</strong>，<strong>实例分析矮⼦⾥挑将军</strong>，再说⽩点，对⼀切可以挑选、可以随机的事物， 怎么有利怎么来！</p><blockquote><p>说⽩了就是很多东⻄怎么有利怎么来，⽽不是怎 么绝对正确怎么来，当然咯，很多事情他是很难绝对正确的才有漏洞可钻。即 使你做了，但是你不说你做了，⻤才知道你做没做，不清楚和没做过⼀点都不 违规，更直⽩点，只要确保我们未来论⽂⾥⾯写的⼀切都是绝对正确的就好， 但是写啥不写啥完全是由你个⼈意志决定的，⾄于漏写了啥很⼤程度是由审稿 ⼈来决定的，爱因斯坦也很难保证相对论⾥的每个点都到位了，每个⼈的知识 都是局限的。我还只是说了⼀部分简单的科研trick，还有各种各样花式trick能 打破你的认知，也许未来会出个专辑专⻔讲讲这件事。</p></blockquote><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>下图是⼀篇20年的顶会模型图，其实放在当时，可能还是挺新颖的，实则也就 是当年常⻅模块的堆叠（① + ② + ③），但他并不是我们今天的主⻆。</p><img src="/./../images/image-20240706100649536.png" alt="image-20240706100649536" style="zoom:67%;"><p>再来看下图⼀篇23年的⼀区top顶刊，这才是真正的主⻆。<img src="/./../images/image-20240706100842887.png" alt="image-20240706100842887"></p><p>他们到底有什么区别呢？两篇论⽂①和②简直就可以说成是⼀模⼀样的东⻄， 只是⼀个Attention这样画的，⼀个Attention那样画的。那23年的顶刊到底做 了什么创新呢？如下图所示，23年的顶刊第⼀个创新是：把20年的顶会的第三 部分从当年常⻅的cross-attention变成如今常⻅的co-attention；第⼆个创新 是：把cross-attention的输出从合并变成了拆分，并去掉了1d CNN。<img src="/./../images/image-20240706101015722.png" alt="image-20240706101015722" style="zoom:67%;"></p><p>这篇论⽂的这种做法，只要是⼀个Ai的学⽣，相信没有哪个看不懂的，甚⾄你 不是Ai的，你也⼤概能看懂他的这种骚操作，实际做法并不难。那为什么这种 做法能发顶刊，你却不能呢？不做评价，⾄少别⼈编故事的⽔平还是很⾼超的</p><h1 id="小论文三张图"><a href="#小论文三张图" class="headerlink" title="小论文三张图"></a>小论文三张图</h1><h2 id="摘要图"><a href="#摘要图" class="headerlink" title="摘要图"></a>摘要图</h2><blockquote><p>很多⼈都喜欢在摘要⾥，通过抽象的语句描述你遇到的问题和你想要解决的问 题，这种做法会让审稿专家很厌烦，没⼈想看⼀堆很抽象的⽂字。</p></blockquote><p>这也就是我 们的第⼀张图的作⽤，要放在摘要，去形象具体的描述你的问题，让别⼈看到 这张图就知道你想⼲什么，例如这张图就很清晰的告诉别⼈我们的模型可以通 过帧选择去除冗余帧<img src="/./../images/image-20240706151544383.png" alt="image-20240706151544383" style="zoom:67%;"></p><h2 id="方法图"><a href="#方法图" class="headerlink" title="方法图"></a>方法图</h2><p>第⼆张图就是你的<strong>模型框架图</strong>，这个就不⽤我细说了吧，就是对你做的⽅法的 细节的演示。这⾥多说⼀嘴，下图的<strong>框架图过于复杂</strong>了，因此，可以考虑弄⼀ 个缩略的框架图，即只考虑数据流的运转，⽽不要把模型的细节全部绘制出 来。也是说<strong>复杂的⽅法图应该⽤两张图来表示</strong>，第⼀张是缩略图，不绘制细 节，只说清楚<strong>数据流的过程</strong>；第⼆张就是对<strong>缩略图的扩展</strong>，绘制细节。<img src="/./../images/image-20240706151759256.png" alt="image-20240706151759256" style="zoom:67%;"></p><blockquote><p>对于这种框架图的绘制，两种⼯具推荐，visio和亿图图示：<a href="https://www.edrawmax.cn/online/zh/">亿图图示在线 (edrawmax.cn)</a></p></blockquote><h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p>最后，就是我们的第三张图，很多⼈会通过⼀张表格和最近⼏年的模型对⽐， 体现⾃⼰模型的优越性</p><p><img src="/./../images/image-20240707105321060.png" alt="image-20240707105321060"></p><p>我们更需要挑⼏个<strong>实例</strong>，然后通过⼀幅可视化的图来体现我们的模型的 效果很好</p><p><img src="/./../images/image-20240707105417849.png" alt="image-20240707105417849"></p><blockquote><p>上述这三张必不可少，摘要图告诉别⼈你在做什么；⽅ 法图告诉别⼈你怎么做的；总结图告诉别⼈你做的效果怎么样，其余的图看⾃ ⼰情况补充</p></blockquote><h1 id="小论文写法"><a href="#小论文写法" class="headerlink" title="小论文写法"></a>小论文写法</h1><p>在写⼩论⽂之前，⼀定要<strong>定位⽬标期刊</strong>，因为我们前⽂说到论⽂其实是在和审稿⼈博弈。</p><p>⽽我们只要定位了⽬标期刊，然后<strong>找出该期刊往年的我们领域的所有论⽂</strong>，只要<strong>仿着这些论⽂写</strong>，<strong>他们有的你都写上，他们没有的你就不写</strong>。这样做的话，很有 可能在这个论⽂⼝味上就符合了这些审稿⼈的⼝味，因为往年的论⽂⼤概率就 是那些审稿⼈审的稿，按照他们的要求改的稿。</p><p>亦或者你定位的⽬标期刊 <strong>往年没有⼏篇你们领域的论⽂</strong>。这样你就要<strong>找⼏篇顶刊顶会的论⽂</strong>，然后<strong>仿</strong>着他们的写，<strong>他们有的你都要有</strong>。</p><p>当你找到了⼏篇往年的论⽂之后，写论⽂其实就是很简单的⼀件事，就是<strong>纯模仿</strong>，<strong>他们有的你就加上，他们没有的你屁话都不要多放⼀句</strong>。然后对于<strong>很多共 通的地⽅，就是这⾥抄⼀点，那⾥抄⼀点，然后降重</strong>。</p><p>他们放了什么样的图，放了什么样的表格，你就放什么样的图，什么样的表 格。他们⼀篇论⽂分成了⼏个部分，你就分成⼏个部分，他们的论⽂这个部分 是按照什么样的逻辑写的，你就要按照什么样的逻辑写的。</p><blockquote><p>写论⽂⼀定要切记 ⾃我意淫，写论⽂⼀定要切记⾃我意淫，写论⽂⼀定要切记⾃我意淫。</p></blockquote><blockquote><p>⼩论⽂⼀定要注意排版不要出问题，学术圈很忌讳这个细节。</p></blockquote><p>对于很多需要论⽂翻译的同学，⼀般SCI四区，说实话，百度翻译都够⽤了，当 然咯，现在gpt也出来了，还是要⽤gpt润⾊下的。</p><p>SCI⼆三区，是⼀定要⽤gpt润⾊的，并且有些⼆区对于英⽂的要求还是挺⾼ 的，就需要⽤gpt润⾊后⾃⼰再看看，或者找个英语还过得去的看看。 对于SCI⼀区往上，它们对英⽂的要求还是蛮⾼的，说⽩了就是⽤地道英语，写 出来让英语不是特别好的⼈都看不懂再写啥。这种尽量去找英⽂润⾊机构帮 忙，或者⾃⼰的导师有这样的实⼒也⾏。</p><p>⼀篇⼩论⽂，最有可能会<strong>⼤量重复的就是相关⼯作</strong>那⾥，但是相关⼯作，你⾃⼰去把把<strong>引⽤的论⽂的摘要或总结拔下来</strong>，然后⾃⼰<strong>找点重点句填进去</strong>，基本<strong>也很难和其他⼈重复</strong>。如果你这⼀句话真的是摘抄别⼈的⼀ 段话，<strong>完全可以通过gpt降个重</strong>，说⽩了就是先缩写再扩写，然后⾃⼰捋顺⼀ 下。 我上⾯说了那么多想表达什么意思，⼀篇⼩论⽂，能抄的东⻄并不多。</p><p>因为⼩论⽂的核⼼是去<strong>描述你的创新</strong>，⽽不是和⼤论⽂⼀样去描述你的⼯作量，也就是⼩论⽂<strong>突出的是你的创新的部分</strong>。说⽩了，当你的⼩论⽂还需要不⾃信到通过查重⼯具去查重，总是关⼼是否重复率过⾼，我只能说，你这篇⽂章拒稿的 概率应该是⾮常⼤的，除⾮你投Ei会议和普刊。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>研究生读研，<strong>少问多做</strong>，遇到问题百度+GPT+<strong>思考</strong></p><p>当你被push后再明修栈道暗度陈仓，有些导师会以你笨。对你⼈身攻击，能忍则忍，毕竟现在忍不了，以后社会也会教会你这些，就当提前磨练了。但是别忍出病来了，感觉有点受不了了，找辅导员聊聊。</p><p>天下从不会掉⼤饼，感觉⾃⼰得到能得到诺⼤的好处的时候，多掂量下⾃⼰⼏ ⽄⼏两，就不容陷⼊画饼的怪圈中。但是⼀旦被画⼤饼，被push和pua后，⼀ 定要想办法救⾃⼰，示弱、明修栈道暗度陈仓以及万事不得以后的⽃争，⼀定要努⼒让⾃⼰站在舆论的最上⽅，即你该做的，能做的都已经做过了。</p><p>记住，研究⽣培养计划就相当于你的卖身契，达到特定要求才能 把你放出去，即研究⽣培养计划外的内容都是扯淡，例如，课题组的要求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;推荐b站导师&quot;&gt;&lt;a href=&quot;#推荐b站导师&quot; class=&quot;headerlink&quot; title=&quot;推荐b站导师&quot;&gt;&lt;/a&gt;推荐b站导师&lt;/h1&gt;&lt;p&gt;怎么水论文？研究生哈哈&lt;/p&gt;
&lt;p&gt;IEEE那几个顶刊如果作者不挂fellow或者senior。大概率秒拒</summary>
      
    
    
    
    <category term="AI" scheme="https://pa1r0t.github.io/categories/AI/"/>
    
    <category term="论文" scheme="https://pa1r0t.github.io/categories/AI/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>期刊介绍</title>
    <link href="https://pa1r0t.github.io/2024/06/29/%E6%9C%9F%E5%88%8A%E4%BB%8B%E7%BB%8D/"/>
    <id>https://pa1r0t.github.io/2024/06/29/%E6%9C%9F%E5%88%8A%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-06-29T02:42:44.000Z</published>
    <updated>2024-07-07T03:20:34.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何查询期刊"><a href="#如何查询期刊" class="headerlink" title="如何查询期刊"></a>如何查询期刊</h1><h4 id="查询中文期刊用知网："><a href="#查询中文期刊用知网：" class="headerlink" title="查询中文期刊用知网："></a>查询中文期刊用知网：</h4><p>学校登录：<a href="https://fsso.cnki.net/">中国知网高校&#x2F;机构外部访问系统 (cnki.net)</a></p><p>期刊导航：<a href="https://navi.cnki.net/knavi/#">出版来源导航 (cnki.net)</a></p><img src="/./../images/image-20240629111920995.png" alt="image-20240629111920995" style="zoom:67%;"><h4 id="查询sci（外文）："><a href="#查询sci（外文）：" class="headerlink" title="查询sci（外文）："></a>查询sci（外文）：</h4><p>地址1：<a href="https://www.letpub.com.cn/index.php?page=./journalapp">最新SCI期刊影响因子查询及投稿分析系统（2022-2023年）- LetPub</a></p><p>地址2：<a href="https://muchong.com/bbs/">小木虫论坛-学术科研互动平台 (muchong.com)</a>（一般不用）</p><img src="/./../images/image-20240630150210540.png" alt="image-20240630150210540" style="zoom:67%;"><h4 id="查询计算机CCF评级的期刊会议"><a href="#查询计算机CCF评级的期刊会议" class="headerlink" title="查询计算机CCF评级的期刊会议"></a>查询计算机CCF评级的期刊会议</h4><p>地址：<a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/">CCF推荐国际学术刊物目录-中国计算机学会</a></p><p><strong>A+会议就是传说中的顶会</strong></p><hr><h1 id="期刊分级"><a href="#期刊分级" class="headerlink" title="期刊分级"></a>期刊分级</h1><h2 id="按刊号所属地划分"><a href="#按刊号所属地划分" class="headerlink" title="按刊号所属地划分"></a>按刊号所属地划分</h2><p>CN:国内刊号</p><p>ISSN:国外刊号</p><p>《自动化学报》</p><img src="/./../images/image-20240630151256950.png" alt="image-20240630151256950" style="zoom:67%;"><p>ISSN刊号很容易申请，所以一般具有CN的国内期刊都会申请一个ISSN刊号。</p><h2 id="按地域划分"><a href="#按地域划分" class="headerlink" title="按地域划分"></a>按地域划分</h2><p>划分为国家级和省级，一般没有明确规定，都是约定俗成</p><p>国家级指国家级单位主管主办，例如《基础教育》由中华人民共和国教育部主管主办</p><p>省级一般指各省、自治区等省级部门主管主办的刊物，例如《江西社会科学》，由江西省社会科学院主管主办</p><hr><h1 id="核心期刊"><a href="#核心期刊" class="headerlink" title="核心期刊"></a>核心期刊</h1><h2 id="国内核心"><a href="#国内核心" class="headerlink" title="国内核心"></a>国内核心</h2><p>核心来源一般由七大核心期刊，一般搜索期刊就会出现期刊属于哪个核心。<img src="/./../images/image-20240630185039990.png" alt="image-20240630185039990" style="zoom:67%;"></p><ul><li>北大核心（北大中文核心）   ————普及最广</li><li>南大核心（中文社会科学引文索引（CSSCI）来源期刊） ————最权威</li><li>科技核心（中国科技论文统计源期刊（CSTPCD））     ————知网不标注，医药机构的科核</li><li>CSCD（中国科学引文数据库） ————理科</li><li>人文社科核心（中国社会科学核心期刊（CHSSCD））</li></ul><blockquote><p>不同的学校对核心的认同不同。投论文时要注意</p></blockquote><p>想搞科研，往领域内最好的核心期刊投，sci</p><p>最好期刊：《自动化学报》《计算机学报》《研究发展》</p><p>不想读博，一般是某某大学学报</p><h2 id="国际核心"><a href="#国际核心" class="headerlink" title="国际核心"></a>国际核心</h2><ul><li>SCI(科学引文索引)<ol><li>理工科类</li><li>JCR划分（Q1、Q2、Q3、Q4，各25%）</li><li>按中科院划分（一区（5%）、二区（6-20%）、三区（21-50%）、四区（51-100%））</li></ol></li><li>SSCI（社会科学引文索引）    —————属于社会科学</li><li>A&amp;HCI（艺术人文引文索引）    ————艺术类</li><li>EI（工程索引）</li></ul><h2 id="ESCI、SCI和SCIE的区别"><a href="#ESCI、SCI和SCIE的区别" class="headerlink" title="ESCI、SCI和SCIE的区别"></a>ESCI、SCI和SCIE的区别</h2><p><strong>ESCI仅满⾜了SCI收录的第⼀级标准</strong>，如果满⾜了SCI的所有标准后可以被SCI收 录，⼤家可以理解ESCI期刊是通往SCI的预备阶段。 <strong>⼀般学校不承认ESCI期刊</strong></p><p>SCI-E是SCI的扩展版，⽬前SCI收录期刊3600多种，SCIE收录期刊6000多种， 被SCI收录的期刊应该都被SCI-E收，但反之却不成⽴。<strong>SCI是核⼼版，SCIE是⾮核⼼版</strong>，<strong>SCI⽐SCIE更重</strong>要；SCIE是⽹络版，SCI是纸质版。 <strong>⼀般学校都会承认SCIE</strong></p><h2 id="国际会议核心（ISTP、EI）"><a href="#国际会议核心（ISTP、EI）" class="headerlink" title="国际会议核心（ISTP、EI）"></a>国际会议核心（ISTP、EI）</h2><p>就是世界各地不定期举办的学术研讨会，针对某个会议主题面向世界征文，后面以此次会议名称为刊名，以会议论文集的形式出版，并递交EI-CA或ISTP数据库检索。</p><ul><li>CPCI&#x2F;ISTP（科技会议录索引）————知名度不高</li><li>EI会议（理工科类会议索引）</li></ul><p>部分学校不认可会议，EI会议会被认为给钱就就行。</p><p>如果研究生认可，可以发这个保底毕业（一般来说给钱就中）</p><h2 id="普刊"><a href="#普刊" class="headerlink" title="普刊"></a>普刊</h2><p>不是核心就是普刊</p><p>机构买论文绝大多数是用钱打通审稿人的关系，这就是市场上核心难投，水刊难投的原因</p><h2 id="顶刊、权威、A、B、C、D类（学校内部期刊评级）"><a href="#顶刊、权威、A、B、C、D类（学校内部期刊评级）" class="headerlink" title="顶刊、权威、A、B、C、D类（学校内部期刊评级）"></a>顶刊、权威、A、B、C、D类（学校内部期刊评级）</h2><h3 id="什么是顶刊"><a href="#什么是顶刊" class="headerlink" title="什么是顶刊"></a>什么是顶刊</h3><p>一般指sci一区top，以letpub搜索的nature为例，会给出是否为top期刊</p><p>学校也有期刊的内部评级，一般找辅导员要就行</p><h3 id="计算机领域特有的期刊评级（CCF）"><a href="#计算机领域特有的期刊评级（CCF）" class="headerlink" title="计算机领域特有的期刊评级（CCF）"></a>计算机领域特有的期刊评级（CCF）</h3><h4 id="CCF和SCI区别"><a href="#CCF和SCI区别" class="headerlink" title="CCF和SCI区别"></a>CCF和SCI区别</h4><p>CCF是计算机领域的权威人士排的评级，而SCI分区是根据期刊影响因子来划分的。</p><p>SCI的范围更广，涉及学科更多，CCF更关注计算机领域。</p><h2 id="国际期刊"><a href="#国际期刊" class="headerlink" title="国际期刊"></a>国际期刊</h2><p>一般分为A、B、C三类</p><p>大都以SCI为准，部分学校以CCF为准</p><h2 id="国内期刊"><a href="#国内期刊" class="headerlink" title="国内期刊"></a>国内期刊</h2><p>分为T1、T2、T3类</p><p>一般就三大期刊，《自动化学报》《计算机学报》《计算机研究发展》和其他</p><h2 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h2><p>CCF会议一般分为A、B、C三个会议，注意很多学校不认可会议</p><h2 id="什么是顶会"><a href="#什么是顶会" class="headerlink" title="什么是顶会"></a>什么是顶会</h2><p>CCF-A或CORE排名中A+或大牛说的</p><h2 id="水刊"><a href="#水刊" class="headerlink" title="水刊"></a>水刊</h2><p>通过百度学术或谷歌学术中找出这两年在letpub或知网上的论文，然后进行期刊级别排名越差的越水</p><p>⼀般⼀篇的论⽂级别好坏，以⼆三区为界限，往上就很难直观的把它定义成⽔⽂，往下⼀般就会直观的把它定义成⽔⽂。因此，我挑⼀篇⼆区的论⽂来给⼤ 家引⼊，即往上很难出现⽐这还离谱的问题，往下出现的问题可能⽐这还离谱。</p><p>[置顶]期刊分级下载链接：<br><a href="https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/all_qikan_fenji.pdf">https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/all_qikan_fenji.pdf</a></p><p>计算机领域的，对CCF排名想要获取的，通过这个下载链接：<a href="https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/CCF-qikan-paiming.zip">https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/CCF-qikan-paiming.zip</a></p><p>备用百度网盘链接: <a href="https://pan.baidu.com/s/1ntzRhwT9fyHpn6sddy-dFA?pwd=8888">https://pan.baidu.com/s/1ntzRhwT9fyHpn6sddy-dFA?pwd=8888</a> 提取码: 8888<br>备用夸克网盘链接：<a href="https://pan.quark.cn/s/1d33da813715">https://pan.quark.cn/s/1d33da813715</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何查询期刊&quot;&gt;&lt;a href=&quot;#如何查询期刊&quot; class=&quot;headerlink&quot; title=&quot;如何查询期刊&quot;&gt;&lt;/a&gt;如何查询期刊&lt;/h1&gt;&lt;h4 id=&quot;查询中文期刊用知网：&quot;&gt;&lt;a href=&quot;#查询中文期刊用知网：&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="AI" scheme="https://pa1r0t.github.io/categories/AI/"/>
    
    <category term="论文" scheme="https://pa1r0t.github.io/categories/AI/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="期刊" scheme="https://pa1r0t.github.io/tags/%E6%9C%9F%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>机器学习_李宏毅(1)</title>
    <link href="https://pa1r0t.github.io/2024/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9D%8E%E5%AE%8F%E6%AF%85-1/"/>
    <id>https://pa1r0t.github.io/2024/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9D%8E%E5%AE%8F%E6%AF%85-1/</id>
    <published>2024-06-25T12:55:04.000Z</published>
    <updated>2024-06-25T13:59:15.604Z</updated>
    
    <content type="html"><![CDATA[<p> 李宏毅的课超棒</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt; 李宏毅的课超棒&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="https://pa1r0t.github.io/categories/AI/"/>
    
    <category term="机器学习" scheme="https://pa1r0t.github.io/categories/AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="李宏毅" scheme="https://pa1r0t.github.io/tags/%E6%9D%8E%E5%AE%8F%E6%AF%85/"/>
    
  </entry>
  
  <entry>
    <title>IDA工具使用</title>
    <link href="https://pa1r0t.github.io/2024/06/24/IDA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://pa1r0t.github.io/2024/06/24/IDA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-24T14:30:05.000Z</published>
    <updated>2024-06-25T14:01:15.110Z</updated>
    
    <content type="html"><![CDATA[<p>​IDA逆向神器</p><span id="more"></span><h1 id="IDA工具介绍"><a href="#IDA工具介绍" class="headerlink" title="IDA工具介绍"></a>IDA工具介绍</h1><p>​IDA Pro（交互式反汇编器专业版，我们一般简称为IDA）是一款递归下降的反汇编器，由Hex-Rays SA发布，是安全从事人员的必备工具之一。它强大的静态反汇编，反编译功能及动态调试功能让我们分析程序变得简单。它支持数十种CPU指令集其中包括[Intel x86](<a href="https://baike.baidu.com/item/Intel">https://baike.baidu.com/item/Intel</a> x86)，<a href="https://baike.baidu.com/item/x64/8161446">x64</a>，<a href="https://baike.baidu.com/item/MIPS/2173143">MIPS</a>，<a href="https://baike.baidu.com/item/PowerPC">PowerPC</a>，<a href="https://baike.baidu.com/item/ARM/7518299">ARM</a>，<a href="https://baike.baidu.com/item/Z80">Z80</a>，68000，c8051等等，无论是winodws平台下的pe可执行文件，linux平台下的elf文件及ios平台下的Mach-O文件都适用。</p><p>一个简单的C语言程序用作实验。</p><img src="/./../images/image-20240624223417082.png" alt="image-20240624223417082" style="zoom: 67%;"><p>IDA分为32版本与64版本，这是根据所要反汇编程序的位数来区分的，但其实他们自身都是64位的程序。</p><img src="/./../images/image-20240624223542585.png" alt="image-20240624223542585" style="zoom:67%;"><p>根据程序的位数选择对应位数的IDA打开程序。（附件是64位的</p><p>一般没有特殊需求，我们直接默认点击OK就好了。</p><img src="/./../images/image-20240624223624670.png" alt="image-20240624223624670" style="zoom:67%;"><p>点击Ok后接着的各种提示，如加载对应的pdb符号文件，统统点击否，然后进行来到载入主窗口。</p><img src="/./../images/image-20240624223755676.png" alt="image-20240624223755676" style="zoom:67%;"><p>然后再关闭IDA,出现下面的提示框。</p><p>一般我我们就选择下面标出的2个选项中的一个即可。第一个保存为了下次分析继续使用，另外一个不保存。</p><img src="/./../images/image-20240624224547589.png" alt="image-20240624224547589" style="zoom:67%;"><p>上一步点击保存文件退出后，将该exe文件再次重新载入IDA。</p><p>overwrite 重新写入，代表覆盖以前的。</p><p>load existing 加载已经存在的，就是直接加载我们之前分析过该程序保存的数据库文件，保存了上次的分析记录方便我们继续分析。</p><img src="/./../images/image-20240624224631709.png" alt="image-20240624224631709" style="zoom:67%;"><p>IDA功能界面介绍</p><img src="/./../images/image-20240624224704443.png" alt="image-20240624224704443" style="zoom:67%;"><p>流程图界面显示对应的伪代码，此界面下按 &#x2F; 即可。</p><img src="/./../images/image-20240624224743397.png" alt="image-20240624224743397" style="zoom:67%;"><p>Text-view文本视图</p><img src="/./../images/image-20240624225000199.png" alt="image-20240624225000199" style="zoom:67%;"><p>切换图形视图和文本视图（点空格键就行）</p><img src="/./../images/image-20240624225021469.png" alt="image-20240624225021469" style="zoom:67%;"><h2 id="IDA功能界面介绍"><a href="#IDA功能界面介绍" class="headerlink" title="IDA功能界面介绍"></a>IDA功能界面介绍</h2><p>导航栏</p><img src="/./../images/image-20240624225156980.png" alt="image-20240624225156980" style="zoom:67%;"><ul><li>- 蓝色:.text section</li><li>- 深蓝:用户写的函数编译后的代码区</li><li>- 浅蓝:编译器自己添加的函数，像启动函数，异常函数等等..</li><li>- 粉红色:.idata section 有关输入表的一些数据信息</li><li>- 军绿色：.rdata section 纯数据，只读</li><li>- 灰色:为了段对齐而留下的空隙</li><li>- 黑色: 禁区</li></ul><h3 id="汇编代码界面注释"><a href="#汇编代码界面注释" class="headerlink" title="汇编代码界面注释"></a>汇编代码界面注释</h3><p>一种是Enter comment(快捷键是shift+;))，另一种是Enter repeatable comment(快捷键是;和OD一样)</p><p>前一种输入的注释只在该处出现，后一种注释，会在所有交叉参考处出现，如果一个程序位置引用了另一个包含可重复注释的位置，则该注释会在第一个位置回显，且以灰色显示。</p><img src="/./../images/image-20240624225610836.png" alt="image-20240624225610836" style="zoom:67%;"><h3 id="伪代码代码界面注释，快捷键-x2F"><a href="#伪代码代码界面注释，快捷键-x2F" class="headerlink" title="伪代码代码界面注释，快捷键 &#x2F;"></a>伪代码代码界面注释，快捷键 &#x2F;</h3><img src="/./../images/image-20240624225839579.png" alt="image-20240624225839579" style="zoom:67%;"><h3 id="字符串窗口-shift-f12"><a href="#字符串窗口-shift-f12" class="headerlink" title="字符串窗口 shift+f12"></a>字符串窗口 shift+f12</h3><p>程序中被IDA解析出来的字符串，当然还有因为未解析出来所以没显示的。 </p><img src="/./../images/image-20240624225955694.png" alt="image-20240624225955694" style="zoom:67%;"><h3 id="导入表窗口"><a href="#导入表窗口" class="headerlink" title="导入表窗口"></a>导入表窗口</h3><p>程序从动态链接库中导入的要使用的函数。</p><img src="/./../images/image-20240625100801523.png" alt="image-20240625100801523" style="zoom:67%;"><h3 id="导出表窗口"><a href="#导出表窗口" class="headerlink" title="导出表窗口"></a>导出表窗口</h3><p>程序导出给其它程序使用的函数。</p><img src="/./../images/image-20240625100939872.png" alt="image-20240625100939872" style="zoom:67%;"><h3 id="十六进制数据窗口"><a href="#十六进制数据窗口" class="headerlink" title="十六进制数据窗口"></a>十六进制数据窗口</h3><p>类似于一个十六进制编辑工具看文件的二进制信息</p><img src="/./../images/image-20240625101040674.png" alt="image-20240625101040674" style="zoom:67%;"><h3 id="函数窗口"><a href="#函数窗口" class="headerlink" title="函数窗口"></a>函数窗口</h3><p>对于ida没有识别出来的函数，统统以sub_函数地址命名。</p><p>为了方便，我们还可以直接在函数窗口ctrl+f，然后搜索目标函数。</p><img src="/./../images/image-20240625101251726.png" alt="image-20240625101251726" style="zoom:67%;"><h3 id="结构体窗口"><a href="#结构体窗口" class="headerlink" title="结构体窗口"></a>结构体窗口</h3><p>这里显示了本次分析程序ida中已经定义了的结构体，同时我们也可以在插入创建新的结构体。</p><img src="/./../images/image-20240625101410492.png" alt="image-20240625101410492" style="zoom:67%;"><h3 id="rdata段中的字符串"><a href="#rdata段中的字符串" class="headerlink" title=".rdata段中的字符串"></a>.rdata段中的字符串</h3><p>用于定义字符串都在一块内存区域，根据这个也是定位找字符串的方法。</p><p>如下，.rdata段的字符串信息，最右边的是隐式的可重复注释，指示的那里引用了该字符串。<img src="/./../images/image-20240625101520158.png" alt="image-20240625101520158" style="zoom:67%;"></p><h3 id="寻找入口点-快捷键-ctrl-e"><a href="#寻找入口点-快捷键-ctrl-e" class="headerlink" title="寻找入口点 快捷键 ctrl+e"></a>寻找入口点 快捷键 ctrl+e</h3><p>在IDA载入程序分析完毕后，ctrl+e打开选择程序入口点的窗口，这里可以方便找到程序的入口点及用到的回调函数。<img src="/./../images/image-20240625101703454.png" alt="image-20240625101703454" style="zoom:67%;"></p><h3 id="地址跳转-快捷键-G"><a href="#地址跳转-快捷键-G" class="headerlink" title="地址跳转 快捷键 G"></a>地址跳转 快捷键 G</h3><p>按下快捷键 G，输入地址后跳转到目的地址<img src="/./../images/image-20240625103013716.png" alt="image-20240625103013716" style="zoom:67%;"></p><h3 id="参考重命名-在变量名下按-n"><a href="#参考重命名-在变量名下按-n" class="headerlink" title="参考重命名 在变量名下按 n"></a>参考重命名 在变量名下按 n</h3><p>在分析一个程序时，我们可以对一些变量或者函数重命名，改成我们易于我们理解的名字，便于分析程序。</p><p>如下，假如我们知道了v12变量是一个计数功能，那我们就可以给他重命名为 <strong>count</strong><img src="/./../images/image-20240625103212589.png" alt="image-20240625103212589" style="zoom:67%;"></p><h3 id="参考类型修改-在变量名下按-y"><a href="#参考类型修改-在变量名下按-y" class="headerlink" title="参考类型修改 在变量名下按 y"></a>参考类型修改 在变量名下按 y</h3><p>在分析一个程序时，IDA对一些变量名可能解析的不是很正确，这就需要我们手动去修改变量的类型。</p><p>如下所示，在v12变量下按y键后再输入我们要修改的变量类型。<img src="/./../images/image-20240625103350144.png" alt="image-20240625103350144" style="zoom:67%;"></p><h3 id="数据转化为代码-在数据开始的地方按-C"><a href="#数据转化为代码-在数据开始的地方按-C" class="headerlink" title="数据转化为代码 在数据开始的地方按 C"></a>数据转化为代码 在数据开始的地方按 C</h3><p>在分析一个程序时，有时候因为栈帧或者其它原因使IDA不能反编一个函数有问题，又或者程序有smc，我们在手动对数据解码后，接着在解码数据开始的地方按C键就将数据转化为代码了。如下所示，我们在57h的地方按下C键，IDA就会自动对数据解析成代码了。<img src="/./../images/image-20240625103448935.png" alt="image-20240625103448935" style="zoom:67%;"></p><h3 id="创建函数-在代码开始的地方按-P"><a href="#创建函数-在代码开始的地方按-P" class="headerlink" title="创建函数 在代码开始的地方按 P"></a>创建函数 在代码开始的地方按 P</h3><p>如上一步中所说的，我们先对数据按C键将数据转化为了代码，这时候还需要在代码开始的地方按p键，让IDA在将一段代码上创建成一个函数。</p><p>如下，可以注意到左边的地址是红色，这时候我们在0x4025A0地址下按p就在这一段汇编创建函数且左边的红色地址消失。</p><img src="/./../images/image-20240625103917545.png" alt="image-20240625103917545" style="zoom:67%;"><h3 id="取消定义-在需要取消定义的地方按-U"><a href="#取消定义-在需要取消定义的地方按-U" class="headerlink" title="取消定义 在需要取消定义的地方按 U"></a>取消定义 在需要取消定义的地方按 U</h3><p>通过在指定的数据或者代码下按U键我们可以取消IDA对该数据的定义，如代码，数组等。</p><p>如下，我们在aDS按u键后，得到了下面第二张图的结果。<img src="/./../images/image-20240625104241055.png" alt="image-20240625104241055" style="zoom:67%;"></p><h3 id="定义数组-在需要定义为数组的数据开始的地方按"><a href="#定义数组-在需要定义为数组的数据开始的地方按" class="headerlink" title="定义数组 在需要定义为数组的数据开始的地方按 *"></a>定义数组 在需要定义为数组的数据开始的地方按 *</h3><p>分析一个程序时，我们有时候在硬编码的数据中看见一段连续的数据且我们确定它为数组，但IDA并没有将其解析为数组，这时候我们就可以在这段数据开始的地方按下*，弹出如下所示的框：</p><p>选好满足我们要求的选项后，按ok即可。<img src="/./../images/image-20240625105751524.png" alt="image-20240625105751524" style="zoom:67%;"></p><h3 id="提取数据-选中要提取数据后按shift-e"><a href="#提取数据-选中要提取数据后按shift-e" class="headerlink" title="提取数据 选中要提取数据后按shift+e"></a>提取数据 选中要提取数据后按shift+e</h3><p>在我们需要得到程序中的一段数据时，我们可以先选中这段数据然后按shift+e</p><p>如下，我们先选中数据，接着按shift+e后得到下面的第二组图：<img src="/./../images/image-20240625110450627.png" alt="image-20240625110450627" style="zoom:67%;"><img src="/./../images/image-20240625110516853.png" alt="image-20240625110516853" style="zoom:67%;"></p><h3 id="标签的使用-加标记：alt-m-跳转到标记：ctrl-m"><a href="#标签的使用-加标记：alt-m-跳转到标记：ctrl-m" class="headerlink" title="标签的使用 加标记：alt+m  跳转到标记：ctrl+m"></a>标签的使用 加标记：alt+m  跳转到标记：ctrl+m</h3><p>使用标签功能我们可以在程序代码的任何位置快速跳到我们做了标签的地方，这对于快速跳到关键代码的位置是很实用的。</p><p>如在下图中，我们知道了0x4015A2地址处是printf的功能，那么我们可以在这个地址下按alt+m,对这个地址加上printf的标记。那么当我们此时在程序任何位置，按crtl+m，选中printf标记就可以快速跳回到这里了。<img src="/./../images/image-20240625125317577.png" alt="image-20240625125317577"></p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F5 : 反汇编当前函数</li><li>; ：为当前指令添加全文交叉引用的注释</li><li>N ：定义或修改名称，通常用来标注函数名</li><li>G ：跳转到任意地址</li><li>Esc ：返回到跳转前的位置</li><li>H ：十六进制显示数据</li><li>y ：改变数据类型</li><li>X ：查看按上层调用</li><li>Space :图形视图和文本视图切换</li><li>Shift+f12：字符串窗口列表</li><li>二进制搜索：alt+b</li><li>文本搜索：alt+t</li><li>快照：shift+ctrl+w</li><li>tab：反编译与流程图切换</li><li>alt+a：字符串操作</li><li>流程按&#x2F;：流程图加上伪代码</li></ul><h3 id="IDA插件的安装"><a href="#IDA插件的安装" class="headerlink" title="IDA插件的安装"></a>IDA插件的安装</h3><p>若我们有想要安装的插件，直接到将其放到IDA安装目录中的plugins文件夹下即可。<img src="/./../images/image-20240625130110115.png" alt="image-20240625130110115" style="zoom:67%;"></p><hr><h1 id="IDA的高级使用"><a href="#IDA的高级使用" class="headerlink" title="IDA的高级使用"></a>IDA的高级使用</h1><h3 id="ida中字符串搜索的技巧"><a href="#ida中字符串搜索的技巧" class="headerlink" title="ida中字符串搜索的技巧"></a>ida中字符串搜索的技巧</h3><p>ida中有两种搜索：文本搜索（alt+t），二进制搜索（alt+b）</p><p>而文本搜索是很局限的，他只是对在shift+f12中ida已经列出来的字符串中搜索，对于很多很多中文字符串，宽字符它都是搜索不出来的。</p><p>所以一般着重使用二进制搜索：</p><p>1.对要搜索的十六进制字符串以空格分隔为两位十六进制值组成的列表。</p><p>2.要搜索内嵌的字符串数据，必须将要搜索的字符串用双引号括起来。</p><p>3.在搜索十六进制字节序列时，最好选中Match_case选项，不然，假如要搜索的序列为：E9 41 C3，而E9 61 C3也出现在了搜索结果中。这是因为，0x41对应于字符A，而0x61则对应于字符a，所以IDA认为这两个字符串相互匹配。<img src="/./../images/image-20240625130539779.png" alt="image-20240625130539779" style="zoom:67%;"></p><h3 id="得到一个函数与调用它的函数之间关系图"><a href="#得到一个函数与调用它的函数之间关系图" class="headerlink" title="得到一个函数与调用它的函数之间关系图"></a>得到一个函数与调用它的函数之间关系图</h3><p>在一个函数的图形化界面右键选择Xref graph to..</p><p>如下得到了main函数与调用main函数之间的关系图<img src="/./../images/image-20240625130826952.png" alt="image-20240625130826952" style="zoom:67%;"></p><h3 id="得到一个函数与它调用的函数之间关系图"><a href="#得到一个函数与它调用的函数之间关系图" class="headerlink" title="得到一个函数与它调用的函数之间关系图"></a>得到一个函数与它调用的函数之间关系图</h3><p>在一个函数的图形化界面右键选择Xref graph from..</p><p>如下得到了main函数与main调用函数之间的关系图<img src="/./../images/image-20240625131500262.png" alt="image-20240625131500262"></p><h3 id="修改字符串窗口的设置以得到尽可能多的字符串"><a href="#修改字符串窗口的设置以得到尽可能多的字符串" class="headerlink" title="修改字符串窗口的设置以得到尽可能多的字符串"></a>修改字符串窗口的设置以得到尽可能多的字符串</h3><p>有时候我们可能发现程序中长度为4的关键字符串在字符串窗口找不到，其实这是ida中设置的原因，默认字符串窗口能显示的字符串长度为5。</p><p>在字符串窗口右键后点击Setup，然后将最小字符串长度改为4就好。<img src="/./../images/image-20240625131758472.png" alt="image-20240625131758472" style="zoom:67%;"></p><h3 id="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"><a href="#对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码" class="headerlink" title="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"></a>对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码</h3><p>源代码：</p><pre><code class="C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt; typedef struct _Link&#123;    int data;    char a[20];    struct _Link *next;&#125; Link, *pLink; int main(void)&#123;    pLink head;    Link link, link1;        head = &amp;link;    link.data = 1;    strcpy(link.a, &quot;IDA工具的使用&quot;);     link1.data = 2;    strcpy(link1.a, &quot;learning!&quot;);    link.next = &amp;link1;    link1.next = NULL;        while(head)    &#123;        printf(&quot;%d %s\n&quot;, head-&gt;data, head-&gt;a);        head = head-&gt;next;    &#125;        putchar(10);    system(&quot;pause&quot;);        return 0;&#125;</code></pre><p>Ida反编译结果：</p><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  Link link; // [rsp+20h] [rbp-50h] BYREF  Link link1; // [rsp+40h] [rbp-30h] BYREF  pLink head; // [rsp+68h] [rbp-8h]  _main();  head = &amp;link;  link.data = 1;  *(_QWORD *)link.a = 0xB5DFBEA4B9414449ui64;  *(_DWORD *)&amp;link.a[8] = -742798652;  *(_WORD *)&amp;link.a[12] = 195;  link1.data = 2;  strcpy(link1.a, &quot;learning!&quot;);  link.next = &amp;link1;  link1.next = 0i64;  while ( head )  &#123;    printf(&quot;%d %s\n&quot;, (unsigned int)head-&gt;data, head-&gt;a);    head = head-&gt;next;  &#125;  putchar(10);  system(&quot;pause&quot;);  return 0;&#125;</code></pre><h3 id="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码-1"><a href="#对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码-1" class="headerlink" title="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"></a>对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码</h3><p>从上面的结果我们可以看出，源代码中定义的结构体它的实质就是分配一块内存，然后这块内存组织了其中变量。但是ida反编译时并不能将其还原出来，它只能得到它的实质结果，那就是一段连续的空间上每个变量分别定义出来。我们在分析出结构体后，插入创建分析出的结构体后再应用就能在IDA中还原出结构体了。<img src="/./../images/image-20240625132903604.png" alt="image-20240625132903604"></p><h3 id="IDA中python脚本的编写-载入脚本执行：alt-f7-打开执行脚本窗口：shift-f2"><a href="#IDA中python脚本的编写-载入脚本执行：alt-f7-打开执行脚本窗口：shift-f2" class="headerlink" title="IDA中python脚本的编写 载入脚本执行：alt+f7 打开执行脚本窗口：shift+f2"></a>IDA中python脚本的编写 载入脚本执行：alt+f7 打开执行脚本窗口：shift+f2</h3><p>在下面的窗口中写python代码可以很好的和IDA交互。要用的api查官方文档：<a href="https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/">https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/</a><img src="/./../images/image-20240625153316743.png" alt="image-20240625153316743" style="zoom:67%;"></p><h2 id="解决ida反编译遇到：Decompilation-failure-xxxx-too-big-function"><a href="#解决ida反编译遇到：Decompilation-failure-xxxx-too-big-function" class="headerlink" title="解决ida反编译遇到：Decompilation failure:xxxx:too big function"></a>解决ida反编译遇到：Decompilation failure:xxxx:too big function</h2><p>这是因为ida默认反编译函数的大小只有64K，所以这里会反编译会失败。<img src="/./../images/image-20240625153453498.png" alt="image-20240625153453498"></p><p>这个问题可以通过修改反编译插件的配置文件\cfg\hexrays.cfg中MAX_FUNCSIZE，改为1024就好了<img src="/./../images/image-20240625153513048.png" alt="image-20240625153513048"></p><h3 id="动调调试-windows"><a href="#动调调试-windows" class="headerlink" title="动调调试-windows"></a>动调调试-windows</h3><p>按下图所示选择好指定好选项，程序中下好断点，直接F9程序就调试起来了。<img src="/./../images/image-20240625153612954.png" alt="image-20240625153612954" style="zoom:67%;"></p><h3 id="动调调试-linux-x86"><a href="#动调调试-linux-x86" class="headerlink" title="动调调试-linux-x86"></a>动调调试-linux-x86</h3><p>首先找到IDA的dbgsrv文件夹<img src="/./../images/image-20240625153657427.png" alt="image-20240625153657427" style="zoom:67%;"></p><p>进入dbgsrv文件夹</p><p>其中linux_server是我们调试32elf文件所要使用的服务程序，linux_server64是调试64elf所要使用的服务程序。<img src="/./../images/image-20240625153723917.png" alt="image-20240625153723917" style="zoom:67%;"></p><p>将上面提到的2个服务程序复制到linux虚拟机和所要调试的文件放在同一个文件夹下。这里为了以后方便也可以放入&#x2F;usr&#x2F;bin&#x2F;下，以后直接通过命令（linux_server或linux_server64）就启动了。<img src="/./../images/image-20240625153832400.png" alt="image-20240625153832400" style="zoom:67%;"></p><p>使用chmod 777 linux_server linux_server64，赋予这两个文件有执行的权限。</p><p>然后根据我们所要调试程序的位数启动对应版本的服务程序。<img src="/./../images/image-20240625153909254.png" alt="image-20240625153909254"></p><p>使用ifconfig命令查看当前虚拟机的ip地址<img src="/./../images/image-20240625153927204.png" alt="image-20240625153927204" style="zoom:67%;"></p><p>配置ida中调试选项<img src="/./../images/image-20240625153950841.png" alt="image-20240625153950841" style="zoom:67%;"></p><p>最后注意本机与目的linux环境能相互ping通，下好断点，直接F9启动程序即开始调试。</p><h2 id="IDA中制作sig文件"><a href="#IDA中制作sig文件" class="headerlink" title="IDA中制作sig文件"></a>IDA中制作sig文件</h2><h3 id="IDA中的sig文件是什么？"><a href="#IDA中的sig文件是什么？" class="headerlink" title="IDA中的sig文件是什么？"></a>IDA中的sig文件是什么？</h3><p>它是满足IDA中FLIRT(库文件快速识别与鉴定技术)而使用的一种签名文件。它使用自定义的格式，记录了一些库函数的特征序列值。在我们找到合适的库文件并以此制作相应的签名文件后将其应用IDA中，它将通过特征值自动去匹配程序中的函数，并对匹配上的函数自动重命名（要注意的是：就算匹配上它也只会对IDA默认命名函数的函数重命名，换句话说就是如果之前我们对该函数已经进行了重命名，那么之后就算签名文件匹配上这个函数也不会对其进行重命名）。这能很好的解决静态编译且去除符号程序因本身函数与库函数混杂在一起增大了我们分析程序难度的问题，帮助减少工作能，更快的去分析程序本身的函数。</p><h3 id="IDA中自带的签名文件"><a href="#IDA中自带的签名文件" class="headerlink" title="IDA中自带的签名文件"></a>IDA中自带的签名文件</h3><p>在IDA安装目录中的sig文件夹下我们能找到IDA中本身自带的签名文件。不同文件夹表示不同架构平台要使用的签名文件。这里我们在自己添加签名文件时也一定要注意好其架构。<img src="/./../images/image-20240625154211982.png" alt="image-20240625154211982" style="zoom:67%;"></p><p>在IDA自带的签名文件中只有一小部分类unix下的签名文件，这是因为在类unix下使用编译器的是开源的gcc，不同的linux发行版本的libc.a也都不尽相同且更新很快，IDA也就不可能把所有版本的libc.a都制作一份签名文件保存下来。所以在我们分析静态链接且去除了符号表的elf文件时，可以发现很多库函数都没有识别出来，这在程序很大时无疑增加了它的分析难度和我们所花费的精力。</p><p>下面也是以一个静态链接且<strong>去除了符号的elf文件</strong>来一步一步找到它的库并制作相应的sig文件进而恢复它的符号。</p><h3 id="查看分析的elf文件未引用sig文件时的main函数"><a href="#查看分析的elf文件未引用sig文件时的main函数" class="headerlink" title="查看分析的elf文件未引用sig文件时的main函数"></a>查看分析的elf文件未引用sig文件时的main函数</h3><p>如下所示，所有函数都是没有符号的。<img src="/./../images/image-20240625154929920.png" alt="image-20240625154929920" style="zoom:67%;"></p><h3 id="查看该elf文件的字符串信息尽可能找到该elf文件的编译平台"><a href="#查看该elf文件的字符串信息尽可能找到该elf文件的编译平台" class="headerlink" title="查看该elf文件的字符串信息尽可能找到该elf文件的编译平台"></a>查看该elf文件的字符串信息尽可能找到该elf文件的编译平台</h3><blockquote><p>strings -a 1 | grep ‘ubun’</p></blockquote><img src="/./../images/image-20240625155210709.png" alt="image-20240625155210709"><h3 id="找到目标环境下的libc-a文件"><a href="#找到目标环境下的libc-a文件" class="headerlink" title="找到目标环境下的libc.a文件"></a>找到目标环境下的libc.a文件</h3><blockquote><p>whereis libc.a</p></blockquote><p><img src="/./../images/image-20240625155334421.png" alt="image-20240625155334421"></p><h3 id="下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件"><a href="#下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件" class="headerlink" title="下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件"></a>下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件</h3><p>将linux文件夹拖入我们的linux环境中</p><p><img src="/./../images/image-20240625155416288.png" alt="image-20240625155416288"></p><h3 id="使用linux文件下的pelf将libc-a转化为libc-pat"><a href="#使用linux文件下的pelf将libc-a转化为libc-pat" class="headerlink" title="使用linux文件下的pelf将libc.a转化为libc.pat"></a>使用linux文件下的pelf将libc.a转化为libc.pat</h3><blockquote><p>.&#x2F;linux&#x2F;pelf libc.a libc.pat</p></blockquote><p>如果正常的话不会有提示信息，在当前文件下生成libc.pat文件。</p><p>但也常出现下面这个错误：<img src="/./../images/image-20240625155543066.png" alt="image-20240625155543066"></p><p>看意思是不能识别重定位类型，那我们在上面的命令下加上如下选项即可：</p><blockquote><p>.&#x2F;linux&#x2F;pelf -r42:0:0 libc.a libc.pat</p></blockquote><p>42是重定位类型，根据提示的错误来。</p><h3 id="接着使用sigmake将libc-pat文件制作成libc-sig文件"><a href="#接着使用sigmake将libc-pat文件制作成libc-sig文件" class="headerlink" title="接着使用sigmake将libc.pat文件制作成libc.sig文件"></a>接着使用sigmake将libc.pat文件制作成libc.sig文件</h3><blockquote><p>.&#x2F;linux&#x2F;sigmake -n“my_sig” libc.pat libc.sig  -n后是添加的注释信息</p></blockquote><p>正常的话也是直接就生成相应的sig文件了。但也常出现下面的错误：</p><p>意思是有22个函数它们同一个特征值不止对应一个函数，如果制作成了sig文件在匹配成功时也不知道到底应用那个函数名字。</p><p><img src="/./../images/image-20240625162838622.png" alt="image-20240625162838622"></p><p>它会在当前目录下生成一个.exc文件，它是可编辑的，我们将该.exc文件的前几行注释删除，在我们要选择特征值对应的函数名称最前面加一个+号即可，如果不管就什么也不加。如下图，我选择了第一个该特征值的第一个函数。<img src="/./../images/image-20240625162940235.png" alt="image-20240625162940235"></p><h3 id="修改完-exc文件后，再次重复之前生成sig文件的命令就好了。"><a href="#修改完-exc文件后，再次重复之前生成sig文件的命令就好了。" class="headerlink" title="修改完.exc文件后，再次重复之前生成sig文件的命令就好了。"></a>修改完.exc文件后，再次重复之前生成sig文件的命令就好了。</h3><blockquote><p>.&#x2F;linux&#x2F;sigmake -n“my_sig” libc.pat libc.sig</p></blockquote><h3 id="应用生成的sig文件到IDA中"><a href="#应用生成的sig文件到IDA中" class="headerlink" title="应用生成的sig文件到IDA中"></a>应用生成的sig文件到IDA中</h3><p>将生成的签名文件复制到IDA中的sig目录下。</p><p>回到IDA中之前分析的该elf文件，shift+f5打开应用库的窗口，然后右键把我们新复制到的sig目录下的sig文件添加进来。如下图，添加后，成功匹配了程序中的735个函数。而上面之前的libc却匹配了0个函数，这也正说明了版本变化带来的差异之大。</p><img src="/./../images/image-20240625163029263.png" alt="image-20240625163029263" style="zoom:67%;"><h3 id="查看应用新sig文件后的main函数"><a href="#查看应用新sig文件后的main函数" class="headerlink" title="查看应用新sig文件后的main函数"></a>查看应用新sig文件后的main函数</h3><p>如下图，scanf和puts相关函数都识别出来了。<img src="/./../images/image-20240625163056902.png" alt="image-20240625163056902" style="zoom:67%;"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	IDA逆向神器&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    <category term="工具使用" scheme="https://pa1r0t.github.io/categories/ctf/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="IDA" scheme="https://pa1r0t.github.io/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>OD工具的使用</title>
    <link href="https://pa1r0t.github.io/2024/06/24/OD%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://pa1r0t.github.io/2024/06/24/OD%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-24T14:06:30.000Z</published>
    <updated>2024-06-26T15:05:26.173Z</updated>
    
    <content type="html"><![CDATA[<p>​Ollydbg</p><span id="more"></span><h1 id="OD介绍"><a href="#OD介绍" class="headerlink" title="OD介绍"></a>OD介绍</h1><p>​OllyDbg（以作者Oleh Yuschuk命名）是一款用于Windows32位二进制文件的汇编代码级反汇编调试工具，有友好的用户界面，并支持第三方插件扩展功能。该软件是免费的，但共享软件许可证要求用户注册。当前版本的OllyDbg不支持反汇编64位的二进制文件。 OllyDbg 1.10版本是1.x的最终版本。2.0版本于2010年6月发布，此版本重写了OllyDbg。 OllyDbg由于它的易用性（任何32位可执行文件都可以由调试器使用，并在二进制码&#x2F;汇编代码中实时编辑）通常用于程序的逆向工程，常被用来破解软件，也常用于程序的动态调试和恶意软件分析</p><h2 id="什么是反汇编？"><a href="#什么是反汇编？" class="headerlink" title="什么是反汇编？"></a>什么是反汇编？</h2><p>反汇编：</p><p>​在传统的软件开发模型中，程序员使用编辑器、汇编器和链接器中的一个或几个创建可执行程序。为了回溯编程过程（或者叫对程序进行逆向工程），我们使用各种工具来撤销汇编和编译过程。这些工具就叫做反汇编工具和反汇编器。反汇编器撤销汇编过程，我们可以得到汇编语言形式的输出结果（以机械语言作为输入）。反编译器则以汇编语言甚至是机械语言为输入，输出结果是高级语言。</p><h3 id="C语言程序用作实验"><a href="#C语言程序用作实验" class="headerlink" title="C语言程序用作实验"></a>C语言程序用作实验</h3><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int main(void)&#123;    char title[] = &quot;OD工具使用&quot;;    char text[] = &quot;学习使用OD_xxx&quot;;        MessageBoxA(0, text, title, 1);        return 0;&#125; </code></pre><h3 id="OD基本使用"><a href="#OD基本使用" class="headerlink" title="OD基本使用"></a>OD基本使用</h3><p>OD工具目录中各个子目录的介绍：</p><ul><li>ico目录中是OD程序中的图标图片。</li><li>plugin目录是存放我们OD程序中使用插件的目录。</li><li>skins目录是OD程序中使用皮肤文件。</li><li>UDD目录是存放我们分析过的文件的分析记录，如下断点情况等。</li></ul><p><img src="/./../images/image-20240626224308352.png" alt="image-20240626224308352"></p><p>OD工具目录中各个子文件的介绍：</p><ul><li>ollydbg.ini是od程序及其插件的配置文件</li><li><strong>PEiD是程序查壳软件</strong></li><li>Udd Cleaner.exe是清楚UDD目录下的缓存文件</li></ul><p><img src="/./../images/image-20240626224339419.png" alt="image-20240626224339419"></p><h3 id="OD主界面整体介绍："><a href="#OD主界面整体介绍：" class="headerlink" title="OD主界面整体介绍："></a>OD主界面整体介绍：<img src="/./../images/image-20240626224503211.png" alt="image-20240626224503211"></h3><h3 id="OD程序上各个键位的讲解："><a href="#OD程序上各个键位的讲解：" class="headerlink" title="OD程序上各个键位的讲解："></a>OD程序上各个键位的讲解：</h3><p><img src="/./../images/image-20240626230511204.png" alt="image-20240626230511204"></p><p>从左往右：</p><ol><li>首先黄色框显示了程序此时的状态，这里是暂停</li><li>接着打开文件夹 f3</li><li>然后是重新载入程序分析 ctrl+f2</li><li>再是运行按钮 f9 </li><li>最后是暂停按钮 f12</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	Ollydbg&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    <category term="工具使用" scheme="https://pa1r0t.github.io/categories/ctf/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="OD" scheme="https://pa1r0t.github.io/tags/OD/"/>
    
  </entry>
  
  <entry>
    <title>STL函数识别</title>
    <link href="https://pa1r0t.github.io/2024/06/23/STL%E5%87%BD%E6%95%B0%E8%AF%86%E5%88%AB/"/>
    <id>https://pa1r0t.github.io/2024/06/23/STL%E5%87%BD%E6%95%B0%E8%AF%86%E5%88%AB/</id>
    <published>2024-06-23T04:50:23.000Z</published>
    <updated>2024-06-25T14:03:09.776Z</updated>
    
    <content type="html"><![CDATA[<p>​C++方向逆向STL</p><span id="more"></span><h1 id="什么是STL"><a href="#什么是STL" class="headerlink" title="什么是STL"></a>什么是STL</h1><p>STL是C++标准模板库，内置了很多常用的数据结构和算法，例如动态数组、队列等。故STL在日常编程开发中很常用，故在逆向过程中学习STL是必要的。</p><p>逆向中STL的主要问题：</p><ol><li>缺少符号，无法判断STL容器类型</li><li>STL内部数据结构相当复杂，难以提取数据</li><li>O3优化使用大量STL函数被内联</li></ol><blockquote><p><code>O3优化是为了提高程序编译运行速度采用的优化方式，函数内联是将函数代码直接嵌入原代码中，减少了函数调用带来的损失。</code></p><p>这使得逆向过程中会很难分清是STL的代码还是用户自己的代码。</p></blockquote><p>常见的STL容器：</p><ol><li>std::string 字符串</li><li>std::vector 动态数组</li><li>std::map 关联数组</li></ol><h2 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h2><p>无优化有符号：</p><p><img src="/./../images/image-20240623132004934.png" alt="image-20240623132004934"></p><p>O3+有符号</p><p><img src="/./../images/image-20240623153746663.png" alt="image-20240623153746663"></p><p>对比O0和O3的差距非常大</p><hr><h1 id="STL内存布局"><a href="#STL内存布局" class="headerlink" title="STL内存布局"></a>STL内存布局</h1><p>在调试程序时观察数据内存布局推断容器类型，以64位gnu C++的stl为例</p><p>std::string 结构大致如下：</p><pre><code class="c++">struct basic_string&#123;    char *begin_; //actual string data    size_t size; //actual size    union    &#123;        size_t capacity; //used if larger than 15 bytes        char sso_buffer[16];//used if smaller than 16 bytes    &#125;&#125;</code></pre><p>该结构体固定长度为32字节，4个dq</p><p>如果字符串长度小于16，数据就存储在当前结构，否则重新分配内存存放数据</p><p><img src="/./../images/image-20240623212040658.png" alt="image-20240623212040658"></p><p>std::vector 内存布局</p><pre><code class="c++">struct vector_point&#123;    Point* start;//指向数据起始长度    Point* end;//指向数据结束地址    Point* max;//指向已分配内存的最大长度&#125;</code></pre><p>固定长度24字节，3个dq</p><p>调试验证</p><p><img src="/./../images/image-20240623212120677.png" alt="image-20240623212120677"></p><p>std::map内存布局，stl内部使用红黑树实现std::map，要获得所有键值对，这里只需要遍历二叉树即可</p><pre><code class="c++">struct std::map&#123;    void* allocator; //ignore    color color; //ignore    node  * root;    node * leftmost;//ignore    node * rightmost;//ignore    size_t node_count;&#125;struct node&#123;    color color;    node * parent;    node * left;    node * right;        TypeKey key;//data_area    TypeValue value;&#125;</code></pre><p>解析脚本</p><pre><code class="python">import idautils import idaapi import idc # parse gnu c++ stlmap def parse_gnu_map_header(address):     root = idc.read_dbg_qword(address + 0x10)     return root def parse_gnu_map_node(address):     left  = idc.read_dbg_qword(address + 0x10)     right = idc.read_dbg_qword(address + 0x18)     data  = address + 0x20     return left, right, data def parse_gnu_map_travel(address):     # address &lt;- std::map struct address     result = []     worklist = [parse_gnu_map_header(address)]     while len(worklist) &gt; 0:         addr = worklist.pop()         (left, right, data) = parse_gnu_map_node(addr)         if left &gt; 0:             worklist.append(left)         if right &gt; 0:             worklist.append(right);         result.append(data)     return result # example elements = parse_gnu_map_travel(0x564D240D0EB0) for elem in elements:     print(hex(elem)) </code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	C++方向逆向STL&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    <category term="Windows逆向" scheme="https://pa1r0t.github.io/categories/ctf/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>SMC原理</title>
    <link href="https://pa1r0t.github.io/2024/06/22/SMC%E5%8E%9F%E7%90%86/"/>
    <id>https://pa1r0t.github.io/2024/06/22/SMC%E5%8E%9F%E7%90%86/</id>
    <published>2024-06-22T10:31:02.000Z</published>
    <updated>2024-06-25T14:03:01.702Z</updated>
    
    <content type="html"><![CDATA[<p>SMC加密技术</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;SMC加密技术&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    <category term="Windows逆向" scheme="https://pa1r0t.github.io/categories/ctf/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>VMProtect原理与还原(1)</title>
    <link href="https://pa1r0t.github.io/2024/06/21/VMProtect%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%98%E5%8E%9F-1/"/>
    <id>https://pa1r0t.github.io/2024/06/21/VMProtect%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%98%E5%8E%9F-1/</id>
    <published>2024-06-21T05:24:07.000Z</published>
    <updated>2024-06-25T14:04:20.311Z</updated>
    
    <content type="html"><![CDATA[<p>​工具、脱壳</p><span id="more"></span><h1 id="什么是VMProtect"><a href="#什么是VMProtect" class="headerlink" title="什么是VMProtect?"></a>什么是VMProtect?</h1><p>​Virtual Machine Protect. 虚拟机保护</p><p>​VMProtect的基本原则是通过使应用程序代码和逻辑变得非常复杂,<strong>执行虚拟化代码片段的虚拟机是嵌入到受保护应用程序的结果代码中的</strong>。</p><p>​虚拟化代码，无需解码，不同于对代码进行加密&#x2F;解密，VMProtect让其在虚拟CPU上运行。而这个异于常规X36&#x2F;X64CPU的虚拟CPU，会对每个受保护的文件发出不同的指令集。</p><p>​VMP有自己的虚拟CPU和虚拟指令集，那么对原生指令进行保护时，将原生指令转换为虚拟指令。</p><h2 id="还原效果："><a href="#还原效果：" class="headerlink" title="还原效果："></a>还原效果：</h2><p>原汇编代码：</p><pre><code class="assembly">lea eax,dword ptr ds:[edx+0x6]add eax,ecxretn</code></pre><p>还原后代码：</p><pre><code class="assembly">lea dreg[3c], [ dreg[14] + 00000006 ]lea dreg[00], [ dreg[08] + dreg[3c] ]  retn</code></pre><p><strong>我们看到寄存器还是虚拟寄存器，最后需要我们进行寄存器的转换分析，转换为真实寄存器，第二条</strong>lea<strong>指令经过寄存器变换，也将还原成add指令</strong></p><hr><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="dll的主要功能"><a href="#dll的主要功能" class="headerlink" title="dll的主要功能"></a>dll的主要功能</h2><h2 id="kernel32-dll"><a href="#kernel32-dll" class="headerlink" title="kernel32.dll"></a><strong>kernel32.dll</strong></h2><p>kernel32.dll是Windows 9x&#x2F;Me中非常重要的32位动态链接库文件，属于内核级文件。它控制着<strong>系统的内存管理、数据的输入输出操作和中断处理</strong>，当Windows启动时，kernel32.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。</p><h3 id="user32-dll"><a href="#user32-dll" class="headerlink" title="user32.dll"></a><strong>user32.dll</strong></h3><p>user32.dll是Windows用户界面相关应用程序接口，用于包括<strong>Windows处理，基本用户界面</strong>等特性，如<strong>创建窗口和发送消息</strong>。</p><p>在早期32-bit 版本的Windows中，用户控件是在ComCtl32中实现的，但是一些控件的显示功能是在User32.dll中实现的。例如在一个窗口中非客户区域（边框和菜单）的绘制就是由User32.dll来完成的。User32.dll 是操作系统的一个核心控件，它和操作系统是紧密联系在一起的。也就是说，不同版本的Windows中User32.dll 是不同。因此，应用程序在不同版本的Windows中运行的时候，由于User32.dll的不同，会导致应用程序的界面通常会有微小的不同。</p><h3 id="gdi32-dll"><a href="#gdi32-dll" class="headerlink" title="gdi32.dll"></a><strong>gdi32.dll</strong></h3><p>gdi32.dll是Windows GDI<strong>图形用户界面相关程序，包含的函数用来绘制图像和显示文字</strong></p><h3 id="comdlg32-dll"><a href="#comdlg32-dll" class="headerlink" title="comdlg32.dll"></a><strong>comdlg32.dll</strong></h3><p>comdlg32.dll是Windows应用程序<strong>公用对话框模块</strong>，用于例如打开文件对话框。</p><h3 id="advapi32-dll"><a href="#advapi32-dll" class="headerlink" title="advapi32.dll"></a><strong>advapi32.dll</strong></h3><p>advapi32.dll是一个高级API应用程序接口服务库的一部分，包含的函数与对象的安全性，注册表的操控以及事件日志有关。</p><h3 id="shell32-dll"><a href="#shell32-dll" class="headerlink" title="shell32.dll"></a><strong>shell32.dll</strong></h3><p>shell32.dll是Windows的32位<strong>外壳动态链接库文件</strong>，用于打开网页和文件，建立文件时的默认文件名的设置等大量功能。</p><p>严格来讲，它只是代码的合集，真正执行这些功能的是操作系统的相关程序，dll文件只是根据设置调用这些程序的相关功能罢了。</p><h3 id="ole32-dll"><a href="#ole32-dll" class="headerlink" title="ole32.dll"></a><strong>ole32.dll</strong></h3><p>ole32.dll是对象链接和嵌入相关模块。</p><h3 id="odbc32-dll"><a href="#odbc32-dll" class="headerlink" title="odbc32.dll"></a><strong>odbc32.dll</strong></h3><p>odbc32.dll是ODBC数据库查询相关文件。 </p><h3 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h3><p>PE结构可以大致分为:</p><ul><li><p>DOS部分u_IMAGE_DOS_HEADER</p><pre><code class="assembly">typedef struct _IMAGE_DOS_HEADER &#123;          WORD   e_magic;                          WORD   e_cblp;                             WORD   e_cp;                                WORD   e_crlc;                              WORD   e_cparhdr;                       WORD   e_minalloc;                      WORD   e_maxalloc;                     WORD   e_ss;                                WORD   e_sp;                                WORD   e_csum;                           WORD   e_ip;                                WORD   e_cs;                WORD   e_lfarlc;                            WORD   e_ovno;                           WORD   e_res[4];                          WORD   e_oemid;                         WORD   e_oeminfo;                      WORD   e_res2[10];                      LONG    e_lfanew;                      &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</code></pre><p>该结构体中需要掌握的字段只有 2 个，分别是第一个字段 <code>e_magic</code> 和最后一个字段 <code>e_lfanew</code> 字段</p><p><code>e_magic</code>字段:<br>DOS 可执行文件的标识符，占用 2 字节。该位置保存着的字符是“MZ”</p><p><code>e_lfanew</code>字段：<br>保存着PE头的起始位置。</p><p>作用：</p><ul><li><code>定位PE文件头开始位置</code>，也可用于<code>PE文件合法性检测</code></li></ul></li></ul><p>​u_IMAGE_NT_HEADERS NT头（PE头）</p><p>DOS头偏移多少是PE头位置</p><pre><code class="assembly">typedef struct _IMAGE_NT_HEADERS &#123;      DWORD Signature;  //PE标识    IMAGE_FILE_HEADER FileHeader;      IMAGE_OPTIONAL_HEADER OptionalHeader;&#125; IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;</code></pre><ul><li>PE文件头   u_IMAGE_FILE_HEADER</li></ul><pre><code class="assembly">typedef struct _IMAGE_FILE_HEADER &#123;      WORD Machine;      WORD NumberOfSections;  //主要关心区段数目    DWORD TimeDateStamp;      DWORD PointerToSymbolTable;      DWORD NumberOfSymbols;      WORD SizeOfOptionalHeader;      WORD Characteristics;&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</code></pre><p><strong>_IMAGE_OPTIONAL_HEADER</strong></p><pre><code class="assembly">typedef struct _IMAGE_OPTIONAL_HEADER &#123;      WORD Magic;      BYTE MajorLinkerVersion;      BYTE MinorLinkerVersion;      DWORD SizeOfCode;      DWORD SizeOfInitializedData;      DWORD SizeOfUninitializedData;      DWORD AddressOfEntryPoint;  //入口点    DWORD BaseOfCode;      DWORD BaseOfData;      DWORD ImageBase;  //映像基地址/模块地址    DWORD SectionAlignment;  //区段对齐    DWORD FileAlignment;  //文件对齐    WORD  MajorOperatingSystemVersion;      WORD  MinorOperatingSystemVersion;      WORD  MajorImageVersion;      WORD  MinorImageVersion;      WORD  MajorSubsystemVersion;      WORD  MinorSubsystemVersion;      DWORD    Win32VersionValue;      DWORD    SizeOfImage;  //映像大小    DWORD    SizeOfHeaders;      DWORD    CheckSum;      WORD     Subsystem;      WORD     DllCharacteristics;  //dll属性    DWORD    SizeOfStackReserve;      DWORD    SizeOfStackCommit;      DWORD SizeOfHeapReserve;      DWORD SizeOfHeapCommit;      DWORD LoaderFlags;      DWORD NumberOfRvaAndSizes;    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];//数据目录包含在选项头里&#125; IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;</code></pre><ul><li>节数据(块数据) u_IMAGE_DATA_DIRECTORY</li></ul><pre><code class="c">typedef struct _IMAGE_DATA_DIRECTORY &#123;    DWORD   VirtualAddress;    DWORD   Size;&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16//16个数据目录</code></pre><ul><li>区域段结构 u_IMAGE_SECTION_HEADER</li></ul><pre><code class="c">typedef struct _IMAGE_SECTION_HEADER &#123;    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];//区段名称    union &#123;            DWORD   PhysicalAddress;            DWORD   VirtualSize;//程序加载后区段大小    &#125; Misc;    DWORD   VirtualAddress;//程序加载后区段地址    DWORD   SizeOfRawData;//文件中数据大小    DWORD   PointerToRawData;//文件中数据偏移    DWORD   PointerToRelocations;    DWORD   PointerToLinenumbers;    WORD    NumberOfRelocations;    WORD    NumberOfLinenumbers;    DWORD   Characteristics;//区段属性&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;#define IMAGE_SIZEOF_SECTION_HEADER          40</code></pre><ul><li>调试信息</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	工具、脱壳&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    <category term="前置知识学习" scheme="https://pa1r0t.github.io/categories/re/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="VMProtect" scheme="https://pa1r0t.github.io/tags/VMProtect/"/>
    
  </entry>
  
  <entry>
    <title>有理数四则运算</title>
    <link href="https://pa1r0t.github.io/2023/05/16/%E6%9C%89%E7%90%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    <id>https://pa1r0t.github.io/2023/05/16/%E6%9C%89%E7%90%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</id>
    <published>2023-05-16T08:49:16.000Z</published>
    <updated>2024-06-25T13:32:42.165Z</updated>
    
    <content type="html"><![CDATA[<p>诸多细节一不小心就写烂了</p><span id="more"></span><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>本题要求编写程序，计算 2 个有理数的和、差、积、商。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中按照 <code>a1/b1 a2/b2</code> 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>分别在 4 行中按照 <code>有理数1 运算符 有理数2 = 结果</code> 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 <code>k a/b</code>，其中 <code>k</code> 是整数部分，<code>a/b</code> 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 <code>Inf</code>。题目保证正确的输出中没有超过整型范围的整数。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="in">2/3 -4/2</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="out">2/3 + (-2) = (-1 1/3)2/3 - (-2) = 2 2/32/3 * (-2) = (-1 1/3)2/3 / (-2) = (-1/3)</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="in">5/3 0/6</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="out">1 2/3 + 0 = 1 2/31 2/3 - 0 = 1 2/31 2/3 * 0 = 01 2/3 / 0 = Inf</code></pre><p>原先求最小公倍数代码：</p><pre><code class="c++">while(m != n)&#123;//创立两个变量来求最小公约数     if(m &gt; n) m -= n;    else n -= m;&#125;</code></pre><p>运行超时：</p><p><img src="/./../images/image-20230516170613514.png" alt="image-20230516170613514"></p><p><code>超时的原因可能是一个变量很大，一个变量很小，循环的次数太多了</code></p><p>大佬的代码：</p><pre><code class="c++">int gcd(int t1, int t2) &#123;    return t2 == 0 ? t1 : gcd(t2, t1 % t2);&#125;</code></pre><p>辗转相除法递归写法</p><p>c++中库函数__gcd()求最小公倍数：要包含头文件#include<algorithm></algorithm></p><p>不超时答案错误：</p><p><img src="/./../images/image-20230516191023762.png" alt="image-20230516191023762"></p><blockquote><p>柳神分析：</p><p><strong>func(m, n)的作用是对m&#x2F;n的分数进行化简，gcd(t1, t2)的作用是计算t1和t2的最大公约数～在func函数中，先看m和n里面是否有0（即m*n是否等于0），如果分母n&#x3D;0，输出Inf，如果分子m&#x3D;0，输出”0″～flag表示m和n是否异号，flag&#x3D;true表示后面要添加负号”(-“和括号”)”，再将m和n都转为abs(m)和abs(n)，即取他们的正数部分方便计算～x &#x3D; m&#x2F;n为m和n的可提取的整数部分，先根据flag的结果判断是否要在前面追加”(-“，然后根据x是否等于0判断要不要输出这个整数位，接着根据m%n是否等于0的结果判断后面还有没有小分数，如果m能被n整除，表示没有后面的小分数，那么就根据flag的结果判断要不要加”)”，然后直接return～如果有整数位，且后面有小分数，则要先输出一个空格，接着处理剩下的小分数，先把m分子减去已经提取出的整数部分，然后求m和n的最大公约数t，让m和n都除以t进行化简～最后输出“m&#x2F;n”，如果flag&#x3D;&#x3D;true还要在末尾输出”)”</strong></p><p><strong>判断m和n是否异号千万不要写成判断m*n是否小于0，因为m*n的结果可能超过了long long int的长度，导致溢出大于0，如果这样写的话会有一个测试点无法通过</strong>（语言本身的问题，python不存在的）</p></blockquote><p>正确代码：</p><pre><code class="c++">#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;string&gt;using namespace std;long long gcd(long long a, long long b)&#123;    return (b != 0) ? gcd(b,a%b) : a;&#125;string func(long long a,long long b)&#123;    if(!a || !b) return b == 0 ? &quot;Inf&quot; : &quot;0&quot;; // 分子分母有一个是0的情况     string res = ((a &gt; 0 &amp;&amp; b &lt; 0) || (a &lt; 0 &amp;&amp; b &gt; 0)) ? &quot;(-&quot; : &quot;&quot;; // 判断正负    a = abs(a);b = abs(b);     long long x = a/b;    res += (x != 0) ? to_string(x) : &quot;&quot;; //整数部分    if(a % b == 0)&#123;        if(res[0] == &#39;(&#39;) return res+&quot;)&quot;;        return res;    &#125;     else if(x != 0) res += &quot; &quot;;    a = a - b * x;    long long n = gcd(a,b);    a /= n;b /= n;    res += to_string(a) + &quot;/&quot; + to_string(b);    if(res[0] == &#39;(&#39;) return res + &quot;)&quot;;    return res;&#125;int main(void)&#123;    long long  f1,f2,m1,m2;    scanf(&quot;%lld/%lld %lld/%lld&quot;,&amp;f1,&amp;m1,&amp;f2,&amp;m2);    string str1 = func(f1,m1),str2 = func(f2,m2);    cout &lt;&lt; str1 &lt;&lt; &quot; + &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2+f2*m1,m1*m2) &lt;&lt; endl;    cout &lt;&lt; str1 &lt;&lt; &quot; - &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2-f2*m1,m1*m2) &lt;&lt; endl;    cout &lt;&lt; str1 &lt;&lt; &quot; * &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*f2,m1*m2) &lt;&lt; endl;    cout &lt;&lt; str1 &lt;&lt; &quot; / &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2,f2*m1);&#125;</code></pre><p>其实就是要把所有变量都给成long long类型，题目说好在整型范围内，气死我了😒</p><p>然后这题我原本的想法是把四则运算全部合到一起，但是太混乱了。柳神这样把分数表示单独弄成一个函数，把运算全部改成简单数学运算，所有的细节都合成一个函数中，太妙了！！好绝👍</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;诸多细节一不小心就写烂了&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>双指针优化</title>
    <link href="https://pa1r0t.github.io/2023/05/11/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96/"/>
    <id>https://pa1r0t.github.io/2023/05/11/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96/</id>
    <published>2023-05-11T07:21:59.000Z</published>
    <updated>2024-06-25T13:31:53.418Z</updated>
    
    <content type="html"><![CDATA[<p><strong>完美数列</strong></p><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个正整数数列，和正整数 <em>p</em>，设这个数列中的最大值是 <em>M</em>，最小值是 <em>m</em>，如果 <em>M</em>≤<em>m**p</em>，则称这个数列是完美数列。</p><p>现在给定参数 <em>p</em> 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 <em>N</em> 和 <em>p</em>，其中 <em>N</em>（≤105）是输入的正整数的个数，<em>p</em>（≤109）是给定的参数。第二行给出 <em>N</em> 个正整数，每个数不超过 109。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">10 82 3 20 4 5 1 6 7 8 9</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">8</code></pre><blockquote><p>题目分析：原先我的想法是假设最长数列就是n，然后有序数组进行两端判断。想法是有，但是代码不知道怎么写</p><p>柳神是用双指针，这题其实双指针的时间复杂度都能上n^2^了，所以这里双指针要优化一下，用res来存放当前最长长度，</p><p>第一重循环用i&#x3D;0~n,第二层循环j就不能从0开始了否则太慢了，而且重复了。</p><p>第二重循环用j&#x3D;i+res~n</p><p>第二重循环中判断到不符合条件就直接跳出了，因为这是个有序数组，之后的数据也都不成立了。</p><p>所以做这两个优化后，效率杠杠的👍</p></blockquote><pre><code class="c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main(void)&#123;    int n;    long p;    cin &gt;&gt; n &gt;&gt; p;    int a[n],i,j;    for(i = 0; i &lt; n ;i++) cin &gt;&gt; a[i];    sort(a,a+n);    int tmp = 0,res = 0;    for(i = 0; i &lt; n ;i++)&#123;        for(j=i + res;j &lt; n;j++)              if(a[i] * p &gt;= a[j] &amp;&amp; (tmp = j - i + 1) &gt; res)  res = tmp;            else break;    &#125;    cout &lt;&lt; res;    return 0;&#125;</code></pre><hr><h2 id="归并与插入"><a href="#归并与插入" class="headerlink" title="归并与插入"></a>归并与插入</h2><p><strong>插入排序</strong>是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。</p><p><strong>归并排序</strong>进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。</p><p>现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在第 1 行中输出<code>Insertion Sort</code>表示插入排序、或<code>Merge Sort</code>表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="in">103 1 2 8 7 5 9 4 6 01 2 3 7 8 5 9 4 6 0</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="out">Insertion Sort1 2 3 5 7 8 9 4 6 0</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="in">103 1 2 8 7 5 9 4 0 61 3 2 8 5 7 4 9 0 6</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="out">Merge Sort1 2 3 8 4 5 7 9 0 6</code></pre><blockquote><p>题目分析：</p><p>这题由于插入排序是从后往前的，所以插入排序的中间序列一定是，前段有序，后段和原序列相同。</p><p>归并排序的话没有直观的规律，这里不是插入就是归并了，极端情况的数据没有意义</p><p>这里归并排序的下一个序列，由于无法判断是第几次归并，所以只能用原序列进行一次次归并比较中间序列，直到全部吻合</p><p><code>这里值得学习的是，用c++的sort函数，直接忽略了插入排序和归并排序的具体排序细节，运行效率可能没有她两好，不过开发效率很香</code></p></blockquote><pre><code class="c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main(void)&#123;        int n;        cin &gt;&gt; n;        int a[n],b[n],i,j;        for(i=0;i &lt; n;i++) cin &gt;&gt; a[i];        for(i=0;i &lt; n;i++) cin &gt;&gt; b[i];        for(i=0;b[i] &lt;= b[i+1];i++);        for(j=i + 1;b[j] == a[j] &amp;&amp; j &lt; n;j++);        if(j == n)&#123;            cout &lt;&lt; &quot;Insertion Sort&quot; &lt;&lt; endl;            sort(a,a+i+2);        &#125;else&#123;            cout &lt;&lt; &quot;Merge Sort&quot; &lt;&lt; endl;            int flag = 1 , k = 1;            while(flag)&#123;                flag = 0;                for(i = 0; i &lt; n ; i++) if(a[i] != b[i]) flag = 1;                k *= 2;                for(i = 0; i &lt; n / k ; i++) sort(a + i * k, a + (i+1)*k );                sort(a + n / k * k, a + n); // n / k 不整除的情况下，剩余部分给计算进去             &#125;        &#125;        for(i=0;i &lt; n;i++) &#123;            if(i != 0) cout &lt;&lt; &quot; &quot;;            cout &lt;&lt; a[i];        &#125;        return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;完美数列&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于c++中double误差问题</title>
    <link href="https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-10T02:46:59.000Z</published>
    <updated>2024-06-25T13:31:10.367Z</updated>
    
    <content type="html"><![CDATA[<p>question: double</p><span id="more"></span><h2 id="PAT甲级题"><a href="#PAT甲级题" class="headerlink" title="PAT甲级题"></a>PAT甲级题</h2><p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。</p><p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 &#x3D; 5.0。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个不超过 105 的正整数 <em>N</em>，表示数列中数的个数，第二行给出 <em>N</em> 个不超过 1.0 的正数，是数列中的数，其间以一个空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出该序列所有片段包含的数之和，</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">40.1 0.2 0.3 0.4</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">5.00</code></pre><p>关于这题的分析：</p><blockquote><p>我是看了柳神的，我天真地以为一个数据出现了n-1词，但比如0.2在0.1的条件下，就已经出现了3次了</p></blockquote><p>柳神原话：将数列中的每个数字读取到temp中，假设我们选取的片段中包括temp，且这个片段的首尾指针分别为p和q，那么对于p，有i种选择，即12…i，对于q，有n-i+1种选择，即i, i+1, … n，所以p和q组合形成的首尾片段有i * (n-i+1)种，因为每个里面都会出现temp，所以temp引起的总和为temp * i * (n – i + 1)；遍历完所有数字，将每个temp引起的总和都累加到sum中，最后输出sum的值</p><p>原先的代码：</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main(void)&#123;    int n;    double tmp,sum = 0;    cin &gt;&gt; n;    for(int i=0;i&lt;n;i++)&#123;        cin &gt;&gt; tmp;        sum += tmp * (i + 1) * (n - i);    &#125;    printf(&quot;%.2f&quot;,sum);    return 0;&#125;</code></pre><p><strong>结果不太行啊</strong></p><p><img src="/./../images/image-20230510111635757.png" alt="image-20230510111635757"></p><blockquote><p>这里用double进行运算时是会产生误差的，因为有些数用二进制表示不出来，c++中只能粗略表示.</p><p>具体参考文章：<a href="https://bipy.me/post/about-double/">由一道 OJ 引发的关于 double 类型的一些思考 | Lust for Life (bipy.me)</a></p></blockquote><p>然后大佬给出的方案是用long long 类型进行小数点后移×1000，这里其实就要考虑所给的数据是否都是最多小数点后三位了</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main(void)&#123;    int n;    long long sum = 0;    double tmp;    cin &gt;&gt; n;    for(int i=0;i&lt;n;i++)&#123;        cin &gt;&gt; tmp;        sum += (long long)(tmp * 1000) * (i + 1) * (n - i);    &#125;    printf(&quot;%.2f&quot;,sum/1000.0);    return 0;&#125;</code></pre><p><strong>然后这里居然才4.99</strong></p><p><img src="/./../images/image-20230510135403050.png" alt="image-20230510135403050"></p><p>更离谱的是给通过了😂笑死，反正我感觉很不靠谱</p><p><img src="/./../images/image-20230510135517225.png" alt="image-20230510135517225"></p><p><strong>其实我觉得这题用java中的bigdecimal才是最优</strong></p><p>动态规划类解法：(从后往前遍历)</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main(void)&#123;    int n;    double tmp;    long long sum = 0;    cin &gt;&gt; n;    long long seq[n];    for(int i=0;i&lt;n;i++) &#123;        cin &gt;&gt; tmp;        seq[i] = (long long)(tmp * 1000);    &#125;    sum = seq[n-1];    for(int i=n - 2;i !=-1 ;i--)&#123;        seq[i] = seq[i] * (n - i ) + seq[i+1];        sum += seq[i];    &#125;    printf(&quot;%.2f&quot;,sum/1000.0);    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;question: double&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>奇奇怪怪的错误</title>
    <link href="https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2023-05-09T02:30:44.000Z</published>
    <updated>2024-06-25T13:31:33.793Z</updated>
    
    <content type="html"><![CDATA[<p>PAT乙级第二天记录——反转链表（纯数组解）</p><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个常数 <em>K</em> 以及一个单链表 <em>L</em>，请编写程序将 <em>L</em> 中每 <em>K</em> 个结点反转。例如：给定 <em>L</em> 为 1→2→3→4→5→6，<em>K</em> 为 3，则输出应该为 3→2→1→6→5→4；如果 <em>K</em> 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 <em>K</em> 个元素不反转。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 <em>N</em> (≤105)、以及正整数 <em>K</em> (≤<em>N</em>)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p><p>接下来有 <em>N</em> 行，每行格式为：</p><pre><code>Address Data Next</code></pre><p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">00100 6 400000 4 9999900100 1 1230968237 6 -133218 3 0000099999 5 6823712309 2 33218</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">00000 4 3321833218 3 1230912309 2 0010000100 1 9999999999 5 6823768237 6 -1</code></pre><p>奇奇怪怪的错误</p><p><img src="/./../images/image-20230509104121801.png" alt="image-20230509104121801"></p><p>后面发现是我main函数return 1</p><p>搜了网友的回答：shell返回值非0是程序退出异常，说明你的代码抛出了异常。</p><p>soga！！！</p><blockquote><p>首先这题并没有用到链表结构而是用几个容量大的数组把数据存起来，存起来之后再用一个数组把节点地址线性存起来，节点下一个地址就是下一个位置的值，太妙了😁！！！反转的话直接在地址上反转就行丝毫不影响数据之间的变化。</p></blockquote><p>原本我的代码：</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;algorithm&gt; using namespace std;int main(void)&#123;    int first,N,K,tmp;    int next[100000],data[100000],list[100000];    cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;    for(int i=0;i&lt;N;i++)&#123;        cin &gt;&gt; tmp;        cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];    &#125;    int sum = 0; // 不是所有节点都在链上     //用list数组构造链表    for(int i=0;first != -1;i++)&#123;        list[sum++] = first;        first = next[first];    &#125;    //反转链表    for(int i=0;i&lt;sum-i*K;i+=K)&#123;        reverse(begin(list)+i,begin(list)+i+K);    &#125;    for(int i=0;i&lt;sum-1;i++)&#123;        printf(&quot;%05d %d %05d\n&quot;,list[i],data[list[i]],list[i+1]);    &#125;    printf(&quot;%05d %d -1&quot;,list[sum-1],data[list[sum-1]]);    return 0;&#125; </code></pre><p>这里的错误主要是<strong>【i&lt;sum-i*K】</strong>。</p><p>我真是脑残，i的值是会变的呀，只能说我写的时候思维好不严谨😢</p><p>修改后：</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;algorithm&gt; using namespace std;int main(void)&#123;    int first,N,K,tmp;    int next[100000],data[100000],list[100000];    cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;    for(int i=0;i&lt;N;i++)&#123;        cin &gt;&gt; tmp;        cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];    &#125;    int sum = 0; // 不是所有节点都在链上     //用list数组构造链表    for(int i=0;first != -1;i++)&#123;        list[sum++] = first;        first = next[first];    &#125;    //反转链表    for(int i=0;i&lt;=sum - sum % K;i+=K)&#123;        reverse(begin(list)+i,begin(list)+i+K);    &#125;    for(int i=0;i&lt;sum-1;i++)&#123;        printf(&quot;%05d %d %05d\n&quot;,list[i],data[list[i]],list[i+1]);    &#125;    printf(&quot;%05d %d -1&quot;,list[sum-1],data[list[sum-1]]);    return 1;&#125; </code></pre><hr><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>让我们定义<em>d<del>n</del><em>为：</em>d<del>n</del></em>&#x3D;<em>p<del>n+1</del>−</em>p<del>n</del><em>，其中</em>p*<del>i</del><em>是第</em>i<em>个素数。显然有</em>d*<del>1</del>&#x3D;1，且对于<em>n</em>&gt;1有*d<del>n</del>*是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的<code>素数对的个数</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="in">20</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="out">4</code></pre><blockquote><p>这题显然是素数问题，写个判断素数就行，差为2的话少于5的都是0个，大于5才有素数对；</p><p>这里柳神判断素数是<code>i * i &lt;= n</code>,这样都不用考虑用开平方的函数了</p></blockquote><p><strong>代码：</strong></p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int isprime(int n)&#123;    for(int i=2;i * i &lt;= n;i++)&#123;        if(n % i == 0)&#123;            return 0;        &#125;    &#125;    return 1;&#125;int main(void)&#123;    int n,cnt = 0;    cin &gt;&gt; n;    for(int i=5;i&lt;=n;i+=2)&#123;        if(isprime(i) &amp;&amp; isprime(i-2)) cnt++;            &#125;    cout &lt;&lt; cnt;&#125;</code></pre><hr><h2 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h2><p>On a broken keyboard, some of the keys are worn out. So when you type some sentences, the characters corresponding to those keys will not appear on screen.</p><p>Now given a string that you are supposed to type, and the string that you actually type out, please list those keys which are for sure worn out.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the 1st line contains the original string, and the 2nd line contains the typed-out string. Each string contains no more than 80 characters which are either English letters [A-Z] (case insensitive), digital numbers [0-9], or <code>_</code> (representing the space). It is guaranteed that both strings are non-empty.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the keys that are worn out, in the order of being detected. The English letters must be capitalized. Each worn out key must be printed once only. It is guaranteed that there is at least one worn out key.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre><code class="in">7_This_is_a_test_hs_s_a_es</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre><code class="out">7TI</code></pre><blockquote><p>这是一道甲级题，但是非常简单，题目大意就是找不完整的字母，然后用大写字母输出，但是每个大写字母只输出一次。</p><p>用c++中string的find函数即可，<code>string::npos</code>是没有找到的意思。</p></blockquote><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cctype&gt;using namespace std;int main(void)&#123;    string s1,s2,ans;    cin &gt;&gt; s1 &gt;&gt; s2;    for(int i=0;i&lt;s1.length();i++)&#123;        if(s2.find(s1[i]) == string::npos &amp;&amp; ans.find(toupper(s1[i])) == string::npos)&#123;            ans += toupper(s1[i]);        &#125;    &#125;    cout &lt;&lt; ans;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT乙级第二天记录——反转链表（纯数组解）&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>pat乙级第二天记录</title>
    <link href="https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
    <id>https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/</id>
    <published>2023-05-08T05:31:53.000Z</published>
    <updated>2024-06-25T13:41:57.586Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些写代码上的小细节</p><span id="more"></span><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><pre><code>第 1 行：正整数 n第 2 行：第 1 个学生的姓名 学号 成绩第 3 行：第 2 个学生的姓名 学号 成绩  ... ... ...第 n+1 行：第 n 个学生的姓名 学号 成绩</code></pre><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">3Joe Math990112 89Mike CS991301 100Mary EE990830 95</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">Mike CS991301Joe Math990112</code></pre><p>这一题我其实想将学生信息用三个字符串来同时存各种信息，奈何c++切割字符串方面并没有python方便，所以我也老老实实空间换时间了，不过程序逻辑还真算是简单了</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main(void)&#123;    int n,max_s = -1,min_s = 101,score;    string max_name,min_name,max_num,min_num,tmp_name,tmp_num;    cin &gt;&gt; n;    for(int i=0;i&lt;n;i++)&#123;        cin &gt;&gt; tmp_name &gt;&gt; tmp_num &gt;&gt; score;        if(score &gt; max_s)&#123; max_s = score; max_name = tmp_name; max_num = tmp_num;&#125;        if(score &lt; min_s)&#123; min_s = score; min_name = tmp_name; min_num = tmp_num;&#125;    &#125;    cout &lt;&lt; max_name &lt;&lt; &quot; &quot; &lt;&lt; max_num &lt;&lt; endl;    cout &lt;&lt; min_name &lt;&lt; &quot; &quot; &lt;&lt; min_num;    &#125;</code></pre><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">3</code></pre><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">5</code></pre><p>我原本是这样写的：</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    int n,i = 0;    cin &gt;&gt; n;    for(;n != 1;i++)&#123;        if(n%2) n = (3*n + 1)/2;         else n /= 2;    &#125;    cout &lt;&lt; i;&#125; </code></pre><p>但其实这在效率上差了点，if的两两种情况都要除2。</p><p>看了柳神的解答，我们可以将两种处理运算中抽离共同运算</p><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    int n,i = 0;    cin &gt;&gt; n;    for(;n != 1;i++)&#123;        if(n%2) n = (3*n + 1);        n /= 2;    &#125;    cout &lt;&lt; i;&#125; </code></pre><p>像这题题解也一样</p><pre><code class="c++">for(int i=0;i&lt;tmp.size();i++)&#123;        if(i!=0) cout &lt;&lt; &quot; &quot;;        cout &lt;&lt; mp[tmp[i]-48];    &#125;</code></pre><p>每一次都不一样要打印空格，但每次必须要打印数字。可以在开端或者末尾进行受限。但是在末尾的话还要再次计算tmp.size()，这样就要花销了</p><h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">63 5 6 7 8 11</code></pre><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">7 6</code></pre><p>解答：</p><ol><li>这里输入的数用一个数组进行存放；</li><li>然后用另外的数组arr进行记录n运算过程中出现某些数，出现过记录为1，其他为0；</li><li>然后进行存放数据的数组进行排序；</li><li>然后遍历数组，arr为0的位置输出即可</li><li>这里虽然数n小于100，但是如果是99就会×3+1，必然会大于100，这里arr数组尽可能地大</li><li>由于数组一需要排序，为了方便我们用了vector容器</li><li>这里sort用了lambda表达式，效率不知道怎么样，够帅就行哈哈</li><li>然后就是输出了，这里每次因为不一定会输出数，也不一定会输出空格，所以没有公共部分，只能用if过滤了</li><li>这里用了一个flag来记录是否输出空格，还是采用“     ”+数的形式</li></ol><pre><code class="c++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int arr[100000];int main(void)&#123;    int n,tmp,k;    cin &gt;&gt; k;    vector&lt;int&gt; v(k);    for(int i=0;i&lt;k;i++)&#123;        cin &gt;&gt; n;        v[i] = n;        for(;n != 1;)&#123;                if(n%2) n = (3*n + 1);                n /= 2;                if(arr[n]==1) break;                arr[n] = 1;        &#125;    &#125;    sort(v.begin(),v.end(),[](int a,int b)&#123;return a &gt; b;&#125;);    for(int i=0,flag = 0;i&lt;k;i++)&#123;        if(arr[v[i]] == 0) &#123;            if(flag) &#123; cout &lt;&lt; &quot; &quot;;&#125;            cout &lt;&lt; v[i];             flag = 1;         &#125;            &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些写代码上的小细节&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>map题解字符串问题</title>
    <link href="https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-07T11:33:37.000Z</published>
    <updated>2024-06-25T13:39:13.869Z</updated>
    
    <content type="html"><![CDATA[<p>PAT_basic C++ map1</p><span id="more"></span><h1 id="PAT乙级1003-我要通过！"><a href="#PAT乙级1003-我要通过！" class="headerlink" title="PAT乙级1003. 我要通过！"></a>PAT乙级1003. 我要通过！</h1><p>​此题，题目就难以理解。不过现在理解了，题目其实我觉得条件二要在条件一的基础上理解，然后条件三要在条件二的基础上理解，然后需要给出例子进行推导，然后总结出结论——其实就是总结出公式</p><p><strong>题目：</strong></p><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">10PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAAAPTAPATTAA</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">YESYESYESYESNONONONONONO</code></pre><p>题解：</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;map&gt;using namespace std;int main(void)&#123;    int n;    string s;    int p=-1,t=-1;    cin &gt;&gt; n;    for(int i=0;i&lt;n;i++)&#123;        cin &gt;&gt; s;        map&lt;char,int&gt; mp;        //遍历字符串        for(int j=0;j&lt;s.size();j++)&#123;            //记录字符数量             mp[s[j]]++;            //记录P,T的位置            if(s[j] == &#39;P&#39;) p = j;            if(s[j] == &#39;T&#39;) t = j;        &#125;         //mp[&#39;A&#39;] != 0 必须要有A字符        //mp[&#39;P&#39;] == 1 &amp;&amp; mp[&#39;T&#39;] == 1  PT字符必须要有且有一个         //t-p &gt; 1 P和T的位置满足中间一个距离，即中间必须有A        //mp.size() == 3 仅有P A T        //p*(t-p-1)==s.size()-t-1 前A数量 ×中间A数量 = 后A数量         if(mp[&#39;A&#39;] != 0 &amp;&amp; mp[&#39;P&#39;] == 1 &amp;&amp; mp[&#39;T&#39;] == 1 &amp;&amp; t-p != 1 &amp;&amp; mp.size() == 3 &amp;&amp; p*(t-p-1)==s.size()-t-1)            printf(&quot;YES\n&quot;);        else            printf(&quot;NO\n&quot;);    &#125;&#125; </code></pre><p>这题本来是要计算字符A位置上数量约束，一个map就巧妙解决了所有约束太妙了。</p><p>申明：此题主要看柳神解答，非本人独创</p><p>参考链接：<a href="https://www.liuchuo.net/archives/460">1003. 我要通过！(20)-PAT乙级真题 – 柳婼 の blog (liuchuo.net)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT_basic 	C++ map1&lt;/p&gt;</summary>
    
    
    
    <category term="PAT练习" scheme="https://pa1r0t.github.io/categories/PAT%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>西湖论剑wp</title>
    <link href="https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/"/>
    <id>https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/</id>
    <published>2023-02-15T02:06:30.000Z</published>
    <updated>2024-06-25T13:59:28.827Z</updated>
    
    <content type="html"><![CDATA[<p>西湖论剑wp</p><span id="more"></span><h2 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h2><p>给数组中的每一个函数都设置断点</p><p>开始动调，第一个函数，给输入的值进行检验是否是数字<img src="/./../images/image-20230215100917313.png" alt="image-20230215100917313"></p><p>第二个函数进行按位取反<img src="/./../images/image-20230215101120897.png" alt="image-20230215101120897"></p><p>取反后的结果<img src="/./../images/image-20230215101335001.png" alt="image-20230215101335001"></p><p>下个函数是IAT hook .替换GetLastError函数 替换为sub_4019D0函数<img src="/./../images/image-20230215101601229.png" alt="image-20230215101601229"></p><p>GetModuleHandle函数：获取一个应用程序或动态链接库的模块句柄 </p><p>GetModuleHandleA(0);返回0x00400000，而<em><strong>*模块句柄实际上就是模块在当前进程空间的装入地址。exe程序装入句柄一般为 0x00400000 。所以GetModuleHandle(NULL); 返回的值为 0x00400000；GetModuleHandle(“kernel32”)；返回值是0x7c800000(这个值正是kernel32.dll中的Image base的值)。*</strong></em></p><p>这里lpModuleName为kernel32<img src="/./../images/image-20230215111115149.png" alt="image-20230215111115149"></p><p>然后在kernel32模块中找GetLastError函数地址再将其替换这就是hook IAT的过程：先从程序句柄0x00400000中找kernel32.dll再从kernel32中找getlasterror。刚好两个循环</p><p>这里双击也可以查看<img src="/./../images/image-20230215111553991.png" alt="image-20230215111553991"></p><p><img src="/./../images/image-20230215111607580.png" alt="image-20230215111607580"></p><p>再给替换的函数加上断点<img src="/./../images/image-20230215101638875.png" alt="image-20230215101638875"></p><p>注意dword_4085C0是IAT之后的GetLastError函数</p><p>下一个函数是替换dword_408148的值<img src="/./../images/image-20230215101915168.png" alt="image-20230215101915168"></p><p>C 库函数 <strong>int atexit(void (*func)(void))</strong> 当程序正常终止时，调用指定的函数 <strong>func</strong>。您可以在任何地方注册你的终止函数，但它会在程序终止的时候被调用。<strong>func</strong> – 在程序终止时被调用的函数。</p><p>如果有多处atexit那么执行顺序是什么呢？</p><pre><code class="c">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void functionA ()&#123;   printf(&quot;这是函数A\n&quot;);&#125;void functionB ()&#123;   printf(&quot;这是函数B\n&quot;);&#125;void functionC ()&#123;   printf(&quot;这是函数C\n&quot;);&#125;int main ()&#123;   /* 注册终止函数 */   atexit(functionA );      printf(&quot;启动主程序...\n&quot;);   atexit(functionC );   printf(&quot;退出主程序...\n&quot;);   atexit(functionB );   return(0);&#125;</code></pre><p><img src="/./../images/image-20230215105209445.png" alt="image-20230215105209445"></p><p>可以看出来多出atexit是以栈的执行顺序调用的</p><p>所以总结一下执行顺序</p><ol><li>sub_401170 输入检验 -&gt; </li><li>sub_401230 对某一内存数据进行按位取反</li><li>sub_4012B0 IAT hook 替换GetLastError函数 替换为sub_4019D0函数</li><li>main sub_4019D0 dword_408148, “dcbahgfelkjiponm”</li><li>sub_401670 base8 加密后memcmp(&amp;unk_4081D0, a16230465152334, 0x60u);</li><li>sub_4015C0 sub_401CC0加密后memcmp(Buffer, a67339fc92b4875, 0x28u);</li><li>sub_4014E0 执行RC4，后比较密文memcmp(&amp;unk_4084C0, &amp;unk_408090, 0x70u) )</li></ol><p>ebpf程序：eBPF 于 2015 年推出，是 <strong>Linux 的 一项 功能，可以直接在 Linux 内核中运行程序</strong>，而不是在无法直接访问内核资源的“用户空间”中运行程序。 eBPF 源于 BPF，本质上是处于内核中的一个高效与灵活的虚类虚拟机组件，以一种安全的方式在许多内核 Hook 点执行字节码。</p><p>资料链接：</p><ul><li><a href="https://blog.csdn.net/Rong_Toa/article/details/120250788">(61条消息) eBPF 入门之编程_rtoax的博客-CSDN博客_ebpf程序</a></li><li><a href="https://blog.csdn.net/melody157398/article/details/113409274">(61条消息) eBPF在android上的使用_布道师Peter的博客-CSDN博客</a></li></ul><p>VT是什么意思？</p><p>VT，全称是，Virtualization Technology，即是虚拟化技术，虚拟化技术可以扩大硬件的容量，简化软件的重新配置过程。<a href="https://product.pconline.com.cn/cpu/">CPU</a>的虚拟化技术可以单CPU模拟多CPU并行，允许一个平台同时运行多个操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p><p>VT实现：<a href="https://www.cnblogs.com/wingsummer/p/15971289.html">VT 入门番外篇——最小 VT 实现 - 寂静的羽夏 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;西湖论剑wp&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    <category term="赛题复现wp" scheme="https://pa1r0t.github.io/categories/ctf/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0wp/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA结构体分析</title>
    <link href="https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/"/>
    <id>https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/</id>
    <published>2023-01-21T01:52:17.000Z</published>
    <updated>2024-06-25T14:01:23.720Z</updated>
    
    <content type="html"><![CDATA[<p>IDA 类型修复</p><span id="more"></span><p>源码编译成二进制代码的过程中，大量辅助信息被删除，其中最重要的就是类型信息</p><p>为什么要修复伪代码中的类型？</p><ul><li>提高伪代码的准确度</li><li>指导 IDA 反编译器中的优化器使用正确的优化方案</li><li>让 IDA 生成的伪代码更接近源码</li></ul><p>我们需要手动修复哪些类型？</p><ul><li>函数返回值类型</li><li>参数类型 &#x2F; 局部变量类型 &#x2F; 全局变量类型</li><li>数组类型 &#x2F; 数组大小</li><li>结构体类型</li><li>虚表类型</li></ul><p>IDA 数组修复主要有两种：</p><p>1.局部变量中定义的数组</p><p>2.全局变量中定义的数组</p><p>数组修复要考虑：数据类型 + 数组大小</p><h2 id="IDA-修复枚举值"><a href="#IDA-修复枚举值" class="headerlink" title="IDA 修复枚举值"></a>IDA 修复枚举值</h2><p>实验材料：ptrace1</p><p>IDA 的类型数据库内置了常见的枚举（宏）的值，可以直接引入并修复。</p><p>通过逆向分析，ptrace函数</p><p><img src="/./../images/image-20230121101355025.png" alt="image-20230121101355025"></p><p>第一个参数就是ptrace函数的功能号</p><p>鼠标锁定摁M键导入枚举值</p><p>Ctrl+F5搜索ptrace关键字</p><p><img src="/./../images/image-20230121101528976.png" alt="image-20230121101528976"></p><p>找到后双击即可</p><p><img src="/./../images/image-20230121101553907.png" alt="image-20230121101553907"></p><p>下图就全部修复完成了</p><p><img src="/./../images/image-20230121101813329.png" alt="image-20230121101813329"></p><h2 id="IDA-结构体修复"><a href="#IDA-结构体修复" class="headerlink" title="IDA 结构体修复"></a>IDA 结构体修复</h2><p>实验材料：monopoly</p><p>这是一个大富翁游戏！</p><p>确定结构体大小：</p><ul><li>内存分配可以直接确定结构体大小</li><li>memcpy &#x2F; 局部变量偏移差 -&gt; 间接确定 （结构体&#x2F;类局部变量） 这种大多是在栈上</li></ul><p><img src="/./../images/image-20230121104326617.png" alt="image-20230121104326617"></p><p>创建相等大小匿名结构体，并将相关变量、参数的类型修改为该结构体</p><p>这里看见这个0x70的new函数，直接在struct视图下创建结构体</p><p><img src="/./../images/image-20230121105019521.png" alt="image-20230121105019521"></p><p>快捷键是Shift + F9，打开struct视图</p><p>这里在struct视图下，右键点击增加结构体类型</p><p><img src="/./../images/image-20230121105406208.png" alt="image-20230121105406208"></p><p>这里可以看见结构体大小</p><p><img src="/./../images/image-20230121105556782.png" alt="image-20230121105556782"></p><p>鼠标光标在ends处，增加属性（大小）：摁d键</p><p><img src="/./../images/image-20230121105718374.png" alt="image-20230121105718374"></p><p>这里直到sizeof显示为0x70为止，每个属性先以dq为单位，进行存储，后续再逆向分析再进行变更</p><p>这样结构体就初步设置完成了</p><p><img src="/./../images/image-20230121110056164.png" alt="image-20230121110056164"></p><p>这里回到代码处，这里将v0的类型修改为，刚刚我们创建的结构体类型</p><p><img src="/./../images/image-20230121110310274.png" alt="image-20230121110310274"></p><p>第一种改法：摁Y键，进行类型修改为struc_1 *类型</p><p>第二种改法：摁右键，转化为其他结构体：</p><p><img src="/./../images/image-20230121110552200.png" alt="image-20230121110552200"></p><p>这里直接选择我们刚刚创建的类型即可</p><p><img src="/./../images/image-20230121110626662.png" alt="image-20230121110626662"></p><p>这里创建好之后，执行下面的函数，我们跟进去看看</p><p><img src="/./../images/image-20230121120704877.png" alt="image-20230121120704877"></p><p>这里的a1进行了一系列操作，我们将a1的类修修改为我们定义的类型<img src="/./../images/image-20230121120850500.png" alt="image-20230121120850500"></p><p>因为这个函数在new之后执行，所以可能是构造函数，这里我们改个函数名吧<img src="/./../images/image-20230121121052464.png" alt="image-20230121121052464"></p><p>在构造函数中，有些属性是进行dword操作，这里我们就要将qword，改成dword类型<img src="/./../images/image-20230121121546769.png" alt="image-20230121121546769"></p><p>比如field_48，这里双击field_48进入结构体定义处，将该属性改成dword，这里摁d键<img src="/./../images/image-20230121121758509.png" alt="image-20230121121758509"></p><p>设置好之后下面未定义的也需要改成dword，就像这样<img src="/./../images/image-20230121121852483.png" alt="image-20230121121852483"></p><p>其他变量也是一样修改，把剩下的也修改了，但是当最后一个属性改为dword后，总大小发生了改变，这里我们只需要在下面再增加一个变量即可<img src="/./../images/image-20230121122116991.png" alt="image-20230121122116991"></p><p>最后就是这样<img src="/./../images/image-20230121122144895.png" alt="image-20230121122144895"></p><p>然后在源码中摁F5，代码就好看多了<img src="/./../images/image-20230121122453040.png" alt="image-20230121122453040"></p><p>上面循环处field_4c是以4字节进行访问，并且访问5词，也就是说field_4c开始处是一个以4字节为单位的一个数组，数组大小为5，在结构体定义处，右键点array设置数组，大小为5<img src="/./../images/image-20230121122734380.png" alt="image-20230121122734380"></p><p>最终field_4c后面的变量也将合并进入数组中<img src="/./../images/image-20230121122825156.png" alt="image-20230121122825156"></p><p>源码舒服，重命名为array1<img src="/./../images/image-20230121123416130.png" alt="image-20230121123416130"></p><p>这里进行字符串的初始化和赋值操作<img src="/./../images/image-20230121123758528.png" alt="image-20230121123758528"></p><p>这里我们将field_20改为str1</p><p>根据大富翁游戏，初始化的字符串，根据名字都是一些建筑，我们可以把定义的结构体名称改成house，然后将构造函数改成init_house<img src="/./../images/image-20230121124542969.png" alt="image-20230121124542969"></p><p>然后经过构造函数，申请到的对象内存都会存放到，以A1C0为首的地址处<img src="/./../images/image-20230121125509200.png" alt="image-20230121125509200"></p><p><img src="/./../images/image-20230121125527179.png" alt="image-20230121125527179"></p><p>上面一共64个位置，所以类型为house *为类型，数组长度为64个来存放house对象的指针<img src="/./../images/image-20230121125756372.png" alt="image-20230121125756372"></p><p>这里再右键array改为64<img src="/./../images/image-20230121125834301.png" alt="image-20230121125834301"></p><p>这些建筑正好形成地图，将数组名改成map即可<img src="/./../images/image-20230121130116722.png" alt="image-20230121130116722"></p><p>分析另外一个结构体，这个结构体没有使用 new &#x2F; malloc 分配内存，如何确定大小？<img src="/./../images/image-20230121132813993.png" alt="image-20230121132813993"></p><p>进入函数，看起来明显是个初始化函数<img src="/./../images/image-20230121132852076.png" alt="image-20230121132852076"></p><p>两个变量都是紧挨着的在内存中，属于静态分配了<img src="/./../images/image-20230121132938102.png" alt="image-20230121132938102"></p><p>两个变量位置相减为0x80，所以我们就暂时确定这个结构体的大小为0x80，然后我就去struct视图中去创建一个大小为0x80的结构体，还是老操作<img src="/./../images/image-20230121133259989.png" alt="image-20230121133259989"></p><p>这里其实可以先创建64长度的数组，然后再取消定义，这样就可以快速创建结构体了</p><p>类型定义好之后，函数外的全局变量类型不急着更改，先更改函数形参的类型<img src="/./../images/image-20230122155016716.png" alt="image-20230122155016716"></p><p>在函数中判断feild_20可能是个数组，这里先不理会</p><p>后面函数形参类型也需要一个个去修改<img src="/./../images/image-20230122155424970.png" alt="image-20230122155424970"></p><p>刷新一下变成这样了，给变量改个名<img src="/./../images/image-20230122182413118.png" alt="image-20230122182413118"></p><p>把剩余需要修改的变量大小继续更改<img src="/./../images/image-20230122183001258.png" alt="image-20230122183001258"></p><p>然后这里根据printf的字符串信息来判断结构体的类型<img src="/./../images/image-20230122183705595.png" alt="image-20230122183705595"></p><p>v6可能是建筑的类型，从map数组中取出来的结构体都是house类型了，然后把变量名都改成自己猜想的名字。</p><p>这个函数的实参是map数组元素，形参应该改为house结构体指针<img src="/./../images/image-20230122185813240.png" alt="image-20230122185813240"></p><p>这里有个field_40,不能确定是啥<img src="/./../images/image-20230122190051439.png" alt="image-20230122190051439"></p><p>我们可以用交叉引用，去别的地方找信息，刚好这里有一处<img src="/./../images/image-20230122190406178.png" alt="image-20230122190406178"></p><p>这里将ppp1赋给field_40，所以我们就将field_40改成结构体2类型</p><p>以上就是随意逆向的结果，真正正经逆向都是要分析程序逻辑的，我们先随意逆向，分析部分属性信息，有助于我们之后的分析</p><p>程序刚开始会让我们输入游戏难度等级<img src="/./../images/image-20230122191713348.png" alt="image-20230122191713348"></p><p>经过分析这个就是获取数字的函数<img src="/./../images/image-20230122191835438.png" alt="image-20230122191835438"></p><p>然后我们先从简单的easy_level开始<img src="/./../images/image-20230122192539523.png" alt="image-20230122192539523"></p><p>从这分析出ppp3是玩家的意思，因为刚开始它就给ppp3给到初始的金额了<img src="/./../images/image-20230122192843765.png" alt="image-20230122192843765"></p><p>然后进入一个循环，首先进入这个函数<img src="/./../images/image-20230122193721525.png" alt="image-20230122193721525"></p><p>这个函数很明显是个循环<img src="/./../images/image-20230122193909583.png" alt="image-20230122193909583"></p><p>有两个函数，一个只有player1另外还有player2，也就是一个人玩玩，另一个人玩<img src="/./../images/image-20230122195530524.png" alt="image-20230122195530524"><img src="/./../images/image-20230122195544442.png" alt="image-20230122195544442"></p><p>然后这里我们需要输入我们想做的内容<img src="/./../images/image-20230122202153532.png" alt="image-20230122202153532"></p><p>我们先以第一个，这里有个比较，应该是玩家资产数量<img src="/./../images/image-20230122202349924.png" alt="image-20230122202349924"></p><p>要求输入的值不能超过，玩家拥有的资产的数量。所以sub_452F函数估计就是资产的售卖了</p><p>这里售卖的函数中<img src="/./../images/image-20230122203152235.png" alt="image-20230122203152235"></p><p>这里资产数组大小为map的总个数为64个<img src="/./../images/image-20230122203328139.png" alt="image-20230122203328139"></p><p>然后是3，购买资产<img src="/./../images/image-20230122210502911.png" alt="image-20230122210502911"></p><p>分析得<img src="/./../images/image-20230122210702534.png" alt="image-20230122210702534"></p><p>最终：<img src="/./../images/image-20230122210742758.png" alt="image-20230122210742758"></p><p><img src="/./../images/image-20230122210913452.png" alt="image-20230122210913452"></p><p>全局字段交叉引用 Ctrl + alt + X （要尽可能将相关函数找出来并修复类型，有利于查找）</p><h2 id="IDA-虚表修复"><a href="#IDA-虚表修复" class="headerlink" title="IDA 虚表修复"></a>IDA 虚表修复</h2><p>实验材料： vtable</p><p>虚表就是C++实现多态的一种机制</p><p>为了实现C++的多态，C++使用了一种动态绑定的技术。这个技术的核心是虚函数表，当一个类（A）继承另一个类（B）时，类A会继承类B的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表。我们来看以下的代码。类A包含虚函数vfunc1，vfunc2，由于类A包含虚函数，故类A拥有一个虚表。</p><pre><code class="c++">class A &#123;public:    virtual void vfunc1();    virtual void vfunc2();    void func1();    void func2();private:    int m_data1, m_data2;&#125;;</code></pre><p>类A的虚表如图1所示:<img src="/./../images/image-20230122212103043.png" alt="image-20230122212103043"></p><p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了</p><p>虚表修复主要是为了重建虚表交叉引用,一般类的第一个地址就是虚表的地址。</p><p>这里就是调用虚表的某一个函数<img src="/./../images/image-20230122213810302.png" alt="image-20230122213810302"></p><p>这里类大小为0x28字节<img src="/./../images/image-20230122213834372.png" alt="image-20230122213834372"></p><p>这里我们找到虚表，点击这个就是虚表<img src="/./../images/image-20230122213906848.png" alt="image-20230122213906848"></p><p>然后右边是虚表的符号<img src="/./../images/image-20230122213950337.png" alt="image-20230122213950337"></p><p>这里先进行构建结构体，在结构体中表示虚表，一个函数地址，在64位中为32位<img src="/./../images/image-20230122214250424.png" alt="image-20230122214250424"></p><p>创建好后，创建类结构体，然后将类结构体的第一个属性类型设置为虚表类型<img src="/./../images/image-20230122214426259.png" alt="image-20230122214426259"></p><p>然后将v3的类型设置为类结构体类型<img src="/./../images/image-20230122214509446.png" alt="image-20230122214509446"></p><p>然后就修复完成了<img src="/./../images/image-20230122214621630.png" alt="image-20230122214621630"></p><p><img src="/./../images/image-20230122214835711.png" alt="image-20230122214835711"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IDA 类型修复&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    <category term="工具使用" scheme="https://pa1r0t.github.io/categories/re/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="IDA" scheme="https://pa1r0t.github.io/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>STL逆向</title>
    <link href="https://pa1r0t.github.io/2023/01/20/STL%E9%80%86%E5%90%91/"/>
    <id>https://pa1r0t.github.io/2023/01/20/STL%E9%80%86%E5%90%91/</id>
    <published>2023-01-20T12:03:08.000Z</published>
    <updated>2024-06-25T14:03:19.291Z</updated>
    
    <content type="html"><![CDATA[<p>c++ STL</p><span id="more"></span><h1 id="STL-逆向方法论"><a href="#STL-逆向方法论" class="headerlink" title="STL 逆向方法论"></a>STL 逆向方法论</h1><ul><li>识别 STL 容器类型</li><li>识别 STL 容器操作</li><li>提取 STL 容器中的数据</li></ul><p><strong>逆向 STL 主要的问题:</strong></p><ol><li>缺少符号，无法判断 STL 容器类型 （主要困难）</li><li>STL 内部数据结构复杂，难以提取数据</li><li>优化使大量 stl 函数被 inline</li></ol><p>方法：解析 STL 容器内存数据，从内存数据角度判断容器类型，提取容器内容判断函数操作。</p><h2 id="常见-STL-容器"><a href="#常见-STL-容器" class="headerlink" title="常见 STL 容器"></a>常见 STL 容器</h2><p>序列容器</p><ul><li>vector</li><li>Deque</li><li>List</li><li>String</li></ul><p>关联容器</p><ul><li>Pair</li><li>Map</li><li>Set</li><li>MultiMap &#x2F; MultiSet</li></ul><p>无序关联容器:unordered_map</p><h1 id="C-STL关联式容器是什么？"><a href="#C-STL关联式容器是什么？" class="headerlink" title="C++ STL关联式容器是什么？"></a>C++ STL关联式容器是什么？</h1><p>此类容器在存储元素值的同时，还会为各元素额外再配备一个值（又称为“键”，其本质也是一个 C++ 基础数据类型或自定义类型的元素），它的功能是在使用关联式容器的过程中，如果已知目标元素的键的值，则直接通过该键就可以找到目标元素，而无需再通过遍历整个容器的方式。</p><p>弃用序列式容器，转而选用关联式容器存储元素，往往就是看中了关联式容器可以快速查找、读取或者删除所存储的元素，同时该类型容器插入元素的效率也比序列式容器高。</p><h1 id="常见-STL-容器适配器"><a href="#常见-STL-容器适配器" class="headerlink" title="常见 STL 容器适配器"></a>常见 STL 容器适配器</h1><p><strong>容器适配器</strong>是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p><p>其实，容器适配器中的“适配器”，和生活中常见的电源适配器中“适配器”的含义非常接近。我们知道，无论是电脑、手机还是其它电器，充电时都无法直接使用 220V 的交流电，为了方便用户使用，各个电器厂商都会提供一个适用于自己产品的电源线，它可以将 220V 的交流电转换成适合电器使用的低压直流电。</p><p>从用户的角度看，电源线扮演的角色就是将原本不适用的交流电变得适用，因此其又被称为电源适配器。</p><p>举一个例子，假设一个代码模块 A，它的构成如下所示：</p><pre><code class="cpp">class A&#123;public:    void f1()&#123;&#125;    void f2()&#123;&#125;    void f3()&#123;&#125;    void f4()&#123;&#125;&#125;;</code></pre><p>现在我们需要设计一个模板 B，但发现，其实只需要组合一下模块 A 中的 f1()、f2()、f3()，就可以实现模板 B 需要的功能。其中 f1() 单独使用即可，而 f2() 和 f3() 需要组合起来使用，如下所示：</p><pre><code class="cpp">class B&#123;private:    A * a;public:    void g1()&#123;        a-&gt;f1();    &#125;    void g2()&#123;        a-&gt;f2();        a-&gt;f3();    &#125;&#125;;</code></pre><p>可以看到，就如同是电源适配器将不适用的交流电变得适用一样，模板 B 将不适合直接拿来用的模板 A 变得适用了，因此我们可以将模板 B 称为 B 适配器.</p><p>容器适配器也是同样的道理，<em>简单的理解容器适配器，其就是将不适用的序列式容器（包括 vector、deque 和 list）变得适用</em>。容器适配器的底层实现和模板 A、B 的关系是完全相同的，即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</p><p>stack（STL stack）容器适配器:采用默认的 deque 基础容器</p><p>queue容器适配器:其底层使用的基础容器选择默认的 deque 容器</p><p>priority_queue ：vector</p><p>逆向时处理容器适配器只需要用底层容器来处理即可</p><h1 id="STL-各高级类型dump数据"><a href="#STL-各高级类型dump数据" class="headerlink" title="STL 各高级类型dump数据"></a>STL 各高级类型dump数据</h1><h2 id="std-string"><a href="#std-string" class="headerlink" title="std::string"></a>std::string</h2><ul><li>固定长度 32 字节，4 个 dq</li><li>第一个指针字段指向数据地址</li><li>第二个 size_t 字段存储字符串长度</li></ul><p>内存分布：</p><p><img src="/./../images/image-20230120202731025.png" alt="image-20230120202731025"></p><p>IDA dump脚本：</p><pre><code class="py">def read_dbg_cppstr_64(objectAddr):    # a easy function for read std:string    # 首地址就是begin指针    strPtr = idc.read_dbg_qword(objectAddr)    result = &#39;&#39;    i = 0    while True:        onebyte = idc.read_dbg_byte(strPtr + i)        if onebyte == 0:            break        else:            result = chr(onebyte)        i += 1        return result</code></pre><h2 id="std-stringsteam"><a href="#std-stringsteam" class="headerlink" title="std::stringsteam"></a>std::stringsteam</h2><p>可以看作是读写文件</p><p>内存分布：<img src="/./../images/image-20230120203121252.png" alt="image-20230120203121252"></p><p><img src="/./../images/image-20230120203135198.png" alt="image-20230120203135198"></p><h2 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h2><ul><li>固定长度 24 字节，3 个 dq</li><li>第一个指针字段指向数组起始地址</li><li>第二个指针字段指向数组最后元素地址</li><li>第三个指针字段指向最大内存地址</li></ul><p>内存分布：<img src="/./../images/image-20230120203330744.png" alt="image-20230120203330744"></p><p>IDA dump脚本</p><pre><code class="py">def vetor_dump(addr):    ELEMENT_SIZE = 8    data_addr = []    vetor_base = idc.read_dbg_qword(addr + 0x0)    vetor_end = idc.read_dbg_qword(addr + 0x8)    for i in range(vetor_base,vetor_end,ELEMENT_SIZE):        data_addr.append(i)    return data_addr</code></pre><h2 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h2><ul><li>双向循环链表存储</li><li>头结构 + 节点结构</li><li>遍历长度可以用 size 字段确定</li></ul><p><img src="/./../images/image-20230120203453756.png" alt="image-20230120203453756"></p><p>内存布局：<img src="/./../images/image-20230120203507098.png" alt="image-20230120203507098"></p><p>IDA dump 脚本：</p><pre><code class="py">def dump_stl_list(p_list_addr):    data_addr = []    list_size = idc.read_dbg_qword(p_list_addr+0x10)    cur_node = p_list_addr    for i in range(list_size):        cur_node = idc.read_dbg_qword(cur_node + 0x0)        data_addr.append(cur_node + 0x10)</code></pre><h2 id="std-deque"><a href="#std-deque" class="headerlink" title="std::deque"></a>std::deque</h2><ul><li>头结构 + 迭代器结构</li><li>适用 std::deque &#x2F; std::stack</li></ul><p><img src="/./../images/image-20230120203905814.png" alt="image-20230120203905814"></p><ol><li>stl_deque.start.node 确定first map 项位置</li><li>stl_deque.start.last - stl_deque.start.first 确定缓冲区大小</li><li>stl_deque.finish.node 确定last map 项位置</li><li>对于每一个 map 项： <ol><li>start 项，解析 cur, last 区间</li><li>finish 项，解析 start, cur 区间</li><li>其余项，解析 start, last 区间</li></ol></li></ol><p>内存布局:<img src="/./../images/image-20230120203718899.png" alt="image-20230120203718899"></p><p>IDA dump 脚本:</p><pre><code class="py">deque_iter = namedtuple(&#39;deque_iter&#39;,[&#39;cur&#39;,&#39;first&#39;,&#39;last&#39;,&#39;node&#39;])def parse_iter(addr):    # 解析队列迭代器    cur = idc.read_dbg_qword(addr + 0x0)    first = idc.read_dbg_qword(addr + 0x8)    last = idc.read_dbg_qword(addr + 0x10)    node = idc.read_dbg_qword(addr + 0x18)    return deque_iter(cur,first,last,node)def dump_deque(addr):    ELEMENT_SIZE = 4    # std::deque&lt;xx&gt; xx 的类型大小来指定    data_addr = []    start_iter = parse_iter(addr + 0x10)    finish_iter = parse_iter(addr + 0x30)    buf_size = start_iter.last - start_iter.first    map_size = start_iter.node    map_finish = finish_iter.node    # 解析第一个缓存数据    for i in range(start_iter.cur,start_iter.last,ELEMENT_SIZE):        data_addr.append(i)    # 解析最后一个缓存数据    for i in range(finish_iter.first,finish_iter.cur,ELEMENT_SIZE):        data_addr.append(i)    # 解析中间缓存数据    for i in range(map_start + 8,map_finish - 8,8):        buf_start = idc.read_dbg_qword(b)        for i in range(buf_start,buf_start + buf_size, ELEMENT_SIZE):            data_addr.append(i)    return data_addr</code></pre><h2 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h2><ul><li>底层采用 Rb-Tree 实现（红黑二叉树）</li><li>头结构 + 节点结构</li><li>用二叉树遍历可提取数据</li><li>适用 std::map &#x2F; std::set &#x2F; std::multimap &#x2F; std::multiset</li></ul><p>内存分布：<img src="/./../images/image-20230120204147238.png" alt="image-20230120204147238"></p><p>IDA dump 脚本：</p><pre><code class="py">def parse_gnu_map_header(address):    root = idc.read_dbg_qword(address + 0x10)    return rootdef parse_gnu_map_node(address):    left = idc.read_dbg_qword(address + 0x10)    right = idc.read_dbg_dword(address + 0x10)    data = address + 0x20    return left, right, datadef parse_gnu_map_travel(address):    # address &lt;—— std::map struct address    result = []    worklist = [parse_gnu_map_header(address)]    while len(worklist) &gt; 0:        addr = worklist.pop()        (left, right, data) = parse_gnu_map_node(addr)        if left &gt; 0: worklist.append(left)        if right &gt; 0: worklist.append(right)        result.append(data)    return result</code></pre><h2 id="std-unsorted-map"><a href="#std-unsorted-map" class="headerlink" title="std::unsorted_map"></a>std::unsorted_map</h2><ul><li>底层采用 HashTable 实现</li><li>头结构 + Bucket 数组 + 节点结构</li><li><strong>所有节点结构用单链表串联（****dump</strong> <strong>只需要遍历单链表）</strong></li><li><strong>头结构的第三个字段为单链表头</strong></li><li><strong>适用</strong> **std::**<strong>unsorted_map</strong> **&#x2F; std::**<strong>unsorted_set</strong> <strong>&#x2F; …</strong></li></ul><p>内存布局:<img src="/./../images/image-20230120204319472.png" alt="image-20230120204319472"></p><p>IDA dump 脚本:</p><pre><code class="py">def dump_stl_hashmap(addr):    # dump stl hashmap gnu c++ x64    data_addr = []    bucket_addr = idc.read_dbg_qword(addr + 0x10)    node_addr = bucket_addr    while node_addr != 0:        data_addr.append(node_addr + 0x8)        node_addr = idc.read_dbg_qword(node_addr)    return data_addr</code></pre><h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><p>第一个指针就是数据指针</p><p>内存布局：<img src="/./../images/image-20230120204555397.png" alt="image-20230120204555397"></p><hr><h1 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;c++ STL&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    <category term="Windows逆向" scheme="https://pa1r0t.github.io/categories/re/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Microcode</title>
    <link href="https://pa1r0t.github.io/2023/01/19/Microcode/"/>
    <id>https://pa1r0t.github.io/2023/01/19/Microcode/</id>
    <published>2023-01-19T14:09:48.000Z</published>
    <updated>2024-06-25T14:02:03.256Z</updated>
    
    <content type="html"><![CDATA[<p>记录Microcode </p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Microcode 是 hexrays 内部采用的介于机器代码与伪代码之间的一种中间表示语言(IR)。</p><p>Microcode 生成完成后，IDA 在 Microcode 的基础上生成 CTree。 CTree 是 IDA 内部用于表示 C语言伪代码的抽象语法树，IDA 也提供了大量 API 操作 CTree，可以实现一下伪代码展示方面的优化，例如删除某些节点等等。</p><p>Microcode 指令格式</p><p>opcode left, right, destination<br>一般来说有三个操作数，有一些指令可能缺少某个操作数，destination 也不一定会被修改（Store 指令）</p><p>Microcode 中常见的数据结构</p><p>函数是 IDA 中最大的汇编结果表示单位</p><p>函数 → 基本块 → 指令 → 操作数</p><p>Microcode 可视化插件</p><p><a href="https://github.com/gaasedelen/lucid">https://github.com/gaasedelen/lucid</a></p><p>Ctree 可视化插件<br><a href="https://github.com/patois/HRDevHelper">https://github.com/patois/HRDevHelper</a></p><p>Microcode生成过程：</p><ol><li><p>生成 Microcode</p></li><li><p>变换 Microcode （例如优化）</p></li><li><p>局部变量分配</p></li><li><p>生成 CTree （CTree 是 IDA 用来表示伪代码的抽象语法树 AST）</p></li><li><p>优化 CTree</p></li><li><p>输出 CTree</p></li></ol><p>Microcode 寄存器</p><p>microcode 的寄存器没有数量限制，物理寄存器往往会被直接映射到 microcode 寄存器，例如</p><ul><li>AL   is mapped into al.1 (mreg number 8)</li><li>AH  is mapped into ah.1 (mreg number 9)</li><li>EAX is mapped into eax.4 (mreg numbers 8-11)</li><li>RSI  is mapped into rsi.8</li></ul><p>Microcode 分阶段生成, 最初阶段生成的代码非常冗余</p><p><img src="/./../images/image-20230119221600205.png" alt="image-20230119221600205"></p><p>Microcode 快速上手，手动调用 microcode 生成</p><pre><code class="py">import ida_hexraysimport idaapidef print_microcode(func_ea):    maturity = ida_hexrays.MMAT_GLBOPT3    #   maturity:    #   MMAT_ZERO,          //&lt; microcode 不存在    #   MMAT_GENERATED      //&lt; 已经生成的microcode    #   MMAT_PREOPTIMIED    //&lt; 预先优化的pass已完成    #   MMAT_LOCOPT         //&lt; local 本地每个基本块的优化已完成    control控制流图也就绪    #   MMAT_CALLS          //&lt; 检测调用参数    #   MMAT_GLBOPT1        //&lt; 执行第一个全局优化pass    #   MMAT_GLBOPT2        //&lt; 大多数全局优化pass已完成    #   MMAT_GLBOPT3        //&lt; 完成所有的优化，microcode被修改    #   MMAT_LVAR3          //&lt; 分配所有的局部变量    hf = ida_hexrays.hexrays_failure_t()    pfn = idaapi.get_func(func_ea)    rng = ida_hexrays.mba_ranges_t(pfn)    mba = ida_hexrays.gen_microcode(rng,hf,None,                                    ida_hexrays.DECOMP_WARNINGS,maturity)    vp = ida_hexrays.vd_printer_t()    mba._print(vp)print_microcode(0x1229)</code></pre><p>Microcode 相关的数据结构，定义在 hexrays.hpp 文件 </p><p><img src="/./../images/image-20230119221901715.png" alt="image-20230119221901715"></p><p><img src="/./../images/image-20230119222011500.png" alt="image-20230119222011500"></p><p>Microcode 相关的数据结构: <strong>mbl_array_t</strong>,这个结构用来存放函数的基本块信息</p><ul><li>基本块之间使用双向链表链接</li><li>基本块数组存放在 natural 数组</li></ul><p><img src="/./../images/image-20230119222056330.png" alt="image-20230119222056330"></p><p>Microcode 相关的数据结构: mblock_t,这个结构用来描述基本块信息。±基本块内的指令与指令之间使用双向链表链接</p><p><img src="/./../images/image-20230119222156151.png" alt="image-20230119222156151"></p><p>Microcode 相关的数据结构: minsn_t。用于描述指令信息的结构。（注意微码指令支持指令嵌套。）</p><p><img src="/./../images/image-20230119222222555.png" alt="image-20230119222222555"></p><p>Microcode 相关的数据结构: mop_t</p><p>用于描述操作数信息的结构，指令 minsn_t 有 0 ~ 3 个操作数，分别时 l (left), r (right), d (destination) 操作数的类型用 mop_t 来表示</p><p><img src="/./../images/image-20230119222252600.png" alt="image-20230119222252600"></p><p>Microcode 插件例子</p><ul><li>实现 svc 0x900001 与 svc 0x9000F8 指令反编译成一条 call 指令</li><li>install_microcode_filter 注册 microcode filter 实现拦截指令翻译</li><li>microcode filter 是一种可以拦截 microcode 指令生成的机制，开发者需要继承 microcode_filter_t 类并实现 match 与 apply 两个函数。 </li><li>ida 在生成某一条指令的 microcode 之前会调用所有已经注册的 filter 的 match 函数，若 match 函数返回 True，则调用对应的 apply 函数实现指令替换。</li><li>我们需要将 svc 指令替换成 call 指令，ida 已经为我们实现了替换类 udc_filter_t, 这个类继承于 microcode_filter_t 并实现了 apply 方法（即替换call指令），我们需要继承 udc_filter_t 并实现它的 match 方法用于判断拦截的指令。</li></ul><p>Microcode 插件例子</p><p><img src="/./../images/image-20230119222437041.png" alt="image-20230119222437041"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录Microcode &lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    <category term="前置知识学习" scheme="https://pa1r0t.github.io/categories/re/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Microcode" scheme="https://pa1r0t.github.io/tags/Microcode/"/>
    
  </entry>
  
</feed>
