<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安徽省赛</title>
    <url>/2022/11/21/%E5%AE%89%E5%BE%BD%E7%9C%81%E8%B5%9B/</url>
    <content><![CDATA[<p>安徽省赛只有一个小时，我吐了，脚本都来不及写。。。。赛后才把flag搞出来</p>
<span id="more"></span>

<p>呃，</p>
<p>我其实也是第一次见这么庞大的迷宫，一共4384个格~~</p>
<p>这里看见一行66</p>
<p><a href="https://imgse.com/i/zQvXfe"><img src="https://s1.ax1x.com/2022/11/21/zQvXfe.png" alt="zQvXfe.png"></a></p>
<p>代码逻辑很简单，这里不做过多介绍</p>
<p><em>&#x2F;我原先的脚本的思路是走到错的地方再返回，导致效率太低，跑了好久都没跑出来&#x2F;</em></p>
<p>赛后我还未想好该怎么优化我的深搜算法，所以就进行了一波手工画图。。。。。。。。</p>
<h4 id="图一："><a href="#图一：" class="headerlink" title="图一："></a>图一：</h4><p><a href="https://imgse.com/i/zQvwWQ"><img src="https://s1.ax1x.com/2022/11/21/zQvwWQ.png" alt="zQvwWQ.png"></a></p>
<h4 id="图二："><a href="#图二：" class="headerlink" title="图二："></a>图二：</h4><p><a href="https://imgse.com/i/zQv7ex"><img src="https://s1.ax1x.com/2022/11/21/zQv7ex.png" alt="zQv7ex.png"></a></p>
<h4 id="图三："><a href="#图三：" class="headerlink" title="图三："></a>图三：</h4><p><a href="https://imgse.com/i/zQvHw6"><img src="https://s1.ax1x.com/2022/11/21/zQvHw6.png" alt="zQvHw6.png"></a></p>
<p>emmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm</p>
<p>然后就根据这个路线，手写路线字符串</p>
<p><a href="https://imgse.com/i/zQx9mt"><img src="https://s1.ax1x.com/2022/11/21/zQx9mt.png" alt="zQx9mt.png"></a></p>
<p>以上是我写的，本办法，太菜了，只能这么搞了</p>
<hr>
<p>##下面贴上EDI团队的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">map</span> = []</span><br><span class="line">data =[<span class="built_in">map</span>[i*<span class="number">66</span>:i*<span class="number">66</span>+<span class="number">66</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>)]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">usedmap  =  [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)) ]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">64</span> <span class="keyword">and</span> y == <span class="number">65</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">if</span> data[x+<span class="number">1</span>][y] == <span class="number">0</span> <span class="keyword">and</span> usedmap [x+<span class="number">1</span>][y] == <span class="number">0</span>:</span><br><span class="line">        usedmap [x][y] = <span class="number">1</span></span><br><span class="line">        flag += <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        DFS(x+<span class="number">1</span>,y)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">        usedmap [x][y] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> data[x-<span class="number">1</span>][y] == <span class="number">0</span> <span class="keyword">and</span> usedmap [x-<span class="number">1</span>][y] == <span class="number">0</span>:</span><br><span class="line">        usedmap [x][y] = <span class="number">1</span></span><br><span class="line">        flag += <span class="string">&#x27;w&#x27;</span></span><br><span class="line">        DFS(x-<span class="number">1</span>,y)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">        usedmap [x][y] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> data[x][y+<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> usedmap [x][y+<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        usedmap [x][y] = <span class="number">1</span></span><br><span class="line">        flag += <span class="string">&#x27;d&#x27;</span></span><br><span class="line">        DFS(x,y+<span class="number">1</span>)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">        usedmap [x][y] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> data[x][y-<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> usedmap [x][y-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        usedmap [x][y] = <span class="number">1</span></span><br><span class="line">        flag += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        DFS(x,y-<span class="number">1</span>)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">        usedmap [x][y] = <span class="number">0</span></span><br><span class="line">y=<span class="number">0</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    DFS(x,y)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<p>他们的脚本其实就是只走对的位置，我实在没想到居然效率会快这么多！！！！！！！！！</p>
<p>后来我参照他们的思路，重新优化了一下我的脚本，可以说在他们的基础上在一次优化了程序的效率</p>
<p><strong>只能说算法实在太重要了！！！！！！！！！！！！！！</strong></p>
<h2 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">v6, v7</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">364</span>: <span class="comment"># 这里防止深度过深</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> v6 == <span class="number">64</span> <span class="keyword">and</span> v7 == <span class="number">65</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    tlag[<span class="number">66</span> * v6 + v7] = <span class="number">1</span>  <span class="comment"># 标记走过了</span></span><br><span class="line">    <span class="keyword">if</span> map1[<span class="number">66</span> * v6 + v7 + <span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> tlag[<span class="number">66</span> * v6 + v7+<span class="number">1</span>] == <span class="number">0</span>: <span class="comment"># 这个位置能不能走，有没有走过</span></span><br><span class="line">        flag += <span class="string">&#x27;d&#x27;</span></span><br><span class="line">        dfs(v6, v7 + <span class="number">1</span>)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> map1[<span class="number">66</span> * (v6+<span class="number">1</span>) + v7] == <span class="number">0</span> <span class="keyword">and</span> tlag[<span class="number">66</span> * (v6+<span class="number">1</span>) + v7] == <span class="number">0</span>:</span><br><span class="line">        flag += <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        dfs(v6+<span class="number">1</span>,v7)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> map1[<span class="number">66</span> * (v6-<span class="number">1</span>) + v7] == <span class="number">0</span> <span class="keyword">and</span> tlag[<span class="number">66</span> * (v6-<span class="number">1</span>) + v7] == <span class="number">0</span>:</span><br><span class="line">        flag += <span class="string">&#x27;w&#x27;</span></span><br><span class="line">        dfs(v6-<span class="number">1</span>, v7)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> map1[<span class="number">66</span> * (v6) + v7 - <span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> tlag[<span class="number">66</span> * (v6) + v7-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        flag += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        dfs(v6, v7 - <span class="number">1</span>)</span><br><span class="line">        flag = flag[:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 这里不用将标志去掉，因为这个位置所有方向都走过了都没到终点，那么其他位置到达该位置也无法到达终点，所以懂吧？</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    map1 = []</span><br><span class="line">    tlag = [<span class="number">0</span>]*<span class="built_in">len</span>(map1)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>至于代码的细节这里直接看注释即可，都已经写好了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里个人的算法功底还有待提升，算法还是要多练，不然明明会做，但是现场做不出来，太难受了！！！</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>NOV X联合出题人</title>
    <url>/2022/11/29/buuctf-nov/</url>
    <content><![CDATA[<p>​	比赛一直在打安洵杯，buu都没好好看，现在安洵杯迷宫题斜着走还没搞明白，先来复现一波buu的月赛</p>
<span id="more"></span>

<h1 id="babytea"><a href="#babytea" class="headerlink" title="babytea"></a>babytea</h1><h1 id="1-一-看核心算法经典tea"><a href="#1-一-看核心算法经典tea" class="headerlink" title="1.	 一 看核心算法经典tea"></a>1.	 一 看核心算法经典tea<img src="/./../images/image-20221129172038310.png" alt="image-20221129172038310"></h1><h2 id="2-结果脚本算不出来-x3D-x3D-，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点"><a href="#2-结果脚本算不出来-x3D-x3D-，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点" class="headerlink" title="2.	结果脚本算不出来&#x3D;&#x3D;，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点"></a>2.	结果脚本算不出来&#x3D;&#x3D;，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点</h2><h3 id="a-sum-异常"><a href="#a-sum-异常" class="headerlink" title="a)sum+异常"></a>a)sum+异常<img src="/./../images/image-20221129172501520.png" alt="image-20221129172501520"></h3><h3 id="b-开头也有异常，而且这个是默认必须跳转"><a href="#b-开头也有异常，而且这个是默认必须跳转" class="headerlink" title="b)开头也有异常，而且这个是默认必须跳转"></a>b)开头也有异常，而且这个是默认必须跳转<img src="/./../images/image-20221129172612239.png" alt="image-20221129172612239"></h3><h2 id="3-直接修改汇编，让报错的地方直接跳转到异常处理程序"><a href="#3-直接修改汇编，让报错的地方直接跳转到异常处理程序" class="headerlink" title="3.直接修改汇编，让报错的地方直接跳转到异常处理程序"></a>3.直接修改汇编，让报错的地方直接跳转到异常处理程序<img src="/./../images/image-20221129172922988.png" alt="image-20221129172922988"></h2><h2 id="4-然后源码就变了"><a href="#4-然后源码就变了" class="headerlink" title="4.然后源码就变了"></a>4.然后源码就变了<img src="/./../images/image-20221129173019067.png" alt="image-20221129173019067"></h2><h2 id="5-但是v5地方不是每次都要异或，是有条件的，当-gt-gt-0x1f-x3D-x3D-0时异或"><a href="#5-但是v5地方不是每次都要异或，是有条件的，当-gt-gt-0x1f-x3D-x3D-0时异或" class="headerlink" title="5.但是v5地方不是每次都要异或，是有条件的，当&gt;&gt;0x1f &#x3D;&#x3D; 0时异或"></a>5.但是v5地方不是每次都要异或，是有条件的，当&gt;&gt;0x1f &#x3D;&#x3D; 0时异或<img src="/./../images/image-20221129173152401.png" alt="image-20221129173152401"></h2><h2 id="6-总之这是一道魔改tea罢了，脚本如下"><a href="#6-总之这是一道魔改tea罢了，脚本如下" class="headerlink" title="6.总之这是一道魔改tea罢了，脚本如下"></a>6.总之这是一道魔改tea罢了，脚本如下</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tea</span>(<span class="params">v,k,d38,d3c</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    j = [<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># sum</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        s = (s + dword_41F000)&amp;<span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt;&gt; <span class="number">0x1f</span>) == <span class="number">0</span>:</span><br><span class="line">            s ^= <span class="number">0x1234567</span></span><br><span class="line">        j.append(s) </span><br><span class="line">    <span class="built_in">sum</span> = j[<span class="number">32</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (<span class="built_in">sum</span> + v0) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * v0)</span><br><span class="line">        v1 = v1&amp;<span class="number">0xffffffff</span></span><br><span class="line">        v0 -= (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (<span class="built_in">sum</span> + v1) ^ (k[<span class="number">0</span>] + <span class="number">16</span> * v1)</span><br><span class="line">        v0 = v0&amp;<span class="number">0xffffffff</span></span><br><span class="line">        <span class="built_in">sum</span> = j[<span class="number">31</span>-i]</span><br><span class="line">    v0 ^= d38</span><br><span class="line">    v1 ^= d3c</span><br><span class="line">    v[<span class="number">0</span>] = v0&amp;<span class="number">0xffffffff</span></span><br><span class="line">    v[<span class="number">1</span>] = v1&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x5E27B530</span>, <span class="number">0x0BDBEF7F3</span>, <span class="number">0x0E3516A8F</span>, <span class="number">0x5D836CFE</span>, <span class="number">0x0D83DFA09</span>, <span class="number">0x8EFC737A</span>,<span class="number">0x55A853A3</span>, <span class="number">0x7A564EC5</span>]</span><br><span class="line">k = [<span class="number">0x67452301</span>, <span class="number">0x0EFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span>]</span><br><span class="line">m = [<span class="literal">None</span>]*<span class="number">2</span></span><br><span class="line">flag = []</span><br><span class="line">dword_41F038 = [<span class="number">0x1234567</span>,<span class="number">0x5E27B530</span>,<span class="number">0x0E3516A8F</span>,<span class="number">0x0D83DFA09</span>]</span><br><span class="line">dword_41F03C = [<span class="number">0x89ABCDEF</span>,<span class="number">0x0BDBEF7F3</span>,<span class="number">0x5D836CFE</span>,<span class="number">0x8EFC737A</span>]</span><br><span class="line">dword_41F000 = <span class="number">0x9E3779B1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    m[<span class="number">0</span>] = enc[<span class="number">2</span>*i]</span><br><span class="line">    m[<span class="number">1</span>] = enc[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    tea(m,k,dword_41F038[i],dword_41F03C[i])</span><br><span class="line">    flag.append(long_to_bytes(m[<span class="number">0</span>])[::-<span class="number">1</span>])</span><br><span class="line">    flag.append(long_to_bytes(m[<span class="number">1</span>])[::-<span class="number">1</span>])</span><br><span class="line"><span class="string">b&#x27;&#x27;</span>.join(flag)</span><br><span class="line"><span class="comment">#600d_y0u_r34lly_kn0w_734_4nd_53h</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="babysmc"><a href="#babysmc" class="headerlink" title="babysmc"></a>babysmc</h1><h3 id="1-smc函数，但是异或值是输入的值"><a href="#1-smc函数，但是异或值是输入的值" class="headerlink" title="1.	smc函数，但是异或值是输入的值"></a>1.	smc函数，但是异或值是输入的值<img src="/./../images/image-20221130165909641.png" alt="image-20221130165909641"></h3><h3 id="2-其他也没有和输入值相关的函数，所以只能选择爆破"><a href="#2-其他也没有和输入值相关的函数，所以只能选择爆破" class="headerlink" title="2.	其他也没有和输入值相关的函数，所以只能选择爆破"></a>2.	其他也没有和输入值相关的函数，所以只能选择爆破<img src="/./../images/image-20221130170030329.png" alt="image-20221130170030329"></h3><h3 id="3-当爆破到第一个操作时push-ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57"><a href="#3-当爆破到第一个操作时push-ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57" class="headerlink" title="3.	当爆破到第一个操作时push ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57"></a>3.	当爆破到第一个操作时push ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57<img src="/./../images/image-20221130170339966.png" alt="image-20221130170339966"></h3><h3 id="4-但是爆破失败，真的是糟糕！！！"><a href="#4-但是爆破失败，真的是糟糕！！！" class="headerlink" title="4.	但是爆破失败，真的是糟糕！！！"></a>4.	但是爆破失败，真的是糟糕！！！<img src="/./../images/image-20221130170528580.png" alt="image-20221130170528580"></h3><h3 id="5-后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪"><a href="#5-后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪" class="headerlink" title="5.	后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪"></a>5.	后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪<img src="/./../images/image-20221130170643748.png" alt="image-20221130170643748"></h3><h3 id="6-后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此"><a href="#6-后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此" class="headerlink" title="6.	后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此"></a>6.	后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此<img src="/./../images/image-20221130170821019.png" alt="image-20221130170821019"></h3><h3 id="7-然后就爆破出来了，yes，用idc改编码"><a href="#7-然后就爆破出来了，yes，用idc改编码" class="headerlink" title="7.	然后就爆破出来了，yes，用idc改编码"></a>7.	然后就爆破出来了，yes，用idc改编码<img src="/./../images/image-20221130170946128.png" alt="image-20221130170946128"></h3><h3 id="8-改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数"><a href="#8-改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数" class="headerlink" title="8.	改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数"></a>8.	改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数<img src="/./../images/image-20221129213724788.png"></h3><h3 id="9-然后逻辑就是循环十次，不同函数调用十次，最后用z3解"><a href="#9-然后逻辑就是循环十次，不同函数调用十次，最后用z3解" class="headerlink" title="9.	然后逻辑就是循环十次，不同函数调用十次，最后用z3解"></a>9.	然后逻辑就是循环十次，不同函数调用十次，最后用z3解<img src="/./../images/image-20221130172042777.png" alt="image-20221130172042777"></h3><h3 id="这里附上代码，仅供参考"><a href="#这里附上代码，仅供参考" class="headerlink" title="这里附上代码，仅供参考"></a>这里附上代码，仅供参考</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">dword_422040 = [<span class="number">0x00027FC8</span>, <span class="number">0x00029049</span>, <span class="number">0x0003336C</span>, <span class="number">0x0002C6A7</span>, <span class="number">0x00036CB0</span>, <span class="number">0x0001F2BB</span>, <span class="number">0x00035262</span>, <span class="number">0x0002AEDF</span>, <span class="number">0x0002955E</span>, <span class="number">0x0002EE10</span>, <span class="number">0x0002B057</span>, <span class="number">0x0002FDE8</span>, <span class="number">0x00029B92</span>, <span class="number">0x00035842</span>, <span class="number">0x000294D2</span>, <span class="number">0x0002B984</span>]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">34</span></span><br><span class="line">s = Solver()</span><br><span class="line">a1 = [BitVec(<span class="string">f&#x27;flag[<span class="subst">&#123;i&#125;</span>]&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>,<span class="number">33</span>)]</span><br><span class="line">s.add(dword_422040[<span class="number">0</span>] == (<span class="number">159</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">109</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">14</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">92</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">211</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">178</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">57</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">175</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">170</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                        + <span class="number">59</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">200</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">5</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">48</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">28</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">18</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">228</span> * a1[<span class="number">1</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">6</span>] == (<span class="number">173</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">34</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">69</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">216</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">225</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">160</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">207</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">175</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">121</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">122</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">179</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">91</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">181</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">93</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">121</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">12</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">8</span>] == (<span class="number">215</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">164</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">97</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">99</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">188</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + ((a1[<span class="number">9</span>] &lt;&lt; <span class="number">7</span>)&amp;<span class="number">0xffffffff</span>) \</span><br><span class="line">                          + <span class="number">214</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">106</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">169</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">28</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">18</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">177</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">114</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">176</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">25</span> * a1[<span class="number">13</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">9</span>] == (<span class="number">175</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">42</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">214</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">43</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">147</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">53</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">12</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">213</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">241</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">223</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">65</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">42</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">131</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">81</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">92</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">110</span> * a1[<span class="number">8</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">13</span>] == (<span class="number">57</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">109</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                           + <span class="number">60</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                           + <span class="number">228</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                           + <span class="number">166</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">236</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">100</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">179</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">20</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">45</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">204</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">182</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">84</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">170</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                           + <span class="number">199</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                           + <span class="number">138</span> * a1[<span class="number">1</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">10</span>] == (<span class="number">98</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">122</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">237</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">117</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">34</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">168</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">135</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">119</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">91</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                           + <span class="number">161</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                           + <span class="number">152</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                           + <span class="number">186</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">187</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                           + <span class="number">72</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">36</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                           + <span class="number">171</span> * a1[<span class="number">1</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">7</span>] == (<span class="number">184</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">112</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">107</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">170</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">55</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">85</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">212</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">173</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">166</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">142</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">202</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">63</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">30</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">175</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">217</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">63</span> * a1[<span class="number">1</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">15</span>] == (((a1[<span class="number">7</span>] &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xffffffff</span>) \</span><br><span class="line">                           + <span class="number">228</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">90</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">85</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">196</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">219</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">93</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">183</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                           + <span class="number">156</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">197</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">119</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                           + <span class="number">36</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">205</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                           + <span class="number">94</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">153</span> * a1[<span class="number">5</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">5</span>] == (<span class="number">9</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + ((a1[<span class="number">5</span>] &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xffffffff</span>) \</span><br><span class="line">                          + <span class="number">62</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">58</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">100</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">137</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">6</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">119</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">180</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">228</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">88</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">107</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">56</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">207</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">248</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">150</span> * a1[<span class="number">3</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">3</span>] == (<span class="number">38</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">194</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">105</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">150</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">75</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">89</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">99</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">98</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">91</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">178</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">117</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">48</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">239</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">233</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">63</span> * a1[<span class="number">5</span>]  \</span><br><span class="line">                          + <span class="number">250</span> * a1[<span class="number">9</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">11</span>] == (<span class="number">30</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">13</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                           + <span class="number">206</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">234</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                           + <span class="number">71</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                           + <span class="number">239</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">141</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">179</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                           + <span class="number">113</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">181</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">52</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">74</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">168</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">239</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                           + <span class="number">164</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">179</span> * a1[<span class="number">2</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">14</span>] == (<span class="number">211</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                           + <span class="number">74</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                           + <span class="number">144</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">234</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">241</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                           + <span class="number">157</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">25</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                           + <span class="number">6</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">243</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">107</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">77</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">127</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">67</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                           + <span class="number">13</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">151</span> * a1[<span class="number">3</span>]  \</span><br><span class="line">                           + <span class="number">127</span> * a1[<span class="number">13</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">2</span>] == (<span class="number">209</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">110</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">22</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">102</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">187</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">58</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">236</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">146</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">205</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">63</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">211</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">152</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">82</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">14</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">49</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">251</span> * a1[<span class="number">0</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">12</span>] == (<span class="number">230</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">27</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">186</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                           + <span class="number">58</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                           + <span class="number">121</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                           + <span class="number">59</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                           + <span class="number">90</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                           + <span class="number">40</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                           + <span class="number">230</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                           + <span class="number">25</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                           + <span class="number">198</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                           + <span class="number">81</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">71</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                           + <span class="number">180</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                           + <span class="number">149</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                           + <span class="number">73</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">4</span>] == (<span class="number">188</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">80</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">221</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + ((a1[<span class="number">12</span>] &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xffffffff</span>) \</span><br><span class="line">                          + <span class="number">230</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">123</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">124</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">253</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">202</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">63</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                          + <span class="number">40</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">109</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">195</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">199</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">82</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">225</span> * a1[<span class="number">14</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">s.add(dword_422040[<span class="number">1</span>] == (<span class="number">236</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                          + <span class="number">44</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                          + <span class="number">214</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                          + <span class="number">52</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                          + <span class="number">37</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                          + <span class="number">101</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                          + <span class="number">244</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                          + <span class="number">238</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                          + <span class="number">109</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                          + <span class="number">188</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                          + <span class="number">20</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                          + <span class="number">87</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                          + <span class="number">93</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                          + <span class="number">158</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                          + <span class="number">105</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                          + <span class="number">3</span> * a1[<span class="number">2</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br><span class="line">flag[<span class="number">28</span>] = <span class="number">114</span></span><br><span class="line">flag[<span class="number">18</span>] = <span class="number">42</span></span><br><span class="line">flag[<span class="number">21</span>] = <span class="number">71</span></span><br><span class="line">flag[<span class="number">27</span>] = <span class="number">42</span></span><br><span class="line">flag[<span class="number">30</span>] = <span class="number">124</span></span><br><span class="line">flag[<span class="number">32</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">23</span>] = <span class="number">42</span></span><br><span class="line">flag[<span class="number">26</span>] = <span class="number">186</span></span><br><span class="line">flag[<span class="number">31</span>] = <span class="number">209</span></span><br><span class="line">flag[<span class="number">17</span>] = <span class="number">186</span></span><br><span class="line">flag[<span class="number">24</span>] = <span class="number">186</span></span><br><span class="line">flag[<span class="number">29</span>] = <span class="number">11</span></span><br><span class="line">flag[<span class="number">20</span>] = <span class="number">45</span></span><br><span class="line">flag[<span class="number">19</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">22</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">25</span>] = <span class="number">25</span></span><br><span class="line">dword_422000 = [<span class="number">0x0002A81A</span>, <span class="number">0x00028D44</span>, <span class="number">0x00022653</span>, <span class="number">0x0002E993</span>, <span class="number">0x000249B5</span>, <span class="number">0x00024265</span>, <span class="number">0x0003253D</span>, <span class="number">0x0002D77B</span>, <span class="number">0x000282C8</span>, <span class="number">0x00022892</span>, <span class="number">0x0002BD54</span>, <span class="number">0x0002482E</span>, <span class="number">0x00024C1F</span>, <span class="number">0x00028127</span>, <span class="number">0x0001E62E</span>, <span class="number">0x0001F009</span>]</span><br><span class="line"></span><br><span class="line">x = Solver()</span><br><span class="line">a1 = [BitVec(<span class="string">f&#x27;flag[<span class="subst">&#123;i&#125;</span>]&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">17</span>)]</span><br><span class="line">x.add(dword_422000[<span class="number">12</span>] == (<span class="number">199</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">98</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">192</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                       + <span class="number">23</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">79</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">77</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">185</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                       + <span class="number">135</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">119</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                           + <span class="number">54</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">41</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">124</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">18</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                       + <span class="number">181</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                       + <span class="number">191</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                       + <span class="number">7</span> * a1[<span class="number">3</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">3</span>] == (<span class="number">210</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">26</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">169</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">177</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">205</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">223</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">32</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">225</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">61</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">72</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">186</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">253</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">205</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">49</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">232</span> * a1[<span class="number">7</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">13</span>] == (<span class="number">192</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                       + <span class="number">22</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">175</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">184</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">116</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">70</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                       + <span class="number">153</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">119</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                       + <span class="number">217</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">123</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                       + <span class="number">17</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                       + <span class="number">244</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">116</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                       + <span class="number">46</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                       + <span class="number">19</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">130</span> * a1[<span class="number">11</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">7</span>] == (<span class="number">41</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">71</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">185</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">69</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">142</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">221</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">24</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">208</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">41</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">159</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">231</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">235</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">225</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + (a1[<span class="number">4</span>] &lt;&lt; <span class="number">6</span>) \</span><br><span class="line">                      + <span class="number">162</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">134</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">11</span>] == (<span class="number">36</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">220</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                       + <span class="number">110</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                       + <span class="number">45</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">123</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">133</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">101</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                       + <span class="number">137</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">102</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                           + <span class="number">227</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">94</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">18</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                       + <span class="number">22</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">189</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                       + <span class="number">218</span> * a1[<span class="number">8</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">15</span>] == (<span class="number">86</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                       + <span class="number">31</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">229</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">27</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                       + <span class="number">6</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">13</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">158</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">89</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">35</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">126</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                       + <span class="number">165</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                       + <span class="number">220</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                       + <span class="number">138</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                       + <span class="number">100</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                       + <span class="number">84</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">175</span> * a1[<span class="number">2</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">8</span>] == (<span class="number">7</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">28</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">131</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">6</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">254</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">130</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">124</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">55</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">157</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">175</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">140</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">241</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">11</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">211</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">121</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">200</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">6</span>] == (<span class="number">195</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">197</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">218</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">83</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">98</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">70</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">229</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">148</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">195</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">94</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">211</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">220</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">81</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">253</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">78</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">4</span> * a1[<span class="number">3</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">14</span>] == (<span class="number">3</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                       + <span class="number">136</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">156</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                       + <span class="number">189</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">244</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">157</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">83</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">6</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                       + <span class="number">113</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">63</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">35</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                       + <span class="number">22</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                       + <span class="number">26</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">62</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                       + <span class="number">98</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                       + <span class="number">110</span> * a1[<span class="number">13</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">4</span>] == (<span class="number">96</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">248</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">191</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">194</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">154</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">31</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">157</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">248</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">81</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">56</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">52</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">94</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">212</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">83</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">83</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">158</span> * a1[<span class="number">11</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">1</span>] == (<span class="number">67</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">220</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">123</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">168</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">23</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">148</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">127</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">194</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">132</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">44</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">60</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">98</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">38</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">245</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">159</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">146</span> * a1[<span class="number">3</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">5</span>] == (<span class="number">132</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                           + <span class="number">10</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">95</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">83</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">99</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">77</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">195</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">47</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">38</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">178</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">74</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">86</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">208</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">240</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">120</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">43</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">9</span>] == (<span class="number">172</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">110</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">92</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">126</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">91</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">77</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">207</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">249</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">240</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">129</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">6</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">100</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">76</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">127</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">4</span> * a1[<span class="number">8</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">10</span>] == (<span class="number">46</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                       + <span class="number">37</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                       + <span class="number">3</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                       + <span class="number">72</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                       + <span class="number">116</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                       + <span class="number">186</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                       + <span class="number">221</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                       + <span class="number">236</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                       + <span class="number">79</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                       + <span class="number">175</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                       + <span class="number">184</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                       + <span class="number">160</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                       + <span class="number">227</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                       + <span class="number">99</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                       + <span class="number">71</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                       + <span class="number">4</span> * a1[<span class="number">5</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">0</span>] == (<span class="number">203</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">31</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">11</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">149</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">215</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">206</span> * a1[<span class="number">1</span>] \</span><br><span class="line">                      + <span class="number">245</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">9</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">16</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">241</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">110</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">175</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">38</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">227</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">208</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">8</span> * a1[<span class="number">15</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">x.add(dword_422000[<span class="number">2</span>] == (<span class="number">132</span> * a1[<span class="number">3</span>] \</span><br><span class="line">                      + <span class="number">119</span> * a1[<span class="number">14</span>] \</span><br><span class="line">                      + <span class="number">26</span> * a1[<span class="number">8</span>] \</span><br><span class="line">                      + <span class="number">24</span> * a1[<span class="number">6</span>] \</span><br><span class="line">                      + <span class="number">121</span> * a1[<span class="number">11</span>] \</span><br><span class="line">                      + <span class="number">235</span> * a1[<span class="number">2</span>] \</span><br><span class="line">                      + <span class="number">228</span> * a1[<span class="number">12</span>] \</span><br><span class="line">                      + <span class="number">34</span> * a1[<span class="number">5</span>] \</span><br><span class="line">                      + <span class="number">37</span> * a1[<span class="number">15</span>] \</span><br><span class="line">                      + <span class="number">24</span> * a1[<span class="number">9</span>] \</span><br><span class="line">                      + <span class="number">145</span> * a1[<span class="number">13</span>] \</span><br><span class="line">                      + <span class="number">199</span> * a1[<span class="number">4</span>] \</span><br><span class="line">                      + <span class="number">173</span> * a1[<span class="number">10</span>] \</span><br><span class="line">                      + <span class="number">58</span> * a1[<span class="number">0</span>] \</span><br><span class="line">                      + <span class="number">246</span> * a1[<span class="number">7</span>] \</span><br><span class="line">                      + <span class="number">199</span> * a1[<span class="number">1</span>])&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">assert</span> x.check() == sat</span><br><span class="line"><span class="built_in">print</span>(x.model())</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = <span class="number">0x23</span></span><br><span class="line">flag[<span class="number">33</span>] = <span class="number">0x21</span></span><br><span class="line">flag[<span class="number">5</span>] = <span class="number">43</span></span><br><span class="line">flag[<span class="number">11</span>] = <span class="number">186</span></span><br><span class="line">flag[<span class="number">8</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">16</span>] = <span class="number">72</span></span><br><span class="line">flag[<span class="number">6</span>] = <span class="number">42</span></span><br><span class="line">flag[<span class="number">4</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">flag[<span class="number">10</span>] = <span class="number">179</span></span><br><span class="line">flag[<span class="number">14</span>] = <span class="number">43</span></span><br><span class="line">flag[<span class="number">7</span>] = <span class="number">186</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="number">90</span></span><br><span class="line">flag[<span class="number">13</span>] = <span class="number">113</span></span><br><span class="line">flag[<span class="number">12</span>] = <span class="number">51</span></span><br><span class="line">flag[<span class="number">2</span>] = <span class="number">45</span></span><br><span class="line">flag[<span class="number">9</span>] = <span class="number">72</span></span><br><span class="line">flag[<span class="number">15</span>] = <span class="number">114</span></span><br><span class="line"></span><br><span class="line">by280 = [<span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0x9F</span>, <span class="number">0x23</span>, <span class="number">0x71</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0xDB</span>, <span class="number">0x59</span>, <span class="number">0x0A</span>, <span class="number">0xEC</span>, <span class="number">0x69</span>, <span class="number">0xEE</span>, <span class="number">0x76</span>, <span class="number">0x5D</span>, <span class="number">0x64</span>, <span class="number">0x37</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0x0B</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x80</span>, <span class="number">0xAD</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x43</span>, <span class="number">0x93</span>, <span class="number">0xBC</span>, <span class="number">0xBF</span>, <span class="number">0xE3</span>, <span class="number">0xAF</span>, <span class="number">0x5A</span>, <span class="number">0x8A</span>, <span class="number">0x65</span>, <span class="number">0x0D</span>, <span class="number">0x31</span>, <span class="number">0xDF</span>, <span class="number">0x3E</span>, <span class="number">0xA7</span>, <span class="number">0xE4</span>, <span class="number">0xDD</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x56</span>, <span class="number">0x1C</span>, <span class="number">0x12</span>, <span class="number">0xA4</span>, <span class="number">0x9E</span>, <span class="number">0xD8</span>, <span class="number">0x3D</span>, <span class="number">0x81</span>, <span class="number">0x60</span>, <span class="number">0x9A</span>, <span class="number">0xCB</span>, <span class="number">0xFA</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0xD3</span>, <span class="number">0xF4</span>, <span class="number">0xA2</span>, <span class="number">0x26</span>, <span class="number">0x68</span>, <span class="number">0x90</span>, <span class="number">0x4B</span>, <span class="number">0x45</span>, <span class="number">0x85</span>, <span class="number">0x20</span>, <span class="number">0x16</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x4C</span>, <span class="number">0x6F</span>, <span class="number">0x34</span>, <span class="number">0xDC</span>, <span class="number">0xBE</span>, <span class="number">0xD2</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0x14</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>, <span class="number">0x1F</span>, <span class="number">0xD0</span>, <span class="number">0x95</span>, <span class="number">0x97</span>, <span class="number">0x3F</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0xB9</span>, <span class="number">0xC9</span>, <span class="number">0x0C</span>, <span class="number">0xCA</span>, <span class="number">0x4E</span>, <span class="number">0xF1</span>, <span class="number">0xB7</span>, <span class="number">0x39</span>, <span class="number">0x7F</span>, <span class="number">0x27</span>, <span class="number">0x2B</span>, <span class="number">0x40</span>, <span class="number">0x4A</span>, <span class="number">0x51</span>, <span class="number">0xA1</span>, <span class="number">0xCC</span>, <span class="number">0xCE</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0xFF</span>, <span class="number">0x0E</span>, <span class="number">0xEF</span>, <span class="number">0x8E</span>, <span class="number">0x25</span>, <span class="number">0xB3</span>, <span class="number">0x5E</span>, <span class="number">0x6C</span>, <span class="number">0xAB</span>, <span class="number">0x02</span>, <span class="number">0x49</span>, <span class="number">0xE9</span>, <span class="number">0x9B</span>, <span class="number">0x36</span>, <span class="number">0x13</span>, <span class="number">0x9C</span>, <span class="number">0x04</span>, <span class="number">0x35</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0xB6</span>, <span class="number">0x9D</span>, <span class="number">0xC2</span>, <span class="number">0x73</span>, <span class="number">0xB5</span>, <span class="number">0x6D</span>, <span class="number">0xCF</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x01</span>, <span class="number">0xC1</span>, <span class="number">0x10</span>, <span class="number">0x6B</span>, <span class="number">0x79</span>, <span class="number">0x87</span>, <span class="number">0x5B</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0xE5</span>, <span class="number">0x15</span>, <span class="number">0xF7</span>, <span class="number">0xA5</span>, <span class="number">0x74</span>, <span class="number">0xAA</span>, <span class="number">0x53</span>, <span class="number">0x7D</span>, <span class="number">0x2E</span>, <span class="number">0xD5</span>, <span class="number">0xA3</span>, <span class="number">0x19</span>, <span class="number">0xF5</span>, <span class="number">0x2D</span>, <span class="number">0xFD</span>, <span class="number">0x61</span>, <span class="number">0x8D</span>, <span class="number">0xC8</span>, <span class="number">0x1B</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>, <span class="number">0xF6</span>, <span class="number">0x72</span>, <span class="number">0x54</span>, <span class="number">0x5F</span>, <span class="number">0x1E</span>, <span class="number">0xE8</span>, <span class="number">0x17</span>, <span class="number">0x50</span>, <span class="number">0xB2</span>, <span class="number">0xE7</span>, <span class="number">0x0F</span>, <span class="number">0x7E</span>, <span class="number">0x55</span>, <span class="number">0xBD</span>, <span class="number">0x86</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x94</span>, <span class="number">0x92</span>, <span class="number">0x09</span>, <span class="number">0x2F</span>, <span class="number">0xD6</span>, <span class="number">0xD9</span>, <span class="number">0xF3</span>, <span class="number">0x29</span>, <span class="number">0xE6</span>, <span class="number">0x24</span>, <span class="number">0x32</span>, <span class="number">0x66</span>, <span class="number">0x22</span>, <span class="number">0x41</span>, <span class="number">0xC4</span>, <span class="number">0x7C</span>, <span class="number">0x05</span>, <span class="number">0x98</span>, <span class="number">0x44</span>, <span class="number">0x4F</span>, <span class="number">0x99</span>, <span class="number">0xA9</span>, <span class="number">0xE1</span>, <span class="number">0x8F</span>, <span class="number">0x08</span>, <span class="number">0x1A</span>, <span class="number">0x2A</span>, <span class="number">0x11</span>, <span class="number">0xEA</span>, <span class="number">0x3B</span>, <span class="number">0xE2</span>, <span class="number">0x38</span>, <span class="number">0xB8</span>, <span class="number">0x18</span>, <span class="number">0xF9</span>, <span class="number">0xD4</span>, <span class="number">0xC7</span>, <span class="number">0x62</span>, <span class="number">0x7B</span>, <span class="number">0x75</span>, <span class="number">0x58</span>, <span class="number">0x96</span>, <span class="number">0x28</span>, <span class="number">0xEB</span>, <span class="number">0x06</span>, <span class="number">0x84</span>, <span class="number">0x89</span>, <span class="number">0x48</span>, <span class="number">0x82</span>, <span class="number">0x88</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xA0</span>, <span class="number">0xF2</span>, <span class="number">0xF8</span>, <span class="number">0x1D</span>, <span class="number">0x8B</span>, <span class="number">0xFC</span>, <span class="number">0xA8</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0xBB</span>, <span class="number">0x07</span>, <span class="number">0xBA</span>, <span class="number">0x4D</span>]</span><br><span class="line">by380 = [<span class="number">0x45</span>, <span class="number">0x1F</span>, <span class="number">0x63</span>, <span class="number">0x81</span>, <span class="number">0xE6</span>, <span class="number">0xAD</span>, <span class="number">0x4F</span>, <span class="number">0xD3</span>, <span class="number">0xC0</span>, <span class="number">0x15</span>, <span class="number">0x69</span>, <span class="number">0x8F</span>, <span class="number">0x0D</span>, <span class="number">0x31</span>, <span class="number">0x0C</span>, <span class="number">0xB0</span>, <span class="number">0xF1</span>, <span class="number">0x2E</span>, <span class="number">0x98</span>, <span class="number">0xC1</span>, <span class="number">0xC2</span>, <span class="number">0x96</span>, <span class="number">0xB2</span>, <span class="number">0xEB</span>, <span class="number">0xBF</span>, <span class="number">0xDF</span>, <span class="number">0x17</span>, <span class="number">0xF4</span>, <span class="number">0x7F</span>, <span class="number">0xE5</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0xD8</span>, <span class="number">0x56</span>, <span class="number">0x46</span>, <span class="number">0x20</span>, <span class="number">0x9C</span>, <span class="number">0x77</span>, <span class="number">0x3D</span>, <span class="number">0x72</span>, <span class="number">0xA3</span>, <span class="number">0x91</span>, <span class="number">0x49</span>, <span class="number">0x68</span>, <span class="number">0x4C</span>, <span class="number">0x1E</span>, <span class="number">0xAE</span>, <span class="number">0x06</span>, <span class="number">0x7A</span>, <span class="number">0x94</span>, <span class="number">0xDD</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x2C</span>, <span class="number">0xB8</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0xFE</span>, <span class="number">0x38</span>, <span class="number">0xEF</span>, <span class="number">0x8B</span>, <span class="number">0xF7</span>, <span class="number">0xAC</span>, <span class="number">0xDC</span>, <span class="number">0xFF</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0x70</span>, <span class="number">0xA9</span>, <span class="number">0xCE</span>, <span class="number">0x3F</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x43</span>, <span class="number">0x5B</span>, <span class="number">0xF8</span>, <span class="number">0xAF</span>, <span class="number">0xD0</span>, <span class="number">0xFA</span>, <span class="number">0x33</span>, <span class="number">0xBA</span>, <span class="number">0xCF</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0x88</span>, <span class="number">0x4E</span>, <span class="number">0x80</span>, <span class="number">0x10</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0x12</span>, <span class="number">0xAB</span>, <span class="number">0xE1</span>, <span class="number">0x61</span>, <span class="number">0xB7</span>, <span class="number">0x3E</span>, <span class="number">0x4D</span>, <span class="number">0x19</span>, <span class="number">0x3A</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x92</span>, <span class="number">0x0B</span>, <span class="number">0xE7</span>, <span class="number">0x3C</span>, <span class="number">0xEA</span>, <span class="number">0xC7</span>, <span class="number">0x16</span>, <span class="number">0x35</span>, <span class="number">0xB1</span>, <span class="number">0xA7</span>, <span class="number">0x8E</span>, <span class="number">0x40</span>, <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xB5</span>, <span class="number">0x25</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0x30</span>, <span class="number">0x7D</span>, <span class="number">0xA2</span>, <span class="number">0x1A</span>, <span class="number">0x64</span>, <span class="number">0xC5</span>, <span class="number">0x6D</span>, <span class="number">0x74</span>, <span class="number">0x82</span>, <span class="number">0x08</span>, <span class="number">0x7E</span>, <span class="number">0xD2</span>, <span class="number">0xF6</span>, <span class="number">0xAA</span>, <span class="number">0xDA</span>, <span class="number">0xED</span>, <span class="number">0x4B</span>, <span class="number">0x6E</span>, <span class="number">0xE8</span>, <span class="number">0xE9</span>, <span class="number">0xE2</span>, <span class="number">0xD4</span>, <span class="number">0x71</span>, <span class="number">0xB9</span>, <span class="number">0x09</span>, <span class="number">0x84</span>, <span class="number">0x3B</span>, <span class="number">0xC4</span>, <span class="number">0x1C</span>, <span class="number">0x60</span>, <span class="number">0xFD</span>, <span class="number">0x22</span>, <span class="number">0x99</span>, <span class="number">0x39</span>, <span class="number">0x97</span>, <span class="number">0x18</span>, <span class="number">0x89</span>, <span class="number">0x7C</span>, <span class="number">0xA4</span>, <span class="number">0x27</span>, <span class="number">0xBD</span>, <span class="number">0x0F</span>, <span class="number">0xCC</span>, <span class="number">0x95</span>, <span class="number">0xF5</span>, <span class="number">0xB3</span>, <span class="number">0x65</span>, <span class="number">0x6B</span>, <span class="number">0x8A</span>, <span class="number">0x58</span>, <span class="number">0x36</span>, <span class="number">0xBB</span>, <span class="number">0x9E</span>, <span class="number">0x75</span>, <span class="number">0xD1</span>, <span class="number">0x03</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x6C</span>, <span class="number">0x53</span>, <span class="number">0x05</span>, <span class="number">0xB4</span>, <span class="number">0xE4</span>, <span class="number">0xEE</span>, <span class="number">0x67</span>, <span class="number">0x87</span>, <span class="number">0x7B</span>, <span class="number">0x32</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x2A</span>, <span class="number">0x59</span>, <span class="number">0xEC</span>, <span class="number">0x0A</span>, <span class="number">0xDB</span>, <span class="number">0x21</span>, <span class="number">0x07</span>, <span class="number">0x23</span>, <span class="number">0x50</span>, <span class="number">0x02</span>, <span class="number">0x41</span>, <span class="number">0xF2</span>, <span class="number">0x83</span>, <span class="number">0xD9</span>, <span class="number">0x26</span>, <span class="number">0xBC</span>, <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0xA6</span>, <span class="number">0x93</span>, <span class="number">0xF9</span>, <span class="number">0xC8</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0xE3</span>, <span class="number">0xE0</span>, <span class="number">0xFC</span>, <span class="number">0xCA</span>, <span class="number">0x1B</span>, <span class="number">0x5E</span>, <span class="number">0x8D</span>, <span class="number">0x2F</span>, <span class="number">0x5C</span>, <span class="number">0xBE</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x44</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x5D</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0x76</span>, <span class="number">0xCD</span>, <span class="number">0x28</span>, <span class="number">0xD5</span>, <span class="number">0x14</span>, <span class="number">0x90</span>, <span class="number">0x13</span>, <span class="number">0xDE</span>, <span class="number">0x5F</span>, <span class="number">0xF0</span>, <span class="number">0x01</span>, <span class="number">0x2B</span>, <span class="number">0xC6</span>, <span class="number">0x29</span>, <span class="number">0x9A</span>, <span class="number">0x9B</span>, <span class="number">0x51</span>, <span class="number">0xF3</span>, <span class="number">0xFB</span>, <span class="number">0xA1</span>]</span><br><span class="line">by580 = [<span class="number">0x00</span>, <span class="number">0x74</span>, <span class="number">0x59</span>, <span class="number">0xC6</span>, <span class="number">0xAC</span>, <span class="number">0xD3</span>, <span class="number">0xC1</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x3F</span>, <span class="number">0x1C</span>, <span class="number">0x28</span>, <span class="number">0x17</span>, <span class="number">0x22</span>, <span class="number">0xC5</span>, <span class="number">0x38</span>, <span class="number">0xF9</span>, <span class="number">0x1B</span>, <span class="number">0x21</span>, <span class="number">0x49</span>, <span class="number">0x99</span>, <span class="number">0xAF</span>, <span class="number">0xD6</span>, <span class="number">0x95</span>, <span class="number">0xA4</span>, <span class="number">0x9D</span>, <span class="number">0x5D</span>, <span class="number">0x5B</span>, <span class="number">0x73</span>, <span class="number">0xFE</span>, <span class="number">0xC9</span>, <span class="number">0x9A</span>, <span class="number">0x4C</span>, <span class="number">0xB4</span>, <span class="number">0x27</span>, <span class="number">0x5E</span>, <span class="number">0x71</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x90</span>, <span class="number">0xC0</span>, <span class="number">0x62</span>, <span class="number">0x5F</span>, <span class="number">0x48</span>, <span class="number">0x77</span>, <span class="number">0xE0</span>, <span class="number">0xF2</span>, <span class="number">0x8E</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x01</span>, <span class="number">0xB6</span>, <span class="number">0xD8</span>, <span class="number">0xB5</span>, <span class="number">0x67</span>, <span class="number">0x1E</span>, <span class="number">0x85</span>, <span class="number">0x12</span>, <span class="number">0x68</span>, <span class="number">0x87</span>, <span class="number">0xD0</span>, <span class="number">0x30</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0x50</span>, <span class="number">0xCF</span>, <span class="number">0xEE</span>, <span class="number">0xDD</span>, <span class="number">0xFB</span>, <span class="number">0xE6</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0x05</span>, <span class="number">0x75</span>, <span class="number">0xB7</span>, <span class="number">0xEF</span>, <span class="number">0x70</span>, <span class="number">0x53</span>, <span class="number">0xFF</span>, <span class="number">0xBA</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x9B</span>, <span class="number">0xA1</span>, <span class="number">0x39</span>, <span class="number">0xF8</span>, <span class="number">0x65</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x51</span>, <span class="number">0x98</span>, <span class="number">0xAD</span>, <span class="number">0x02</span>, <span class="number">0x13</span>, <span class="number">0x18</span>, <span class="number">0xC3</span>, <span class="number">0x31</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0xCA</span>, <span class="number">0x91</span>, <span class="number">0xD1</span>, <span class="number">0x78</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0xB8</span>, <span class="number">0x54</span>, <span class="number">0x9F</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x2B</span>, <span class="number">0xE5</span>, <span class="number">0x46</span>, <span class="number">0x29</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x82</span>, <span class="number">0xBC</span>, <span class="number">0xFC</span>, <span class="number">0x6E</span>, <span class="number">0xEC</span>, <span class="number">0xED</span>, <span class="number">0x64</span>, <span class="number">0x4A</span>, <span class="number">0x26</span>, <span class="number">0x34</span>, <span class="number">0x5C</span>, <span class="number">0x19</span>, <span class="number">0x55</span>, <span class="number">0xFD</span>, <span class="number">0x6D</span>, <span class="number">0xFA</span>, <span class="number">0x7E</span>, <span class="number">0xB2</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE4</span>, <span class="number">0x60</span>, <span class="number">0xB0</span>, <span class="number">0x52</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>, <span class="number">0xBB</span>, <span class="number">0x08</span>, <span class="number">0x3B</span>, <span class="number">0x97</span>, <span class="number">0xE8</span>, <span class="number">0x10</span>, <span class="number">0x6C</span>, <span class="number">0x44</span>, <span class="number">0x3A</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0x81</span>, <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xCB</span>, <span class="number">0x66</span>, <span class="number">0xAA</span>, <span class="number">0x37</span>, <span class="number">0xA2</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0xE9</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x8D</span>, <span class="number">0xD9</span>, <span class="number">0xF5</span>, <span class="number">0x0B</span>, <span class="number">0xC2</span>, <span class="number">0x07</span>, <span class="number">0xA8</span>, <span class="number">0x0D</span>, <span class="number">0xA3</span>, <span class="number">0x0A</span>, <span class="number">0x84</span>, <span class="number">0x6B</span>, <span class="number">0x2C</span>, <span class="number">0xEA</span>, <span class="number">0x0C</span>, <span class="number">0xAE</span>, <span class="number">0x7D</span>, <span class="number">0x6F</span>, <span class="number">0xD7</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x3C</span>, <span class="number">0x45</span>, <span class="number">0xCC</span>, <span class="number">0x58</span>, <span class="number">0xB9</span>, <span class="number">0x3D</span>, <span class="number">0x33</span>, <span class="number">0x4E</span>, <span class="number">0x4B</span>, <span class="number">0x8C</span>, <span class="number">0xCE</span>, <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x8B</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x11</span>, <span class="number">0xDF</span>, <span class="number">0x5A</span>, <span class="number">0x2E</span>, <span class="number">0x92</span>, <span class="number">0xDA</span>, <span class="number">0x86</span>, <span class="number">0x94</span>, <span class="number">0xA7</span>, <span class="number">0xD5</span>, <span class="number">0x4F</span>, <span class="number">0x2A</span>, <span class="number">0xB3</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0xE3</span>, <span class="number">0xDE</span>, <span class="number">0x43</span>, <span class="number">0x1D</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x32</span>, <span class="number">0xBE</span>, <span class="number">0x16</span>, <span class="number">0x3E</span>, <span class="number">0x93</span>, <span class="number">0x7F</span>, <span class="number">0x83</span>, <span class="number">0x56</span>, <span class="number">0x06</span>, <span class="number">0xF7</span>, <span class="number">0x8A</span>, <span class="number">0x20</span>, <span class="number">0xBD</span>, <span class="number">0x0E</span>, <span class="number">0xA6</span>, <span class="number">0xDB</span>, <span class="number">0x0F</span>, <span class="number">0xB1</span>, <span class="number">0x42</span>, <span class="number">0xF0</span>, <span class="number">0x09</span>, <span class="number">0x4D</span>, <span class="number">0xA9</span>, <span class="number">0xF4</span>]</span><br><span class="line">by780 = [<span class="number">0x0F</span>, <span class="number">0xA5</span>, <span class="number">0xBA</span>, <span class="number">0x03</span>, <span class="number">0xF9</span>, <span class="number">0x69</span>, <span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0xEA</span>, <span class="number">0xB5</span>, <span class="number">0xFC</span>, <span class="number">0xA1</span>, <span class="number">0x39</span>, <span class="number">0x20</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x25</span>, <span class="number">0xB2</span>, <span class="number">0x6C</span>, <span class="number">0xAD</span>, <span class="number">0x88</span>, <span class="number">0x51</span>, <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0xCF</span>, <span class="number">0x13</span>, <span class="number">0xDE</span>, <span class="number">0x7C</span>, <span class="number">0x6D</span>, <span class="number">0x38</span>, <span class="number">0x05</span>, <span class="number">0x09</span>, <span class="number">0xC2</span>, <span class="number">0x96</span>, <span class="number">0x1F</span>, <span class="number">0x7F</span>, <span class="number">0x37</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0xE7</span>, <span class="number">0x6A</span>, <span class="number">0xB0</span>, <span class="number">0x59</span>, <span class="number">0xF7</span>, <span class="number">0xD2</span>, <span class="number">0xB9</span>, <span class="number">0x16</span>, <span class="number">0xC8</span>, <span class="number">0xEE</span>, <span class="number">0xA9</span>, <span class="number">0x18</span>, <span class="number">0x80</span>, <span class="number">0xAC</span>, <span class="number">0xE3</span>, <span class="number">0x9E</span>, <span class="number">0x6F</span>, <span class="number">0x3C</span>, <span class="number">0x2F</span>, <span class="number">0x3E</span>, <span class="number">0x9A</span>, <span class="number">0xBE</span>, <span class="number">0x1D</span>, <span class="number">0xB4</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x32</span>, <span class="number">0x6B</span>, <span class="number">0x74</span>, <span class="number">0xC5</span>, <span class="number">0xC0</span>, <span class="number">0xC7</span>, <span class="number">0xD1</span>, <span class="number">0x29</span>, <span class="number">0x98</span>, <span class="number">0xDD</span>, <span class="number">0xB6</span>, <span class="number">0x0E</span>, <span class="number">0x4D</span>, <span class="number">0xBF</span>, <span class="number">0x79</span>, <span class="number">0x0D</span>, <span class="number">0xDA</span>, <span class="number">0x7A</span>, <span class="number">0x17</span>, <span class="number">0x71</span>, <span class="number">0x43</span>, <span class="number">0x87</span>, <span class="number">0xFF</span>, <span class="number">0xDC</span>, <span class="number">0xC6</span>, <span class="number">0x12</span>, <span class="number">0xE9</span>, <span class="number">0x67</span>, <span class="number">0x2D</span>, <span class="number">0x70</span>, <span class="number">0x9F</span>, <span class="number">0x95</span>, <span class="number">0x30</span>, <span class="number">0x26</span>, <span class="number">0x24</span>, <span class="number">0x2B</span>, <span class="number">0xA8</span>, <span class="number">0xA2</span>, <span class="number">0xD8</span>, <span class="number">0x3B</span>, <span class="number">0x31</span>, <span class="number">0xA0</span>, <span class="number">0x3D</span>, <span class="number">0x4B</span>, <span class="number">0x90</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x75</span>, <span class="number">0xE8</span>, <span class="number">0x5D</span>, <span class="number">0xF4</span>, <span class="number">0x85</span>, <span class="number">0xF3</span>, <span class="number">0xFE</span>, <span class="number">0x35</span>, <span class="number">0xCB</span>, <span class="number">0xB8</span>, <span class="number">0x02</span>, <span class="number">0x50</span>, <span class="number">0xB1</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x21</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x7E</span>, <span class="number">0xED</span>, <span class="number">0x07</span>, <span class="number">0xD9</span>, <span class="number">0xD6</span>, <span class="number">0x44</span>, <span class="number">0x15</span>, <span class="number">0x8E</span>, <span class="number">0x49</span>, <span class="number">0xB3</span>, <span class="number">0x97</span>, <span class="number">0xE6</span>, <span class="number">0x63</span>, <span class="number">0xB7</span>, <span class="number">0xEF</span>, <span class="number">0x3A</span>, <span class="number">0x8F</span>, <span class="number">0xF2</span>, <span class="number">0x53</span>, <span class="number">0x10</span>, <span class="number">0x77</span>, <span class="number">0x86</span>, <span class="number">0xF8</span>, <span class="number">0x8A</span>, <span class="number">0x28</span>, <span class="number">0x3F</span>, <span class="number">0xD4</span>, <span class="number">0x4C</span>, <span class="number">0xE5</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0xDF</span>, <span class="number">0xC3</span>, <span class="number">0x14</span>, <span class="number">0xCA</span>, <span class="number">0xA3</span>, <span class="number">0x5F</span>, <span class="number">0x64</span>, <span class="number">0x47</span>, <span class="number">0xFD</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0x66</span>, <span class="number">0xA7</span>, <span class="number">0x5A</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0xD5</span>, <span class="number">0x5B</span>, <span class="number">0x0A</span>, <span class="number">0x4F</span>, <span class="number">0x27</span>, <span class="number">0x78</span>, <span class="number">0x0B</span>, <span class="number">0x2E</span>, <span class="number">0x48</span>, <span class="number">0x36</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0x56</span>, <span class="number">0xE0</span>, <span class="number">0xA6</span>, <span class="number">0xC1</span>, <span class="number">0x5C</span>, <span class="number">0x8B</span>, <span class="number">0x41</span>, <span class="number">0x06</span>, <span class="number">0xBB</span>, <span class="number">0x52</span>, <span class="number">0x93</span>, <span class="number">0xAF</span>, <span class="number">0x2C</span>, <span class="number">0x5E</span>, <span class="number">0xF6</span>, <span class="number">0x61</span>, <span class="number">0xF0</span>, <span class="number">0xAB</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0x04</span>, <span class="number">0xBD</span>, <span class="number">0xCC</span>, <span class="number">0xE4</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0x92</span>, <span class="number">0xCE</span>, <span class="number">0x40</span>, <span class="number">0xAE</span>, <span class="number">0x76</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0x54</span>, <span class="number">0xD0</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x4E</span>, <span class="number">0x57</span>, <span class="number">0x55</span>, <span class="number">0x23</span>, <span class="number">0x6E</span>, <span class="number">0x1E</span>, <span class="number">0x99</span>, <span class="number">0xDB</span>, <span class="number">0xFB</span>, <span class="number">0xA4</span>, <span class="number">0x22</span>, <span class="number">0x19</span>, <span class="number">0x58</span>, <span class="number">0x11</span>, <span class="number">0x8D</span>, <span class="number">0x94</span>, <span class="number">0xD3</span>, <span class="number">0xE2</span>, <span class="number">0x8C</span>, <span class="number">0xF5</span>, <span class="number">0x42</span>, <span class="number">0x46</span>, <span class="number">0xBC</span>, <span class="number">0x33</span>, <span class="number">0xE1</span>]</span><br><span class="line">byb80 = [<span class="number">0x38</span>, <span class="number">0xD9</span>, <span class="number">0xDA</span>, <span class="number">0xE6</span>, <span class="number">0xB5</span>, <span class="number">0xF1</span>, <span class="number">0x0B</span>, <span class="number">0x93</span>, <span class="number">0x0C</span>, <span class="number">0x58</span>, <span class="number">0x0D</span>, <span class="number">0xAE</span>, <span class="number">0x0A</span>, <span class="number">0x85</span>, <span class="number">0x2A</span>, <span class="number">0x50</span>, <span class="number">0xC2</span>, <span class="number">0xBF</span>, <span class="number">0xD4</span>, <span class="number">0x28</span>, <span class="number">0x52</span>, <span class="number">0xC4</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0xA2</span>, <span class="number">0x70</span>, <span class="number">0x36</span>, <span class="number">0x65</span>, <span class="number">0x4B</span>, <span class="number">0x41</span>, <span class="number">0x9D</span>, <span class="number">0x5F</span>, <span class="number">0x05</span>, <span class="number">0x7C</span>, <span class="number">0xF7</span>, <span class="number">0xD7</span>, <span class="number">0x99</span>, <span class="number">0x8B</span>, <span class="number">0xCC</span>, <span class="number">0xCE</span>, <span class="number">0x16</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0x79</span>, <span class="number">0xC7</span>, <span class="number">0x20</span>, <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x4A</span>, <span class="number">0x89</span>, <span class="number">0xD6</span>, <span class="number">0x0F</span>, <span class="number">0x6E</span>, <span class="number">0xB0</span>, <span class="number">0x61</span>, <span class="number">0xB1</span>, <span class="number">0x6D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x03</span>, <span class="number">0x74</span>, <span class="number">0xA1</span>, <span class="number">0x40</span>, <span class="number">0xEC</span>, <span class="number">0xC0</span>, <span class="number">0x57</span>, <span class="number">0x94</span>, <span class="number">0x7A</span>, <span class="number">0x66</span>, <span class="number">0xD5</span>, <span class="number">0xEA</span>, <span class="number">0x17</span>, <span class="number">0x6A</span>, <span class="number">0x84</span>, <span class="number">0x37</span>, <span class="number">0xED</span>, <span class="number">0xF6</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x5B</span>, <span class="number">0x82</span>, <span class="number">0x1E</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0xE2</span>, <span class="number">0x42</span>, <span class="number">0x86</span>, <span class="number">0xBA</span>, <span class="number">0xE3</span>, <span class="number">0x91</span>, <span class="number">0x7F</span>, <span class="number">0x67</span>, <span class="number">0x5C</span>, <span class="number">0x98</span>, <span class="number">0x15</span>, <span class="number">0x22</span>, <span class="number">0x8D</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x09</span>, <span class="number">0xA0</span>, <span class="number">0xAD</span>, <span class="number">0x63</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0x9A</span>, <span class="number">0x3C</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x69</span>, <span class="number">0xF8</span>, <span class="number">0xCD</span>, <span class="number">0xBC</span>, <span class="number">0x88</span>, <span class="number">0x55</span>, <span class="number">0xB2</span>, <span class="number">0xBD</span>, <span class="number">0x6B</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xB3</span>, <span class="number">0xD3</span>, <span class="number">0x90</span>, <span class="number">0x75</span>, <span class="number">0x06</span>, <span class="number">0x49</span>, <span class="number">0xC3</span>, <span class="number">0x32</span>, <span class="number">0x4D</span>, <span class="number">0x1D</span>, <span class="number">0xA8</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x2B</span>, <span class="number">0xA6</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0x2F</span>, <span class="number">0x9C</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x8C</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0xD1</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0x18</span>, <span class="number">0x51</span>, <span class="number">0x23</span>, <span class="number">0xCB</span>, <span class="number">0xF5</span>, <span class="number">0x1C</span>, <span class="number">0x9F</span>, <span class="number">0x97</span>, <span class="number">0xF9</span>, <span class="number">0xBB</span>, <span class="number">0xA7</span>, <span class="number">0x39</span>, <span class="number">0x45</span>, <span class="number">0x02</span>, <span class="number">0xFD</span>, <span class="number">0x46</span>, <span class="number">0x8A</span>, <span class="number">0x54</span>, <span class="number">0xA4</span>, <span class="number">0x8E</span>, <span class="number">0x9E</span>, <span class="number">0x68</span>, <span class="number">0x96</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0xB8</span>, <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0xAF</span>, <span class="number">0x10</span>, <span class="number">0xDE</span>, <span class="number">0x6C</span>, <span class="number">0x60</span>, <span class="number">0x5A</span>, <span class="number">0x76</span>, <span class="number">0x1A</span>, <span class="number">0xE9</span>, <span class="number">0xC1</span>, <span class="number">0x3E</span>, <span class="number">0xCA</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0xD2</span>, <span class="number">0xB9</span>, <span class="number">0x2D</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0x83</span>, <span class="number">0xAB</span>, <span class="number">0xF2</span>, <span class="number">0x4C</span>, <span class="number">0xA5</span>, <span class="number">0x21</span>, <span class="number">0x62</span>, <span class="number">0x81</span>, <span class="number">0x33</span>, <span class="number">0x1B</span>, <span class="number">0xD8</span>, <span class="number">0x6F</span>, <span class="number">0xAC</span>, <span class="number">0x3B</span>, <span class="number">0x5D</span>, <span class="number">0xE8</span>, <span class="number">0xFA</span>, <span class="number">0x3F</span>, <span class="number">0xDB</span>, <span class="number">0x95</span>, <span class="number">0xE7</span>, <span class="number">0x59</span>, <span class="number">0x12</span>, <span class="number">0x48</span>, <span class="number">0x35</span>, <span class="number">0xC6</span>, <span class="number">0x2C</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0xDD</span>, <span class="number">0x43</span>, <span class="number">0x29</span>, <span class="number">0xDC</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0xB7</span>, <span class="number">0xA9</span>, <span class="number">0xEB</span>, <span class="number">0xC8</span>, <span class="number">0xFE</span>, <span class="number">0x56</span>, <span class="number">0xDF</span>, <span class="number">0x53</span>]</span><br><span class="line">byd80 = [<span class="number">0xB0</span>, <span class="number">0x28</span>, <span class="number">0x0B</span>, <span class="number">0x89</span>, <span class="number">0x4B</span>, <span class="number">0xA4</span>, <span class="number">0xBE</span>, <span class="number">0x1A</span>, <span class="number">0x8F</span>, <span class="number">0x6C</span>, <span class="number">0xCF</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xFE</span>, <span class="number">0xFB</span>, <span class="number">0x59</span>, <span class="number">0x2D</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x62</span>, <span class="number">0x97</span>, <span class="number">0xAA</span>, <span class="number">0xD7</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0x2C</span>, <span class="number">0xFC</span>, <span class="number">0x5D</span>, <span class="number">0xB4</span>, <span class="number">0x7C</span>, <span class="number">0x8A</span>, <span class="number">0x82</span>, <span class="number">0xD3</span>, <span class="number">0xA7</span>, <span class="number">0xBA</span>, <span class="number">0xDF</span>, <span class="number">0x21</span>, <span class="number">0xE6</span>, <span class="number">0xA2</span>, <span class="number">0xD0</span>, <span class="number">0xE8</span>, <span class="number">0xF0</span>, <span class="number">0x67</span>, <span class="number">0x3A</span>, <span class="number">0xB9</span>, <span class="number">0x98</span>, <span class="number">0xF9</span>, <span class="number">0xAE</span>, <span class="number">0xD1</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0x10</span>, <span class="number">0xEA</span>, <span class="number">0x92</span>, <span class="number">0xA8</span>, <span class="number">0x75</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xA9</span>, <span class="number">0xAF</span>, <span class="number">0x51</span>, <span class="number">0xC9</span>, <span class="number">0x8E</span>, <span class="number">0xD4</span>, <span class="number">0x77</span>, <span class="number">0xE4</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x61</span>, <span class="number">0x9E</span>, <span class="number">0x24</span>, <span class="number">0xD9</span>, <span class="number">0x9B</span>, <span class="number">0x11</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0x96</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x83</span>, <span class="number">0xE1</span>, <span class="number">0x1C</span>, <span class="number">0xCD</span>, <span class="number">0xF3</span>, <span class="number">0x38</span>, <span class="number">0xB3</span>, <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0xAC</span>, <span class="number">0xEB</span>, <span class="number">0x14</span>, <span class="number">0xA5</span>, <span class="number">0x46</span>, <span class="number">0xF6</span>, <span class="number">0x93</span>, <span class="number">0xAD</span>, <span class="number">0x7B</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>, <span class="number">0x79</span>, <span class="number">0x17</span>, <span class="number">0x47</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, <span class="number">0xDD</span>, <span class="number">0xDE</span>, <span class="number">0xDC</span>, <span class="number">0x5A</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x31</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x86</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xFA</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xA3</span>, <span class="number">0xBF</span>, <span class="number">0x64</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0xD2</span>, <span class="number">0x69</span>, <span class="number">0x5C</span>, <span class="number">0xC6</span>, <span class="number">0x16</span>, <span class="number">0x9F</span>, <span class="number">0x5E</span>, <span class="number">0x7A</span>, <span class="number">0x1E</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0x6E</span>, <span class="number">0xF8</span>, <span class="number">0x8C</span>, <span class="number">0xEE</span>, <span class="number">0xC2</span>, <span class="number">0x74</span>, <span class="number">0x81</span>, <span class="number">0x8B</span>, <span class="number">0x33</span>, <span class="number">0x03</span>, <span class="number">0xBD</span>, <span class="number">0x2A</span>, <span class="number">0x0A</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x3F</span>, <span class="number">0x4C</span>, <span class="number">0xC3</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0x3D</span>, <span class="number">0x63</span>, <span class="number">0xF5</span>, <span class="number">0xAB</span>, <span class="number">0xCC</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x20</span>, <span class="number">0x66</span>, <span class="number">0xC4</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0xE7</span>, <span class="number">0x25</span>, <span class="number">0x55</span>, <span class="number">0xC7</span>, <span class="number">0xED</span>, <span class="number">0xB7</span>, <span class="number">0xBC</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x09</span>, <span class="number">0xCE</span>, <span class="number">0x52</span>, <span class="number">0xBB</span>, <span class="number">0xE2</span>, <span class="number">0xC5</span>, <span class="number">0xB6</span>, <span class="number">0x26</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x99</span>, <span class="number">0x58</span>, <span class="number">0x40</span>, <span class="number">0x6D</span>, <span class="number">0xA1</span>, <span class="number">0x3E</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xA6</span>, <span class="number">0xF2</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0x78</span>, <span class="number">0xB8</span>, <span class="number">0x01</span>, <span class="number">0xE5</span>, <span class="number">0xD5</span>, <span class="number">0x6F</span>, <span class="number">0x4E</span>, <span class="number">0xF7</span>, <span class="number">0x13</span>, <span class="number">0x42</span>, <span class="number">0xEC</span>, <span class="number">0x45</span>, <span class="number">0x2B</span>, <span class="number">0x4F</span>, <span class="number">0x36</span>, <span class="number">0xDB</span>, <span class="number">0x9C</span>, <span class="number">0xE3</span>, <span class="number">0x44</span>, <span class="number">0x34</span>, <span class="number">0x84</span>, <span class="number">0x73</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>, <span class="number">0xFD</span>, <span class="number">0x91</span>, <span class="number">0x41</span>, <span class="number">0xD6</span>, <span class="number">0x95</span>, <span class="number">0x18</span>, <span class="number">0xFF</span>, <span class="number">0x70</span>, <span class="number">0xC8</span>, <span class="number">0x02</span>, <span class="number">0x5F</span>, <span class="number">0x08</span>, <span class="number">0x1B</span>, <span class="number">0x6A</span>, <span class="number">0x5B</span>, <span class="number">0x19</span>, <span class="number">0xA0</span>, <span class="number">0x4D</span>, <span class="number">0x35</span>, <span class="number">0x54</span>, <span class="number">0xE9</span>, <span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0x72</span>, <span class="number">0x07</span>, <span class="number">0x87</span>, <span class="number">0x90</span>, <span class="number">0x4A</span>, <span class="number">0x80</span>, <span class="number">0x1F</span>, <span class="number">0x9D</span>]</span><br><span class="line">by1180 = [<span class="number">0xE8</span>, <span class="number">0x22</span>, <span class="number">0x64</span>, <span class="number">0x9F</span>, <span class="number">0xC5</span>, <span class="number">0xD5</span>, <span class="number">0x25</span>, <span class="number">0xC9</span>, <span class="number">0x5D</span>, <span class="number">0xDF</span>, <span class="number">0xA1</span>, <span class="number">0x74</span>, <span class="number">0xCB</span>, <span class="number">0x57</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xBD</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0x33</span>, <span class="number">0x79</span>, <span class="number">0xFE</span>, <span class="number">0x87</span>, <span class="number">0xB6</span>, <span class="number">0xB1</span>, <span class="number">0x54</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x8A</span>, <span class="number">0xEC</span>, <span class="number">0x7B</span>, <span class="number">0x48</span>, <span class="number">0x84</span>, <span class="number">0x3D</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>, <span class="number">0x86</span>, <span class="number">0xFA</span>, <span class="number">0x97</span>, <span class="number">0x1C</span>, <span class="number">0xDC</span>, <span class="number">0xA9</span>, <span class="number">0x5A</span>, <span class="number">0xF3</span>, <span class="number">0x67</span>, <span class="number">0x18</span>, <span class="number">0x83</span>, <span class="number">0x72</span>, <span class="number">0x06</span>, <span class="number">0xB9</span>, <span class="number">0xF5</span>, <span class="number">0x05</span>, <span class="number">0x68</span>, <span class="number">0x59</span>, <span class="number">0xF2</span>, <span class="number">0xE4</span>, <span class="number">0x88</span>, <span class="number">0x5E</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0x11</span>, <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xDE</span>, <span class="number">0xEB</span>, <span class="number">0x7D</span>, <span class="number">0x62</span>, <span class="number">0x9B</span>, <span class="number">0xD6</span>, <span class="number">0xF4</span>, <span class="number">0x01</span>, <span class="number">0x29</span>, <span class="number">0xBC</span>, <span class="number">0xC0</span>, <span class="number">0x69</span>, <span class="number">0xA2</span>, <span class="number">0x2B</span>, <span class="number">0x0D</span>, <span class="number">0x1D</span>, <span class="number">0x98</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0x65</span>, <span class="number">0x09</span>, <span class="number">0xF8</span>, <span class="number">0x96</span>, <span class="number">0xB4</span>, <span class="number">0x6E</span>, <span class="number">0x63</span>, <span class="number">0xE3</span>, <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0xCE</span>, <span class="number">0x0A</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x21</span>, <span class="number">0xCC</span>, <span class="number">0xE7</span>, <span class="number">0xA5</span>, <span class="number">0xDB</span>, <span class="number">0xD8</span>, <span class="number">0x03</span>, <span class="number">0xDD</span>, <span class="number">0xB2</span>, <span class="number">0x1F</span>, <span class="number">0x9D</span>, <span class="number">0x9E</span>, <span class="number">0x0E</span>, <span class="number">0x8F</span>, <span class="number">0x8B</span>, <span class="number">0xCA</span>, <span class="number">0x92</span>, <span class="number">0x0B</span>, <span class="number">0xA7</span>, <span class="number">0x5B</span>, <span class="number">0xD2</span>, <span class="number">0xCF</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0xAE</span>, <span class="number">0x3B</span>, <span class="number">0xA8</span>, <span class="number">0x7C</span>, <span class="number">0x73</span>, <span class="number">0xF9</span>, <span class="number">0x35</span>, <span class="number">0xEE</span>, <span class="number">0x7A</span>, <span class="number">0xB0</span>, <span class="number">0xBA</span>, <span class="number">0x85</span>, <span class="number">0x46</span>, <span class="number">0x3E</span>, <span class="number">0x81</span>, <span class="number">0xC7</span>, <span class="number">0x40</span>, <span class="number">0x37</span>, <span class="number">0x15</span>, <span class="number">0x3A</span>, <span class="number">0x19</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>, <span class="number">0x28</span>, <span class="number">0x4A</span>, <span class="number">0x4F</span>, <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x51</span>, <span class="number">0x2E</span>, <span class="number">0x94</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x0F</span>, <span class="number">0x7E</span>, <span class="number">0xE1</span>, <span class="number">0xC8</span>, <span class="number">0x5F</span>, <span class="number">0x4E</span>, <span class="number">0x6D</span>, <span class="number">0xF6</span>, <span class="number">0x49</span>, <span class="number">0xB8</span>, <span class="number">0x55</span>, <span class="number">0x60</span>, <span class="number">0x82</span>, <span class="number">0x20</span>, <span class="number">0x36</span>, <span class="number">0xC1</span>, <span class="number">0x0C</span>, <span class="number">0x1B</span>, <span class="number">0xC4</span>, <span class="number">0x00</span>, <span class="number">0xE5</span>, <span class="number">0xA3</span>, <span class="number">0x2C</span>, <span class="number">0xE9</span>, <span class="number">0xC2</span>, <span class="number">0xF1</span>, <span class="number">0x23</span>, <span class="number">0x3F</span>, <span class="number">0xC3</span>, <span class="number">0xB5</span>, <span class="number">0x8D</span>, <span class="number">0xD7</span>, <span class="number">0x42</span>, <span class="number">0xFC</span>, <span class="number">0x50</span>, <span class="number">0x13</span>, <span class="number">0xBB</span>, <span class="number">0x61</span>, <span class="number">0x9A</span>, <span class="number">0x44</span>, <span class="number">0xE6</span>, <span class="number">0x91</span>, <span class="number">0x2F</span>, <span class="number">0x70</span>, <span class="number">0xC6</span>, <span class="number">0x6F</span>, <span class="number">0xD1</span>, <span class="number">0x27</span>, <span class="number">0x43</span>, <span class="number">0x08</span>, <span class="number">0xDA</span>, <span class="number">0xFD</span>, <span class="number">0x52</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0xED</span>, <span class="number">0xE2</span>, <span class="number">0xAD</span>, <span class="number">0x16</span>, <span class="number">0x8E</span>, <span class="number">0x12</span>, <span class="number">0x4C</span>, <span class="number">0x31</span>, <span class="number">0x3C</span>, <span class="number">0x39</span>, <span class="number">0x78</span>, <span class="number">0x90</span>, <span class="number">0xBF</span>, <span class="number">0x1A</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0xD0</span>, <span class="number">0x80</span>, <span class="number">0xB7</span>, <span class="number">0x66</span>, <span class="number">0x24</span>, <span class="number">0xD3</span>, <span class="number">0x7F</span>, <span class="number">0x4B</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>, <span class="number">0x53</span>, <span class="number">0x4D</span>, <span class="number">0x26</span>, <span class="number">0x32</span>, <span class="number">0xA0</span>, <span class="number">0xFB</span>, <span class="number">0xB3</span>, <span class="number">0x38</span>, <span class="number">0x6B</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xD9</span>, <span class="number">0x02</span>, <span class="number">0xA4</span>, <span class="number">0xEA</span>, <span class="number">0x6C</span>, <span class="number">0xAC</span>, <span class="number">0x58</span>, <span class="number">0x93</span>]</span><br><span class="line">by1380 = [<span class="number">0x91</span>, <span class="number">0x67</span>, <span class="number">0x1A</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0x85</span>, <span class="number">0xD5</span>, <span class="number">0xDA</span>, <span class="number">0xCC</span>, <span class="number">0xF7</span>, <span class="number">0x5B</span>, <span class="number">0x54</span>, <span class="number">0x61</span>, <span class="number">0x05</span>, <span class="number">0xDF</span>, <span class="number">0x02</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x69</span>, <span class="number">0x9A</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x92</span>, <span class="number">0x5D</span>, <span class="number">0x2A</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x99</span>, <span class="number">0xF3</span>, <span class="number">0x1E</span>, <span class="number">0xBD</span>, <span class="number">0x82</span>, <span class="number">0x48</span>, <span class="number">0x3C</span>, <span class="number">0xE8</span>, <span class="number">0xC8</span>, <span class="number">0x66</span>, <span class="number">0x17</span>, <span class="number">0xB7</span>, <span class="number">0xA9</span>, <span class="number">0xC5</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0x84</span>, <span class="number">0x45</span>, <span class="number">0xD3</span>, <span class="number">0x8B</span>, <span class="number">0x49</span>, <span class="number">0x50</span>, <span class="number">0x43</span>, <span class="number">0x8F</span>, <span class="number">0xCD</span>, <span class="number">0x73</span>, <span class="number">0x29</span>, <span class="number">0x04</span>, <span class="number">0xDC</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0xDD</span>, <span class="number">0x2E</span>, <span class="number">0xFB</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x24</span>, <span class="number">0x57</span>, <span class="number">0xE9</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xB3</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>, <span class="number">0x56</span>, <span class="number">0x6C</span>, <span class="number">0x68</span>, <span class="number">0xE2</span>, <span class="number">0x22</span>, <span class="number">0xF6</span>, <span class="number">0x80</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0xD4</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x21</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0xE3</span>, <span class="number">0x59</span>, <span class="number">0xD2</span>, <span class="number">0xED</span>, <span class="number">0x41</span>, <span class="number">0x4D</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0xA0</span>, <span class="number">0x32</span>, <span class="number">0x0D</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0x34</span>, <span class="number">0xFA</span>, <span class="number">0xB1</span>, <span class="number">0x5E</span>, <span class="number">0xC6</span>, <span class="number">0x71</span>, <span class="number">0xC0</span>, <span class="number">0xE0</span>, <span class="number">0x3F</span>, <span class="number">0x13</span>, <span class="number">0x12</span>, <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0xF8</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x25</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0xB0</span>, <span class="number">0x8D</span>, <span class="number">0x6A</span>, <span class="number">0xEA</span>, <span class="number">0x0E</span>, <span class="number">0xD6</span>, <span class="number">0x3E</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0xBF</span>, <span class="number">0x8C</span>, <span class="number">0x96</span>, <span class="number">0xD9</span>, <span class="number">0xA4</span>, <span class="number">0x42</span>, <span class="number">0xAD</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0x5A</span>, <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x9D</span>, <span class="number">0x07</span>, <span class="number">0x87</span>, <span class="number">0x5F</span>, <span class="number">0xAF</span>, <span class="number">0xDB</span>, <span class="number">0xC1</span>, <span class="number">0x93</span>, <span class="number">0x1C</span>, <span class="number">0xF1</span>, <span class="number">0xDE</span>, <span class="number">0xA6</span>, <span class="number">0x3A</span>, <span class="number">0xF4</span>, <span class="number">0x2C</span>, <span class="number">0x1B</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0x4A</span>, <span class="number">0xC7</span>, <span class="number">0x35</span>, <span class="number">0xFE</span>, <span class="number">0x0A</span>, <span class="number">0x62</span>, <span class="number">0xF0</span>, <span class="number">0xCA</span>, <span class="number">0xEC</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x23</span>, <span class="number">0x7F</span>, <span class="number">0xA5</span>, <span class="number">0x79</span>, <span class="number">0x7C</span>, <span class="number">0x75</span>, <span class="number">0x86</span>, <span class="number">0xEB</span>, <span class="number">0x60</span>, <span class="number">0xA8</span>, <span class="number">0xF5</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0xC3</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x18</span>, <span class="number">0xE5</span>, <span class="number">0x51</span>, <span class="number">0xAC</span>, <span class="number">0xB9</span>, <span class="number">0x90</span>, <span class="number">0x9F</span>, <span class="number">0x4C</span>, <span class="number">0xB2</span>, <span class="number">0xCB</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x28</span>, <span class="number">0xA1</span>, <span class="number">0xB6</span>, <span class="number">0x9B</span>, <span class="number">0xD0</span>, <span class="number">0x7B</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0x9C</span>, <span class="number">0xCF</span>, <span class="number">0x98</span>, <span class="number">0x8A</span>, <span class="number">0x0B</span>, <span class="number">0x78</span>, <span class="number">0xB4</span>, <span class="number">0x7E</span>, <span class="number">0x2B</span>, <span class="number">0xEF</span>, <span class="number">0x58</span>, <span class="number">0xB5</span>, <span class="number">0xBA</span>, <span class="number">0x55</span>, <span class="number">0xB8</span>, <span class="number">0x10</span>, <span class="number">0x2F</span>, <span class="number">0x44</span>, <span class="number">0xAE</span>, <span class="number">0x89</span>, <span class="number">0x08</span>, <span class="number">0xC4</span>, <span class="number">0x3B</span>, <span class="number">0x9E</span>, <span class="number">0xF9</span>, <span class="number">0x6D</span>, <span class="number">0xF2</span>, <span class="number">0x15</span>, <span class="number">0x1D</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x8E</span>, <span class="number">0x31</span>, <span class="number">0x2D</span>, <span class="number">0xD8</span>, <span class="number">0x6B</span>, <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0xA2</span>, <span class="number">0x83</span>, <span class="number">0xCE</span>, <span class="number">0xBB</span>, <span class="number">0x81</span>, <span class="number">0xBC</span>, <span class="number">0x76</span>, <span class="number">0x38</span>]</span><br><span class="line">by1780 = [<span class="number">0x38</span>, <span class="number">0x5A</span>, <span class="number">0xC7</span>, <span class="number">0x98</span>, <span class="number">0x15</span>, <span class="number">0x6A</span>, <span class="number">0xC9</span>, <span class="number">0x28</span>, <span class="number">0x33</span>, <span class="number">0xEA</span>, <span class="number">0xF4</span>, <span class="number">0xD9</span>, <span class="number">0xDB</span>, <span class="number">0x77</span>, <span class="number">0xB8</span>, <span class="number">0x49</span>, <span class="number">0x1B</span>, <span class="number">0x79</span>, <span class="number">0xF5</span>, <span class="number">0xFD</span>, <span class="number">0x3E</span>, <span class="number">0xA2</span>, <span class="number">0xDE</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0x5E</span>, <span class="number">0xE5</span>, <span class="number">0x11</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x86</span>, <span class="number">0xF9</span>, <span class="number">0x90</span>, <span class="number">0x78</span>, <span class="number">0x8A</span>, <span class="number">0x14</span>, <span class="number">0x12</span>, <span class="number">0xB1</span>, <span class="number">0xC2</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0xA1</span>, <span class="number">0x23</span>, <span class="number">0x0C</span>, <span class="number">0xAD</span>, <span class="number">0xA5</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x1E</span>, <span class="number">0x6D</span>, <span class="number">0xF8</span>, <span class="number">0x96</span>, <span class="number">0x9D</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0xBD</span>, <span class="number">0x26</span>, <span class="number">0xCE</span>, <span class="number">0xA7</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x39</span>, <span class="number">0x7B</span>, <span class="number">0xFA</span>, <span class="number">0x5F</span>, <span class="number">0xCC</span>, <span class="number">0x1A</span>, <span class="number">0x0B</span>, <span class="number">0x40</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x82</span>, <span class="number">0xE2</span>, <span class="number">0x97</span>, <span class="number">0x10</span>, <span class="number">0x2A</span>, <span class="number">0xFC</span>, <span class="number">0x3B</span>, <span class="number">0xB2</span>, <span class="number">0x66</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x07</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0xA3</span>, <span class="number">0xA6</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0x13</span>, <span class="number">0x9C</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x92</span>, <span class="number">0xE8</span>, <span class="number">0xAE</span>, <span class="number">0xBE</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x41</span>, <span class="number">0x94</span>, <span class="number">0x80</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0x29</span>, <span class="number">0x70</span>, <span class="number">0x35</span>, <span class="number">0x16</span>, <span class="number">0xF7</span>, <span class="number">0x6B</span>, <span class="number">0xFE</span>, <span class="number">0x9E</span>, <span class="number">0x0D</span>, <span class="number">0xD3</span>, <span class="number">0x7F</span>, <span class="number">0x1F</span>, <span class="number">0xA0</span>, <span class="number">0x32</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x05</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0x9B</span>, <span class="number">0x7A</span>, <span class="number">0x8F</span>, <span class="number">0x99</span>, <span class="number">0xEF</span>, <span class="number">0xCF</span>, <span class="number">0x51</span>, <span class="number">0x0E</span>, <span class="number">0xEC</span>, <span class="number">0x59</span>, <span class="number">0x5C</span>, <span class="number">0x37</span>, <span class="number">0xD5</span>, <span class="number">0x8E</span>, <span class="number">0x31</span>, <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0x93</span>, <span class="number">0x25</span>, <span class="number">0x1C</span>, <span class="number">0xC8</span>, <span class="number">0x5B</span>, <span class="number">0x47</span>, <span class="number">0x9F</span>, <span class="number">0x03</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x42</span>, <span class="number">0x7D</span>, <span class="number">0x3A</span>, <span class="number">0xAA</span>, <span class="number">0x57</span>, <span class="number">0xDA</span>, <span class="number">0x9A</span>, <span class="number">0xAB</span>, <span class="number">0x74</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xB7</span>, <span class="number">0x5D</span>, <span class="number">0xCD</span>, <span class="number">0x87</span>, <span class="number">0x46</span>, <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0xF3</span>, <span class="number">0xD0</span>, <span class="number">0x85</span>, <span class="number">0x55</span>, <span class="number">0xBB</span>, <span class="number">0xD4</span>, <span class="number">0xC6</span>, <span class="number">0x61</span>, <span class="number">0x56</span>, <span class="number">0x04</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x88</span>, <span class="number">0xC3</span>, <span class="number">0x73</span>, <span class="number">0xBC</span>, <span class="number">0xEB</span>, <span class="number">0xDD</span>, <span class="number">0x4D</span>, <span class="number">0xE0</span>, <span class="number">0xE6</span>, <span class="number">0xC0</span>, <span class="number">0x63</span>, <span class="number">0x8D</span>, <span class="number">0xF2</span>, <span class="number">0x81</span>, <span class="number">0xF6</span>, <span class="number">0xA8</span>, <span class="number">0x3D</span>, <span class="number">0x3F</span>, <span class="number">0xA4</span>, <span class="number">0xE9</span>, <span class="number">0x4A</span>, <span class="number">0xB5</span>, <span class="number">0xF0</span>, <span class="number">0xCA</span>, <span class="number">0x8B</span>, <span class="number">0x2C</span>, <span class="number">0xD7</span>, <span class="number">0xAC</span>, <span class="number">0xC5</span>, <span class="number">0xC1</span>, <span class="number">0xBF</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x6F</span>, <span class="number">0x06</span>, <span class="number">0xE7</span>, <span class="number">0xD6</span>, <span class="number">0x09</span>, <span class="number">0x95</span>, <span class="number">0x44</span>, <span class="number">0x71</span>, <span class="number">0xB9</span>, <span class="number">0x83</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xAF</span>, <span class="number">0xB4</span>, <span class="number">0x75</span>, <span class="number">0x36</span>, <span class="number">0x30</span>, <span class="number">0xCB</span>, <span class="number">0xEE</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0x8C</span>, <span class="number">0x4E</span>, <span class="number">0x6E</span>, <span class="number">0x6C</span>, <span class="number">0x4F</span>, <span class="number">0x84</span>, <span class="number">0xBA</span>, <span class="number">0xFF</span>, <span class="number">0x64</span>, <span class="number">0xB3</span>, <span class="number">0x60</span>, <span class="number">0xFB</span>, <span class="number">0xB0</span>, <span class="number">0x18</span>, <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0x3C</span>, <span class="number">0x68</span>, <span class="number">0xDC</span>, <span class="number">0x69</span>]</span><br><span class="line">by1d80 = [<span class="number">0xD1</span>, <span class="number">0x9C</span>, <span class="number">0x68</span>, <span class="number">0xC0</span>, <span class="number">0x13</span>, <span class="number">0xAC</span>, <span class="number">0x48</span>, <span class="number">0x32</span>, <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0xE7</span>, <span class="number">0x6D</span>, <span class="number">0xC8</span>, <span class="number">0x1C</span>, <span class="number">0xAB</span>, <span class="number">0xE2</span>, <span class="number">0x7A</span>, <span class="number">0x42</span>, <span class="number">0xE1</span>, <span class="number">0x7B</span>, <span class="number">0x16</span>, <span class="number">0x67</span>, <span class="number">0x03</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x02</span>, <span class="number">0x39</span>, <span class="number">0x51</span>, <span class="number">0xC7</span>, <span class="number">0x79</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0xEF</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0xDC</span>, <span class="number">0x53</span>, <span class="number">0x72</span>, <span class="number">0x89</span>, <span class="number">0xA5</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0x86</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x5A</span>, <span class="number">0xF5</span>, <span class="number">0x2E</span>, <span class="number">0x3D</span>, <span class="number">0xB2</span>, <span class="number">0xFE</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0x63</span>, <span class="number">0xDD</span>, <span class="number">0x1A</span>, <span class="number">0x12</span>, <span class="number">0x5E</span>, <span class="number">0xED</span>, <span class="number">0xB0</span>, <span class="number">0xBC</span>, <span class="number">0xC4</span>, <span class="number">0x5F</span>, <span class="number">0x11</span>, <span class="number">0xC9</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x75</span>, <span class="number">0x96</span>, <span class="number">0x0A</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0x14</span>, <span class="number">0x47</span>, <span class="number">0xBB</span>, <span class="number">0x9D</span>, <span class="number">0x8E</span>, <span class="number">0x3C</span>, <span class="number">0xD6</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xA2</span>, <span class="number">0x26</span>, <span class="number">0x5D</span>, <span class="number">0x08</span>, <span class="number">0x6E</span>, <span class="number">0x4E</span>, <span class="number">0xF1</span>, <span class="number">0xCF</span>, <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0x90</span>, <span class="number">0x0B</span>, <span class="number">0xB3</span>, <span class="number">0x3E</span>, <span class="number">0xB6</span>, <span class="number">0x1F</span>, <span class="number">0xC3</span>, <span class="number">0xB7</span>, <span class="number">0xDA</span>, <span class="number">0x8D</span>, <span class="number">0x05</span>, <span class="number">0xEE</span>, <span class="number">0x18</span>, <span class="number">0x93</span>, <span class="number">0x3A</span>, <span class="number">0x6A</span>, <span class="number">0x8C</span>, <span class="number">0x43</span>, <span class="number">0x8F</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x5B</span>, <span class="number">0x29</span>, <span class="number">0x37</span>, <span class="number">0x1E</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0x31</span>, <span class="number">0xFB</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x61</span>, <span class="number">0x04</span>, <span class="number">0x0E</span>, <span class="number">0x2B</span>, <span class="number">0x74</span>, <span class="number">0xF9</span>, <span class="number">0x8B</span>, <span class="number">0x2C</span>, <span class="number">0x20</span>, <span class="number">0x0C</span>, <span class="number">0x7C</span>, <span class="number">0x28</span>, <span class="number">0x5C</span>, <span class="number">0xCA</span>, <span class="number">0xE6</span>, <span class="number">0x6B</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x44</span>, <span class="number">0x70</span>, <span class="number">0x06</span>, <span class="number">0xA6</span>, <span class="number">0x60</span>, <span class="number">0x41</span>, <span class="number">0x84</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x4F</span>, <span class="number">0x64</span>, <span class="number">0x83</span>, <span class="number">0xD2</span>, <span class="number">0x9A</span>, <span class="number">0xBE</span>, <span class="number">0xAF</span>, <span class="number">0x9F</span>, <span class="number">0x07</span>, <span class="number">0xC1</span>, <span class="number">0xB8</span>, <span class="number">0x3B</span>, <span class="number">0x65</span>, <span class="number">0xCC</span>, <span class="number">0x57</span>, <span class="number">0xB5</span>, <span class="number">0xD9</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x0D</span>, <span class="number">0xE3</span>, <span class="number">0xF3</span>, <span class="number">0xA4</span>, <span class="number">0xBD</span>, <span class="number">0x6F</span>, <span class="number">0xD3</span>, <span class="number">0x25</span>, <span class="number">0x88</span>, <span class="number">0x71</span>, <span class="number">0xFF</span>, <span class="number">0xA9</span>, <span class="number">0x36</span>, <span class="number">0xB1</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x69</span>, <span class="number">0xAD</span>, <span class="number">0x19</span>, <span class="number">0xBF</span>, <span class="number">0xFD</span>, <span class="number">0xCD</span>, <span class="number">0x4A</span>, <span class="number">0xEA</span>, <span class="number">0x87</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0x66</span>, <span class="number">0x82</span>, <span class="number">0x50</span>, <span class="number">0x0F</span>, <span class="number">0x99</span>, <span class="number">0x45</span>, <span class="number">0xF2</span>, <span class="number">0xD5</span>, <span class="number">0x9B</span>, <span class="number">0x94</span>, <span class="number">0x7D</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xB9</span>, <span class="number">0x52</span>, <span class="number">0xE5</span>, <span class="number">0xF4</span>, <span class="number">0x01</span>, <span class="number">0x7F</span>, <span class="number">0xD4</span>, <span class="number">0x15</span>, <span class="number">0x2D</span>, <span class="number">0x3F</span>, <span class="number">0x1D</span>, <span class="number">0xA7</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0x40</span>, <span class="number">0xE8</span>, <span class="number">0xA0</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0xF7</span>, <span class="number">0x1B</span>, <span class="number">0x58</span>, <span class="number">0x85</span>, <span class="number">0x56</span>, <span class="number">0x9E</span>, <span class="number">0xEC</span>, <span class="number">0x97</span>, <span class="number">0x23</span>, <span class="number">0xF0</span>, <span class="number">0x4D</span>, <span class="number">0xD0</span>, <span class="number">0xF8</span>, <span class="number">0x2A</span>, <span class="number">0x49</span>, <span class="number">0xB4</span>, <span class="number">0x76</span>, <span class="number">0x54</span>, <span class="number">0xDF</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by280)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by280[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by380)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by380[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun5</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by580)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by580[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun7</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by780)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by780[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funb</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(byb80)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == byb80[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fund</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(byd80)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == byd80[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun11</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by1180)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by1180[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun13</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by1380)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by1380[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun17</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by1780)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by1780[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1d</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(by1d80)):</span><br><span class="line">            <span class="keyword">if</span> flag[i] == by1d80[j]:</span><br><span class="line">                flag[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">fun1d()</span><br><span class="line">fun17()</span><br><span class="line">fun13()</span><br><span class="line">fun11()</span><br><span class="line">fund()</span><br><span class="line">funb()</span><br><span class="line">fun7()</span><br><span class="line">fun5()</span><br><span class="line">fun3()</span><br><span class="line">fun2()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytearray</span>(flag))</span><br><span class="line">index = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;1d&#x27;</span>]</span><br><span class="line"><span class="comment"># #y0u_4r3_7h3_m4573r_0f_r3v3r51n6_!</span></span><br></pre></td></tr></table></figure>

<p><img src="/./../images/image-20221130172748967.png" alt="image-20221130172748967"></p>
<p>&#x3D;&#x3D;然后这里注意的是flag[i] &#x3D; j后一定要加break，不然会无，然后第二段数据有多解，在移位操作处加&amp;0xfffffff,比如((a1[12] &lt;&lt; 6)&amp;0xffffffff)，这样才算和c代码成功转换&#x3D;&#x3D;</p>
<hr>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>信创网安wp</title>
    <url>/2022/12/05/%E4%BF%A1%E5%88%9B%E7%BD%91%E5%AE%89wp/</url>
    <content><![CDATA[<p>省排名：22</p>
<p>web师傅纠结于web最后一题，所以杂项一道没做。然后我把仿射密码的做题思路给忘了，然后密码0解，至于pwn….</p>
<span id="more"></span>

<h1 id="RevShift"><a href="#RevShift" class="headerlink" title="RevShift"></a>RevShift</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&#x27;≁⧃⩆㷕⿤ᩣᡤ㋟㩨ᣳ⿃ᣰ㑥㥟⫴㍽&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    t = <span class="built_in">ord</span>(i)&amp;<span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> t &gt; <span class="number">128</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) &gt;&gt; <span class="number">7</span>)+<span class="built_in">chr</span>((<span class="built_in">ord</span>(i)-<span class="number">128</span>)&amp;<span class="number">0xff</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) &gt;&gt; <span class="number">7</span>)+<span class="built_in">chr</span>((<span class="built_in">ord</span>(i))&amp;<span class="number">0xff</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;10000000&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># DASCTF&#123;U_d4c0de_th1s_C1pher_Utf&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="ReContract"><a href="#ReContract" class="headerlink" title="ReContract"></a>ReContract</h1><h5 id="1-智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行"><a href="#1-智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行" class="headerlink" title="1.智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行"></a>1.智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行<img src="/./../images/image-20221205105400376.png" alt="image-20221205105400376"></h5><h5 id="2-然后又找到一篇文章，上面写着一个在线工具"><a href="#2-然后又找到一篇文章，上面写着一个在线工具" class="headerlink" title="2.然后又找到一篇文章，上面写着一个在线工具"></a>2.然后又找到一篇文章，上面写着一个在线工具<img src="/./../images/image-20221205105528927.png" alt="image-20221205105528927"></h5><h5 id="3-直接将字节码复制进去翻译即可"><a href="#3-直接将字节码复制进去翻译即可" class="headerlink" title="3.直接将字节码复制进去翻译即可"></a>3.直接将字节码复制进去翻译即可<img src="/./../images/image-20221205105705533.png" alt="image-20221205105705533"></h5><h5 id="4-这里看见有五个可疑数字，拿去转字符串看看"><a href="#4-这里看见有五个可疑数字，拿去转字符串看看" class="headerlink" title="4.这里看见有五个可疑数字，拿去转字符串看看"></a>4.这里看见有五个可疑数字，拿去转字符串看看<img src="/./../images/image-20221205105820247.png" alt="image-20221205105820247"></h5><h5 id="5-发现顺序是乱的，以我神级英语水平，大概的顺序就是-’反编译智能合约字节码真的不错’-hhhhhhhhhhhh"><a href="#5-发现顺序是乱的，以我神级英语水平，大概的顺序就是-’反编译智能合约字节码真的不错’-hhhhhhhhhhhh" class="headerlink" title="5.发现顺序是乱的，以我神级英语水平，大概的顺序就是:’反编译智能合约字节码真的不错’,hhhhhhhhhhhh"></a>5.发现顺序是乱的，以我神级英语水平，大概的顺序就是:’反编译智能合约字节码真的不错’,hhhhhhhhhhhh<img src="/./../images/image-20221205110022973.png" alt="image-20221205110022973"></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">0x4279746563306465355f00000000000000000000000000000000000000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">0x4441534354467b00000000000000000000000000000000000000000000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">0x536d3472745f43306e74724063745f0000000000000000000000000000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">0x443363306d70316c655f00000000000000000000000000000000000000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">0x31735f46756e4e792e7d00000000000000000000000000000000000000000000</span>))</span><br><span class="line"><span class="comment"># DASCTF&#123;D3c0mp1le_Sm4rt_C0ntr@ct_Bytec0de5_1s_FunNy.&#125;</span></span><br></pre></td></tr></table></figure>





<hr>
<p>赛后复现密码—–逆向第三道懒得复现，还有密码第三道。。。。。。&#x3D;&#x3D;看了一遍代码就把文件扔到回收站了&#x3D;&#x3D;</p>
<h1 id="easy-Affline"><a href="#easy-Affline" class="headerlink" title="easy_Affline"></a>easy_Affline</h1><p>这道题题目给的a，b数字太大，我以为要爆破很长的区间，其实不用，经过我脚本的测试，发现大数字和小数字的结果是相同的，所以只需遍历0~m即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">text = <span class="string">&#x27;aCdhpnlmNKuRJbfVIXUvyTrSPqjBMzgwHZkAxWGiYetEsocDLFOQ&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;CezmBh&#123;BKDdD_oP_rKD_rdtF_cMHu&#125;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;DASCTF&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>():</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">52</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">52</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">52</span>) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            c = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            t = inverse(a,<span class="number">52</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">                x = text.find(i)</span><br><span class="line">                c += text[t*(x-b) % <span class="built_in">len</span>(text)]</span><br><span class="line">            <span class="keyword">if</span> c == flag:</span><br><span class="line">                <span class="built_in">print</span>(a,b)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">d()</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">t = inverse(a,<span class="number">52</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> text:</span><br><span class="line">            flag += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = text.find(i)</span><br><span class="line">            flag += text[t*(x-b) % <span class="built_in">len</span>(text)]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DASCTF&#123;TheLe_iU_Ihe_ILxE_Yrjp&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="gauss-system"><a href="#gauss-system" class="headerlink" title="gauss_system"></a>gauss_system</h1><p>sage解即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">1751007263671615053487807501173970925758538</span></span><br><span class="line">c = <span class="number">463982900309034681135307002234842926080979</span></span><br><span class="line">p, q = var(<span class="string">&quot;p, q&quot;</span>)</span><br><span class="line">assume(p, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">assume(q, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">sol = solve((p - <span class="number">1003</span>) ** <span class="number">2</span> + (q - <span class="number">48</span>) ** <span class="number">2</span> == k, p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p, q <span class="keyword">in</span> sol:</span><br><span class="line">    <span class="keyword">if</span> p &gt; <span class="number">0</span> <span class="keyword">and</span> q &gt; <span class="number">0</span>:</span><br><span class="line">        p, q = <span class="built_in">int</span>(p), <span class="built_in">int</span>(q)</span><br><span class="line">        <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="built_in">print</span>(q)</span><br></pre></td></tr></table></figure>

<p><img src="/./../images/image-20221205111022196.png" alt="image-20221205111022196"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">s = <span class="number">1751007263671615053487807501173970925758538</span></span><br><span class="line">c = <span class="number">463982900309034681135307002234842926080979</span></span><br><span class="line">p = <span class="number">1087638045546779918273</span></span><br><span class="line">q = <span class="number">753691412682137267747</span></span><br><span class="line"><span class="keyword">assert</span> p**<span class="number">2</span> + q**<span class="number">2</span> == s</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">long_to_bytes(m)</span><br><span class="line"><span class="comment"># Z[i]_15_m4g1c</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>re_base1</title>
    <url>/2022/12/17/re-base1/</url>
    <content><![CDATA[<p>re_OD debugger1</p>
<span id="more"></span>

<h1 id="查找main函数的五种方法"><a href="#查找main函数的五种方法" class="headerlink" title="查找main函数的五种方法"></a>查找main函数的五种方法</h1><p>运行程序，看见弹窗，盲猜是user32.GetmessageW()的api</p>
<p><img src="/./../images/image-20221217212124141.png" alt="image-20221217212124141"></p>
<p>方法一：</p>
<p>1.不断地F7步入函数</p>
<p>2.看见一些红色api，即一些库函数，就Ctrl+F9跳出此函数</p>
<p><img src="/./../images/image-20221217212358112.png" alt="image-20221217212358112"></p>
<p>3.直到看见弹窗函数</p>
<p>方法二：</p>
<p>1.不断地F8步过函数</p>
<p>2.直到某个函数执行了弹窗函数，然后在此函数之上下断，然后ctrl+F2重新开始</p>
<p>3.直到找到弹窗函数</p>
<p>方法三：</p>
<p>1.通过查找api的方式查找main函数</p>
<p>2.右键查看模块间的调用函数</p>
<p><img src="/./../images/image-20221217212828911.png" alt="image-20221217212828911"></p>
<p>3.找到弹窗函数即可</p>
<p>方法四：</p>
<p>1.Ctrl+n查找所有内存的api</p>
<p><img src="/./../images/image-20221217213116702.png" alt="image-20221217213116702"></p>
<p>方法五：</p>
<p>1.查找字符串,右键即可</p>
<p>这里修改dump窗口的数据，选中数据后摁ctrl+E</p>
<p><img src="/./../images/image-20221217213430348.png" alt="image-20221217213430348"></p>
<p>修改后右键复制到文件</p>
<p><img src="/./../images/image-20221217213520134.png" alt="image-20221217213520134"></p>
<p>在dump窗口中，右键保存文件即可</p>
<p><img src="/./../images/image-20221217213618822.png" alt="image-20221217213618822"></p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>syc_level5</title>
    <url>/2022/12/19/syc-level5/</url>
    <content><![CDATA[<p>emmmmmmmmmmm,第一次做到魔改aes，有点激动记录一下吧</p>
<span id="more"></span>

<ol>
<li><p>魔改AES     </p>
<p><img src="/./../images/image-20221219210943381.png" alt="image-20221219210943381">       </p>
</li>
<li><p>这里做21次操作。但是无列混淆 <img src="/./../images/image-20221219210954851.png" alt="image-20221219210954851"></p>
</li>
<li><p>第一次做这种魔改aes，逆着就是先行移位，原先怎么移动，就逆回去 <img src="/./../images/image-20221219211019386.png" alt="image-20221219211019386"></p>
</li>
<li><p>然后再字节替换，也可以逆 </p>
</li>
<li><p>然后再轮密钥加，这个要从后往前，不然会影响字节替换，字节替换是必须要有顺序的 </p>
</li>
<li><p>最后就是每一个密文块的初始异或，该题除了第一块，其他都是拿密文块作为密匙</p>
</li>
</ol>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lesson5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">row_re</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="comment"># 第二行</span></span><br><span class="line">    v1 = a1[<span class="number">13</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">13</span>+i*<span class="number">16</span>] = a1[<span class="number">9</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">9</span>+i*<span class="number">16</span>] = a1[<span class="number">5</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">5</span>+i*<span class="number">16</span>] = a1[<span class="number">1</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">1</span>+i*<span class="number">16</span>] = v1</span><br><span class="line">    <span class="comment"># 第三行 不变</span></span><br><span class="line">    v2 = a1[<span class="number">2</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">2</span>+i*<span class="number">16</span>] = a1[<span class="number">10</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">10</span>+i*<span class="number">16</span>] = v2</span><br><span class="line">    v3 = a1[<span class="number">6</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">6</span>+i*<span class="number">16</span>] = a1[<span class="number">14</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">14</span>+i*<span class="number">16</span>] = v3</span><br><span class="line">    <span class="comment"># 第四行</span></span><br><span class="line">    v4 = a1[<span class="number">15</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">15</span>+i*<span class="number">16</span>] = a1[<span class="number">3</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">3</span>+i*<span class="number">16</span>] = a1[<span class="number">7</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">7</span>+i*<span class="number">16</span>] = a1[<span class="number">11</span>+i*<span class="number">16</span>]</span><br><span class="line">    a1[<span class="number">11</span>+i*<span class="number">16</span>] = v4</span><br><span class="line">    </span><br><span class="line">a1 = [<span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x9D</span>, <span class="number">0x31</span>, <span class="number">0xC7</span>, <span class="number">0x24</span>, <span class="number">0xD5</span>, <span class="number">0xF9</span>, <span class="number">0x45</span>, <span class="number">0x28</span>, <span class="number">0x9B</span>, <span class="number">0x7D</span>, <span class="number">0x42</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0x5F</span>, <span class="number">0x1E</span>, <span class="number">0x1C</span>, <span class="number">0x43</span>, <span class="number">0xE9</span>, <span class="number">0x1E</span>, <span class="number">0xE1</span>, <span class="number">0xB9</span>, <span class="number">0xBD</span>, <span class="number">0x85</span>, <span class="number">0x5B</span>, <span class="number">0x7A</span>, <span class="number">0x39</span>, <span class="number">0xDE</span>, <span class="number">0xF6</span>, <span class="number">0xA7</span>, <span class="number">0xB8</span>, <span class="number">0xF5</span>, <span class="number">0xD2</span>, <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xD9</span>, <span class="number">0xA0</span>, <span class="number">0x13</span>, <span class="number">0xF3</span>, <span class="number">0x43</span>, <span class="number">0xEF</span>, <span class="number">0xB2</span>, <span class="number">0x8A</span>]</span><br><span class="line">key_t = [<span class="number">0x58</span>, <span class="number">0x2F</span>, <span class="number">0x36</span>, <span class="number">0xDD</span>, <span class="number">0x92</span>, <span class="number">0xF2</span>, <span class="number">0x79</span>, <span class="number">0x09</span>, <span class="number">0xC8</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">0x0A</span>, <span class="number">0x36</span>, <span class="number">0x14</span>, <span class="number">0x6F</span>, <span class="number">0x43</span>, <span class="number">0xB7</span>, <span class="number">0x1A</span>, <span class="number">0x21</span>, <span class="number">0xD0</span>, <span class="number">0x25</span>, <span class="number">0xE8</span>, <span class="number">0x58</span>, <span class="number">0xD9</span>, <span class="number">0xED</span>, <span class="number">0x9B</span>, <span class="number">0x37</span>, <span class="number">0xD3</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x55</span>, <span class="number">0x7D</span>, <span class="number">0x4C</span>, <span class="number">0x5C</span>, <span class="number">0x70</span>, <span class="number">0x95</span>, <span class="number">0x14</span>, <span class="number">0x85</span>, <span class="number">0x9D</span>, <span class="number">0x0E</span>, <span class="number">0x23</span>, <span class="number">0x56</span>, <span class="number">0x46</span>, <span class="number">0x81</span>, <span class="number">0x7B</span>, <span class="number">0xC6</span>, <span class="number">0x6C</span>, <span class="number">0xF6</span>, <span class="number">0x8D</span>, <span class="number">0x4F</span>, <span class="number">0x1C</span>, <span class="number">0x63</span>, <span class="number">0x99</span>, <span class="number">0xCA</span>, <span class="number">0x81</span>, <span class="number">0x6D</span>, <span class="number">0xBA</span>, <span class="number">0x9C</span>, <span class="number">0xC7</span>, <span class="number">0xEC</span>, <span class="number">0xC1</span>, <span class="number">0x5A</span>, <span class="number">0xA5</span>, <span class="number">0x79</span>, <span class="number">0x86</span>, <span class="number">0x50</span>, <span class="number">0xB9</span>, <span class="number">0x1A</span>, <span class="number">0x1F</span>, <span class="number">0x9A</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0xA5</span>, <span class="number">0x06</span>, <span class="number">0xFF</span>, <span class="number">0x9B</span>, <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0x10</span>, <span class="number">0xBF</span>, <span class="number">0x28</span>, <span class="number">0x66</span>, <span class="number">0xA9</span>, <span class="number">0xA5</span>, <span class="number">0x37</span>, <span class="number">0xFC</span>, <span class="number">0x91</span>, <span class="number">0xD2</span>, <span class="number">0x92</span>, <span class="number">0xFA</span>, <span class="number">0x6E</span>, <span class="number">0x49</span>, <span class="number">0xF6</span>, <span class="number">0xA6</span>, <span class="number">0x42</span>, <span class="number">0xD6</span>, <span class="number">0x3C</span>, <span class="number">0x5E</span>, <span class="number">0xEB</span>, <span class="number">0x73</span>, <span class="number">0x0B</span>, <span class="number">0xA2</span>, <span class="number">0x7A</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0x58</span>, <span class="number">0x14</span>, <span class="number">0xE8</span>, <span class="number">0x6F</span>, <span class="number">0xFE</span>, <span class="number">0x1D</span>, <span class="number">0xE3</span>, <span class="number">0x3A</span>, <span class="number">0xB3</span>, <span class="number">0xF6</span>, <span class="number">0x90</span>, <span class="number">0x31</span>, <span class="number">0x11</span>, <span class="number">0x8C</span>, <span class="number">0x31</span>, <span class="number">0xA8</span>, <span class="number">0x49</span>, <span class="number">0x98</span>, <span class="number">0xD9</span>, <span class="number">0xC7</span>, <span class="number">0xB7</span>, <span class="number">0x66</span>, <span class="number">0xFC</span>, <span class="number">0xE2</span>, <span class="number">0x77</span>, <span class="number">0x90</span>, <span class="number">0x6C</span>, <span class="number">0xD3</span>, <span class="number">0x66</span>, <span class="number">0x1C</span>, <span class="number">0x5D</span>, <span class="number">0x7B</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x84</span>, <span class="number">0xBC</span>, <span class="number">0x98</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x26</span>, <span class="number">0x57</span>, <span class="number">0xE0</span>, <span class="number">0x08</span>, <span class="number">0xF5</span>, <span class="number">0x31</span>, <span class="number">0xFC</span>, <span class="number">0x55</span>, <span class="number">0x8E</span>, <span class="number">0x1E</span>, <span class="number">0x78</span>, <span class="number">0xD1</span>, <span class="number">0x32</span>, <span class="number">0x86</span>, <span class="number">0x36</span>, <span class="number">0xC2</span>, <span class="number">0x96</span>, <span class="number">0xDE</span>, <span class="number">0xD6</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0xEF</span>, <span class="number">0x2A</span>, <span class="number">0x9F</span>, <span class="number">0xED</span>, <span class="number">0xF1</span>, <span class="number">0x52</span>, <span class="number">0x4E</span>, <span class="number">0xDF</span>, <span class="number">0x77</span>, <span class="number">0x63</span>, <span class="number">0xB1</span>, <span class="number">0xF2</span>, <span class="number">0x20</span>, <span class="number">0xB5</span>, <span class="number">0x7B</span>, <span class="number">0x91</span>, <span class="number">0xCF</span>, <span class="number">0x9F</span>, <span class="number">0xE4</span>, <span class="number">0x7C</span>, <span class="number">0x3E</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0x49</span>, <span class="number">0xF2</span>, <span class="number">0xD7</span>, <span class="number">0xE0</span>, <span class="number">0x5F</span>, <span class="number">0x47</span>, <span class="number">0xAC</span>, <span class="number">0x71</span>, <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0x48</span>, <span class="number">0x0D</span>, <span class="number">0xAE</span>, <span class="number">0x15</span>, <span class="number">0xE2</span>, <span class="number">0xAE</span>, <span class="number">0xE7</span>, <span class="number">0xD5</span>, <span class="number">0xCC</span>, <span class="number">0x29</span>, <span class="number">0x03</span>, <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0x58</span>, <span class="number">0x93</span>, <span class="number">0x4A</span>, <span class="number">0x28</span>, <span class="number">0x55</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0xCA</span>, <span class="number">0xFB</span>, <span class="number">0xDA</span>, <span class="number">0x79</span>, <span class="number">0xCF</span>, <span class="number">0xD9</span>, <span class="number">0x07</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0x81</span>, <span class="number">0x94</span>, <span class="number">0xA1</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0xA9</span>, <span class="number">0xFE</span>, <span class="number">0x4D</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>, <span class="number">0x56</span>, <span class="number">0x36</span>, <span class="number">0xE5</span>, <span class="number">0x01</span>, <span class="number">0xBD</span>, <span class="number">0x99</span>, <span class="number">0x64</span>, <span class="number">0x95</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0xB0</span>, <span class="number">0x3C</span>, <span class="number">0xE2</span>, <span class="number">0x53</span>, <span class="number">0x9F</span>, <span class="number">0x4F</span>, <span class="number">0x13</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x26</span>, <span class="number">0xAE</span>, <span class="number">0xB7</span>, <span class="number">0x4B</span>, <span class="number">0xB3</span>, <span class="number">0xB2</span>, <span class="number">0xA9</span>, <span class="number">0xFB</span>, <span class="number">0x8F</span>, <span class="number">0x50</span>, <span class="number">0xFA</span>, <span class="number">0x64</span>, <span class="number">0xC0</span>, <span class="number">0x85</span>, <span class="number">0xE8</span>, <span class="number">0x33</span>, <span class="number">0x8D</span>, <span class="number">0x2B</span>, <span class="number">0x5F</span>, <span class="number">0x78</span>, <span class="number">0x3E</span>, <span class="number">0x99</span>, <span class="number">0xF6</span>, <span class="number">0x83</span>, <span class="number">0xB1</span>, <span class="number">0xC9</span>, <span class="number">0x0C</span>, <span class="number">0xE7</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0x21</span>, <span class="number">0x0D</span>, <span class="number">0x43</span>, <span class="number">0x2F</span>, <span class="number">0x7E</span>, <span class="number">0x75</span>, <span class="number">0x7D</span>, <span class="number">0xB6</span>, <span class="number">0x88</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>, <span class="number">0x7F</span>, <span class="number">0x84</span>, <span class="number">0x11</span>, <span class="number">0xBD</span>, <span class="number">0x24</span>, <span class="number">0x6F</span>, <span class="number">0x4F</span>, <span class="number">0xD7</span>, <span class="number">0x0B</span>, <span class="number">0x11</span>, <span class="number">0x3A</span>, <span class="number">0xAA</span>, <span class="number">0xBD</span>, <span class="number">0x99</span>, <span class="number">0xCC</span>, <span class="number">0x66</span>, <span class="number">0xC2</span>, <span class="number">0x1D</span>, <span class="number">0xDD</span>, <span class="number">0xDB</span>, <span class="number">0x69</span>, <span class="number">0xAF</span>, <span class="number">0xC3</span>, <span class="number">0x88</span>, <span class="number">0x62</span>, <span class="number">0xBE</span>, <span class="number">0xF9</span>, <span class="number">0x22</span>, <span class="number">0xDF</span>, <span class="number">0x27</span>, <span class="number">0x35</span>, <span class="number">0x44</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0xE8</span>, <span class="number">0x9F</span>, <span class="number">0x61</span>, <span class="number">0x70</span>, <span class="number">0xDB</span>, <span class="number">0xC5</span>, <span class="number">0x03</span>, <span class="number">0xCE</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xDC</span>, <span class="number">0xE9</span>, <span class="number">0x17</span>, <span class="number">0xA3</span>, <span class="number">0xC1</span>, <span class="number">0xD3</span>, <span class="number">0xFF</span>, <span class="number">0x3C</span>, <span class="number">0x02</span>]</span><br><span class="line">SBOX = [<span class="number">0x28</span>, <span class="number">0x90</span>, <span class="number">0xC3</span>, <span class="number">0x41</span>, <span class="number">0xC2</span>, <span class="number">0x75</span>, <span class="number">0x84</span>, <span class="number">0xDA</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x81</span>, <span class="number">0xD5</span>, <span class="number">0xBF</span>, <span class="number">0x92</span>, <span class="number">0xB8</span>, <span class="number">0x4E</span>, <span class="number">0xB1</span>, <span class="number">0x2D</span>, <span class="number">0xED</span>, <span class="number">0x5C</span>, <span class="number">0xCB</span>, <span class="number">0x99</span>, <span class="number">0x6A</span>, <span class="number">0x32</span>, <span class="number">0x6F</span>, <span class="number">0xF2</span>, <span class="number">0x52</span>, <span class="number">0x4D</span>, <span class="number">0x29</span>, <span class="number">0x77</span>, <span class="number">0x49</span>, <span class="number">0x1D</span>, <span class="number">0xBB</span>, <span class="number">0x3A</span>, <span class="number">0x9F</span>, <span class="number">0x02</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x58</span>, <span class="number">0x72</span>, <span class="number">0xBA</span>, <span class="number">0xA1</span>, <span class="number">0x5E</span>, <span class="number">0xFA</span>, <span class="number">0x48</span>, <span class="number">0xF9</span>, <span class="number">0xFC</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0x97</span>, <span class="number">0x9D</span>, <span class="number">0x24</span>, <span class="number">0x0D</span>, <span class="number">0xE0</span>, <span class="number">0xF3</span>, <span class="number">0x37</span>, <span class="number">0x08</span>, <span class="number">0xEA</span>, <span class="number">0xF5</span>, <span class="number">0x6B</span>, <span class="number">0x86</span>, <span class="number">0xEF</span>, <span class="number">0x8D</span>, <span class="number">0x61</span>, <span class="number">0x65</span>, <span class="number">0x17</span>, <span class="number">0xD7</span>, <span class="number">0x7E</span>, <span class="number">0x13</span>, <span class="number">0x9C</span>, <span class="number">0xCC</span>, <span class="number">0x12</span>, <span class="number">0x33</span>, <span class="number">0x8E</span>, <span class="number">0x7D</span>, <span class="number">0x2F</span>, <span class="number">0x55</span>, <span class="number">0xCA</span>, <span class="number">0xAB</span>, <span class="number">0xE4</span>, <span class="number">0xFE</span>, <span class="number">0x45</span>, <span class="number">0xD6</span>, <span class="number">0xF6</span>, <span class="number">0xDE</span>, <span class="number">0xF1</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0xB2</span>, <span class="number">0xAE</span>, <span class="number">0xCF</span>, <span class="number">0x7C</span>, <span class="number">0x04</span>, <span class="number">0x0E</span>, <span class="number">0x16</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0xFF</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x47</span>, <span class="number">0x30</span>, <span class="number">0xA4</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>, <span class="number">0x15</span>, <span class="number">0x38</span>, <span class="number">0x35</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x3C</span>, <span class="number">0xD2</span>, <span class="number">0x85</span>, <span class="number">0xC7</span>, <span class="number">0x64</span>, <span class="number">0x89</span>, <span class="number">0xFD</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x43</span>, <span class="number">0xC8</span>, <span class="number">0x22</span>, <span class="number">0x94</span>, <span class="number">0xA8</span>, <span class="number">0x31</span>, <span class="number">0xA3</span>, <span class="number">0xB9</span>, <span class="number">0x20</span>, <span class="number">0xEB</span>, <span class="number">0xB0</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0x68</span>, <span class="number">0x5A</span>, <span class="number">0x93</span>, <span class="number">0x5B</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0xE6</span>, <span class="number">0x6D</span>, <span class="number">0xF4</span>, <span class="number">0x44</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0x51</span>, <span class="number">0xD3</span>, <span class="number">0xC4</span>, <span class="number">0x2B</span>, <span class="number">0x88</span>, <span class="number">0x95</span>, <span class="number">0xA5</span>, <span class="number">0x70</span>, <span class="number">0x23</span>, <span class="number">0x18</span>, <span class="number">0x09</span>, <span class="number">0x4A</span>, <span class="number">0x19</span>, <span class="number">0x66</span>, <span class="number">0xDC</span>, <span class="number">0xEC</span>, <span class="number">0x14</span>, <span class="number">0xA9</span>, <span class="number">0xDB</span>, <span class="number">0xE2</span>, <span class="number">0x91</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x82</span>, <span class="number">0x1B</span>, <span class="number">0x2A</span>, <span class="number">0x11</span>, <span class="number">0x7B</span>, <span class="number">0x5D</span>, <span class="number">0x8A</span>, <span class="number">0xD4</span>, <span class="number">0xA0</span>, <span class="number">0x07</span>, <span class="number">0xD8</span>, <span class="number">0x53</span>, <span class="number">0x9B</span>, <span class="number">0x26</span>, <span class="number">0xD1</span>, <span class="number">0x98</span>, <span class="number">0x42</span>, <span class="number">0x0A</span>, <span class="number">0x9A</span>, <span class="number">0x1C</span>, <span class="number">0x8F</span>, <span class="number">0x5F</span>, <span class="number">0x63</span>, <span class="number">0xE9</span>, <span class="number">0xCD</span>, <span class="number">0xC1</span>, <span class="number">0x1F</span>, <span class="number">0x6C</span>, <span class="number">0xCE</span>, <span class="number">0xAC</span>, <span class="number">0xAA</span>, <span class="number">0xD0</span>, <span class="number">0x7F</span>, <span class="number">0x59</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0x46</span>, <span class="number">0xB7</span>, <span class="number">0x83</span>, <span class="number">0xEE</span>, <span class="number">0x7A</span>, <span class="number">0x9E</span>, <span class="number">0xC5</span>, <span class="number">0x62</span>, <span class="number">0x60</span>, <span class="number">0xF0</span>, <span class="number">0x8C</span>, <span class="number">0x2E</span>, <span class="number">0xC0</span>, <span class="number">0xDD</span>, <span class="number">0x73</span>, <span class="number">0x56</span>, <span class="number">0x76</span>, <span class="number">0x27</span>, <span class="number">0xB5</span>, <span class="number">0x25</span>, <span class="number">0x74</span>, <span class="number">0x6E</span>, <span class="number">0xC9</span>, <span class="number">0xDF</span>, <span class="number">0xB4</span>, <span class="number">0x34</span>, <span class="number">0x05</span>, <span class="number">0xD9</span>, <span class="number">0xB3</span>, <span class="number">0xBD</span>, <span class="number">0x3B</span>, <span class="number">0x54</span>, <span class="number">0xAD</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0x78</span>, <span class="number">0xFB</span>, <span class="number">0x69</span>, <span class="number">0xF8</span>, <span class="number">0xBC</span>, <span class="number">0xE3</span>, <span class="number">0x96</span>, <span class="number">0x03</span>, <span class="number">0x3F</span>, <span class="number">0xE5</span>, <span class="number">0x06</span>, <span class="number">0x36</span>]</span><br><span class="line">key = [<span class="built_in">bytearray</span>(<span class="string">b&quot;vMBixpswDVgJhpZd&quot;</span>),[a1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)],[a1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>,<span class="number">32</span>)]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        row_re(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i*<span class="number">16</span>,(i+<span class="number">1</span>)*<span class="number">16</span>):</span><br><span class="line">            a1[j] = SBOX.index(a1[j])</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            a1[i*<span class="number">16</span>+k] ^= key_t[p*<span class="number">16</span> + k]</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            a1[l+<span class="number">16</span>*i] ^= key[i][l]</span><br><span class="line"><span class="built_in">bytearray</span>(a1)</span><br><span class="line"><span class="comment"># SYC&#123;ZtZJpWvEthTkaDzLQznEYLybEcNOPfmlukmZbzXBhih&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>syc_level7</title>
    <url>/2022/12/20/syc-level7/</url>
    <content><![CDATA[<p>syc_level7</p>
<p>这种异常处理的catch代码一开始不会找，后来看了三叶草的战队的解答才知道怎么操作</p>
<span id="more"></span>

<p>这里有四个throw块，要找到对应catch代码，然后jmp过去就能看见源码，三叶草那边的解答是手撸汇编代码，说实话这种分析太慢，而且容易出错，还不如让ida来帮我们分析</p>
<p><img src="/./../images/image-20221220115828084.png" alt="image-20221220115828084"></p>
<p>转到卡片形式汇编代码，有这种标志的就是catch代码</p>
<p><img src="/./../images/image-20221220115956022.png" alt="image-20221220115956022"></p>
<p>然后将所有的catch块打上断点</p>
<p><img src="/./../images/image-20221220120047338.png" alt="image-20221220120047338"></p>
<p>然后在throw代码之前也都打上断点</p>
<p><img src="/./../images/image-20221220120159946.png" alt="image-20221220120159946"></p>
<p>然后，运行程序找到，各个throw对应的catch块</p>
<p>修改throw代码为jmp 对应catch地址，直接看到源码</p>
<p><img src="/./../images/image-20221220113600556.png" alt="image-20221220113600556"></p>
<p>这里随机数，大循环32次每一次要重置srand，小循环四次，所以只需要输出4个随机数即可</p>
<p>这里用c语言中的srand代码生成随机数，值得注意的是，&#x3D;&#x3D;我在windows上用c语言跑，跑出来的随机数根本不对。要在linux上面跑才行&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221220114740283.png" alt="image-20221220114740283"></p>
<p><img src="/./../images/image-20221220114707904.png" alt="image-20221220114707904"></p>
<p>这里根据随机数，标上代码块的执行顺序</p>
<p><img src="/./../images/image-20221220114941422.png" alt="image-20221220114941422"></p>
<p>最后python伪代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">0xA3A7C060</span>, <span class="number">0xEE6E5485</span>, <span class="number">0x244B2655</span>, <span class="number">0x318482D9</span>]</span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    v11 += delta</span><br><span class="line">    v12 += delta</span><br><span class="line">    v7 += ((v8 &gt;&gt; <span class="number">5</span>) + <span class="number">6</span>) ^ (v8 + v11) ^ (<span class="number">16</span> * v8 + <span class="number">8</span>) ^ (i + v11)</span><br><span class="line">    v9 += ((v10 &gt;&gt; <span class="number">5</span>) + <span class="number">6</span>) ^ (v10 + v12) ^ (<span class="number">16</span> * v10 + <span class="number">8</span>) ^ (i + v12)</span><br><span class="line">    v8 += ((v7 &gt;&gt; <span class="number">5</span>) + <span class="number">7</span>) ^ (v7 + v11) ^ (<span class="number">16</span> * v7 + <span class="number">9</span>) ^ (i + v11)</span><br><span class="line">    v10 += ((v9 &gt;&gt; <span class="number">5</span>) + <span class="number">7</span>) ^ (v9 + v12) ^ (<span class="number">16</span> * v9 + <span class="number">9</span>) ^ (i + v12)</span><br><span class="line">v19 = v7 ^ HIBYTE(delta)</span><br><span class="line">v20 = v8 ^ BYTE2(delta)</span><br><span class="line">v21 = v9 ^ BYTE1(delta)</span><br><span class="line">v22 = v10 ^ (unsigned __int8)delta</span><br></pre></td></tr></table></figure>

<p>然后根据这个代码写出解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lesson7</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc = [<span class="number">0xA3A7C060</span>, <span class="number">0xEE6E5485</span>, <span class="number">0x244B2655</span>, <span class="number">0x318482D9</span>]</span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line">s = (delta*<span class="number">32</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line">v7 = enc[<span class="number">0</span>]^<span class="number">0x9e</span></span><br><span class="line">v8 = enc[<span class="number">1</span>]^<span class="number">0x37</span></span><br><span class="line">v9 = enc[<span class="number">2</span>]^<span class="number">0x79</span></span><br><span class="line">v10 = enc[<span class="number">3</span>]^<span class="number">0xb9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    v10 -= ((v9 &gt;&gt; <span class="number">5</span>) + <span class="number">7</span>) ^ (v9 + s) ^ (<span class="number">16</span> * v9 + <span class="number">9</span>) ^ (i + s)</span><br><span class="line">    v10 = v10&amp;<span class="number">0xffffffff</span></span><br><span class="line">    v8 -= ((v7 &gt;&gt; <span class="number">5</span>) + <span class="number">7</span>) ^ (v7 + s) ^ (<span class="number">16</span> * v7 + <span class="number">9</span>) ^ (i + s)</span><br><span class="line">    v8 = v8&amp;<span class="number">0xffffffff</span></span><br><span class="line">    v9 -= ((v10 &gt;&gt; <span class="number">5</span>) + <span class="number">6</span>) ^ (v10 + s) ^ (<span class="number">16</span> * v10 + <span class="number">8</span>) ^ (i + s)</span><br><span class="line">    v9 = v9&amp;<span class="number">0xffffffff</span></span><br><span class="line">    v7 -= ((v8 &gt;&gt; <span class="number">5</span>) + <span class="number">6</span>) ^ (v8 + s) ^ (<span class="number">16</span> * v8 + <span class="number">8</span>) ^ (i + s)</span><br><span class="line">    v7 = v7&amp;<span class="number">0xffffffff</span></span><br><span class="line">    s = (s-delta)&amp;<span class="number">0xffffffff</span></span><br><span class="line">enc = [v7,v8,v9,v10]</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(x)[<span class="number">2</span>:],enc)),<span class="number">16</span>)</span><br><span class="line">long_to_bytes(flag)</span><br><span class="line"><span class="comment">#SYC&#123;ediGegTEaEi&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>re_base2</title>
    <url>/2022/12/21/re-base2/</url>
    <content><![CDATA[<p>TLS and keyboard hooking</p>
<span id="more"></span>

<h1 id="TLS回调"><a href="#TLS回调" class="headerlink" title="TLS回调"></a>TLS回调</h1><p>TLS(Thread Local Storage) 线程本地存储，主要用于提供本地线程访问局部数据的句柄。</p>
<p>下面来一段官方解释：</p>
<p>使用线程<em>本地存储</em> （TLS），可以为进程可以使用全局索引访问的每个线程提供唯一数据。一个线程分配索引，其他线程可以使用它来检索与索引关联的唯一数据</p>
<p>原理图：</p>
<p><img src="/./../images/image-20221221220303818.png" alt="image-20221221220303818"></p>
<p>&#x3D;&#x3D;TLS主要用于程序的反调试检测&#x3D;&#x3D;</p>
<p>它在运行EP（entrypoint 程序入口代码）代码前执行</p>
<h6 id="TLS结构体："><a href="#TLS结构体：" class="headerlink" title="TLS结构体："></a>TLS结构体：</h6><p><img src="/./../images/image-20221221220612843.png" alt="image-20221221220612843"></p>
<p>可以看到TLS结构体中保存着回调函数的地址</p>
<p>可以打开CFF explore软件直接查看存放TLS回调函数数组的地址</p>
<p><img src="/./../images/image-20221221221105861.png" alt="image-20221221221105861"></p>
<p>打开od查看它的地址为401000</p>
<p><img src="/./../images/image-20221221221841170.png" alt="image-20221221221841170"></p>
<p>汇编直接定位过去就出来了</p>
<p><img src="/./../images/image-20221221221931378.png" alt="image-20221221221931378"></p>
<p>TLS回调函数是在进程或线程创建或终止时调用，如果某个进程存在一个线程，那从程序的创建到销毁需要4次调用回调函数</p>
<p>TLS回调函数定义：</p>
<p><img src="/./../images/image-20221221222309417.png" alt="image-20221221222309417"></p>
<p>注册TLS程序示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_console</span><span class="params">(<span class="type">char</span>* szMsg)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line">    WriteConsoleA(hStdout, szMsg, <span class="built_in">strlen</span>(szMsg), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI <span class="title function_">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> szMsg[<span class="number">80</span>] = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">    wsprintfA(szMsg, <span class="string">&quot;TLS_CALLBACK1() : DllHandle = %X, Reason = %d\n&quot;</span>, DllHandle, Reason);</span><br><span class="line">    print_console(szMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI <span class="title function_">TLS_CALLBACK2</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> szMsg[<span class="number">80</span>] = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">    wsprintfA(szMsg, <span class="string">&quot;TLS_CALLBACK2() : DllHandle = %X, Reason = %d\n&quot;</span>, DllHandle, Reason);</span><br><span class="line">    print_console(szMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">    PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, TLS_CALLBACK2, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    print_console(<span class="string">&quot;ThreadProc() start\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    print_console(<span class="string">&quot;ThreadProc() end\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThread = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    print_console(<span class="string">&quot;main() start\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    WaitForSingleObject(hThread, <span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">    print_console(<span class="string">&quot;main() end\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调试TLS回调函数"><a href="#调试TLS回调函数" class="headerlink" title="调试TLS回调函数"></a>调试TLS回调函数</h5><p>直接在运行前设置调试选项</p>
<p><img src="/./../images/image-20221221222931558.png" alt="image-20221221222931558"></p>
<p>添加TLS这里不做阐述</p>
<hr>
<h1 id="keyboard-hooking"><a href="#keyboard-hooking" class="headerlink" title="keyboard hooking"></a>keyboard hooking</h1><p>消息钩取工作原理</p>
<p><img src="/./../images/image-20221222102644542.png" alt="image-20221222102644542"></p>
<p>使用SetWindowsHookEx()可以实现消息钩子，钩子函数需要存在于dll文件中，由操作系统调用回调函数</p>
<p>API定义：</p>
<p><img src="/./../images/image-20221222103023824.png" alt="image-20221222103023824"></p>
<p>在某进程拥有消息，操作系统就会将dll注入进程序中，实现消息钩取</p>
<p>只需要一个程序加载安装钩子所在的dll程序，然后SetWindowsHookEx()注册钩子，操作系统就会检测每一个程序的行为，一旦发生键盘输入，就将dll文件注入。</p>
<p>加载dll注册hook实例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;conio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	DEF_DLL_NAME		<span class="string">&quot;KeyHook.dll&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	DEF_HOOKSTART		<span class="string">&quot;HookStart&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	DEF_HOOKSTOP		<span class="string">&quot;HookStop&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*PFN_HOOKSTART)</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*PFN_HOOKSTOP)</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE			hDll = <span class="literal">NULL</span>;</span><br><span class="line">	PFN_HOOKSTART	HookStart = <span class="literal">NULL</span>;</span><br><span class="line">	PFN_HOOKSTOP	HookStop = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span>			ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KeyHook.dll 肺爹</span></span><br><span class="line">	hDll = LoadLibraryA(DEF_DLL_NAME);</span><br><span class="line">    <span class="keyword">if</span>( hDll == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;LoadLibrary(%s) failed!!! [%d]&quot;</span>, DEF_DLL_NAME, GetLastError());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// export 窃荐 林家 掘扁</span></span><br><span class="line">	HookStart = (PFN_HOOKSTART)GetProcAddress(hDll, DEF_HOOKSTART);</span><br><span class="line">	HookStop = (PFN_HOOKSTOP)GetProcAddress(hDll, DEF_HOOKSTOP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 饶欧 矫累</span></span><br><span class="line">	HookStart();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 荤侩磊啊 &#x27;q&#x27; 甫 涝仿且 锭鳖瘤 措扁</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;press &#x27;q&#x27; to quit!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>( _getch() != <span class="string">&#x27;q&#x27;</span> )	;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 饶欧 辆丰</span></span><br><span class="line">	HookStop();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// KeyHook.dll 攫肺爹</span></span><br><span class="line">	FreeLibrary(hDll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dll代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_PROCESS_NAME		<span class="string">&quot;notepad.exe&quot;</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">HWND g_hWnd = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>( dwReason )</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">			g_hInstance = hinstDLL;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">			<span class="keyword">break</span>;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">KeyboardProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> szPath[MAX_PATH] = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">	<span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( nCode &gt;= <span class="number">0</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// bit 31 : 0 =&gt; press, 1 =&gt; release</span></span><br><span class="line">		<span class="keyword">if</span>( !(lParam &amp; <span class="number">0x80000000</span>) )</span><br><span class="line">		&#123;</span><br><span class="line">			GetModuleFileNameA(<span class="literal">NULL</span>, szPath, MAX_PATH);</span><br><span class="line">			p = <span class="built_in">strrchr</span>(szPath, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 泅犁 橇肺技胶 捞抚阑 厚背秦辑 父距 notepad.exe 扼搁 0 酒囱 蔼阑 府畔窃</span></span><br><span class="line">            <span class="comment">// =&gt; 0 酒囱 蔼阑 府畔窍搁 皋矫瘤绰 促澜栏肺 傈崔登瘤 臼澜</span></span><br><span class="line">			<span class="keyword">if</span>( !_stricmp(p + <span class="number">1</span>, DEF_PROCESS_NAME) )</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老馆利牢 版快俊绰 CallNextHookEx() 甫 龋免窍咯</span></span><br><span class="line">    <span class="comment">//   览侩橇肺弊伐 (趣篮 促澜 扰) 栏肺 皋矫瘤甫 傈崔窃</span></span><br><span class="line">	<span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	__declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStart</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	__declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStop</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>( g_hHook )</span><br><span class="line">		&#123;</span><br><span class="line">			UnhookWindowsHookEx(g_hHook);</span><br><span class="line">			g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h5 id="调试hook"><a href="#调试hook" class="headerlink" title="调试hook"></a>调试hook</h5><p>用字符串搜索直接定位到main函数</p>
<p><img src="/./../images/image-20221222110634215.png" alt="image-20221222110634215"></p>
<p>上面得到hookStart地址，然后call，F7直接步入就能进入hookstart函数</p>
<p><img src="/./../images/image-20221222111024672.png" alt="image-20221222111024672"></p>
<p>这里就是dll中注册键盘hook</p>
<p>直接根据注册时得到的地址进行跳转就能得到hook函数</p>
<p><img src="/./../images/image-20221222111311777.png" alt="image-20221222111311777"></p>
<p>也可以打开notepad，进行附加attach，先摁F9，让hook注册成功</p>
<p>然后在新加一个模块处停止，option设置</p>
<p><img src="/./../images/image-20221222111708005.png" alt="image-20221222111708005"></p>
<p>附加后在键盘输入字母，od会立马断住。</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>re_base3</title>
    <url>/2022/12/22/re-base3/</url>
    <content><![CDATA[<p>PE and IAT hook</p>
<span id="more"></span>

<h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><p>由于了解IAT,需要了解一点PE,这里把PE也给写了吧</p>
<p>PE文件种类：</p>
<p><img src="/./../images/image-20221222193952005.png" alt="image-20221222193952005"></p>
<p>OBJ文件不能执行，dll和sys文件需要调试器执行或者服务和程序加载执行</p>
<p>DOS签名和PE签名</p>
<p><img src="/./../images/image-20221222194231640.png" alt="image-20221222194231640"></p>
<p>PE文件大体分为：1.PE头、2.PE体</p>
<p>1.PE头</p>
<ul>
<li>DOS签名</li>
<li>DOS存根</li>
<li>NT头</li>
<li>一系列节区头<ul>
<li>.data(数据)</li>
<li>.text(代码)</li>
<li>.rsrc(资源)</li>
</ul>
</li>
</ul>
<p>2.PE体：一系列节区</p>
<p>名词介绍：</p>
<p>​	VA:virtual address 绝对虚拟内存地址</p>
<p>​	RVA:相对虚拟内存地址</p>
<p>​	VA &#x3D; RVA + imageBase</p>
<p>DOS头结构体：唯一有用的就是e_magic和e_lfanew</p>
<p><img src="/./../images/image-20221222195650362.png" alt="image-20221222195650362"></p>
<p>其中e_magic就是Dos签名，e_lfanew就是NT头的偏移</p>
<h5 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h5><p>Dos存根是兼容dos系统的一种产物，可有可无，内容可用xp内置debug查看</p>
<p><img src="/./../images/image-20221222195853656.png" alt="image-20221222195853656"></p>
<p>内容是一段汇编代码，在dos系统中执行</p>
<h5 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h5><p>NT头结构体</p>
<p><img src="/./../images/image-20221222200235227.png" alt="image-20221222200235227"></p>
<p>签名不作介绍，文件头结构体：</p>
<p><img src="/./../images/image-20221222200349032.png" alt="image-20221222200349032"></p>
<p>Machine代表cpu类别</p>
<p>SizeOfOptionalHeader是表示可选头的大小</p>
<p>Characteristics表示文件是否是dll，是否可执行</p>
<p>NT可选头结构体：</p>
<p><img src="/./../images/image-20221222200743347.png" alt="image-20221222200743347"></p>
<p><img src="/./../images/image-20221222200759909.png" alt="image-20221222200759909"></p>
<p>NT可选头非常重要，它记录了很多重要的数据</p>
<p>ImageBase，是映像基址，映像指的是PE文件加载到内存的一种形态（我觉得更像是一种叫法），映像基址定义了文件加载进内存的基础地址</p>
<p>SectionAlignment, 节区对齐是文件在内存中的最小单位，文件在内存的大小应该是这个值的整数倍</p>
<p>FileAlignment, 文件对齐是文件在磁盘中的最小单位，文件在磁盘的大小应该是这个值的整数倍</p>
<p>Subsystem,子系统用来区分文件是sys驱动文件还是exe可执行文件</p>
<p><img src="/./../images/image-20221222201551009.png" alt="image-20221222201551009"></p>
<p>NumberOfRvaAndSizes , 记录DataDirectory数组的个数</p>
<p>DataDirectory：</p>
<p><img src="/./../images/image-20221222201756663.png" alt="image-20221222201756663"></p>
<p>节区头结构体：</p>
<p><img src="/./../images/image-20221222202014726.png" alt="image-20221222202014726"></p>
<p><img src="/./../images/image-20221222202552956.png" alt="image-20221222202552956"></p>
<p>这里的VirtualAddress是用RVA表示的</p>
<h5 id="RAV-to-RAW"><a href="#RAV-to-RAW" class="headerlink" title="RAV to RAW"></a>RAV to RAW</h5><p>RAW就是文件中节区的偏移（非内存）</p>
<p><img src="/./../images/image-20221222203627898.png" alt="image-20221222203627898"></p>
<h5 id="IAT导入地址表"><a href="#IAT导入地址表" class="headerlink" title="IAT导入地址表"></a>IAT导入地址表</h5><p>映像导入描述结构体：</p>
<p><img src="/./../images/image-20221222204623280.png" alt="image-20221222204623280"></p>
<p><img src="/./../images/image-20221222204719793.png" alt="image-20221222204719793"></p>
<p>文件导入多少个库文件，就有多少个 image_import_descriptor结构体</p>
<p>&#x3D;&#x3D;该结构体的地址保存在image_optional_header32.DataDirectory[1].VirtualAddress中&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221222210418625.png" alt="image-20221222210418625"></p>
<p>INT结构体保存着Image_import_by_name的指针</p>
<p>结构图：</p>
<p><img src="/./../images/image-20221222205449044.png" alt="image-20221222205449044"></p>
<p>PE装载器将导入函数加载到IAT的顺序：</p>
<p><img src="/./../images/image-20221222205721041.png" alt="image-20221222205721041"></p>
<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>不想写了，和IAT差不多，一个导入一个导出</p>
<p>它的查找数据先是image_optional_header32.DataDirectory[0].VirtualAddress找到这个结构体，然后根据要找的函数名去AddressOfNames数组里面拿到下标，然后用下标再去Oridinal数组找，找到下标又去AddressOfFunction那里找函数地址</p>
<p>没有函数名直接用Ordinal查找，Ordinal数组存在的意义是我忘了。。反正就这样</p>
<p><img src="/./../images/image-20221222211536947.png" alt="image-20221222211536947"></p>
<p><img src="/./../images/image-20221222211514061.png" alt="image-20221222211514061"></p>
<hr>
<h1 id="IAT-hook"><a href="#IAT-hook" class="headerlink" title="IAT hook"></a>IAT hook</h1>]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning1</title>
    <url>/2022/12/29/unicorn1/</url>
    <content><![CDATA[<p>unicorn start!</p>
<p>效仿大佬的文章简单地给自己作个学习记录，就当作写了篇日记了</p>
<span id="more"></span>

<h1 id="Unicorn-入门学习"><a href="#Unicorn-入门学习" class="headerlink" title="Unicorn 入门学习"></a>Unicorn 入门学习</h1><p>unicorn 是用于执行多种cpu框架的虚拟架构系统</p>
<h5 id="下面进行模仿arm架构，执行arm指令"><a href="#下面进行模仿arm架构，执行arm指令" class="headerlink" title="下面进行模仿arm架构，执行arm指令"></a>下面进行模仿arm架构，执行arm指令</h5><p>首先在python中导入unicorn</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p>如何根据自己要执行指令对应哪个cpu架构，来导入相应的处理器相关的常量</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn.arm_const  <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm64_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.m68k_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.mips_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.sparc_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p>寄存器常量命名规则：<br>UC_ + 指令集 + <em>REG</em> + 大写寄存器名<br>UC_ARM<em>REG</em> + 大写寄存器名 （UC_ARM_REG_R0）<br>UC_X86<em>REG</em> + 大写寄存器名 （UC_X86_REG_EAX）</p>
<p>这里我们选择unicorn.arm_const</p>
<h4 id="创建arm虚拟机（UC）"><a href="#创建arm虚拟机（UC）" class="headerlink" title="创建arm虚拟机（UC）"></a>创建arm虚拟机（UC）</h4><p>Uc 是unicorn的主类，Uc对象则代表了一个独立的虚拟机实例，它有独立的寄存器和内存等资源，不同Uc对象之间的数据是独立的。Uc的构造函数有两个参数 <em>arch</em> 和 <em>mode</em>，用来指定模拟执行的指令集和对应的位数或模式。<br>arch常量参数一般以 UC<em>ARCH</em> 开头，MODE常量以UC<em>MODE</em> 开头。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Test ARM</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_arm</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Emulate ARM code&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Initialize emulator in ARM mode</span></span><br><span class="line">        mu = Uc(UC_ARCH_ARM, UC_MODE_ARM)	<span class="comment"># 创建代码</span></span><br><span class="line">        <span class="comment"># 其它代码添加到此处</span></span><br><span class="line">        <span class="keyword">return</span> mu</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: %s&quot;</span> % e)</span><br><span class="line"></span><br><span class="line">mu = test_arm() <span class="comment"># mu就是arm虚拟机</span></span><br></pre></td></tr></table></figure>

<h4 id="映射内存"><a href="#映射内存" class="headerlink" title="映射内存"></a>映射内存</h4><p>想用Unicorn模拟执行代码，是不能将代码字节流直接以参数形式传递给Unicorn，而是将要执行的代码写入到Unicorn 的虚拟内存中。Uc 虚拟机实例初始内存是没有任何映射的，在读写内存之前使用<em>uc_mem_map</em>函数映射一段内存</p>
<p>这里开始地址和地址大小都要和0x1000&#x3D;&#x3D;对齐&#x3D;&#x3D;</p>
<p>否则就是我这种错误：</p>
<p><img src="/./../images/image-20221229151625712.png" alt="image-20221229151625712"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ADDRESS = <span class="number">0x10000</span></span><br><span class="line">mu.mem_map(ADDRESS, <span class="number">0x1000</span>)  <span class="comment"># 这里大小自己估算</span></span><br></pre></td></tr></table></figure>

<h4 id="写入代码"><a href="#写入代码" class="headerlink" title="写入代码"></a>写入代码</h4><p>将想要执行的代码写进我们创建的内存中</p>
<p>mem_write的第二个参数必须是byte字节数组，只支持python的byte数组，不能是String或者bytearray。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ARM_CODE   = <span class="string">b&quot;\x37\x00\xa0\xe3\x03\x10\x42\xe0&quot;</span></span><br><span class="line"><span class="comment"># mov r0, #0x37;</span></span><br><span class="line"><span class="comment"># sub r1, r2, r3</span></span><br><span class="line">mu.mem_write(ADDRESS, ARM_CODE) </span><br></pre></td></tr></table></figure>

<p>给寄存器初始赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mu.reg_write(UC_ARM_REG_R0, <span class="number">0x0</span>)</span><br><span class="line">mu.reg_write(UC_ARM_REG_R2, <span class="number">0x4</span>)</span><br><span class="line">mu.reg_write(UC_ARM_REG_R3, <span class="number">0x1</span>)</span><br><span class="line"><span class="comment"># 这里r1的结果预估是0x3</span></span><br></pre></td></tr></table></figure>

<h4 id="添加指令级的Hook"><a href="#添加指令级的Hook" class="headerlink" title="添加指令级的Hook"></a>添加指令级的Hook</h4><p>hook类型：</p>
<ul>
<li>指令执行类：<ul>
<li>UC_HOOK_INTR</li>
<li>UC_HOOK_INSN</li>
<li>UC_HOOK_CODE</li>
<li>UC_HOOK_BLOCK</li>
</ul>
</li>
<li>内存访问类：<ul>
<li>UC_HOOK_MEM_READ</li>
<li>UC_HOOK_MEM_WRITE</li>
<li>UC_HOOK_MEM_FETCH</li>
<li>UC_HOOK_MEM_READ_AFTER</li>
<li>UC_HOOK_MEM_PROT</li>
<li>UC_HOOK_MEM_FETCH_INVALID</li>
<li>UC_HOOK_MEM_INVALID</li>
<li>UC_HOOK_MEM_VALID</li>
</ul>
</li>
<li>异常处理类：<ul>
<li>UC_HOOK_MEM_READ_UNMAPPED</li>
<li>UC_HOOK_MEM_WRITE_UNMAPPED</li>
<li>UC_HOOK_MEM_FETCH_UNMAPPED</li>
</ul>
</li>
</ul>
<p><img src="/./../images/image-20221229153037712.png" alt="image-20221229153037712"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_add</span>(<span class="params">self, htype, callback, user_data=<span class="literal">None</span>, begin=<span class="number">1</span>, end=<span class="number">0</span>, arg1=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=<span class="number">0x1000</span>)</span><br></pre></td></tr></table></figure>

<p>以上是添加hook的操作</p>
<p>在begin…end范围内的每一条指令被执行前都会调用callback。</p>
<p>hook函数编写：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># callback for tracing instructions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br></pre></td></tr></table></figure>

<h4 id="执行虚拟机"><a href="#执行虚拟机" class="headerlink" title="执行虚拟机"></a>执行虚拟机</h4><p>emu_start 可以通过timeout参数设置最长执行时长，防止线程死在虚拟机里面。emu_start 执行完成后，可以通过读取内存或寄存器的方式来获取执行结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">emu_start</span>(<span class="params">self, begin, until, timeout=<span class="number">0</span>, count=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">mu.emu_start(ADDRESS, ADDRESS + <span class="built_in">len</span>(ARM_CODE))</span><br></pre></td></tr></table></figure>

<p>执行成功，hook函数一共被调用两次（指令有两条）</p>
<p><img src="/./../images/image-20221229154734059.png" alt="image-20221229154734059"></p>
<h4 id="获取寄存器结果"><a href="#获取寄存器结果" class="headerlink" title="获取寄存器结果"></a>获取寄存器结果</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">r0 = mu.reg_read(UC_ARM_REG_R0)</span><br><span class="line">r1 = mu.reg_read(UC_ARM_REG_R1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; R0 = 0x%x&quot;</span> % r0)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; R1 = 0x%x&quot;</span> % r1)</span><br></pre></td></tr></table></figure>

<p>和推理的结果相同！！！！</p>
<p><img src="/./../images/image-20221229154900787.png" alt="image-20221229154900787"></p>
<hr>
<h3 id="个人测试全过程："><a href="#个人测试全过程：" class="headerlink" title="个人测试全过程："></a>个人测试全过程：</h3><p><img src="/./../images/image-20221229155328503.png" alt="image-20221229155328503"></p>
<p><img src="/./../images/image-20221229155356531.png" alt="image-20221229155356531"></p>
<p>完整代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line">ARM_CODE   = <span class="string">b&quot;\x37\x00\xa0\xe3\x03\x10\x42\xe0&quot;</span></span><br><span class="line"><span class="comment"># mov r0, #0x37;</span></span><br><span class="line"><span class="comment"># sub r1, r2, r3</span></span><br><span class="line"><span class="comment"># Test ARM</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># callback for tracing instructions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_arm</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Emulate ARM code&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Initialize emulator in ARM mode</span></span><br><span class="line">        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># map 2MB memory for this emulation</span></span><br><span class="line">        ADDRESS = <span class="number">0x10000</span></span><br><span class="line">        mu.mem_map(ADDRESS, <span class="number">2</span> * <span class="number">0x10000</span>)</span><br><span class="line">        mu.mem_write(ADDRESS, ARM_CODE)</span><br><span class="line"> </span><br><span class="line">        mu.reg_write(UC_ARM_REG_R0, <span class="number">0x1234</span>)</span><br><span class="line">        mu.reg_write(UC_ARM_REG_R2, <span class="number">0x6789</span>)</span><br><span class="line">        mu.reg_write(UC_ARM_REG_R3, <span class="number">0x3333</span>)</span><br><span class="line"> </span><br><span class="line">        mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)</span><br><span class="line">        <span class="comment"># emulate machine code in infinite time</span></span><br><span class="line">        mu.emu_start(ADDRESS, ADDRESS + <span class="built_in">len</span>(ARM_CODE))</span><br><span class="line">        r0 = mu.reg_read(UC_ARM_REG_R0)</span><br><span class="line">        r1 = mu.reg_read(UC_ARM_REG_R1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; R0 = 0x%x&quot;</span> % r0)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; R1 = 0x%x&quot;</span> % r1)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: %s&quot;</span> % e)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>文章引用Pandaos大佬的文章：[<a href="https://bbs.pediy.com/thread-253868.htm#msg_header_h1_1">原创] Unicorn 在 Android 的应用-Android安全-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning2</title>
    <url>/2022/12/30/unicorn-learning2/</url>
    <content><![CDATA[<p>unicorn start</p>
<p>用unicorn调用so文件中的某个函数，观察函数的输入与输出</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook  so文件中的sign1函数的输出与输入</p>
<p><img src="/./../images/image-20221230100636171.png" alt="image-20221230100636171"></p>
<p>这个函数内部调用了两个函数，tea_encrypt和sprintf，这两个函数中tea_encrypt函数只需要修复got表项即可调用tea_encrypt，但是sprintf函数不行</p>
<p>这里我们开始实验</p>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>由于这里的指令都是两个字节为一条指令</p>
<p><img src="/./../images/image-20221230145634256.png" alt="image-20221230145634256"></p>
<p>所以这里为thumb指令集</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_arm</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Emulate ARM code&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Initialize emulator in ARM mode</span></span><br><span class="line">        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)	<span class="comment"># 创建代码</span></span><br><span class="line">        <span class="comment"># 其它代码添加到此处</span></span><br><span class="line">        <span class="keyword">return</span> mu</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: %s&quot;</span> % e)</span><br><span class="line"></span><br><span class="line">mu = test_arm() <span class="comment"># mu就是arm虚拟机</span></span><br></pre></td></tr></table></figure>

<h3 id="建立内存映射-写入数据"><a href="#建立内存映射-写入数据" class="headerlink" title="建立内存映射+写入数据"></a>建立内存映射+写入数据</h3><p>由于这是要模拟执行一段函数，所以要建立镜像区，栈区，数据段区的内存</p>
<p>这里各个区的大小存粹靠估算</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">image = <span class="built_in">open</span>(<span class="string">&#x27;./libnative-lib.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment"># 镜像内存</span></span><br><span class="line">image_base = <span class="number">0x0</span></span><br><span class="line">mu.mem_map(image_base, <span class="number">0x10000</span>*<span class="number">8</span>)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">mu.mem_write(image_base,image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈内存</span></span><br><span class="line">stack_base = <span class="number">0xa0000</span></span><br><span class="line">stack_size = <span class="number">0x10000</span> * <span class="number">3</span></span><br><span class="line">mu.mem_map(stack_base, stack_size)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">stack_top = stack_base + stack_size - <span class="number">0x4</span></span><br><span class="line">mu.reg_write(UC_ARM_REG_SP,stack_top)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据段内存</span></span><br><span class="line">a1 = <span class="string">b&#x27;123&#x27;</span></span><br><span class="line">data_base = <span class="number">0xf0000</span></span><br><span class="line">data_size = <span class="number">0x10000</span> * <span class="number">3</span></span><br><span class="line">mu.mem_map(data_base, data_size)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">mu.mem_write(data_base,a1)</span><br></pre></td></tr></table></figure>

<p>这里栈区的sp指针应小于栈大小的0x4，防止栈溢出，这里我们将‘123’字符串写入数据段，来作为函数的参数使用</p>
<h3 id="添加hook函数"><a href="#添加hook函数" class="headerlink" title="添加hook函数"></a>添加hook函数</h3><p>主要用于程序报错时可以及时追踪到哪里有问题</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_memory</span>(<span class="params">uc, access, address, size,value, userdata</span>):</span><br><span class="line">    pc = uc.reg_read(UC_ARM_REG_PC)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;memory error: pc:%x address:%x size:%x&quot;</span> % (pc, address, size))</span><br><span class="line">    </span><br><span class="line">mu.hook_add(UC_HOOK_CODE,hook_code,<span class="number">0</span>)</span><br><span class="line">mu.hook_add(UC_HOOK_MEM_UNMAPPED,hook_memory,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="开始执行"><a href="#开始执行" class="headerlink" title="开始执行"></a>开始执行</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开始执行虚拟机</span></span><br><span class="line">start_addr = <span class="number">0x9B68</span></span><br><span class="line">end_addr = <span class="number">0x9C2C</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    mu.emu_start(start_addr, end_addr)</span><br><span class="line">    R2 = mu.reg_read(UC_ARM_REG_R2)</span><br><span class="line">    res = mu.mem_read(R2,<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(binascii.b2a_hex(res))</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<p>结果只运行到第一条指令：</p>
<p><img src="/./../images/image-20221230141126071.png" alt="image-20221230141126071"></p>
<p><img src="/./../images/image-20221230141137038.png" alt="image-20221230141137038"></p>
<p>这里将开始地址+1，然后执行：</p>
<p><img src="/./../images/image-20221230141419595.png" alt="image-20221230141419595"></p>
<p><img src="/./../images/image-20221230141523486.png" alt="image-20221230141523486"></p>
<p>然后这里就遇到了函数地址外的地址，很奇怪！！！，这里找到0x91ac,也就是最后一次正常的地方，发现来到了plt表，点击后又来到got表，这里的got表其实是ida已经自动补全了，unicorn需要自己手动补全</p>
<p><img src="/./../images/image-20221230141839711.png" alt="image-20221230141839711"></p>
<p><img src="/./../images/image-20221230142108868.png" alt="image-20221230142108868"></p>
<p>补全后：</p>
<p><img src="/./../images/image-20221230152353412.png" alt="image-20221230152353412"></p>
<p>执行代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开始执行虚拟机</span></span><br><span class="line">start_addr = <span class="number">0x9B68</span></span><br><span class="line">end_addr = <span class="number">0x9C2C</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 添加got表</span></span><br><span class="line">    mu.mem_write(<span class="number">0x1EDB0</span>,<span class="string">b&#x27;\xD9\x98\x00\x00&#x27;</span>)</span><br><span class="line">    mu.emu_start(start_addr+<span class="number">1</span>, end_addr)</span><br><span class="line">    R2 = mu.reg_read(UC_ARM_REG_R2)</span><br><span class="line">    res = mu.mem_read(R2,<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(binascii.b2a_hex(res))</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="最后代码："><a href="#最后代码：" class="headerlink" title="最后代码："></a>最后代码：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const  <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_memory</span>(<span class="params">uc, access, address, size,value, userdata</span>):</span><br><span class="line">    pc = uc.reg_read(UC_ARM_REG_PC)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;memory error: pc:%x address:%x size:%x&quot;</span> % (pc, address, size))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_arm</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Emulate ARM code&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Initialize emulator in ARM mode</span></span><br><span class="line">        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)	<span class="comment"># 创建代码</span></span><br><span class="line">        <span class="comment"># 其它代码添加到此处</span></span><br><span class="line">        <span class="keyword">return</span> mu</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: %s&quot;</span> % e)</span><br><span class="line"></span><br><span class="line">mu = test_arm() <span class="comment"># mu就是arm虚拟机</span></span><br><span class="line">image = <span class="built_in">open</span>(<span class="string">&#x27;./libnative-lib.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment"># 镜像内存</span></span><br><span class="line">image_base = <span class="number">0x0</span></span><br><span class="line">mu.mem_map(image_base, <span class="number">0x10000</span>*<span class="number">8</span>)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">mu.mem_write(image_base,image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈内存</span></span><br><span class="line">stack_base = <span class="number">0xa0000</span></span><br><span class="line">stack_size = <span class="number">0x10000</span> * <span class="number">3</span></span><br><span class="line">mu.mem_map(stack_base, stack_size)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">stack_top = stack_base + stack_size - <span class="number">0x4</span></span><br><span class="line">mu.reg_write(UC_ARM_REG_SP,stack_top)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据段内存</span></span><br><span class="line">a1 = <span class="string">b&#x27;123&#x27;</span></span><br><span class="line">data_base = <span class="number">0xf0000</span></span><br><span class="line">data_size = <span class="number">0x10000</span> * <span class="number">3</span></span><br><span class="line">mu.mem_map(data_base, data_size)  <span class="comment"># 这里大小自己估算</span></span><br><span class="line">mu.mem_write(data_base,a1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数参数通过数据段传递 寄存器是R0</span></span><br><span class="line">mu.reg_write(UC_ARM_REG_R0,data_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hook函数</span></span><br><span class="line"><span class="comment"># mu.hook_add(UC_HOOK_CODE,hook_code,0)</span></span><br><span class="line"><span class="comment"># mu.hook_add(UC_HOOK_MEM_UNMAPPED,hook_memory,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开始执行虚拟机</span></span><br><span class="line">start_addr = <span class="number">0x9B68</span></span><br><span class="line">end_addr = <span class="number">0x9C2C</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 添加got表</span></span><br><span class="line">    mu.mem_write(<span class="number">0x1EDB0</span>,<span class="string">b&#x27;\xD9\x98\x00\x00&#x27;</span>)</span><br><span class="line">    mu.emu_start(start_addr+<span class="number">1</span>, end_addr)</span><br><span class="line">    R2 = mu.reg_read(UC_ARM_REG_R2)</span><br><span class="line">    res = mu.mem_read(R2,<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(binascii.b2a_hex(res))</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning3</title>
    <url>/2022/12/31/unicorn-learning3/</url>
    <content><![CDATA[<p>unicorn start</p>
<p>模拟器框架自动填充got表项内容</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook JNI函数</p>
<p><img src="/./../images/image-20221231092735710.png" alt="image-20221231092735710"></p>
<p>hook JNI函数的条件：</p>
<p><img src="/./../images/1.png" alt="1"></p>
<p>框架：<img src="/./../images/image-20221231093245212.png" alt="image-20221231093245212"></p>
<h3 id="打印调试信息"><a href="#打印调试信息" class="headerlink" title="打印调试信息"></a>打印调试信息</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.debug,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">                    )</span><br><span class="line"><span class="comment"># 用于打印调试信息</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure>

<h3 id="创建模拟器-导入so文件-执行"><a href="#创建模拟器-导入so文件-执行" class="headerlink" title="创建模拟器+导入so文件+执行"></a>创建模拟器+导入so文件+执行</h3><p>用写好的框架进行模拟执行，不需要考虑手动填充got表项</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建模拟器</span></span><br><span class="line">emulator = Emulator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载相关so文件</span></span><br><span class="line"><span class="comment"># do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，</span></span><br><span class="line"><span class="comment"># 这可能会涉及更多库的调用</span></span><br><span class="line">emulator.load_library(<span class="string">&#x27;./lib/libc.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line">libnat_mod = emulator.load_library(<span class="string">&#x27;./lib/libnative-lib.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行想要执行的jni函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 根据so模块调用指定的函数，后面都是函数的参数</span></span><br><span class="line">    <span class="comment"># 参数1: JNIEnv</span></span><br><span class="line">    <span class="comment"># 参数2: 是java类的对象，这里填0即可</span></span><br><span class="line">    <span class="comment"># 参数3: 是函数输入字符串</span></span><br><span class="line">    sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv2&#x27;</span>,</span><br><span class="line">                         emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<p>这里出现libc的基地址</p>
<p><img src="/./../images/image-20221231100141520.png" alt="image-20221231100141520"></p>
<p>这里出现libnative-lib.so的基地址。3）处有报错，但又不知道哪里有错</p>
<p><img src="/./../images/image-20221231100259956.png" alt="image-20221231100259956"></p>
<h3 id="跟踪报错信息"><a href="#跟踪报错信息" class="headerlink" title="跟踪报错信息"></a>跟踪报错信息</h3><p>打印异常地址和地址调用栈,这里打印最后100条即可,用udbg打印</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址</span></span><br><span class="line">dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行想要执行的jni函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 根据so模块调用指定的函数，后面都是函数的参数</span></span><br><span class="line">    <span class="comment"># 参数1: JNIEnv</span></span><br><span class="line">    <span class="comment"># 参数2: 是java类的对象，这里填0即可</span></span><br><span class="line">    <span class="comment"># 参数3: 是函数输入字符串</span></span><br><span class="line">    sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv2&#x27;</span>,</span><br><span class="line">                         emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印调用栈</span></span><br><span class="line">    tracks = dbg.get_tracks()</span><br><span class="line">    <span class="comment"># 这里打印调用地址即可，打印后100条</span></span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> tracks[-<span class="number">100</span>:-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(addr - <span class="number">0xcbc66000</span>)) <span class="comment"># 注意这里要减去基地址</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<p>这里有函数参数提示：</p>
<p><img src="/./../images/image-20221231100710715.png" alt="image-20221231100710715"></p>
<p>这里有出现负地址，负地址就是函数执行到libc.so文件中，这里由于没有初始化的缘故，可能libc中部分函数执行失败，这里我们手动hook，&#x3D;&#x3D;本质是hook got表地址&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221231101354303.png" alt="image-20221231101354303"></p>
<p>这里我们定位到ida中出错的地址</p>
<p><img src="/./../images/image-20221231101510570.png" alt="image-20221231101510570"></p>
<p>发现是这个库函数有问题。那就hook它</p>
<p><img src="/./../images/image-20221231102149719.png" alt="image-20221231102149719"></p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>添加hook 此处必须在导入so文件之前就hook，在导入so文件之前hook才生效，导入之后没法hook</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memclr</span>(<span class="params">mu,addr,size</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memclr_ptr (addr:%x,size:%d)&#x27;</span> % (addr,size))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容</span></span><br><span class="line"><span class="comment"># 在导入so文件之前hook才生效，导入之后没法hook</span></span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memclr&#x27;</span>, emulator.hooker.write_function(__aeabi_memclr) + <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他函数以此类推</p>
<p>关于sprintf函数，第一个参数，是a2，就是buffer地址</p>
<p><img src="/./../images/image-20221231103838068.png" alt="image-20221231103838068"></p>
<p>全部函数hook后：</p>
<p><img src="/./../images/image-20221231104133180.png" alt="image-20221231104133180"></p>
<p>这里输出是空因为，我们hook相关函数还未在unicorn中实现，这里我们做个实现即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memclr</span>(<span class="params">mu,addr,size</span>):</span><br><span class="line">    mu.mem_write(addr,<span class="built_in">bytes</span>(size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memclr_ptr (addr:%x,size:%d)&#x27;</span> % (addr,size))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memcpy</span>(<span class="params">mu,dist,source,size</span>):</span><br><span class="line">    data = mu.mem_read(source,size)</span><br><span class="line">    mu.mem_write(dist,<span class="built_in">bytes</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memcpy (dist:%x,source:%x)&#x27;</span> % (dist,source))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sprintf</span>(<span class="params">mu,buffer,<span class="built_in">format</span>,arg1,arg2</span>):</span><br><span class="line">    format1 = memory_helpers.read_utf8(mu,<span class="built_in">format</span>)</span><br><span class="line">    data1 = memory_helpers.read_utf8(mu,arg1)</span><br><span class="line">    res = format1 % (data1,arg2)</span><br><span class="line">    mu.mem_write(buffer,<span class="built_in">bytes</span>((res+<span class="string">&#x27;\x00&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sprintf (%s)&#x27;</span> % (<span class="built_in">format</span>))</span><br></pre></td></tr></table></figure>

<p>这里说明一下bytes()函数放入int型会输出什么：</p>
<p><img src="/./../images/image-20221231104346170.png" alt="image-20221231104346170"></p>
<p>最终结果：</p>
<p><img src="/./../images/image-20221231105346413.png" alt="image-20221231105346413"></p>
<p>全部代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method</span><br><span class="line"><span class="keyword">from</span> UnicornTraceDebugger <span class="keyword">import</span> udbg</span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">                    )</span><br><span class="line"><span class="comment"># 用于打印调试信息</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memclr</span>(<span class="params">mu,addr,size</span>):</span><br><span class="line">    mu.mem_write(addr,<span class="built_in">bytes</span>(size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memclr_ptr (addr:%x,size:%d)&#x27;</span> % (addr,size))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memcpy</span>(<span class="params">mu,dist,source,size</span>):</span><br><span class="line">    data = mu.mem_read(source,size)</span><br><span class="line">    mu.mem_write(dist,<span class="built_in">bytes</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memcpy (dist:%x,source:%x)&#x27;</span> % (dist,source))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sprintf</span>(<span class="params">mu,buffer,<span class="built_in">format</span>,arg1,arg2</span>):</span><br><span class="line">    format1 = memory_helpers.read_utf8(mu,<span class="built_in">format</span>)</span><br><span class="line">    data1 = memory_helpers.read_utf8(mu,arg1)</span><br><span class="line">    res = format1 % (data1,arg2)</span><br><span class="line">    mu.mem_write(buffer,<span class="built_in">bytes</span>((res+<span class="string">&#x27;\x00&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sprintf (%s)&#x27;</span> % (<span class="built_in">format</span>))</span><br><span class="line"><span class="comment"># 创建模拟器</span></span><br><span class="line">emulator = Emulator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容</span></span><br><span class="line"><span class="comment"># 在导入so文件之前hook才生效，导入之后没法hook</span></span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memclr&#x27;</span>, emulator.hooker.write_function(__aeabi_memclr) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memcpy&#x27;</span>, emulator.hooker.write_function(__aeabi_memcpy) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;sprintf&#x27;</span>, emulator.hooker.write_function(sprintf) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载相关so文件</span></span><br><span class="line"><span class="comment"># do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，</span></span><br><span class="line"><span class="comment"># 这可能会涉及更多库的调用</span></span><br><span class="line">emulator.load_library(<span class="string">&#x27;./lib/libc.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line">libnat_mod = emulator.load_library(<span class="string">&#x27;./lib/libnative-lib.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址</span></span><br><span class="line">dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行想要执行的jni函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 根据so模块调用指定的函数，后面都是函数的参数</span></span><br><span class="line">    <span class="comment"># 参数1: JNIEnv</span></span><br><span class="line">    <span class="comment"># 参数2: 是java类的对象，这里填0即可</span></span><br><span class="line">    <span class="comment"># 参数3: 是函数输入字符串</span></span><br><span class="line">    sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv2&#x27;</span>,</span><br><span class="line">                         emulator.java_vm.jni_env.address_ptr,<span class="number">0</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印调用栈</span></span><br><span class="line">    tracks = dbg.get_tracks()</span><br><span class="line">    <span class="comment"># 这里打印调用地址即可，打印后100条</span></span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> tracks[-<span class="number">100</span>:-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(addr - <span class="number">0xcbc66000</span>))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning4</title>
    <url>/2022/12/31/unicorn-learning4/</url>
    <content><![CDATA[<p>unicorn_starting</p>
<p>模拟Jni与Java交互</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook这个函数，其中存在调用java类和java函数</p>
<p><img src="/./../images/image-20221231150501748.png" alt="image-20221231150501748"></p>
<p>尝试将上一次的代码进行修改后直接执行，观察结果</p>
<p><img src="/./../images/image-20221231153507375.png" alt="image-20221231153507375"></p>
<h3 id="注册java类和方法"><a href="#注册java类和方法" class="headerlink" title="注册java类和方法"></a>注册java类和方法</h3><p>结果发现不能找到java这个类，下面已经给出申明，直接复制即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">com_sec_udemo_MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/sec/udemo/MainActivity&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 添加自定义java类</span></span><br><span class="line">emulator.java_classloader.add_class(com_sec_udemo_MainActivity)</span><br></pre></td></tr></table></figure>

<p>执行后发现又要声明相关方法:</p>
<p><img src="/./../images/image-20221231154406776.png" alt="image-20221231154406776"></p>
<p>声明方法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java_method_def(<span class="params">name=<span class="string">&#x27;getSaltFromJava&#x27;</span>,signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">                     args_list=[<span class="string">&#x27;jstring&#x27;</span>],native=<span class="literal">False</span></span>) </span><span class="comment"># 这里native=False申明此方法非native方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSaltFromJava</span>(<span class="params">self,mu,data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这个函数在java中的功能如下：</p>
<p><img src="/./../images/image-20221231142325743.png" alt="image-20221231142325743"></p>
<p>这里我们作出拼接返回即可</p>
<p>执行后再次报错</p>
<p><img src="/./../images/image-20221231155418523.png" alt="image-20221231155418523"></p>
<p>这里我们缺少jobject对象，这里我们手动创建一下，然后传入进去</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">obj = com_sec_udemo_MainActivity()</span><br><span class="line">sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv3&#x27;</span>,</span><br><span class="line">		emulator.java_vm.jni_env.address_ptr,obj,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sign)</span><br></pre></td></tr></table></figure>

<p>然后这里又有相加时出现错误</p>
<p><img src="/./../images/image-20221231160243373.png" alt="image-20221231160243373"></p>
<p>这里我们调试一下，data的内容：</p>
<p><img src="/./../images/image-20221231160423365.png" alt="image-20221231160423365"></p>
<p>一看是java string类型，类型展开发现value中value就是python的str类型</p>
<p><img src="/./../images/image-20221231160549317.png" alt="image-20221231160549317"></p>
<p>修改后成功出结果：</p>
<p><img src="/./../images/image-20221231160712892.png" alt="image-20221231160712892"></p>
<p>完整代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> androidemu.java.helpers.native_method <span class="keyword">import</span> native_method</span><br><span class="line"><span class="keyword">from</span> UnicornTraceDebugger <span class="keyword">import</span> udbg</span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator</span><br><span class="line"><span class="keyword">from</span> androidemu.utils <span class="keyword">import</span> memory_helpers</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_classloader <span class="keyword">import</span> JavaClassDef</span><br><span class="line"><span class="keyword">from</span> androidemu.java.java_method_def <span class="keyword">import</span> java_method_def</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置logging</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    stream=sys.stdout,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;</span></span><br><span class="line">                    )</span><br><span class="line"><span class="comment"># 用于打印调试信息</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com_sec_udemo_MainActivity</span>(metaclass=JavaClassDef, jvm_name=<span class="string">&quot;com/sec/udemo/MainActivity&quot;</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @java_method_def(<span class="params">name=<span class="string">&#x27;getSaltFromJava&#x27;</span>,signature=<span class="string">&#x27;(Ljava/lang/String;)Ljava/lang/String;&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">                     args_list=[<span class="string">&#x27;jstring&#x27;</span>],native=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSaltFromJava</span>(<span class="params">self,mu,data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data.value.value + <span class="string">&#x27;salt..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器</span></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memclr</span>(<span class="params">mu,addr,size</span>):</span><br><span class="line">    mu.mem_write(addr,<span class="built_in">bytes</span>(size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memclr_ptr (addr:%x,size:%d)&#x27;</span> % (addr,size))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__aeabi_memcpy</span>(<span class="params">mu,dist,source,size</span>):</span><br><span class="line">    data = mu.mem_read(source,size)</span><br><span class="line">    mu.mem_write(dist,<span class="built_in">bytes</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__aeabi_memcpy (dist:%x,source:%x)&#x27;</span> % (dist,source))</span><br><span class="line"></span><br><span class="line"><span class="meta">@native_method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sprintf</span>(<span class="params">mu,buffer,<span class="built_in">format</span>,arg1,arg2</span>):</span><br><span class="line">    format1 = memory_helpers.read_utf8(mu,<span class="built_in">format</span>)</span><br><span class="line">    data1 = memory_helpers.read_utf8(mu,arg1)</span><br><span class="line">    res = format1 % (data1,arg2)</span><br><span class="line">    mu.mem_write(buffer,<span class="built_in">bytes</span>((res+<span class="string">&#x27;\x00&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sprintf (%s)&#x27;</span> % (<span class="built_in">format</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模拟器</span></span><br><span class="line">emulator = Emulator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容</span></span><br><span class="line"><span class="comment"># 在导入so文件之前hook才生效，导入之后没法hook</span></span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memclr&#x27;</span>, emulator.hooker.write_function(__aeabi_memclr) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;__aeabi_memcpy&#x27;</span>, emulator.hooker.write_function(__aeabi_memcpy) + <span class="number">1</span>)</span><br><span class="line">emulator.modules.add_symbol_hook(<span class="string">&#x27;sprintf&#x27;</span>, emulator.hooker.write_function(sprintf) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义java类</span></span><br><span class="line">emulator.java_classloader.add_class(com_sec_udemo_MainActivity)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载相关so文件</span></span><br><span class="line"><span class="comment"># do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，</span></span><br><span class="line"><span class="comment"># 这可能会涉及更多库的调用</span></span><br><span class="line">emulator.load_library(<span class="string">&#x27;./lib/libc.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line">libnat_mod = emulator.load_library(<span class="string">&#x27;./lib/libnative-lib.so&#x27;</span>,do_init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址</span></span><br><span class="line">dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行想要执行的jni函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 根据so模块调用指定的函数，后面都是函数的参数</span></span><br><span class="line">    <span class="comment"># 参数1: JNIEnv</span></span><br><span class="line">    <span class="comment"># 参数2: 是java类的对象，这里填0即可</span></span><br><span class="line">    <span class="comment"># 参数3: 是函数输入字符串</span></span><br><span class="line">    obj = com_sec_udemo_MainActivity()</span><br><span class="line">    sign = emulator.call_symbol(libnat_mod,<span class="string">&#x27;Java_com_sec_udemo_MainActivity_sign_1lv3&#x27;</span>,</span><br><span class="line">                         emulator.java_vm.jni_env.address_ptr,obj,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line"><span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印调用栈</span></span><br><span class="line">    tracks = dbg.get_tracks()</span><br><span class="line">    <span class="comment"># 这里打印调用地址即可，打印后100条</span></span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> tracks[-<span class="number">100</span>:-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(addr - <span class="number">0xcbc66000</span>))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning5</title>
    <url>/2023/01/01/unicorn-learning5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fbf5e9952172da3a705cf3804ee2fc51b771b45dab4c9e24be04079d6eb8c0db"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">miss your girl friend</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>re</category>
      </categories>
  </entry>
</search>
